(self.webpackChunkapp=self.webpackChunkapp||[]).push([[9002],{4401:(tt,Ke,W)=>{"use strict";W.d(Ke,{Xhn:()=>Dt,ugM:()=>Te,YLj:()=>vL,MB5:()=>Gx,iD$:()=>Ee,Pel:()=>RD,XAC:()=>Fi,wOQ:()=>ip,yXz:()=>kx,lub:()=>z});var Re={};W.r(Re),W.d(Re,{browserFiles:()=>EN,browserHTTPRequest:()=>PN,concatenateArrayBuffers:()=>Tu,copyModel:()=>tN,decodeWeights:()=>Xg,encodeWeights:()=>zd,fromMemory:()=>MN,fromMemorySync:()=>Ny,getLoadHandlers:()=>WS,getModelArtifactsForJSON:()=>Vd,getModelArtifactsForJSONSync:()=>Jg,getModelArtifactsInfoForJSON:()=>wi,getSaveHandlers:()=>ty,getWeightSpecs:()=>ey,http:()=>op,isHTTPScheme:()=>rp,listModels:()=>JS,loadWeights:()=>DN,moveModel:()=>nN,registerLoadRouter:()=>VS,registerSaveRouter:()=>BS,removeModel:()=>eN,weightsLoaderFactory:()=>wy,withSaveHandler:()=>BN,withSaveHandlerSync:()=>VN});var Dt={};W.r(Dt),W.d(Dt,{fromPixels:()=>qN,fromPixelsAsync:()=>jN,toPixels:()=>KN});var De={};W.r(De),W.d(De,{assertParamsValid:()=>hp,computeFlatOffset:()=>fp,computeOutShape:()=>dp,getNormalizedAxes:()=>YN,isSliceContinous:()=>pp,maskToAxes:()=>ZN,parseSliceParams:()=>Au,sliceInfo:()=>mp,startForAxis:()=>Ry,startIndicesWithElidedDims:()=>_y,stopForAxis:()=>Dy,stopIndicesWithElidedDims:()=>Ey,stridesForAxis:()=>Ay,stridesWithElidedDims:()=>ky});var mt={};W.r(mt),W.d(mt,{conv2d:()=>Fx,depthwiseConv2d:()=>y2,matMul:()=>nf});var Me={};W.r(Me),W.d(Me,{collectGatherOpShapeInfo:()=>Rf,computeOutShape:()=>gb,segOpComputeOptimalWindowSize:()=>mb});var Ne={};W.r(Ne),W.d(Ne,{ERF_A1:()=>xf,ERF_A2:()=>bf,ERF_A3:()=>wf,ERF_A4:()=>vf,ERF_A5:()=>If,ERF_P:()=>yf,PARALLELIZE_THRESHOLD:()=>df,RowPartitionType:()=>Et,SELU_SCALE:()=>sc,SELU_SCALEALPHA:()=>nc,applyActivation:()=>Ju,assertAndGetBroadcastShape:()=>Pe,assertAxesAreInnerMostDims:()=>dn,assertParamsConsistent:()=>hf,assignToTypedArray:()=>Jx,axesAreInnerMostDims:()=>Cp,calculateShapes:()=>lo,checkEinsumDimSizes:()=>Tf,checkPadOnDimRoundingMode:()=>Sn,combineLocations:()=>ix,combineRaggedTensorToTensorShapes:()=>jx,complexWithEvenIndex:()=>Yx,complexWithOddIndex:()=>Qx,computeConv2DInfo:()=>an,computeConv3DInfo:()=>Sr,computeDefaultPad:()=>yp,computeDilation2DInfo:()=>vi,computeOptimalWindowSize:()=>tc,computeOutAndReduceShapes:()=>ln,computeOutShape:()=>Ls,computePool2DInfo:()=>is,computePool3DInfo:()=>Zs,convertConv2DDataFormat:()=>Ys,decodeEinsumEquation:()=>Cf,eitherStridesOrDilationsAreOne:()=>hn,expandShapeToKeepDim:()=>Vt,exponent:()=>tb,exponents:()=>eb,fromStringArrayToUint8:()=>yb,fromUint8ToStringArray:()=>er,getAxesPermutation:()=>$t,getBroadcastDims:()=>Uo,getComplexWithIndex:()=>Sf,getEinsumComputePath:()=>$f,getEinsumPermutation:()=>kf,getFusedBiasGradient:()=>Qu,getFusedDyActivation:()=>Yu,getImageCenter:()=>pf,getInnerMostAxes:()=>Wt,getPermuted:()=>zi,getRaggedRank:()=>qx,getReductionAxes:()=>Yt,getReshaped:()=>Pi,getReshapedPermuted:()=>Mi,getRowPartitionTypesHelper:()=>Kx,getSliceBeginCoords:()=>ff,getSliceSize:()=>mf,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>rb,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>ob,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>ab,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>ub,getSparseReshapeInputOutputMismatchErrorMessage:()=>hb,getSparseReshapeInputOutputMultipleErrorMessage:()=>cb,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>ib,getSparseReshapeNegativeOutputDimErrorMessage:()=>lb,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>fb,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Af,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>db,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>pb,getUndoAxesPermutation:()=>kr,isIdentityPermutation:()=>_f,log:()=>aS,mergeRealAndImagArrays:()=>Js,prepareAndValidate:()=>gf,prepareSplitSize:()=>Ef,segment_util:()=>Me,shouldFuse:()=>ec,slice_util:()=>De,splitRealAndImagArrays:()=>Zx,stridesOrDilationsArePositive:()=>no,tupleValuesAreOne:()=>Nr,upcastType:()=>On,validateDefaultValueShape:()=>Xx,validateInput:()=>jp,validateUpdateShape:()=>Tx,warn:()=>jn});var Te={};W.r(Te),W.d(Te,{Layer:()=>We,RNN:()=>mo,RNNCell:()=>Zi,activation:()=>fF,add:()=>SF,alphaDropout:()=>aO,average:()=>NF,averagePooling1d:()=>vm,averagePooling2d:()=>Im,averagePooling3d:()=>Sm,avgPool1d:()=>DF,avgPool2d:()=>OF,avgPool3d:()=>PF,avgPooling1d:()=>FF,avgPooling2d:()=>LF,avgPooling3d:()=>zF,batchNormalization:()=>EF,bidirectional:()=>QF,categoryEncoding:()=>hO,centerCrop:()=>uO,concatenate:()=>CF,conv1d:()=>oF,conv2d:()=>aF,conv2dTranspose:()=>iF,conv3d:()=>lF,conv3dTranspose:()=>uF,convLstm2d:()=>qF,convLstm2dCell:()=>XF,cropping2D:()=>hF,dense:()=>mF,depthwiseConv2d:()=>pF,dot:()=>_F,dropout:()=>gF,elu:()=>JD,embedding:()=>IF,flatten:()=>xF,gaussianDropout:()=>oO,gaussianNoise:()=>rO,globalAveragePooling1d:()=>MF,globalAveragePooling2d:()=>BF,globalMaxPool1d:()=>eO,globalMaxPool2d:()=>tO,globalMaxPooling1d:()=>Mw,globalMaxPooling2d:()=>Bw,gru:()=>WF,gruCell:()=>UF,input:()=>DD,inputLayer:()=>QD,layerNormalization:()=>AF,leakyReLU:()=>tF,lstm:()=>GF,lstmCell:()=>HF,masking:()=>iO,maxPool1d:()=>nO,maxPool2d:()=>sO,maxPooling1d:()=>Vw,maxPooling2d:()=>Ww,maxPooling3d:()=>VF,maximum:()=>kF,minimum:()=>TF,multiply:()=>$F,permute:()=>vF,prelu:()=>nF,randomWidth:()=>dO,reLU:()=>eF,repeatVector:()=>bF,rescaling:()=>lO,reshape:()=>wF,resizing:()=>cO,rnn:()=>ZF,separableConv2d:()=>cF,simpleRNN:()=>jF,simpleRNNCell:()=>KF,softmax:()=>sF,spatialDropout1d:()=>yF,stackedRNNCells:()=>YF,thresholdedReLU:()=>rF,timeDistributed:()=>JF,upSampling2d:()=>dF,zeroPadding2d:()=>RF});var pe={};W.r(pe),W.d(pe,{json:()=>gO});var P={};W.r(P),W.d(P,{json:()=>yO});var te={};W.r(te),W.d(te,{json:()=>xO});var he={};W.r(he),W.d(he,{json:()=>bO});var Q={};W.r(Q),W.d(Q,{json:()=>wO});var ae={};W.r(ae),W.d(ae,{json:()=>vO});var xe={};W.r(xe),W.d(xe,{json:()=>IO});var Ce={};W.r(Ce),W.d(Ce,{json:()=>SO});var at={};W.r(at),W.d(at,{json:()=>NO});var qt={};W.r(qt),W.d(qt,{json:()=>CO});var jt={};W.r(jt),W.d(jt,{json:()=>kO});var ss={};W.r(ss),W.d(ss,{json:()=>TO});var Wn={};W.r(Wn),W.d(Wn,{json:()=>$O});var Ze={};W.r(Ze),W.d(Ze,{json:()=>_O});var st={};W.r(st),W.d(st,{json:()=>EO});var rt={};W.r(rt),W.d(rt,{json:()=>AO});var re={};W.r(re),W.d(re,{json:()=>RO});var J={};W.r(J),W.d(J,{json:()=>DO});var $={};W.r($),W.d($,{json:()=>FO});var le={};W.r(le),W.d(le,{OP_SCOPE_SUFFIX:()=>qg,abs:()=>Zt,acos:()=>Oy,acosh:()=>Ly,add:()=>ne,addN:()=>sC,all:()=>gp,any:()=>Ru,argMax:()=>Go,argMin:()=>Py,asin:()=>zy,asinh:()=>My,atan:()=>By,atan2:()=>Vy,atanh:()=>Wy,avgPool:()=>Du,avgPool3d:()=>Uy,basicLSTMCell:()=>kC,batchNorm:()=>Ni,batchNorm2d:()=>Gy,batchNorm3d:()=>Hy,batchNorm4d:()=>jy,batchToSpaceND:()=>Fu,bincount:()=>Ky,bitwiseAnd:()=>OC,booleanMaskAsync:()=>Y$,broadcastArgs:()=>PC,broadcastTo:()=>Ko,buffer:()=>Be,cast:()=>ge,ceil:()=>qy,clipByValue:()=>Ln,clone:()=>Ks,complex:()=>xr,concat:()=>Kt,concat1d:()=>Xy,concat2d:()=>Zy,concat3d:()=>Yy,concat4d:()=>Qy,conv1d:()=>bp,conv2d:()=>Cr,conv2dTranspose:()=>vp,conv3d:()=>Jy,conv3dTranspose:()=>tx,cos:()=>Ou,cosh:()=>Ip,cosineWindow:()=>Qp,cumprod:()=>Lu,cumsum:()=>Sp,denseBincount:()=>Np,depthToSpace:()=>nx,depthwiseConv2d:()=>Ci,diag:()=>ak,dilation2d:()=>sx,div:()=>ke,divNoNan:()=>rx,dot:()=>ox,dropout:()=>Rx,einsum:()=>pk,elu:()=>ki,enclosingPowerOfTwo:()=>Dx,ensureShape:()=>gk,equal:()=>ws,erf:()=>ax,euclideanNorm:()=>ux,exp:()=>Kn,expandDims:()=>_n,expm1:()=>cx,eye:()=>kp,fft:()=>Xu,fill:()=>Wo,floor:()=>_i,floorDiv:()=>Jd,fused:()=>mt,gather:()=>Ei,gatherND:()=>i2,greater:()=>Pn,greaterEqual:()=>Tr,ifft:()=>Oi,imag:()=>Pu,image:()=>Os,inTopKAsync:()=>h2,irfft:()=>Gp,isFinite:()=>hx,isInf:()=>dx,isNaN:()=>px,leakyRelu:()=>zu,less:()=>Ai,lessEqual:()=>so,linalg:()=>Ux,linspace:()=>Mk,localResponseNormalization:()=>fx,log:()=>qn,log1p:()=>Mu,logSigmoid:()=>mx,logSoftmax:()=>Tp,logSumExp:()=>$p,logicalAnd:()=>Ds,logicalNot:()=>Bu,logicalOr:()=>_p,logicalXor:()=>gx,losses:()=>Gx,lowerBound:()=>Jk,matMul:()=>je,max:()=>ls,maxPool:()=>Wu,maxPool3d:()=>yx,maxPoolWithArgmax:()=>sT,maximum:()=>Xs,mean:()=>Lt,meshgrid:()=>oT,min:()=>Ti,minimum:()=>ro,mirrorPad:()=>xx,mod:()=>bx,moments:()=>Uu,movingAverage:()=>e2,mul:()=>D,multiRNNCell:()=>hT,multinomial:()=>pT,neg:()=>St,norm:()=>$i,notEqual:()=>Xo,oneHot:()=>Ap,ones:()=>Xn,onesLike:()=>Zn,op:()=>_,outerProduct:()=>xT,pad:()=>$r,pad1d:()=>vT,pad2d:()=>ST,pad3d:()=>CT,pad4d:()=>TT,pool:()=>wx,pow:()=>Ir,prelu:()=>Hu,print:()=>uy,prod:()=>vx,raggedGather:()=>OT,raggedRange:()=>PT,raggedTensorToTensor:()=>MT,rand:()=>VT,randomGamma:()=>qT,randomNormal:()=>Fp,randomStandardNormal:()=>YT,randomUniform:()=>oo,randomUniformInt:()=>e$,range:()=>Zo,real:()=>Ri,reciprocal:()=>Ix,relu:()=>Fs,relu6:()=>Op,reshape:()=>F,reverse:()=>cs,reverse1d:()=>i$,reverse2d:()=>u$,reverse3d:()=>h$,reverse4d:()=>p$,rfft:()=>Zu,round:()=>Lp,rsqrt:()=>Pp,scalar:()=>Ee,scatterND:()=>n2,searchSorted:()=>Ep,selu:()=>zp,separableConv2d:()=>Mp,setdiff1dAsync:()=>b$,sigmoid:()=>Rs,sign:()=>Sx,signal:()=>j_,sin:()=>Vp,sinh:()=>Wp,slice:()=>Qe,slice1d:()=>Ku,slice2d:()=>Up,slice3d:()=>qu,slice4d:()=>Di,softmax:()=>Fi,softplus:()=>qo,spaceToBatchND:()=>Gu,sparse:()=>K_,sparseToDense:()=>o2,spectral:()=>H_,split:()=>zn,sqrt:()=>xn,square:()=>pt,squaredDifference:()=>Hp,squeeze:()=>ao,stack:()=>Yn,step:()=>Yo,stridedSlice:()=>Nx,string:()=>q_,sub:()=>we,sum:()=>ve,tan:()=>Cx,tanh:()=>jo,tensor:()=>bs,tensor1d:()=>En,tensor2d:()=>Li,tensor3d:()=>ip,tensor4d:()=>kx,tensor5d:()=>M$,tensor6d:()=>B$,tensorScatterUpdate:()=>W$,tile:()=>us,topk:()=>$x,transpose:()=>Je,truncatedNormal:()=>Kp,unique:()=>_x,unsortedSegmentSum:()=>qp,unstack:()=>hs,upperBound:()=>q$,variable:()=>Ex,where:()=>bn,whereAsync:()=>Ax,zeros:()=>Qt,zerosLike:()=>Ye});var Oe={};W.r(Oe),W.d(Oe,{addImpl:()=>w1,bincountImpl:()=>qm,bincountReduceImpl:()=>k1,castImpl:()=>b1,ceilImpl:()=>T1,concatImpl:()=>$1,equalImpl:()=>A1,expImpl:()=>D1,expm1Impl:()=>O1,floorImpl:()=>z1,gatherNdImpl:()=>M1,gatherV2Impl:()=>B1,greaterEqualImpl:()=>W1,greaterImpl:()=>V1,lessEqualImpl:()=>G1,lessImpl:()=>U1,linSpaceImpl:()=>H1,logImpl:()=>j1,maxImpl:()=>K1,maximumImpl:()=>X1,minimumImpl:()=>Z1,multiplyImpl:()=>Xm,negImpl:()=>Q1,notEqualImpl:()=>J1,prodImpl:()=>sv,raggedGatherImpl:()=>ov,raggedRangeImpl:()=>iv,raggedTensorToTensorImpl:()=>cv,rangeImpl:()=>hv,rsqrtImpl:()=>dv,scatterImpl:()=>vo,sigmoidImpl:()=>aP,simpleAbsImpl:()=>I1,sliceImpl:()=>C1,sparseFillEmptyRowsImpl:()=>fv,sparseReshapeImpl:()=>mv,sparseSegmentReductionImpl:()=>tg,sqrtImpl:()=>RV,staticRegexReplaceImpl:()=>gv,stridedSliceImpl:()=>yv,stringNGramsImpl:()=>xv,stringSplitImpl:()=>bv,stringToHashBucketFastImpl:()=>wv,subImpl:()=>L1,tileImpl:()=>vv,topKImpl:()=>Sv,transposeImpl:()=>jm,uniqueImpl:()=>Cv});var B=W(8239);class zt{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class Mt{refCount(t){return ot("refCount")}incRef(t){return ot("incRef")}timerAvailable(){return!0}time(t){return ot("time")}read(t){return ot("read")}readSync(t){return ot("readSync")}readToGPU(t,e){return ot("readToGPU")}numDataIds(){return ot("numDataIds")}disposeData(t,e){return ot("disposeData")}write(t,e,s){return ot("write")}move(t,e,s,r,o){return ot("move")}createTensorFromGPUData(t,e,s){return ot("createTensorFromGPUData")}memory(){return ot("memory")}floatPrecision(){return ot("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return ot("dispose")}}function ot(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Ft(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,Gn(n,t,e)}function vt(n,t,e){return Math.max(n,Math.min(t,e))}function gn(n){return n%2==0?n:n+1}function Gn(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function S(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function Fn(n,t,e=""){S(Xe(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function $o(n){S(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function G(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function Xe(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function _o(n){return n%1==0}function ph(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function Eo(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function vg(n,t=(r=>0),e,s){return new Promise((r,o)=>{let a=0;const i=()=>{if(n())return void r();a++;const l=t(a);null!=e&&a>=e?o():null!=s?s(i,l):setTimeout(i,l)};i()})}function Ig(n,t){let e=1,s=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);s=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function Ge(n,t){const e=t.length;return S((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),S(n.every(s=>_o(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function lr(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||r?null:Ge(t,n).sort();let a=0;for(let i=0;i<n.length;++i){if(null!=o){if(o[a]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==o[a]||o[a]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),o[a]<=i&&a++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function cn(n,t){return Bt(n,t)}function Bt(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function Sg(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function ml(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function wa(n){return"string"==typeof n||n instanceof String}function fh(n){return"number"==typeof n}function Ao(n){return Array.isArray(n)?Ao(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":fh(n)?"float32":wa(n)?"string":function ZI(n){return"boolean"==typeof n}(n)?"bool":"float32"}function mh(n){return!!(n&&n.constructor&&n.call&&n.apply)}function gh(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function $e(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function Ng(n,t,e,s=!1){const r=new Array;if(1===t.length){const o=t[0]*(s?2:1);for(let a=0;a<o;a++)r[a]=e[n+a]}else{const o=t[0],a=t.slice(1),i=a.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<o;l++)r[l]=Ng(n+l*i,a,e,s)}return r}function rs(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,o)=>r*o)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return Ng(0,n,t,e)}function yh(n,t){const e=yn(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function yn(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function Cg(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return rs(n,new Float32Array(e));if("int32"===t)return rs(n,new Int32Array(e));if("bool"===t)return rs(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Hn(n){n.forEach(t=>{S(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function _s(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function Ro(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function qr(n){return n&&n.then&&"function"==typeof n.then}const kg="tfjsflags";class QI{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=JI,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return(0,B.Z)(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(qr(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);kg in t&&t[kg].split(",").forEach(s=>{const[r,o]=s.split(":");this.urlFlags[r]=function tS(n,t){const e=t.toLowerCase();return"true"===e||"false"===e?"true"===e:""+ +e===e?+e:t}(0,o)})}}function JI(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function eS(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function M(){return Tg}let xh,Tg=null;function $g(){if(null==xh){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}xh=n}return xh}function bh(n,t){const e=function sS(){const n=$g();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const gl="Abs",va="Acos",Ia="Acosh",Do="Add",yl="AddN",xl="ArgMax",bl="ArgMin",Sa="Asin",Na="Asinh",Ca="Atan",ka="Atanh",Ta="Atan2",wl="AvgPool",Ih="AvgPoolGrad",vl="AvgPool3D",Sh="AvgPool3DGrad",Il="BatchMatMul",Sl="BatchToSpaceND",Nh="Bincount",Ch="BitwiseAnd",kh="BroadcastArgs",$a="Cast",_a="Ceil",Ea="ClipByValue",Th="Complex",Nl="ComplexAbs",Cl="Concat",kl="Conv2D",$h="Conv2DBackpropFilter",Tl="Conv2DBackpropInput",$l="Conv3D",_h="Conv3DBackpropFilterV2",Eh="Conv3DBackpropInputV2",Aa="Cos",Ra="Cosh",Ah="Cumprod",_l="Cumsum",Rh="CropAndResize",Dh="DenseBincount",Fh="DepthToSpace",El="DepthwiseConv2dNative",Oh="DepthwiseConv2dNativeBackpropFilter",Lh="DepthwiseConv2dNativeBackpropInput",Ph="Diag",Al="Dilation2D",zh="Dilation2DBackpropInput",Mh="Dilation2DBackpropFilter",Da="RealDiv",Bh="Einsum",Fa="Elu",Vh="EluGrad",Oa="Erf",Rl="Equal",La="Exp",Dl="ExpandDims",Pa="Expm1",Uh="Fill",Gh="FlipLeftRight",za="Floor",Ma="FloorDiv",Fl="FusedBatchNorm",Ol="GatherV2",Hh="GatherNd",Ll="Greater",Ba="GreaterEqual",Va="Identity",jh="IFFT",Kh="Imag",Wa="IsFinite",Ua="IsInf",Ga="IsNan",Pl="LeakyRelu",zl="Less",Ml="LessEqual",qh="LinSpace",Ha="Log",ja="Log1p",Bl="LogicalAnd",Vl="LogicalNot",Wl="LogicalOr",Ul="LRN",Xh="LRNGrad",Gl="Max",Ka="Maximum",Hl="MaxPool",Zh="MaxPoolGrad",jl="MaxPool3D",Yh="MaxPool3DGrad",Qh="MaxPoolWithArgmax",Kl="Mean",ql="Min",qa="Minimum",Xl="MirrorPad",Xa="Mod",Jh="Multinomial",Za="Multiply",Zl="Neg",Yl="NotEqual",ed="NonMaxSuppressionV3",td="NonMaxSuppressionV4",nd="NonMaxSuppressionV5",Ql="OnesLike",Jl="OneHot",eu="Pack",tu="PadV2",Ya="Pow",nu="Prelu",su="Prod",sd="RaggedGather",rd="RaggedRange",od="RaggedTensorToTensor",ad="Range",id="Real",Qa="Reciprocal",Ja="Relu",ru="Reshape",ou="ResizeNearestNeighbor",ld="ResizeNearestNeighborGrad",au="ResizeBilinear",ud="ResizeBilinearGrad",ei="Relu6",iu="Reverse",ti="Round",ni="Rsqrt",cd="ScatterNd",hd="TensorScatterUpdate",dd="SearchSorted",lu="Select",si="Selu",uu="Slice",ri="Sin",oi="Sinh",ai="Sign",ii="Sigmoid",li="Softplus",ui="Sqrt",cu="Sum",hu="SpaceToBatchND",du="SplitV",pu="Softmax",pd="SparseFillEmptyRows",fd="SparseReshape",md="SparseSegmentMean",gd="SparseSegmentSum",yd="SparseToDense",ci="SquaredDifference",xd="Square",fu="StaticRegexReplace",bd="StridedSlice",wd="StringNGrams",vd="StringSplit",Id="StringToHashBucketFast",hi="Sub",di="Tan",pi="Tanh",fi="Tile",Sd="TopK",Nd="Transform",Fo="Transpose",Cd="Unique",mu="Unpack",gu="UnsortedSegmentSum",yu="ZerosLike",mi="Step",kd="FromPixels",Td="RotateWithOffset",xu="_FusedMatMul",bu="FusedConv2D",wu="FusedDepthwiseConv2D";function jn(...n){M().getBool("IS_TEST")||M().getBool("PROD")||console.warn(...n)}function aS(...n){M().getBool("IS_TEST")||M().getBool("PROD")||console.log(...n)}const Oo=bh("kernelRegistry",()=>new Map),gi=bh("gradRegistry",()=>new Map);function $d(n,t){const e=Ad(n,t);return Oo.get(e)}function _g(n){return gi.get(n)}function _d(n){const t=Oo.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[o,a]=r,[i]=o.split("_");i===n&&e.push(a)}return e}function Ed(n){const{kernelName:t,backendName:e}=n,s=Ad(t,e);Oo.has(s)&&jn(`The kernel '${t}' for backend '${e}' is already registered`),Oo.set(s,n)}function iS(n){const{kernelName:t}=n;gi.has(t)&&M().getBool("DEBUG")&&jn(`Overriding the gradient for '${t}'`),gi.set(t,n)}function Ad(n,t){return`${t}_${n}`}function Eg(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var Ag=W(7080);const Xr=W.n(Ag)()||Ag;function vu(n){return Xr.fromString(n,!0,16)}const Rg=vu("c3a5c85c97cb3127"),Zr=vu("b492b66fbe98f273"),vn=vu("9ae16a3b2f90404f");function Rd(n){return n.xor(n.shru(47))}function Dg(n,t,e){const s=n.slice(t,t+e);return Xr.fromBytes(Array.from(s),!0,!0)}function gt(n,t){return Dg(n,t,8)}function Fg(n,t){return Dg(n,t,4)}function rn(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function ur(n,t,e=vu("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function Iu(n,t,e,s){return function uS(n,t,e,s,r,o){r=r.add(n),o=rn(o.add(r).add(s),21);const a=r;return r=(r=r.add(t)).add(e),o=o.add(rn(r,44)),[r.add(s),o.add(a)]}(gt(n,t),gt(n,t+8),gt(n,t+16),gt(n,t+24),e,s)}function pS(n,t=n.length){const e=Xr.fromNumber(81,!0);if(t<=32)return t<=16?function cS(n,t=n.length){if(t>=8){const e=vn.add(2*t),s=gt(n,0).add(vn),r=gt(n,t-8);return ur(rn(r,37).mul(e).add(s),rn(s,25).add(r).mul(e),e)}if(t>=4){const e=vn.add(2*t);return ur(Fg(n,0).shl(3).add(t),Fg(n,t-4),e)}if(t>0){const a=t+(n[t-1]<<2);return Rd(vn.mul(n[0]+(n[t>>1]<<8)).xor(Rg.mul(a))).mul(vn)}return vn}(n,t):function hS(n,t=n.length){const e=vn.add(2*t),s=gt(n,0).mul(Zr),r=gt(n,8),o=gt(n,t-8).mul(e),a=gt(n,t-16).mul(vn);return ur(rn(s.add(r),43).add(rn(o,30)).add(a),s.add(rn(r.add(vn),18)).add(o),e)}(n,t);if(t<=64)return function dS(n,t=n.length){const e=vn.add(2*t),s=gt(n,0).mul(vn),r=gt(n,8),o=gt(n,t-8).mul(e),a=gt(n,t-16).mul(vn),i=rn(s.add(r),43).add(rn(o,30)).add(a),l=ur(i,s.add(rn(r.add(vn),18)).add(o),e),u=gt(n,16).mul(e),c=gt(n,24),h=i.add(gt(n,t-32)).mul(e),d=l.add(gt(n,t-24)).mul(e);return ur(rn(u.add(c),43).add(rn(h,30)).add(d),u.add(rn(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(Zr).add(113),o=Rd(r.mul(vn).add(113)).mul(vn),a=[Xr.UZERO,Xr.UZERO],i=[Xr.UZERO,Xr.UZERO];s=s.mul(vn).add(gt(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=rn(s.add(r).add(a[0]).add(gt(n,l+8)),37).mul(Zr),r=rn(r.add(a[1]).add(gt(n,l+48)),42).mul(Zr),s=s.xor(i[1]),r=r.add(a[0]).add(gt(n,l+40)),o=rn(o.add(i[0]),33).mul(Zr),a=Iu(n,l,a[1].mul(Zr),s.add(i[0])),i=Iu(n,l+32,o.add(i[1]),r.add(gt(n,l+16))),[o,s]=[s,o],l+=64}while(l!==u);const h=Zr.add(o.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),a[0]=a[0].add(i[0]),i[0]=i[0].add(a[0]),s=rn(s.add(r).add(a[0]).add(gt(n,l+8)),37).mul(h),r=rn(r.add(a[1]).add(gt(n,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(a[0].mul(9).add(gt(n,l+40))),o=rn(o.add(i[0]),33).mul(h),a=Iu(n,l,a[1].mul(h),s.add(i[0])),i=Iu(n,l+32,o.add(i[1]),r.add(gt(n,l+16))),[o,s]=[s,o],ur(ur(a[0],i[0],h).add(Rd(r).mul(Rg)).add(o),ur(a[1],i[1],h).add(s),h)}function cr(n,t){return"string"===t?hr(n):Yr([n],t)}function Yr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=Qr(n)),M().getBool("DEBUG")&&function KI(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(n,t),function fS(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function Tn(){return M().platform.now()}function hr(n,t="utf-8"){return t=t||"utf-8",M().platform.encode(n,t)}function dr(n,t="utf-8"){return t=t||"utf-8",M().platform.decode(n,t)}function os(n){return null!=M().platform.isTypedArray?M().platform.isTypedArray(n):Eg(n)}function Qr(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||qr(n)||null==n||os(n)&&e)t.push(n);else if(Array.isArray(n)||os(n))for(let s=0;s<n.length;++s)Qr(n[s],t,e);else{let s=-1;for(const r of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(r)&&(s=Math.max(s,Number(r)));for(let r=0;r<=s;r++)Qr(n[r],t,e)}return t}class mS{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new yS)}profileKernel(t,e,s){let r;const o=()=>{r=s()};let a;const i=Tn();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(o);else{o();for(const u of r)u.dataSync();a=Promise.resolve({kernelMs:Tn()-i})}if(M().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{gS(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then(u=>u.kernelMs),extraInfo:a.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:o,extraInfo:a}=t;s.forEach(i=>{Promise.all([i.data(),r,a]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],o,l[2])})})}}function gS(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class yS{logKernelProfile(t,e,s,r,o,a){const i="number"==typeof r?Eo(`${r}ms`,9):r.error,l=Eo(t,25),u=e.rank,c=e.size,h=Eo(e.shape.toString(),14);let d="";for(const p in o){const f=o[p];if(null!=f){const g=f.shape||e.shape,m=g.length;d+=`${p}: ${m}D ${m>0?g:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const Og=20,yi=3,Dd=7;function wS(n,t,e,s){const r=$e(t),o=function vS(n,t,e,s){const r=G(t),o=s[s.length-1],a=new Array(o).fill(0),i=t.length,l="complex64"===e?bi(n):n;if(i>1)for(let u=0;u<r/o;u++){const c=u*o;for(let h=0;h<o;h++)a[h]=Math.max(a[h],xi(l[c+h],0,e).length)}return a}(n,t,e,r),a=t.length,i=Su(n,t,e,r,o),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${a}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function xi(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(Dd))} + ${parseFloat(n[1].toFixed(Dd))}j`:wa(n)?`'${n}'`:"bool"===e?Lg(n):parseFloat(n.toFixed(Dd)).toString(),Eo(s,t)}function Lg(n){return 0===n?"false":"true"}function Su(n,t,e,s,r,o=!0){const a="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[xi(bi(n)[0],0,e)]:"bool"===e?[Lg(n[0])]:[n[0].toString()];if(1===l){if(i>Og){let y=Array.from(n.slice(0,yi*a)),x=Array.from(n.slice((i-yi)*a,i*a));return"complex64"===e&&(y=bi(y),x=bi(x)),["["+y.map((b,v)=>xi(b,r[v],e)).join(", ")+", ..., "+x.map((b,v)=>xi(b,r[i-yi+v],e)).join(", ")+"]"]}return["["+("complex64"===e?bi(n):Array.from(n)).map((m,y)=>xi(m,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*a,d=[];if(i>Og){for(let g=0;g<yi;g++){const m=g*h;d.push(...Su(n.slice(m,m+h),u,e,c,r,!1))}d.push("...");for(let g=i-yi;g<i;g++){const m=g*h;d.push(...Su(n.slice(m,m+h),u,e,c,r,g===i-1))}}else for(let g=0;g<i;g++){const m=g*h;d.push(...Su(n.slice(m,m+h),u,e,c,r,g===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(o?"":f),d}function bi(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class Xt{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=G(t),null!=s){const r=s.length;S(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||Bt(e,this.size),this.strides=$e(t)}set(t,...e){0===e.length&&(e=[0]),S(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return xs().makeTensor(this.values,this.shape,this.dtype)}}let xs=null,Lo=null,Pg=null;class It{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=G(t),this.strides=$e(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return(0,B.Z)(function*(){const e=yield t.data();return Lo.buffer(t.shape,t.dtype,e)})()}bufferSync(){return Lo.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return(0,B.Z)(function*(){const e=yield t.data();return rs(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return rs(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return(0,B.Z)(function*(){t.throwIfDisposed();const e=xs().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>dr(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),xs().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=xs().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>dr(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return(0,B.Z)(function*(){t.throwIfDisposed();const e=yield xs().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(xs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return Lo.print(this,t)}clone(){return this.throwIfDisposed(),Lo.clone(this)}toString(t=!1){return wS(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Lo.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),xs().makeVariable(this,t,e,s)}}function q(){return bh("Tensor",()=>It)}Object.defineProperty(It,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),q();class Nu extends It{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Xe(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);xs().disposeTensor(this),this.dataId=t.dataId,xs().incRef(this,null)}dispose(){xs().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Nu,Symbol.hasInstance,{value:n=>n instanceof It&&null!=n.assign&&n.assign instanceof Function});var pr=(()=>((pr=pr||{}).float32="float32",pr.int32="int32",pr.bool="int32",pr.complex64="complex64",pr))(),fr=(()=>((fr=fr||{}).float32="float32",fr.int32="int32",fr.bool="bool",fr.complex64="complex64",fr))(),mr=(()=>((mr=mr||{}).float32="float32",mr.int32="float32",mr.bool="float32",mr.complex64="complex64",mr))(),gr=(()=>((gr=gr||{}).float32="complex64",gr.int32="complex64",gr.bool="complex64",gr.complex64="complex64",gr))();const CS={float32:mr,int32:pr,bool:fr,complex64:gr};function On(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return CS[n][t]}function Fd(n){return On(n,"int32")}function zg(n){return null!=n&&"object"==typeof n&&"texture"in n&&n.texture instanceof WebGLTexture}function Mg(n){return typeof GPUBuffer<"u"&&null!=n&&"object"==typeof n&&"buffer"in n&&n.buffer instanceof GPUBuffer}function Ot(n,t){if(n.dtype===t.dtype)return[n,t];const e=On(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function Bg(n){const t=[];return Vg(n,t,new Set),t}function Vg(n,t,e){if(null==n)return;if(n instanceof It)return void t.push(n);if(!function TS(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const o=s[r];e.has(o)||(e.add(o),Vg(o,t,e))}}function Od(n){return null!=n.kernelName}class Wg{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let $S=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Wg}ready(){var e=this;return(0,B.Z)(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const o=s[r];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(jn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return(0,B.Z)(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:o}=s.initializeBackend(e);if(!(o?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new mS(s.backendInstance),!0})()}setupRegisteredKernels(){_d(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){_d(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof Mt||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,a=r.then(i=>!(o<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,jn(`Initialization of backend ${e} failed`),jn(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(r){return jn(`Initialization of backend ${e} failed`),jn(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:o,asyncInit:a}=this.initializeBackend(r);if(a||o)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),o=r.backend,a=this.readSync(s),i=o.refCount(s);o.disposeData(s,!0),r.backend=e,e.move(s,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let o,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(o),()=>(o=s(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,s,r){e();try{const o=r();return s(),o}catch(o){throw s(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=A.runKernel(Va,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>A.runKernel($a,{x:i},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==$d(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const o=this.backend.numDataIds();let a=0;r.forEach(u=>{a+="complex64"===u.dtype?3:1});const l=o-s-a-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const o=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=Od(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Od(e)){const{kernelName:g,inputs:m,attrs:y}=e,x=$d(g,this.backendName);S(null!=x,()=>`Cannot find registered kernel '${g}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=x.kernelFunc({inputs:m,attrs:y,backend:this.backend});const v=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(g,b,v);const I=v.map(C=>null!=C.rank?C:this.makeTensorFromTensorInfo(C));if(o){const C=this.getTensorsForGradient(g,m,I);r=this.saveTensorsForBackwardMode(C)}return I}}else{const{forwardFunc:g}=e,m=y=>{o&&(r=y.map(x=>this.keep(this.clone(x))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>g(this.backend,m));const x=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,y,x),x}}const{inputs:h,attrs:d}=e,p=Od(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),o&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(g=>null!=h[g]?h[g].shape:null),outputShapes:s.map(g=>g.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const o=_g(e);if(null!=o){const a=o.inputsToSave||[],i=o.outputsToSave||[];let l;o.saveAllInputs?(S(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=a.map(c=>s[c]);const u=r.filter((c,h)=>i[h]);return l.concat(u)}return[]}makeTensor(e,s,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let a=e;"string"===(r=r||"float32")&&wa(e[0])&&(a=e.map(u=>hr(u)));const i=o.write(a,s,r),l=new It(s,r,i,this.nextTensorId());if(this.trackTensor(l,o),"string"===r){const u=this.state.tensorInfo.get(i),c=function XI(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(a);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,o){return this.makeTensorFromTensorInfo({dataId:e,shape:s,dtype:r=r||"float32"},o)}makeTensorFromTensorInfo(e,s){const{dataId:r,shape:o,dtype:a}=e,i=new It(o,a,r,this.nextTensorId());return this.trackTensor(i,s),i}makeVariable(e,s=!0,r,o){r=r||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const a=new Nu(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*ml(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof Nu||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*ml(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return(0,B.Z)(function*(){s.state.profiling=!0;const r=s.state.numBytes,o=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(a=>a.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-o;for(const a of s.state.activeProfile.kernels)a.kernelTimeMs=yield a.kernelTimeMs,a.extraInfo=yield a.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,o,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:a},u=_g(e);null!=u&&(o=u.gradFunc),null!=o&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=yn(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),o(c.length>1?c:c[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=Bg(e),r=new Set(s.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(a=>{!a.kept&&a.scopeId===o.id&&this.track(a)})}gradients(e,s,r,o=!1){if(S(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));S(a instanceof It,()=>"The result y returned by f() must be a tensor.");const i=function xS(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(g=>s[g.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const a={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(o[u.outputs[h].id]){for(const d in c)o[c[d].id]=!0,a[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&a[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,i.push(h)}}return i}(this.state.activeTape,s,a);if(!o&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=r??function _S(n){const t=yh(G(n),"float32");return A.makeTensor(t,n,"float32")}(a.shape),function bS(n,t,e,s){for(let r=t.length-1;r>=0;r--){const o=t[r],a=[];if(o.outputs.forEach(l=>{const u=n[l.id];a.push(null!=u?u:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const i=o.gradient(a);for(const l in o.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=o.inputs[l];if(!Xe(u.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,i,c=>this.tidy(c),ES);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return S(mh(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;S(s.every(l=>l instanceof It),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return s.forEach((l,u)=>{o[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),S(r.value instanceof It,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),S(mh(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];S(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),S(h.every(p=>p instanceof It),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,s){return this.state.tensorInfo.get(e).backend.readToGPU(e,s)}time(e){var s=this;return(0,B.Z)(function*(){const r=Tn(),o=yield s.backend.time(e);return o.wallMs=Tn()-r,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Wg;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function Ug(){const n=$g();if(null==n._tfengine){const t=new QI(n);n._tfengine=new $S(t)}return function nS(n){Tg=n}(n._tfengine.ENV),function IS(n){xs=n}(()=>n._tfengine),n._tfengine}const A=Ug();function ES(n,t){return A.runKernel(Do,{a:n,b:t})}function Gg(n){if(n||function AS(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function Hg(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const $n=M();function yr(n,t){let e=n;if(os(n))return"string"===t?[]:[n.length];if(zg(n))return[n.height,n.width*(n.channels||"RGBA").length];if(Mg(n))return[n.buffer.size/(null==t?4:ml(t))];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||os(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&M().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&jg(n,s,[]),s}function jg(n,t,e){if(e=e||[],!Array.isArray(n)&&!os(n))return void S(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);S(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),S(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)jg(n[r],s,e.concat(r))}function Kg(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function N(n,t,e,s="numeric"){if(n instanceof It)return Kg(s,n.dtype,t,e),n;let r=Ao(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Kg(s,r,t,e),null==n||!os(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=yr(n,r);!os(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?Yr(n,r):Qr(n,[],!0);return A.makeTensor(i,o,r)}function Cu(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,a)=>N(o,`${t}[${a}]`,e,s))}$n.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),$n.registerFlag("IS_BROWSER",()=>Hg()),$n.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),$n.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),$n.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),$n.registerFlag("PROD",()=>!1),$n.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>$n.getBool("DEBUG")),$n.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),$n.registerFlag("IS_TEST",()=>!1),$n.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>$n.getBool("DEBUG")),$n.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),$n.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),$n.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const qg="__op";function _(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+=qg;const r=(...o)=>{A.startScope(e);try{const a=s(...o);return qr(a)&&console.error("Cannot return a Promise inside of tidy."),A.endScope(a),a}catch(a){throw A.endScope(null),a}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}const xr=_({complex_:function RS(n,t){const e=N(n,"real","complex"),s=N(t,"imag","complex");return Fn(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),A.runKernel(Th,{real:e,imag:s})}});function br(n,t,e,s){if(null==s)s=Ao(n);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Mg(n)||zg(n)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return A.backend.createTensorFromGPUData(n,t||e,s)}if(!os(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Hn(t);const r=G(t),o=G(e);S(r===o,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);for(let a=0;a<e.length;++a){const l=a!==e.length-1||e[a]!==G(t.slice(a));S(e[a]===t[a]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!os(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?Yr(n,s):Qr(n,[],!0),A.makeTensor(n,t,s)}function bs(n,t,e){return br(n,t,yr(n,e),e)}const Pd={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},ku=4;function zd(n,t){return Md.apply(this,arguments)}function Md(){return Md=(0,B.Z)(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(a=>a.name):Object.keys(n);for(let a=0;a<r.length;++a){const i=r[a],l=Array.isArray(n)?n[a].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=(0,B.Z)(function*(d){const p=yield l.bytes(),f=p.reduce((y,x)=>y+x.length,0)+ku*p.length,g=new Uint8Array(f);let m=0;for(let y=0;y<p.length;y++){const x=p[y],b=new Uint8Array(new Uint32Array([x.length]).buffer);g.set(b,m),m+=ku,g.set(x,m),m+=x.length}d(g)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:DS(yield Promise.all(s)),specs:e}}),Md.apply(this,arguments)}function Xg(n,t){const e={};let s,r=0;for(const o of t){const a=o.name,i=o.dtype,l=o.shape,u=G(l);let c;if("quantization"in o){const h=o.quantization;if("uint8"===h.dtype||"uint16"===h.dtype){if(!("min"in h)||!("scale"in h))throw new Error(`Weight ${o.name} with quantization ${h.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==h.dtype)throw new Error(`Weight ${o.name} has unknown quantization dtype ${h.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${o.name} is quantized with ${h.dtype} which only supports weights of type float32 not ${i}.`)}const d=Pd[h.dtype],p=n.slice(r,r+u*d),f="uint8"===h.dtype?new Uint8Array(p):new Uint16Array(p);if("float32"===i)if("uint8"===h.dtype||"uint16"===h.dtype){c=new Float32Array(f.length);for(let g=0;g<f.length;g++)c[g]=f[g]*h.scale+h.min}else{if("float16"!==h.dtype)throw new Error(`Unsupported quantization type ${h.dtype} for weight type float32.`);void 0===s&&(s=MS()),c=s(f)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${a}': ${i}`);if("uint8"!==h.dtype&&"uint16"!==h.dtype)throw new Error(`Unsupported quantization type ${h.dtype} for weight type int32.`);c=new Int32Array(f.length);for(let g=0;g<f.length;g++)c[g]=Math.round(f[g]*h.scale+h.min)}r+=u*d}else if("string"===i){const h=G(o.shape);c=[];for(let d=0;d<h;d++){const p=new Uint32Array(n.slice(r,r+ku))[0];r+=ku;const f=new Uint8Array(n.slice(r,r+p));c.push(f),r+=p}}else{const h=Pd[i],d=n.slice(r,r+u*h);if("float32"===i)c=new Float32Array(d);else if("int32"===i)c=new Int32Array(d);else if("bool"===i)c=new Uint8Array(d);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${a}': ${i}`);{c=new Float32Array(d);const p=new Float32Array(c.length/2),f=new Float32Array(c.length/2);for(let y=0;y<p.length;y++)p[y]=c[2*y],f[y]=c[2*y+1];const g=bs(p,l,"float32"),m=bs(f,l,"float32");e[a]=xr(g,m),g.dispose(),m.dispose()}}r+=u*h}"complex64"!==i&&(e[a]=bs(c,l,i))}return e}function DS(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(o=>{s.set(new Uint8Array(o.buffer),r),r+=o.byteLength}),s.buffer}const Bd=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function Zg(n){return Bd?Buffer.byteLength(n):new Blob([n]).size}function Tu(n){if(1===n.length)return n[0];let t=0;n.forEach(r=>{t+=r.byteLength});const e=new Uint8Array(t);let s=0;return n.forEach(r=>{e.set(new Uint8Array(r),s),s+=r.byteLength}),e.buffer}function Yg(n){for(n=n.trim();n.endsWith("/");)n=n.slice(0,n.length-1);const e=n.split("/");return e[e.length-1]}function Qg(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function Jg(n,t,e){const s={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(s.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=e}return null!=n.signature&&(s.signature=n.signature),null!=n.userDefinedMetadata&&(s.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(s.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(s.initializerSignature=n.initializerSignature),s}function Vd(n,t){return Wd.apply(this,arguments)}function Wd(){return(Wd=(0,B.Z)(function*(n,t){let e,s;return null!=n.weightsManifest&&([e,s]=yield t(n.weightsManifest)),Jg(n,e,s)})).apply(this,arguments)}function wi(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:Zg(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:Zg(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:n.weightData.byteLength}}function ey(n){const t=[];for(const e of n)t.push(...e.weights);return t}function MS(){const n=function LS(){const n=e=>{let s=e<<13,r=0;for(;!(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function PS(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function zS(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),o=new Uint32Array(r);for(let a=0;a<s.length;a++){const i=s[a];o[a]=n[e[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}class Tt{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Tt.instance&&(Tt.instance=new Tt),Tt.instance}static registerSaveRouter(t){Tt.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Tt.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Tt.getHandlers(t,"save")}static getLoadHandlers(t,e){return Tt.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?Tt.getInstance().loadRouters:Tt.getInstance().saveRouters).forEach(a=>{const i=a(t,s);null!==i&&r.push(i)}),r}}const BS=n=>Tt.registerSaveRouter(n),VS=n=>Tt.registerLoadRouter(n),ty=n=>Tt.getSaveHandlers(n),WS=(n,t)=>Tt.getLoadHandlers(n,t),$u="tensorflowjs",Jr="models_store",wr="model_info_store";function Hd(){if(!M().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function jd(n){const t=n.result;t.createObjectStore(Jr,{keyPath:"modelPath"}),t.createObjectStore(wr,{keyPath:"modelPath"})}let Po=(()=>{class n{constructor(e){if(this.indexedDB=Hd(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return(0,B.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return(0,B.Z)(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,o)=>{const a=this.indexedDB.open($u,1);a.onupgradeneeded=()=>jd(a),a.onsuccess=()=>{const i=a.result;if(null==s){const l=i.transaction(Jr,"readonly"),c=l.objectStore(Jr).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(i.close(),o(c.error)),l.oncomplete=()=>i.close()}else{const l=wi(s),u=i.transaction(wr,"readwrite");let h,d,c=u.objectStore(wr);try{h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(p){return o(p)}h.onsuccess=()=>{d=i.transaction(Jr,"readwrite");const p=d.objectStore(Jr);let f;try{f=p.put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l})}catch(g){return o(g)}f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=g=>{c=u.objectStore(wr);const m=c.delete(this.modelPath);m.onsuccess=()=>(i.close(),o(f.error)),m.onerror=y=>(i.close(),o(f.error))}},h.onerror=p=>(i.close(),o(h.error)),u.oncomplete=()=>{null==d?i.close():d.oncomplete=()=>i.close()}}},a.onerror=i=>o(a.error)})}}return n.URL_SCHEME="indexeddb://",n})();const ny=n=>M().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Po.URL_SCHEME)?function US(n){return new Po(n)}(n.slice(Po.URL_SCHEME.length)):null;Tt.registerSaveRouter(ny),Tt.registerLoadRouter(ny);class HS{constructor(){this.indexedDB=Hd()}listModels(){var t=this;return(0,B.Z)(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open($u,1);r.onupgradeneeded=()=>jd(r),r.onsuccess=()=>{const o=r.result,a=o.transaction(wr,"readonly"),l=a.objectStore(wr).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(o.close(),s(l.error)),a.oncomplete=()=>o.close()},r.onerror=o=>s(r.error)})})()}removeModel(t){var e=this;return(0,B.Z)(function*(){return t=function GS(n){return n.startsWith(Po.URL_SCHEME)?n.slice(Po.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const o=e.indexedDB.open($u,1);o.onupgradeneeded=()=>jd(o),o.onsuccess=()=>{const a=o.result,i=a.transaction(wr,"readwrite"),l=i.objectStore(wr),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return a.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=a.transaction(Jr,"readwrite");const f=c.objectStore(Jr).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=g=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),a.close(),r(u.error))}},u.onerror=h=>(a.close(),r(u.error)),i.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}},o.onerror=a=>r(o.error)})})()}}const Es="/",eo="tensorflowjs_models",sy="info",jS="model_topology",KS="weight_specs",qS="weight_data",XS="model_metadata";function ry(n){return{info:[eo,n,sy].join(Es),topology:[eo,n,jS].join(Es),weightSpecs:[eo,n,KS].join(Es),weightData:[eo,n,qS].join(Es),modelMetadata:[eo,n,XS].join(Es)}}function oy(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function ay(n){const t=n.split(Es);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(Es)}let zo=(()=>{class n{constructor(e){if(!M().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ry(this.modelPath)}save(e){var s=this;return(0,B.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),a=wi(e);try{return s.LS.setItem(s.keys.info,JSON.stringify(a)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,o),s.LS.setItem(s.keys.weightData,function FS(n){if(Bd)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(e.weightData)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:a}}catch{throw oy(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}})()}load(){var e=this;return(0,B.Z)(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=o;const a=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=a;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.initializerSignature&&(r.initializerSignature=u.initializerSignature),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function OS(n){if(Bd){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const iy=n=>M().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(zo.URL_SCHEME)?function YS(n){return new zo(n)}(n.slice(zo.URL_SCHEME.length)):null;Tt.registerSaveRouter(iy),Tt.registerLoadRouter(iy);class QS{constructor(){S(M().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),S(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return(0,B.Z)(function*(){const e={},s=eo+Es,r=Es+sy;for(let o=0;o<t.LS.length;++o){const a=t.LS.key(o);a.startsWith(s)&&a.endsWith(r)&&(e[ay(a)]=JSON.parse(t.LS.getItem(a)))}return e})()}removeModel(t){var e=this;return(0,B.Z)(function*(){const s=ry(t=function ZS(n){return n.startsWith(zo.URL_SCHEME)?n.slice(zo.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return oy(s),r})()}}const Mo="://";class In{constructor(){this.managers={}}static getInstance(){return null==In.instance&&(In.instance=new In),In.instance}static registerManager(t,e){S(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(Mo)&&(t=t.slice(0,t.indexOf(Mo))),S(t.length>0,()=>"scheme must not be an empty string.");const s=In.getInstance();S(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=In.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(In.getInstance().managers)}}function _u(n){if(-1===n.indexOf(Mo))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${In.getSchemes().join(",")}`);return{scheme:n.split(Mo)[0],path:n.split(Mo)[1]}}function ly(n,t){return Kd.apply(this,arguments)}function Kd(){return(Kd=(0,B.Z)(function*(n,t,e=!1){S(n!==t,()=>`Old path and new path are the same: '${n}'`);const s=Tt.getLoadHandlers(n);S(s.length>0,()=>`Copying failed because no load handler is found for source URL ${n}.`),S(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);const r=s[0],o=Tt.getSaveHandlers(t);S(o.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),S(o.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);const a=o[0],i=_u(n).scheme,l=_u(n).path,u=i===_u(n).scheme,c=yield r.load();e&&u&&(yield In.getManager(i).removeModel(l));const h=yield a.save(c);return e&&!u&&(yield In.getManager(i).removeModel(l)),h.modelArtifactsInfo})).apply(this,arguments)}function JS(){return qd.apply(this,arguments)}function qd(){return(qd=(0,B.Z)(function*(){const n=In.getSchemes(),t={};for(const e of n){const s=yield In.getManager(e).listModels();for(const r in s)t[e+Mo+r]=s[r]}return t})).apply(this,arguments)}function eN(n){return Xd.apply(this,arguments)}function Xd(){return(Xd=(0,B.Z)(function*(n){const t=_u(n);return In.getManager(t.scheme).removeModel(t.path)})).apply(this,arguments)}function tN(n,t){return Zd.apply(this,arguments)}function Zd(){return(Zd=(0,B.Z)(function*(n,t){return ly(n,t,!1)})).apply(this,arguments)}function nN(n,t){return Yd.apply(this,arguments)}function Yd(){return(Yd=(0,B.Z)(function*(n,t){return ly(n,t,!0)})).apply(this,arguments)}class sN{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){typeof window>"u"||!M().getBool("USE_SETTIMEOUTCUSTOM")?setTimeout(t,e):(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",s=>{s.source===window&&s.data.name===this.messageName&&(s.stopPropagation(),(0,this.functionRefs[s.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0)))}isTypedArray(t){return Eg(t)}}if(M().get("IS_BROWSER")){M().setPlatform("browser",new sN);try{In.registerManager(zo.URL_SCHEME,new QS)}catch{}try{In.registerManager(Po.URL_SCHEME,new HS)}catch{}}let Bo;function Be(n,t="float32",e){return t=t||"float32",Hn(n),new Xt(n,t,e)}M().get("IS_NODE")&&!M().get("IS_BROWSER")&&M().setPlatform("node",new class oN{constructor(){this.util=W(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=M().global.fetch?M().global.fetch(t,e):(null==Bo&&(Bo=W(5410)),Bo(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const ge=_({cast_:function aN(n,t){const e=N(n,"x","cast");if(!function qI(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return A.runKernel($a,{x:e},{dtype:t})}}),Ks=_({clone_:function iN(n){const e={x:N(n,"x","clone","string_or_numeric")};return A.runKernel(Va,e)}});function uy(n,t=!1){console.log(n.toString(t))}function As(){return A}function Qd(){return A.memory()}function z(n,t){return A.tidy(n,t)}function He(n){Bg(n).forEach(e=>e.dispose())}function on(n){return A.keep(n)}function cy(n,t,e=1){return A.registerBackend(n,t,e)}Ug(),function SS(n){Lo=n}({buffer:Be,cast:ge,clone:Ks,print:uy}),function NS(n){Pg=n}(function lN(n){M().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")});const ne=_({add_:function cN(n,t){let e=N(n,"a","add"),s=N(t,"b","add");return[e,s]=Ot(e,s),A.runKernel(Do,{a:e,b:s})}}),Jd=_({floorDiv_:function hN(n,t){let e=N(n,"a","floorDiv"),s=N(t,"b","floorDiv");return[e,s]=Ot(e,s),A.runKernel(Ma,{a:e,b:s})}}),ke=_({div_:function dN(n,t){let e=N(n,"a","div"),s=N(t,"b","div");return[e,s]=Ot(e,s),"int32"===e.dtype&&"int32"===s.dtype?Jd(e,s):A.runKernel(Da,{a:e,b:s},{})}}),D=_({mul_:function pN(n,t){let e=N(n,"a","mul"),s=N(t,"b","mul");return[e,s]=Ot(e,s),A.runKernel(Za,{a:e,b:s})}}),xn=_({sqrt_:function fN(n){const e={x:N(n,"x","sqrt","float32")};return A.runKernel(ui,e)}}),pt=_({square_:function mN(n){const t=N(n,"x","square");return A.runKernel("Square",{x:t},{})}}),Ye=_({zerosLike_:function gN(n){const e={x:N(n,"x","zerosLike")};return A.runKernel(yu,e)}});function qs(n){return A.customGrad(n)}function Ee(n,t){if((os(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&os(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return br(n,[],[],t)}class Vo{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class as{constructor(){this.classNameMap={}}static getMap(){return null==as.instance&&(as.instance=new as),as.instance}static register(t){as.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function se(n){S(null!=n.className,()=>"Class being registered does not have the static className property defined."),S("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),S(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),as.register(n)}class vr extends Vo{minimize(t,e=!1,s){const{value:r,grads:o}=this.computeGradients(t,s);if(null!=s){const a=s.map(i=>({name:i.name,tensor:o[i.name]}));this.applyGradients(a)}else this.applyGradients(o);return He(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function yN(n,t){S(mh(n),()=>"The f passed in variableGrads(f) must be a function"),S(null==t||Array.isArray(t)&&t.every(u=>u instanceof Nu),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in A.registeredVariables)t.push(A.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;S((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=A.gradients(n,t,null,!0);S(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),S(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),s?.forEach(u=>l[u.name]=null),{value:a,grads:l}}(t,e)}dispose(){null!=this.iterations_&&He(this.iterations_)}saveIterations(){var t=this;return(0,B.Z)(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:Ee(t.iterations_,"int32")}})()}getWeights(){return(0,B.Z)(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return(0,B.Z)(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return(0,B.Z)(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(vr,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});class hy extends vr{static get className(){return"Adadelta"}constructor(t,e,s=null){super(),this.learningRate=t,this.rho=e,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==s&&(this.epsilon=A.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accum_grad`,variable:z(()=>Ye(o).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${s}/accum_var`,variable:z(()=>Ye(o).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedGrads[r].variable,u=this.accumulatedUpdates[r].variable;z(()=>{const c=ne(D(l,this.rho),D(pt(i),1-this.rho)),h=D(ke(xn(ne(u,this.epsilon)),xn(ne(l,this.epsilon))),i),d=ne(D(u,this.rho),D(pt(h),1-this.rho));l.assign(c),u.assign(d);const p=ne(D(h,-this.learningRate),o);o.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(He(this.accumulatedGrads.map(t=>t.variable)),He(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return(0,B.Z)(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,B.Z)(function*(){const s=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function Wo(n,t,e){return Hn(n),e=e||Ao(t),A.runKernel(Uh,{},{shape:n,value:t,dtype:e})}class dy extends vr{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accumulator`,variable:z(()=>Wo(o.shape,this.initialAccumulatorValue).variable(!1))});const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const i=this.accumulatedGrads[r].variable;z(()=>{const l=ne(i,pt(a));i.assign(l);const u=ne(D(ke(a,xn(ne(l,A.backend.epsilon()))),-this.learningRate),o);o.assign(u)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&He(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return(0,B.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,B.Z)(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const Ir=_({pow_:function xN(n,t){let e=N(n,"base","pow"),s=N(t,"exp","pow");return[e,s]=Ot(e,s),A.runKernel(Ya,{a:e,b:s})}}),we=_({sub_:function bN(n,t){let e=N(n,"a","sub"),s=N(t,"b","sub");return[e,s]=Ot(e,s),A.runKernel(hi,{a:e,b:s})}});class py extends vr{static get className(){return"Adam"}constructor(t,e,s,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],z(()=>{this.accBeta1=Ee(e).variable(),this.accBeta2=Ee(s).variable()}),null==r&&(this.epsilon=A.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);z(()=>{const s=we(1,this.accBeta1),r=we(1,this.accBeta2);e.forEach((o,a)=>{const i=A.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:z(()=>Ye(i).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${o}/v`,variable:z(()=>Ye(i).variable(!1))});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedSecondMoment[a].variable,d=ne(D(c,this.beta1),D(u,1-this.beta1)),p=ne(D(h,this.beta2),D(pt(u),1-this.beta2)),f=ke(d,s),g=ke(p,r);c.assign(d),h.assign(p);const m=ne(D(ke(f,ne(xn(g),this.epsilon)),-this.learningRate),i);i.assign(m)}),this.accBeta1.assign(D(this.accBeta1,this.beta1)),this.accBeta2.assign(D(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&He(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&He(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return(0,B.Z)(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,B.Z)(function*(){t=yield e.extractIterations(t),z(()=>{e.accBeta1.assign(Ir(e.beta1,e.iterations_+1)),e.accBeta2.assign(Ir(e.beta2,e.iterations_+1))});const s=t.length/2;e.accumulatedFirstMoment=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const Zt=_({abs_:function wN(n){const t=N(n,"x","abs");return A.runKernel("complex64"===t.dtype?Nl:gl,{x:t})}});function Uo(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const o=e-1-r;(t[t.length-1-r]||1)>1&&1===(n[o]||1)&&s.unshift(o)}return s}function Yt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],o=t.length-s-1;(null==r||1===r&&t[o]>1)&&e.unshift(o)}return e}function Pe(n,t){const e=Math.max(n.length,t.length),s=new Array(e);for(let r=0;r<e;r++){let o=n[n.length-r-1];null==o&&(o=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===o)s[e-r-1]=a;else if(1===a)s[e-r-1]=o;else{if(o!==a)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);s[e-r-1]=o}}return s}const Xs=_({maximum_:function vN(n,t){let e=N(n,"a","maximum"),s=N(t,"b","maximum");return[e,s]=Ot(e,s),"bool"===e.dtype&&(e=ge(e,"int32"),s=ge(s,"int32")),Pe(e.shape,s.shape),A.runKernel(Ka,{a:e,b:s})}});class fy extends vr{static get className(){return"Adamax"}constructor(t,e,s,r=null,o=0){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],z(()=>{this.iteration=Ee(0).variable(),this.accBeta1=Ee(e).variable()}),null==r&&(this.epsilon=A.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);z(()=>{const s=we(1,this.accBeta1),r=ke(-this.learningRate,ne(D(this.iteration,this.decay),1));e.forEach((o,a)=>{const i=A.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:Ye(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${o}/v`,variable:Ye(i).variable(!1)});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedWeightedInfNorm[a].variable,d=ne(D(c,this.beta1),D(u,1-this.beta1)),p=D(h,this.beta2),f=Zt(u),g=Xs(p,f);c.assign(d),h.assign(g);const m=ne(D(ke(r,s),ke(d,ne(g,this.epsilon))),i);i.assign(m)}),this.iteration.assign(ne(this.iteration,1)),this.accBeta1.assign(D(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&He(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&He(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return(0,B.Z)(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return(0,B.Z)(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class ep extends vr{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=Array.isArray(t)?t[r].tensor:t[s];if(null==o)return;const a=A.registeredVariables[s];z(()=>{const i=ne(D(this.c,o),a);a.assign(i)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=on(Ee(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return(0,B.Z)(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return(0,B.Z)(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class my extends ep{static get className(){return"Momentum"}constructor(t,e,s=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=s,this.accumulations=[],this.m=Ee(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${s}/momentum`,variable:z(()=>Ye(o).variable(!1))});const a=this.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[s];null!=i&&z(()=>{let l;const u=ne(D(this.m,a),i);l=ne(D(this.c,this.useNesterov?ne(i,D(u,this.m)):u),o),a.assign(u),o.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&He(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return(0,B.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,B.Z)(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class gy extends vr{static get className(){return"RMSProp"}constructor(t,e=.9,s=0,r=null,o=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=s,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=A.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=A.registeredVariables[s],a=!1;null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${s}/rms`,variable:z(()=>Ye(o).variable(a))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${s}/momentum`,variable:z(()=>Ye(o).variable(a))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${s}/mg`,variable:z(()=>Ye(o).variable(a))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedMeanSquares[r].variable,u=this.accumulatedMoments[r].variable;z(()=>{const c=ne(D(l,this.decay),D(pt(i),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[r].variable,d=ne(D(h,this.decay),D(i,1-this.decay)),p=ke(D(i,this.learningRate),xn(we(c,ne(pt(d),this.epsilon)))),f=ne(D(u,this.momentum),p);l.assign(c),h.assign(d),u.assign(f);const g=we(o,f);o.assign(g)}else{const h=ne(D(l,this.decay),D(pt(i),1-this.decay)),d=ne(D(u,this.momentum),ke(D(i,this.learningRate),xn(ne(h,this.epsilon))));l.assign(h),u.assign(d);const p=we(o,d);o.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&He(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&He(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&He(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return(0,B.Z)(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,B.Z)(function*(){t=yield e.extractIterations(t);const s=e.centered?t.length/3:t.length/2,r=!1;e.accumulatedMeanSquares=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.accumulatedMoments=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*s,3*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const IN=[hy,dy,py,fy,my,gy,ep];function yy(n){return new Promise(t=>setTimeout(t)).then(n)}let tp=(()=>{class n{constructor(e){if(!M().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return(0,B.Z)(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const a=Qg(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),i=window.URL.createObjectURL(new Blob([JSON.stringify(a)],{type:"application/json"})),l=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(l.download=s.modelJsonFileName,l.href=i,yield yy(()=>l.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const u=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;u.download=s.weightDataFileName,u.href=r,yield yy(()=>u.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:wi(e)}}})()}}return n.URL_SCHEME="downloads://",n})();class TN{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}load(){var t=this;return(0,B.Z)(function*(){return new Promise((e,s)=>{const r=new FileReader;r.onload=o=>{const a=JSON.parse(o.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${t.jsonFile.name}`));if(null==a.weightsManifest)return void s(new Error(`weightManifest field is missing from file ${t.jsonFile.name}`));if(0===t.weightsFiles.length)return void e({modelTopology:i});const u=Vd(a,c=>t.loadWeights(c));e(u)},r.onerror=o=>s(`Failed to read model topology and weights manifest JSON from file '${t.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(t.jsonFile)})})()}loadWeights(t){const e=[],s=[];for(const a of t)e.push(...a.weights),s.push(...a.paths);const r=this.checkManifestAndWeightFiles(t),o=s.map(a=>this.loadWeightsFile(a,r[a]));return Promise.all(o).then(a=>[e,Tu(a)])}loadWeightsFile(t,e){return new Promise((s,r)=>{const o=new FileReader;o.onload=a=>{s(a.target.result)},o.onerror=a=>r(`Failed to weights data from file of path '${t}'.`),o.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){const e=[],s=this.weightsFiles.map(o=>Yg(o.name)),r={};for(const o of t)o.paths.forEach(a=>{const i=Yg(a);if(-1!==e.indexOf(i))throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);if(e.push(i),-1===s.indexOf(i))throw new Error(`Weight file with basename '${i}' is not provided.`);r[a]=this.weightsFiles[s.indexOf(i)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function EN(n){return new TN(n)}Tt.registerSaveRouter(n=>M().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(tp.URL_SCHEME)?function _N(n="model"){return new tp(n)}(n.slice(tp.URL_SCHEME.length)):null);class AN{constructor(t){if(this.shards=[],this.previousShardIndex=0,t instanceof Array||(t=[t]),0===(t=t.map(s=>os(s)?s.buffer:s)).length)return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let s=0;s<t.length;s++){const r=t[s];s!==t.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const o=e+r.byteLength;this.shards.push({buffer:r,start:e,end:o}),e=o}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const s=this.findShardForByte(t);if(-1===s)throw new Error(`Could not find start shard for byte ${t}`);const o=new ArrayBuffer(e-t),a=new Uint8Array(o);let i=0;for(let l=s;l<this.shards.length;l++){const u=this.shards[l],h=t+i-u.start,d=i,f=Math.min(e,u.end)-u.start,g=new Uint8Array(u.buffer.slice(h,f));if(a.set(g,d),i+=g.length,e<u.end)break}return o}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(r){return t<r.start?-1:t>=r.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const s=function RN(n,t){let e=0,s=n.length;for(;e<=s;){const r=Math.floor((s-e)/2)+e,o=t(n[r]);if(0===o)return r;o<0?s=r:e=r+1}return-1}(this.shards,e);return-1===s?-1:(this.previousShardIndex=s,this.previousShardIndex)}}function xy(n,t,e,s){(function a(l){S(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){S(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),S(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),S(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=e??0,s=s??1);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function by(n,t){return np.apply(this,arguments)}function np(){return(np=(0,B.Z)(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?M().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield xy(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield xy(i,t.onProgress,.5,1)})).apply(this,arguments)}function DN(n){return sp.apply(this,arguments)}function sp(){return(sp=(0,B.Z)(function*(n,t="",e,s){return wy(a=>by(a,{requestInit:s}))(n,t,e)})).apply(this,arguments)}function wy(n){return function(){var t=(0,B.Z)(function*(e,s="",r){const o=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],l=[];if(e.forEach((f,g)=>{let m=0;f.weights.forEach(y=>{const b=Pd["quantization"in y?y.quantization.dtype:y.dtype]*G(y.shape),v=()=>{o[g]=!0,null==a[g]&&(a[g]=[]),a[g].push({manifestEntry:y,groupOffset:m,sizeBytes:b})};null!=r?r.forEach((I,C)=>{I===y.name&&(v(),i[C]=!0)}):v(),l.push(y.name),m+=b})}),!i.every(f=>f)){const f=r.filter((g,m)=>!i[m]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. \nManifest JSON has weights with names: ${l.join(", ")}.`)}const u=o.reduce((f,g,m)=>(g&&f.push(m),f),[]),c=[];u.forEach(f=>{e[f].paths.forEach(g=>{const m=s+(s.endsWith("/")?"":"/")+g;c.push(m)})});const h=yield n(c),d={};let p=0;return u.forEach(f=>{const g=e[f].paths.length,m=new AN(h.slice(p,p+g));a[f].forEach(x=>{const v=Xg(m.slice(x.groupOffset,x.groupOffset+x.sizeBytes),[x.manifestEntry]);for(const I in v)d[I]=v[I]}),p+=g}),d});return function(e){return t.apply(this,arguments)}}()}let vy=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(S("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=M().platform.fetch,S(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&S(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return(0,B.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const a=Qg(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);r.body.append("model.json",new Blob([JSON.stringify(a)],{type:"application/json"}),"model.json"),null!=e.weightData&&r.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:wi(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}load(){var e=this;return(0,B.Z)(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return Vd(r,i=>e.loadWeights(i))})()}loadWeights(e){var s=this;return(0,B.Z)(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[o,a]=function LN(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||o,l=ey(e),u=[],c=[];for(const d of e)for(const p of d.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(i+p+a);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,Tu(yield by(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress}))]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function rp(n){return null!=n.match(vy.URL_SCHEME_REGEX)}const Iy=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>rp(s)):rp(n),e)return op(n,t)}return null};function op(n,t){return new vy(n,t)}function PN(n,t){return op(n,t)}Tt.registerSaveRouter(Iy),Tt.registerLoadRouter(Iy);class ap{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class Sy{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class zN{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function MN(n,t,e,s){return new zN(Ny(...arguments))}function Ny(n,t,e,s){return 1===arguments.length?null!=n.modelTopology||null!=n.weightSpecs?new ap(n):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ap({modelTopology:n})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ap({modelTopology:n,weightSpecs:t,weightData:e,trainingConfig:s}))}function BN(n){return new Sy(n)}function VN(n){return new Sy(n)}function ip(n,t,e){if($o(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=yr(n,e);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return br(n,t,s,e)}let to;function Cy(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,s=!1,r=!1,o=!1,a=!1,i=!1;if(n.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&n instanceof ImageData)s=!0;else if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)r=!0;else if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)o=!0;else if(null!=n.getContext)a=!0;else{if(!(typeof ImageBitmap<"u"&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);i=!0}if(null!=$d(kd,A.backendName))return A.runKernel(kd,{pixels:n},{numChannels:t});const[u,c]=r?[n.videoWidth,n.videoHeight]:[n.width,n.height];let h,d;if(a)h=n.getContext("2d").getImageData(0,0,u,c).data;else if(s||e)h=n.data;else if(o||r||i){if(null==to)if(typeof document>"u"){if(!(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u"))throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");to=new OffscreenCanvas(1,1).getContext("2d")}else to=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});to.canvas.width=u,to.canvas.height=c,to.drawImage(n,0,0,u,c),h=to.getImageData(0,0,u,c).data}if(4===t)d=new Int32Array(h);else{const f=u*c;d=new Int32Array(f*t);for(let g=0;g<f;g++)for(let m=0;m<t;++m)d[g*t+m]=h[4*g+m]}return ip(d,[c,u,t],"int32")}function jN(n){return lp.apply(this,arguments)}function lp(){return(lp=(0,B.Z)(function*(n,t=3){let e=null;if(M().getBool("WRAP_TO_IMAGEBITMAP")&&function HN(n){return function UN(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}()&&!(n instanceof ImageBitmap)&&function GN(n){return null!=n&&0!==n.width&&0!==n.height}(n)&&!function WN(n){return null!=n&&n.data instanceof Uint8Array}(n)}(n)){let s;try{s=yield createImageBitmap(n,{premultiplyAlpha:"none"})}catch{s=null}e=null!=s&&s.width===n.width&&s.height===n.height?s:n}else e=n;return Cy(e,t)})).apply(this,arguments)}function KN(n,t){return up.apply(this,arguments)}function up(){return(up=(0,B.Z)(function*(n,t){let e=N(n,"img","toPixels");if(!(n instanceof It)){const u=e;e=ge(u,"int32"),u.dispose()}if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const[s,r]=e.shape.slice(0,2),o=2===e.rank?1:e.shape[2];if(o>4||2===o)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${o}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);const a=yield e.data(),i="float32"===e.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let u=0;u<s*r;++u){const c=[0,0,0,255];for(let d=0;d<o;d++){const p=a[u*o+d];if("float32"===e.dtype){if(p<0||p>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`)}else if("int32"===e.dtype&&(p<0||p>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);1===o?(c[0]=p*i,c[1]=p*i,c[2]=p*i):c[d]=p*i}const h=4*u;l[h+0]=Math.round(c[0]),l[h+1]=Math.round(c[1]),l[h+2]=Math.round(c[2]),l[h+3]=Math.round(c[3])}if(null!=t){t.width=r,t.height=s;const u=t.getContext("2d"),c=new ImageData(l,r,s);u.putImageData(c,0,0)}return e!==n&&e.dispose(),l})).apply(this,arguments)}const qN=_({fromPixels_:Cy}),cp=-2,XN=-1;function hp(n,t,e){const s=n.shape.length;S(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),S(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)S(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function ZN(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function dp(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function ky(n,t,e,s){const r=[...n];for(let o=r.length;o<s.length;o++)r.push(1);for(let o=0;o<e;o++)0===o?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Ty(n,t,e){return e<=n?e:e-(t-1)}function $y(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function YN(n,t,e,s,r,o,a,i,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=_y(a,p,f,s,n),h=Ey(i,p,f,r,n),d=ky(o,p,f,n)}else for(let p=0;p<u;p++)c[p]=Ry(a,s,o,n,p,l),h[p]=Dy(i,r,o,n,p,l),d[p]=Ay(o,p,l);return{begin:c,end:h,strides:d}}function _y(n,t,e,s,r){const o=[...r],a=$y(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=0;else{const l=Ty(t,e,i);let u=s[l];n&1<<l&&(u=0),o[i]=u}return o}function Ey(n,t,e,s,r){const o=[...r],a=$y(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=Number.MAX_SAFE_INTEGER;else{const l=Ty(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),o[i]=u}for(let i=0;i<o.length;i++)o[i]<0&&(o[i]+=r[i]),o[i]=vt(0,o[i],r[i]);return o}function Ay(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function Ry(n,t,e,s,r,o){let a=t[r];(n&1<<r||o&1<<r||null==a)&&(a=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=vt(0,a,l-1),a}function Dy(n,t,e,s,r,o){let a=t[r];const i=e[r]||1;(n&1<<r||o&1<<r||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=i>0?vt(0,a,l):vt(-1,a,l-1),a}function pp(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function fp(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function Au(n,t,e){let s;const r=n.shape.length;let o;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(a=>{S(-1!==a,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,o=o.map((a,i)=>a>=0?a:(S(-1===a,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,o]}function mp(n,t,e,s,r,o,a,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=a&&a&a-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l};for(let b=0;b<h.dims;b++)c&&1<<b&i&&h.numAddAxisAfterEllipsis++,1<<b&a&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function QN(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<n.dims;s++)if(1<<s&n.ellipsisMask){const r=Math.min(t.dims-(n.dims-s)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<r;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=s}else if(1<<s&n.newAxisMask)t.finalShapeGatherIndices.push(cp),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[s]),null!=n.end&&(t.end[e]=n.end[s]),t.strides[e]=n.strides[s],n.beginMask&1<<s&&(t.beginMask|=1<<e),n.endMask&1<<s&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(XN),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[e]=s,e++}}(h,d);let p=!0,f=!0,g=!0;const m=[],y=[];for(let b=0;b<n.length;++b){if(0===d.strides[b])throw Error(`strides[${b}] must be non-zero`);const v=!!(d.shrinkAxisMask&1<<b),I=n[b];if(-1===I){m.push(v?1:-1);continue}const C=[d.beginMask&1<<b,d.endMask&1<<b],k=[d.strides[b]>0?0:-1,d.strides[b]>0?I:I-1];if(v&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[b];const T=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(v){const V=d.begin[b]<0?I+d.begin[b]:d.begin[b];if(d.begin[b]=V,d.end[b]=d.begin[b]+1,V<0||V>=I)throw Error(`slice index ${d.begin[b]} of dimension ${b} out of bounds.`)}else d.begin[b]=Fy(d.begin[b],0,d.strides[b],I,C,k),d.end[b]=Fy(d.end[b],1,d.strides[b],I,C,k);const L=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===I;p=p&&L,f=f&&(0===b&&1===d.strides[b]||L)}else p=p&&1===d.strides[b]&&T,f=f&&(0===b&&1===d.strides[b]||T);let E,R=!1;if(d.beginValid&&d.endValid?(E=d.end[b]-d.begin[b],R=!0):v?(E=1,R=!0):T&&I>=0&&(E=d.strides[b]<0?-I:I,R=!0),R){let L;L=0===E||E<0!=d.strides[b]<0?0:Math.trunc(E/d.strides[b])+(E%d.strides[b]!=0?1:0),m.push(L)}else m.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const v=d.finalShapeGatherIndices[b];v>=0?y.push(m[v]):v===cp&&y.push(1)}return{finalShapeSparse:y.filter((b,v)=>d.finalShapeGatherIndices[v]!==cp),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function Fy(n,t,e,s,r,o){if(r[t])return e>0?o[t]:o[t+1&1];{const a=n<0?s+n:n;return a<o[0]?o[0]:a>o[1]?o[1]:a}}const Oy=_({acos_:function eC(n){const e={x:N(n,"x","acos")};return A.runKernel(va,e)}}),Ly=_({acosh_:function tC(n){const e={x:N(n,"x","acosh")};return A.runKernel(Ia,e)}}),sC=_({addN_:function nC(n){S(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),S(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const t=n.map((r,o)=>N(r,`tensors${o}`,"addN")),e=t[0];return t.forEach(r=>{if(r.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(r=>{if(!Xe(r.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),A.runKernel(yl,t)}}),gp=_({all_:function rC(n,t=null,e=!1){const r={x:N(n,"x","all","bool")};return A.runKernel("All",r,{axis:t,keepDims:e})}}),Ru=_({any_:function oC(n,t=null,e=!1){const r={x:N(n,"x","any","bool")};return A.runKernel("Any",r,{axis:t,keepDims:e})}}),Go=_({argMax_:function aC(n,t=0){const s={x:N(n,"x","argMax")};return A.runKernel(xl,s,{axis:t})}}),Py=_({argMin_:function iC(n,t=0){const s={x:N(n,"x","argMin")};return A.runKernel(bl,s,{axis:t})}}),zy=_({asin_:function lC(n){const e={x:N(n,"x","asin")};return A.runKernel(Sa,e)}}),My=_({asinh_:function uC(n){const e={x:N(n,"x","asinh")};return A.runKernel(Na,e)}}),By=_({atan_:function cC(n){const e={x:N(n,"x","atan")};return A.runKernel(Ca,e)}}),Vy=_({atan2_:function hC(n,t){let e=N(n,"a","atan2"),s=N(t,"b","atan2");return[e,s]=Ot(e,s),A.runKernel(Ta,{a:e,b:s})}}),Wy=_({atanh_:function dC(n){const e={x:N(n,"x","atanh")};return A.runKernel(ka,e)}});function vi(n,t,e,s,r="NHWC",o){return an(n,[...t,n[3]],e,o,s,null,null,Ys(r))}function is(n,t,e,s,r,o,a="channelsLast"){const[i,l]=Ii(t);let u;if("channelsLast"===a)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);u=[i,l,n[1],n[1]]}return an(n,u,e,s,r,o,!1,a)}function Zs(n,t,e,s,r,o,a="NDHWC"){const[i,l,u]=xp(t);let c,h;if("NDHWC"===a)h="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==a)throw new Error(`Unknown dataFormat ${a}`);h="channelsFirst",c=[i,l,u,n[1],n[1]]}return Sr(n,c,e,s,r,!1,h,o)}function an(n,t,e,s,r,o,a=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=n}const[d,p,,f]=t,[g,m]=Ii(e),[y,x]=Ii(s),b=Ho(d,y),v=Ho(p,x),{padInfo:I,outHeight:C,outWidth:k}=function mC(n,t,e,s,r,o,a,i,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function pC(n,t,e,s,r){null==s&&(s=yp(n,t,e));const a=n[1];return[Si((n[0]-t+2*s)/e+1,r),Si((a-t+2*s)/e+1,r)]}([t,e],o,s,n,i);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+o-t),p=Math.max(0,(h-1)*r+a-e),f=Math.floor(d/2),g=d-f,m=Math.floor(p/2);u={top:f,bottom:g,left:m,right:p-m,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/s),h=Math.ceil((e-a+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],g="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=Si((t-o+d+p)/s+1,i),h=Si((e-a+f+g)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,b,v,o,i),T=a?f*h:f;let E;return"channelsFirst"===i?E=[l,T,C,k]:"channelsLast"===i&&(E=[l,C,k,T]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:C,outWidth:k,outChannels:T,padInfo:I,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:x,inShape:n,outShape:E,filterShape:t}}function Sr(n,t,e,s,r,o=!1,a="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h,d]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,d,u,c,h]=n}const[p,f,g,,m]=t,[y,x,b]=xp(e),[v,I,C]=xp(s),k=Ho(p,v),T=Ho(f,I),E=Ho(g,C),{padInfo:R,outDepth:L,outHeight:V,outWidth:U}=function gC(n,t,e,s,r,o,a,i,l,u,c){let h,d,p,f;if("valid"===n&&(n=0),"number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const m=function fC(n,t,e,s,r,o){null==r&&(r=yp(n,t[0],s[0]));const a=[0,0,0,e];for(let i=0;i<3;i++)n[i]+2*r>=t[i]&&(a[i]=Si((n[i]-t[i]+2*r)/s[i]+1,o));return a}([t,e,s,1],[i,l,u],1,[r,o,a],n,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{d=Math.ceil(t/r),p=Math.ceil(e/o),f=Math.ceil(s/a);const g=(d-1)*r+i-t,m=(p-1)*o+l-e,y=(f-1)*a+u-s,x=Math.floor(g/2),b=g-x,v=Math.floor(m/2),I=m-v,C=Math.floor(y/2);h={top:v,bottom:I,left:C,right:y-C,front:x,back:b,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,x,b,k,T,E,i),H=o?m*d:m;let j;return"channelsFirst"===a?j=[l,H,L,V,U]:"channelsLast"===a&&(j=[l,L,V,U,H]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:L,outHeight:V,outWidth:U,outChannels:H,padInfo:R,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:k,effectiveFilterHeight:T,effectiveFilterWidth:E,dilationDepth:v,dilationHeight:I,dilationWidth:C,inShape:n,outShape:j,filterShape:t}}function yp(n,t,e,s=1){const r=Ho(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function Ii(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function xp(n){return"number"==typeof n?[n,n,n]:n}function Ho(n,t){return t<=1?n:n+(n-1)*(t-1)}function Si(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function Nr(n){const[t,e,s]=Ii(n);return 1===t&&1===e&&1===s}function hn(n,t){return Nr(n)||Nr(t)}function no(n){return Ii(n).every(t=>t>0)}function Ys(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function Sn(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)S(_o(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(s=>{s.forEach(r=>{S(_o(r),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`)})})}}}const F=_({reshape_:function yC(n,t){const s={x:N(n,"x","reshape","string_or_numeric")};return A.runKernel(ru,s,{shape:t})}}),Du=_({avgPool_:function xC(n,t,e,s,r){const o=N(n,"x","avgPool","float32");S(hn(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),S(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),Sn("avgPool",s,r);let h=A.runKernel(wl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=ge(h,o.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Uy=_({avgPool3d_:function bC(n,t,e,s,r,o="NDHWC"){const a=N(n,"x","avgPool3d","float32");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),S(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),S("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),S("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),Sn("avgPool3d",s,r);let h=A.runKernel(vl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return h=ge(h,i.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Kt=_({concat_:function wC(n,t=0){S(n.length>=1,()=>"Pass at least one tensor to concat");const e=Cu(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?Ks(e[0]):A.runKernel(Cl,e,{axis:t})}}),je=_({matMul_:function vC(n,t,e=!1,s=!1){let r=N(n,"a","matMul"),o=N(t,"b","matMul");return[r,o]=Ot(r,o),A.runKernel(Il,{a:r,b:o},{transposeA:e,transposeB:s})}}),Rs=_({sigmoid_:function IC(n){const e={x:N(n,"x","sigmoid","float32")};return A.runKernel(ii,e)}}),Qe=_({slice_:function SC(n,t,e){const s=N(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return A.runKernel(uu,{x:s},{begin:t,size:e})}}),jo=_({tanh_:function NC(n){const e={x:N(n,"x","tanh","float32")};return A.runKernel(pi,e)}}),kC=_({basicLSTMCell_:function CC(n,t,e,s,r,o){const a=N(n,"forgetBias","basicLSTMCell"),i=N(t,"lstmKernel","basicLSTMCell"),l=N(e,"lstmBias","basicLSTMCell"),u=N(s,"data","basicLSTMCell"),c=N(r,"c","basicLSTMCell"),h=N(o,"h","basicLSTMCell"),d=Kt([u,h],1),p=je(d,i),f=ne(p,l),m=f.shape[1]/4,y=[f.shape[0],m],x=Qe(f,[0,0],y),b=Qe(f,[0,m],y),v=Qe(f,[0,2*m],y),I=Qe(f,[0,3*m],y),C=ne(D(Rs(x),jo(b)),D(c,Rs(ne(a,v))));return[C,D(jo(C),Rs(I))]}}),Fu=_({batchToSpaceND_:function TC(n,t,e){const s=N(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return S(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),S(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),S(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),A.runKernel(Sl,{x:s},{blockShape:t,crops:e})}});function $C(n){let t;return t=0===n.rank||1===n.rank?F(n,[1,1,1,n.size]):2===n.rank?F(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?F(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const Ni=_({batchNorm_:function _C(n,t,e,s,r,o){null==o&&(o=.001);const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),S(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:$C(a),scale:u,offset:c,mean:i,variance:l},f=A.runKernel(Fl,d,{varianceEpsilon:o});return F(f,a.shape)}}),Gy=_({batchNorm2d_:function EC(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),S(2===a.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),S(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),S(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&S(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&S(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ni(a,i,l,c,u,o)}}),Hy=_({batchNorm3d_:function AC(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),S(3===a.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),S(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),S(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&S(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&S(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ni(a,i,l,c,u,o)}}),jy=_({batchNorm4d_:function RC(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),S(4===a.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),S(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),S(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&S(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&S(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ni(a,i,l,c,u,o)}}),Ky=_({bincount_:function DC(n,t,e){const s=N(n,"x","bincount"),r=N(t,"weights","bincount");return S("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),S(e>=0,()=>`size must be non-negative, but got ${e}.`),S(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),A.runKernel(Nh,{x:s,weights:r},{size:e})}}),OC=_({bitwiseAnd_:function FC(n,t){const e=N(n,"x","bitwiseAnd"),s=N(t,"y","bitwiseAnd");if(!Xe(e.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${s.shape}`);if("int32"!==e.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${s.dtype}`);return A.runKernel(Ch,{a:e,b:s})}}),PC=_({broadcastArgs_:function LC(n,t){const e=N(n,"s0","broadcastArgs","int32"),s=N(t,"s1","broadcastArgs","int32");if(1!==e.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);return A.runKernel(kh,{s0:e,s1:s})}}),Ko=_({broadcastTo_:function zC(n,t){let e=N(n,"broadcastTo","x");const s=e.shape;if(Hn(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}const r=e.shape,o=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])o[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===o.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?Ks(e):A.runKernel(fi,{x:e},{reps:o})}}),qy=_({ceil_:function MC(n){const e={x:N(n,"x","ceil","float32")};return A.runKernel(_a,e)}}),Ln=_({clipByValue_:function BC(n,t,e){const s=N(n,"x","clipByValue");return S(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?Wo(s.shape,t,s.dtype):A.runKernel(Ea,{x:s},{clipValueMin:t,clipValueMax:e})}}),Xy=_({concat1d_:function VC(n){return Kt(n,0)}}),Zy=_({concat2d_:function WC(n,t){return Kt(n,t)}}),Yy=_({concat3d_:function UC(n,t){return Kt(n,t)}}),Qy=_({concat4d_:function GC(n,t){return Kt(n,t)}}),Cr=_({conv2d_:function HC(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","conv2d","float32"),l=N(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),S(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),Sn("conv2d",s,a);const h="NHWC"===r?u.shape[3]:u.shape[1];S(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),S(hn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),S(no(o),()=>"Error in conv2D: Dilated rates should be larger than 0."),S(no(e),()=>"Error in conv2D: Strides should be larger than 0.");const f=A.runKernel(kl,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),bp=_({conv1d_:function jC(n,t,e,s,r="NWC",o=1,a){const i=N(n,"x","conv1d"),l=N(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1]])),S(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),S(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),Sn("conv1d",s,a),S(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),S(hn(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),S(no(o),()=>"Error in conv1D: Dilated rates should be larger than 0."),S(no(e),()=>"Error in conv1D: Stride should be larger than 0."),S("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),m=Cr(d,h,[1,e],s,"NHWC",[1,o],a);return F(m,c?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),wp=_({conv2DBackpropInput_:function KC(n,t,e,s,r,o="NHWC",a){S(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),S(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),S(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),S(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?i[3]:i[1],h="NHWC"===o?l.shape[3]:l.shape[1];S(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),S(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),Sn("conv2dDerInput",r,a);const f=A.runKernel(Tl,{dy:l,filter:e},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,inputShape:i});return u?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),vp=_({conv2dTranspose_:function qC(n,t,e,s,r,o){const a=N(n,"x","conv2dTranspose"),i=N(t,"filter","conv2dTranspose");return wp(e,a,i,s,r,"NHWC",o)}}),Jy=_({conv3d_:function XC(n,t,e,s,r="NDHWC",o=[1,1,1]){const a=N(n,"x","conv3d"),i=N(t,"filter","conv3d");let l=a,u=!1;4===a.rank&&(u=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),S(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),S(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),S(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),S(hn(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),S("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),S(no(o),()=>"Error in conv3D: Dilated rates should be larger than 0."),S(no(e),()=>"Error in conv3D: Strides should be larger than 0.");const d=A.runKernel($l,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:o});return u?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ex=_({conv3DBackpropInput_:function ZC(n,t,e,s,r){S(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,a=t,i=!1;4===t.rank&&(i=!0,a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const l=o[4],u=a.shape[4];S(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),S(5===a.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),S(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),S(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),S(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=A.runKernel(Eh,{dy:a,filter:e},{pad:r,strides:s,inputShape:o});return i?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),tx=_({conv3dTranspose_:function YC(n,t,e,s,r){const o=N(n,"x","conv3dTranspose"),a=N(t,"filter","conv3dTranspose");return ex(e,o,a,s,r)}}),Ou=_({cos_:function QC(n){const e={x:N(n,"x","cos","float32")};return A.runKernel(Aa,e)}}),Ip=_({cosh_:function JC(n){const e={x:N(n,"x","cosh","float32")};return A.runKernel(Ra,e)}}),Lu=_({cumprod_:function ek(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumprod")};return A.runKernel(Ah,o,{axis:t,exclusive:e,reverse:s})}}),Sp=_({cumsum_:function tk(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumsum")};return A.runKernel(_l,o,{axis:t,exclusive:e,reverse:s})}}),Np=_({denseBincount_:function nk(n,t,e,s=!1){const r=N(n,"x","denseBincount"),o=N(t,"weights","denseBincount");return S("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),S(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),S(e>=0,()=>`size must be non-negative, but got ${e}.`),S(o.size===r.size||0===o.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`),A.runKernel(Dh,{x:r,weights:o},{size:e,binaryOutput:s})}}),nx=_({depthToSpace_:function sk(n,t,e="NHWC"){const s=N(n,"x","depthToSpace","float32"),r="NHWC"===e?s.shape[1]:s.shape[2],o="NHWC"===e?s.shape[2]:s.shape[3],a="NHWC"===e?s.shape[3]:s.shape[1];return S(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),S(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),S(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${s.shape}`),S(a%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${s.shape}`),A.runKernel(Fh,{x:s},{blockSize:t,dataFormat:e})}}),Ci=_({depthwiseConv2d_:function rk(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","depthwiseConv2d","float32"),l=N(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),S(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];S(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),Sn("depthwiseConv2d",s,a);const f=A.runKernel(El,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ak=_({diag_:function ok(n){const e={x:N(n,"x","diag")};return A.runKernel(Ph,e)}}),sx=_({dilation2d_:function ik(n,t,e,s,r=[1,1],o="NHWC"){const a=N(n,"x","dilation2d"),i=N(t,"filter","dilation2d");S(3===a.rank||4===a.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),S(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),S("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let l=a,u=!1;3===a.rank&&(l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0),S(l.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`);const d=A.runKernel(Al,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),ws=_({equal_:function lk(n,t){let e=N(n,"a","equal","string_or_numeric"),s=N(t,"b","equal","string_or_numeric");return[e,s]=Ot(e,s),Pe(e.shape,s.shape),A.runKernel(Rl,{a:e,b:s})}}),bn=_({where_:function uk(n,t,e){const s=N(t,"a","where"),r=N(e,"b","where"),o=N(n,"condition","where","bool"),a=Pe(Pe(o.shape,s.shape),r.shape),i=Ko(o,a),l=Ko(s,a),u=Ko(r,a);return A.runKernel(lu,{condition:i,t:l,e:u})}}),rx=_({divNoNan_:function ck(n,t){let e=N(n,"a","div"),s=N(t,"b","div");[e,s]=Ot(e,s);const r=ke(e,s),o=Ye(r),a=ws(s,o);return bn(a,o,r)}}),ox=_({dot_:function hk(n,t){const e=N(n,"t1","dot"),s=N(t,"t2","dot");S(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],o=1===s.rank?s.size:s.shape[0];if(S(r===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`),1===e.rank&&1===s.rank){const a=F(e,[1,-1]),i=F(s,[-1,1]),l=je(a,i);return F(l,[])}if(1===e.rank&&2===s.rank){const a=F(e,[1,-1]),i=F(s,[s.shape[0],s.shape[1]]),l=je(a,i);return F(l,[l.size])}if(2===e.rank&&1===s.rank){const a=F(s,[-1,1]),i=je(e,a);return F(i,[i.size])}{const a=F(s,[s.shape[0],s.shape[1]]);return je(e,a)}}}),pk=_({einsum_:function dk(n,...t){const e=t.map((r,o)=>N(r,`tensors${o}`,"einsum"));return A.runKernel(Bh,e,{equation:n})}}),ki=_({elu_:function fk(n){const e={x:N(n,"x","elu","float32")};return A.runKernel(Fa,e)}}),gk=_({ensureShape_:function mk(n,t){const e=N(n,"x","ensureShape","string_or_numeric");if(!function jI(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(null!==n[e]&&null!==t[e]&&n[e]!==t[e])return!1;return!0}(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return n}}),ax=_({erf_:function yk(n){let t=N(n,"x","erf");return S("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=ge(t,"float32")),A.runKernel(Oa,{x:t})}});function Cp(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function ix(n,t,e){const s=n.length+t.length,r=[];let o=0,a=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[o++]):r.push(t[a++]);return r}function ln(n,t){const e=[],s=n.length;for(let o=0;o<s;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function Vt(n,t){return ix(n,t.map(s=>1),t)}function dn(n,t,e){S(Cp(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function $t(n,t){if(Cp(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function kr(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Wt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const ls=_({max_:function xk(n,t=null,e=!1){const r={x:N(n,"x","max")};return A.runKernel(Gl,r,{reductionIndices:t,keepDims:e})}}),Ti=_({min_:function bk(n,t=null,e=!1){const r={x:N(n,"x","min")};return A.runKernel(ql,r,{axis:t,keepDims:e})}}),ve=_({sum_:function wk(n,t=null,e=!1){let s=N(n,"x","sum");return"bool"===s.dtype&&(s=ge(s,"int32")),A.runKernel(cu,{x:s},{axis:t,keepDims:e})}});function lx(n,t,e=null){if(0===n.rank)return Zt(n);if(1!==n.rank&&null===e)return lx(F(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return ve(Zt(n),e);if(t===1/0)return ls(Zt(n),e);if(t===-1/0)return Ti(Zt(n),e);if("euclidean"===t||2===t)return xn(ve(Ir(Zt(n),Ee(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return ls(ve(Zt(n),e[0]),e[1]-1);if(t===1/0)return ls(ve(Zt(n),e[1]),e[0]);if(t===-1/0)return Ti(ve(Zt(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return xn(ve(pt(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const $i=_({norm_:function vk(n,t="euclidean",e=null,s=!1){const r=lx(n=N(n,"x","norm"),t,e);let o=r.shape;if(s){const a=Ge(e,n.shape);o=Vt(r.shape,a)}return F(r,o)}}),ux=_({euclideanNorm_:function Ik(n,t=null,e=!1){return $i(n,"euclidean",t,e)}}),Kn=_({exp_:function Sk(n){const e={x:N(n,"x","exp")};return A.runKernel(La,e)}}),_n=_({expandDims_:function Nk(n,t=0){const e=N(n,"x","expandDims","string_or_numeric");return S(t<=e.rank,()=>"Axis must be <= rank of the tensor"),A.runKernel(Dl,{input:e},{dim:t})}}),cx=_({expm1_:function Ck(n){const e={x:N(n,"x","expm1")};return A.runKernel(Pa,e)}}),us=_({tile_:function kk(n,t){const e=N(n,"x","tile","string_or_numeric");return S(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),A.runKernel(fi,{x:e},{reps:t})}}),kp=_({eye_:function Tk(n,t,e,s="float32"){null==t&&(t=n);const r=Be([n,t],s),o=n<=t?n:t;for(let i=0;i<o;++i)r.set(1,i,i);const a=F(r.toTensor(),[n,t]);if(null==e)return a;if(1===e.length)return us(_n(a,0),[e[0],1,1]);if(2===e.length)return us(_n(_n(a,0),0),[e[0],e[1],1,1]);if(3===e.length)return us(_n(_n(_n(a,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),_i=_({floor_:function $k(n){const e={x:N(n,"x","floor","float32")};return A.runKernel(za,e)}}),Ei=_({gather_:function _k(n,t,e=0,s=0){const r=N(n,"x","gather"),o=N(t,"indices","gather","int32");return A.runKernel(Ol,{x:r,indices:o},{axis:e,batchDims:s})}}),Pn=_({greater_:function Ek(n,t){let e=N(n,"a","greater","string_or_numeric"),s=N(t,"b","greater","string_or_numeric");return[e,s]=Ot(e,s),Pe(e.shape,s.shape),A.runKernel(Ll,{a:e,b:s})}}),Tr=_({greaterEqual_:function Ak(n,t){let e=N(n,"a","greaterEqual","string_or_numeric"),s=N(t,"b","greaterEqual","string_or_numeric");return[e,s]=Ot(e,s),Pe(e.shape,s.shape),A.runKernel(Ba,{a:e,b:s})}}),Pu=_({imag_:function Rk(n){const e={input:N(n,"input","imag")};return A.runKernel(Kh,e)}}),hx=_({isFinite_:function Dk(n){const e={x:N(n,"x","isFinite")};return A.runKernel(Wa,e)}}),dx=_({isInf_:function Fk(n){const e={x:N(n,"x","isInf")};return A.runKernel(Ua,e)}}),px=_({isNaN_:function Ok(n){const e={x:N(n,"x","isNaN")};return A.runKernel(Ga,e)}}),zu=_({leakyRelu_:function Lk(n,t=.2){const s={x:N(n,"x","leakyRelu")};return A.runKernel(Pl,s,{alpha:t})}}),Ai=_({less_:function Pk(n,t){let e=N(n,"a","less","string_or_numeric"),s=N(t,"b","less","string_or_numeric");return[e,s]=Ot(e,s),Pe(e.shape,s.shape),A.runKernel(zl,{a:e,b:s})}}),so=_({lessEqual_:function zk(n,t){let e=N(n,"a","lessEqual","string_or_numeric"),s=N(t,"b","lessEqual","string_or_numeric");return[e,s]=Ot(e,s),Pe(e.shape,s.shape),A.runKernel(Ml,{a:e,b:s})}});function Mk(n,t,e){if(e<=0)throw new Error("The number of values should be positive.");return A.runKernel(qh,{},{start:n,stop:t,num:e})}const fx=_({localResponseNormalization_:function Bk(n,t=5,e=1,s=1,r=.5){const o=N(n,"x","localResponseNormalization");S(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),S(_o(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=o,i=!1;3===o.rank&&(i=!0,a=F(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=A.runKernel(Ul,{x:a},{depthRadius:t,bias:e,alpha:s,beta:r});return i?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),qn=_({log_:function Vk(n){const e={x:N(n,"x","log","float32")};return A.runKernel(Ha,e)}}),Mu=_({log1p_:function Wk(n){const e={x:N(n,"x","log1p")};return A.runKernel(ja,e)}}),St=_({neg_:function Uk(n){const e={x:N(n,"x","neg")};return A.runKernel(Zl,e)}}),qo=_({softplus_:function Gk(n){const e={x:N(n,"x","softplus")};return A.runKernel(li,e)}}),mx=_({logSigmoid_:function Hk(n){const t=N(n,"x","logSigmoid");return qs(s=>({value:St(qo(St(s))),gradFunc:a=>D(a,Rs(St(s)))}))(t)}}),Tp=_({logSoftmax_:function jk(n,t=-1){const e=N(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return qs((r,o)=>{const i=ls(r,t,!0),l=we(r,i),u=we(ge(l,"float32"),qn(ve(Kn(l),t,!0)));return o([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,g=Kn(p);return we(h,D(ve(h,t,!0),g))}}})(e)}}),$p=_({logSumExp_:function Kk(n,t=null,e=!1){const s=N(n,"x","logSumExp"),r=Ge(t,s.shape),o=ls(s,r,!0),a=we(s,o),i=Kn(a),l=ve(i,r),u=qn(l),c=ne(F(o,u.shape),u);if(e){const h=Vt(c.shape,r);return F(c,h)}return c}}),Ds=_({logicalAnd_:function qk(n,t){const e=N(n,"a","logicalAnd","bool"),s=N(t,"b","logicalAnd","bool");return Pe(e.shape,s.shape),A.runKernel(Bl,{a:e,b:s})}}),Bu=_({logicalNot_:function Xk(n){const e={x:N(n,"x","logicalNot","bool")};return A.runKernel(Vl,e)}}),_p=_({logicalOr_:function Zk(n,t){const e=N(n,"a","logicalOr","bool"),s=N(t,"b","logicalOr","bool");return Pe(e.shape,s.shape),A.runKernel(Wl,{a:e,b:s})}}),gx=_({logicalXor_:function Yk(n,t){const e=N(n,"a","logicalXor","bool"),s=N(t,"b","logicalXor","bool");return Pe(e.shape,s.shape),Ds(_p(n,t),Bu(Ds(n,t)))}}),Vu=2147483648,Ep=_({searchSorted_:function Qk(n,t,e="left"){const s=N(n,"sortedSequence","searchSorted"),r=N(t,"values","searchSorted"),a=r.shape[r.shape.length-1],i=F(s,[-1,s.shape[s.shape.length-1]]),l=F(r,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(G(l.shape)>=Vu)throw new Error(`values tensor size must less than ${Vu}`);if(i.shape[1]>=Vu)throw new Error(`trailing dim_size must less than ${Vu} for int32 output type, was ${i.shape[1]}`);return A.runKernel(dd,{sortedSequence:i,values:l},{side:e})}});function Jk(n,t){return Ep(n,t,"left")}const Wu=_({maxPool_:function eT(n,t,e,s,r){const o=N(n,"x","maxPool");let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),S(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),S(hn(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),Sn("maxPool",s,r);const h=A.runKernel(Hl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),yx=_({maxPool3d_:function tT(n,t=[1,1,1],e,s,r,o="NDHWC"){const a=N(n,"x","maxPool3d");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),S(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),S("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),Sn("maxPool3d",s,r);const h=A.runKernel(jl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),sT=_({maxPoolWithArgmax_:function nT(n,t,e,s,r=!1){const a={x:N(n,"x","maxPoolWithArgmax")},l=A.runKernel(Qh,a,{filterSize:t,strides:e,pad:s,includeBatchInIndex:r});return{result:l[0],indexes:l[1]}}}),Lt=_({mean_:function rT(n,t=null,e=!1){const r={x:N(n,"x","mean")};return A.runKernel(Kl,r,{axis:t,keepDims:e})}});function Qt(n,t="float32"){if(Hn(n),"complex64"===t){const s=Qt(n,"float32"),r=Qt(n,"float32");return xr(s,r)}const e=yn(G(n),t);return A.makeTensor(e,n,t)}function Xn(n,t="float32"){if(Hn(n),"complex64"===t){const s=Xn(n,"float32"),r=Qt(n,"float32");return xr(s,r)}const e=yh(G(n),t);return A.makeTensor(e,n,t)}function oT(n,t,{indexing:e="xy"}={}){if("xy"!==e&&"ij"!==e)throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(void 0===n)return[];let s=N(n,"x","meshgrid",n instanceof It?n.dtype:"float32");if(void 0===t)return[s];let r=N(t,"y","meshgrid",t instanceof It?t.dtype:"float32");const o=G(s.shape),a=G(r.shape);return"xy"===e?(s=F(s,[1,-1]),r=F(r,[-1,1]),[je(Xn([a,1],s.dtype),s),je(r,Xn([1,o],r.dtype))]):(s=F(s,[-1,1]),r=F(r,[1,-1]),[je(s,Xn([1,a],s.dtype)),je(Xn([o,1],r.dtype),r)])}const ro=_({minimum_:function aT(n,t){let e=N(n,"a","minimum"),s=N(t,"b","minimum");return[e,s]=Ot(e,s),"bool"===e.dtype&&(e=ge(e,"int32"),s=ge(s,"int32")),Pe(e.shape,s.shape),A.runKernel(qa,{a:e,b:s})}}),xx=_({mirrorPad_:function iT(n,t,e){S("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=N(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");S(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)S(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),S(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return A.runKernel(Xl,{x:s},{paddings:t,mode:e})}}),bx=_({mod_:function lT(n,t){let e=N(n,"a","mod"),s=N(t,"b","mod");return[e,s]=Ot(e,s),A.runKernel(Xa,{a:e,b:s})}}),Uu=_({moments_:function uT(n,t=null,e=!1){const s=Ge(t,(n=N(n,"x","moments")).shape),r=Lt(n,s,e);let o=r.shape;e||(o=Vt(r.shape,s));const a=pt(we(ge(n,"float32"),F(r,o)));return{mean:r,variance:Lt(a,s,e)}}}),hT=_({multiRNNCell_:function cT(n,t,e,s){const r=N(t,"data","multiRNNCell"),o=Cu(e,"c","multiRNNCell"),a=Cu(s,"h","multiRNNCell");let i=r;const l=[];for(let h=0;h<n.length;h++){const d=n[h](i,o[h],a[h]);l.push(d[0]),l.push(d[1]),i=d[1]}const u=[],c=[];for(let h=0;h<l.length;h+=2)u.push(l[h]),c.push(l[h+1]);return[u,c]}}),pT=_({multinomial_:function dT(n,t,e,s=!1){const r=N(n,"logits","multinomial"),o=r.size,a=r.rank;if(o<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);e=e||Math.random();const l={logits:1===a?F(r,[1,-1]):r},c=A.runKernel(Jh,l,{numSamples:t,seed:e,normalized:s});return 1===a?F(c,[c.size]):c}}),Xo=_({notEqual_:function fT(n,t){let e=N(n,"a","notEqual","string_or_numeric"),s=N(t,"b","notEqual","string_or_numeric");return[e,s]=Ot(e,s),Pe(e.shape,s.shape),A.runKernel(Yl,{a:e,b:s})}}),Ap=_({oneHot_:function mT(n,t,e=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:N(n,"indices","oneHot","int32")};return A.runKernel(Jl,a,{dtype:r,depth:t,onValue:e,offValue:s})}}),Zn=_({onesLike_:function gT(n){const e={x:N(n,"x","onesLike")};return A.runKernel(Ql,e)}}),xT=_({outerProduct_:function yT(n,t){const e=N(n,"v1","outerProduct"),s=N(t,"v2","outerProduct");S(1===e.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`);const r=F(e,[-1,1]),o=F(s,[1,-1]);return je(r,o)}}),$r=_({pad_:function bT(n,t,e=0){const s=N(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return A.runKernel(tu,{x:s},{paddings:t,constantValue:e})}}),vT=_({pad1d_:function wT(n,t,e=0){return S(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),$r(n,[t],e)}}),ST=_({pad2d_:function IT(n,t,e=0){return S(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),$r(n,t,e)}}),CT=_({pad3d_:function NT(n,t,e=0){return S(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),$r(n,t,e)}}),TT=_({pad4d_:function kT(n,t,e=0){return S(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),$r(n,t,e)}}),Gu=_({spaceToBatchND_:function $T(n,t,e){const s=N(n,"x","spaceToBatchND");return S(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),S(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),S(s.shape.reduce((a,i,l)=>l>0&&l<=t.length?a&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:a,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),A.runKernel(hu,{x:s},{blockShape:t,paddings:e})}}),wx=_({pool_:function _T(n,t,e,s,r,o,a){null==r&&(r=[1,1]),null==o&&(o=1),0===s&&(s="valid");const i=N(n,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(hn(o,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);const c=is(l.shape,t,o,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function AT(n,t){const s=n.map((a,i)=>a+(a-1)*(t[i]-1)).map(a=>a-1),r=s.map(a=>Math.floor(a/2)),o=s.map((a,i)=>a-r[i]);return s.map((a,i)=>[r[i],o[i]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function ET(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),o=n.concat(s,r),a=t.map((c,h)=>(c-o[h]%c)%c),i=r.map((c,h)=>c+a[h]),l=t.map((c,h)=>[s[h],i[h]]),u=t.map((c,h)=>[0,a[h]]);return[l,u]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",y=p?l:Gu(l,h,f),b=("avg"===e?()=>Du(y,t,o,m,a):()=>Wu(y,t,o,m,a))(),v=p?b:Fu(b,h,g);return u?F(v,[v.shape[1],v.shape[2],v.shape[3]]):v}}),Hu=_({prelu_:function RT(n,t){const e=N(n,"x","prelu"),s=N(t,"alpha","prelu");return A.runKernel(nu,{x:e,alpha:s})}}),vx=_({prod_:function DT(n,t=null,e=!1){let s=N(n,"x","prod");return"bool"===s.dtype&&(s=ge(s,"int32")),A.runKernel(su,{x:s},{axis:t,keepDims:e})}}),OT=_({raggedGather_:function FT(n,t,e,s){const r=n.map((c,h)=>N(c,`tensors${h}`,"raggedGather","int32")),o=N(t,"paramsDenseValues","raggedGather"),a=N(e,"indices","raggedGather","int32"),u=A.runKernel(sd,{paramsNestedSplits:r,paramsDenseValues:o,indices:a},{outputRaggedRank:s});return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}}),PT=_({raggedRange_:function LT(n,t,e){const s=N(n,"starts","raggedRange"),r=N(t,"limits","raggedRange",s.dtype),o=N(e,"deltas","raggedRange",s.dtype),i=A.runKernel(rd,{starts:s,limits:r,deltas:o});return{rtNestedSplits:i[0],rtDenseValues:i[1]}}}),MT=_({raggedTensorToTensor_:function zT(n,t,e,s,r){const o=N(n,"shape","raggedTensorToTensor","int32"),a=N(t,"values","raggedTensorToTensor"),i=N(e,"defaultValue","raggedTensorToTensor",a.dtype),l=s.map((h,d)=>N(h,`tensors${d}`,"raggedTensorToTensor","int32"));return A.runKernel(od,{shape:o,values:a,defaultValue:i,rowPartitionTensors:l},{rowPartitionTypes:r})}}),VT=_({rand_:function BT(n,t,e){Hn(n);const s=G(n);let r=null;if(null==e||"float32"===e)r=new Float32Array(s);else if("int32"===e)r=new Int32Array(s);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);r=new Uint8Array(s)}for(let o=0;o<s;o++)r[o]=t();return A.makeTensor(r,n,e)}});var ju=W(4901);class Rp{constructor(t,e,s,r,o){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=o||Math.random();this.random=ju.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,o,a;do{r=2*this.random()-1,o=2*this.random()-1,a=r*r+o*o}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*o*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class WT{constructor(t,e,s,r){this.alpha=t,this.beta=1/e,this.dtype=s;const o=r||Math.random();this.randu=ju.alea(o.toString()),this.randn=new Rp(0,1,s,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,s,r,o,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,s=.5*t+this.d*(1-a+Math.log(a)),o=this.randu(),o<e||Math.log(o)<s)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class UT{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=ju.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const qT=_({randomGamma_:function KT(n,t,e=1,s="float32",r){if(Hn(n),null==e&&(e=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const o=new WT(t,e,s,r),a=Be(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),Fp=_({randomNormal_:function XT(n,t=0,e=1,s,r){if(Hn(n),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const o=new Rp(t,e,s,!1,r),a=Be(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),YT=_({randomStandardNormal_:function ZT(n,t,e){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Fp(n,0,1,t,e)}}),oo=_({randomUniform_:function QT(n,t=0,e=1,s="float32",r){Hn(n);const o=Be(n,s),a=new UT(t,e,null,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),e$=_({randomUniformInt_:function JT(n,t,e,s){return oo(n,t,e,"int32",s)}});function Zo(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return A.runKernel(ad,{},{start:n,stop:t,step:e,dtype:s})}const Ri=_({real_:function t$(n){const e={input:N(n,"input","real")};return A.runKernel(id,e)}}),Ix=_({reciprocal_:function n$(n){const e={x:N(n,"x","reciprocal")};return A.runKernel(Qa,e)}}),Fs=_({relu_:function s$(n){const e={x:N(n,"x","relu")};return A.runKernel(Ja,e)}}),Op=_({relu6_:function r$(n){const e={x:N(n,"x","relu6")};return A.runKernel(ei,e)}}),cs=_({reverse_:function o$(n,t){const s={x:N(n,"x","reverse")};return A.runKernel(iu,s,{dims:t})}}),i$=_({reverse1d_:function a$(n){const t=N(n,"x","reverse");return S(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),cs(t,0)}}),u$=_({reverse2d_:function l$(n,t){const e=N(n,"x","reverse");return S(2===e.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),cs(e,t)}}),h$=_({reverse3d_:function c$(n,t){const e=N(n,"x","reverse");return S(3===e.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),cs(e,t)}}),p$=_({reverse4d_:function d$(n,t){const e=N(n,"x","reverse");return S(4===e.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),cs(e,t)}}),Lp=_({round_:function f$(n){const e={x:N(n,"x","round")};return A.runKernel(ti,e)}}),Pp=_({rsqrt_:function m$(n){const e={x:N(n,"x","rsqrt","float32")};return A.runKernel(ni,e)}}),zp=_({selu_:function g$(n){const e={x:N(n,"x","selu")};return A.runKernel(si,e)}}),Mp=_({separableConv2d_:function y$(n,t,e,s,r,o=[1,1],a="NHWC"){const i=N(n,"x","separableConv2d"),l=N(t,"depthwiseFilter","separableConv2d"),u=N(e,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");S(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),S(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),S(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),S(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),S(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];S(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=Ci(c,l,s,r,a,o),m=Cr(f,u,1,"valid",a);return h?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});function Bp(){return(Bp=(0,B.Z)(function*(n,t){const e=N(n,"x","setdiff1d"),s=N(t,"y","setdiff1d");S(e.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`),S(1===e.rank,()=>`x should be 1D tensor, but got x (${e.shape}).`),S(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=yield e.data(),o=yield s.data(),a=new Set(o);let i=0;for(let c=0;c<r.length;c++)a.has(r[c])||i++;const l=new Xt([i],e.dtype),u=new Xt([i],"int32");for(let c=0,h=0;c<r.length;c++)a.has(r[c])||(l.values[h]=r[c],u.values[h]=c,h++);return[l.toTensor(),u.toTensor()]})).apply(this,arguments)}const b$=function x$(n,t){return Bp.apply(this,arguments)},Sx=_({sign_:function w$(n){const e={x:N(n,"x","sign")};return A.runKernel(ai,e)}}),Vp=_({sin_:function v$(n){const e={x:N(n,"x","sin","float32")};return A.runKernel(ri,e)}}),Wp=_({sinh_:function I$(n){const e={x:N(n,"x","sinh")};return A.runKernel(oi,e)}}),Ku=_({slice1d_:function S$(n,t,e){const s=N(n,"x","slice1d");return S(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Qe(s,[t],[e])}}),Up=_({slice2d_:function N$(n,t,e){const s=N(n,"x","slice2d");return S(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Qe(s,t,e)}}),qu=_({slice3d_:function C$(n,t,e){const s=N(n,"x","slice3d");return S(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Qe(s,t,e)}}),Di=_({slice4d_:function k$(n,t,e){const s=N(n,"x","slice4d");return S(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Qe(s,t,e)}}),Fi=_({softmax_:function T$(n,t=-1){const e=N(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return A.runKernel(pu,{logits:e},{dim:t})}}),Xu=_({fft_:function $$(n){return S("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),A.runKernel("FFT",{input:n})}}),Oi=_({ifft_:function _$(n){return S("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),A.runKernel(jh,{input:n})}}),Gp=_({irfft_:function E$(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=F(n,[e,t]);s=Oi(r)}else{const r=[e,2*(t-1)],o=F(Ri(n),[e,t]),a=F(Pu(n),[e,t]),i=cs(Qe(o,[0,1],[e,t-2]),1),l=D(cs(Qe(a,[0,1],[e,t-2]),1),Ee(-1)),u=Kt([o,i],1),c=Kt([a,l],1),h=F(xr(u,c),[r[0],r[1]]);s=Oi(h)}if(s=Ri(s),3===n.rank&&0!==n.shape[0]){const r=s,o=n.shape[0];s=F(s,[o,s.shape[0]/o,s.shape[1]]),r.dispose()}return s}}),zn=_({split_:function A$(n,t,e=0){const r={x:N(n,"x","split")};return A.runKernel(du,r,{numOrSizeSplits:t,axis:e})}}),Zu=_({rfft_:function R$(n,t){S("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(m=>0),g=n.shape.map(m=>m);g[n.shape.length-1]=t,r=Qe(n,f,g),e=t}else if(null!=t&&t>e){const f=n.shape.map(g=>g);f[n.shape.length-1]=t-e,r=Kt([n,Qt(f)],n.shape.length-1),e=t}else r=n;const o=Ye(r),a=F(xr(r,o),[s,e]),i=Xu(a),l=Math.floor(e/2)+1,u=Ri(i),c=Pu(i),h=zn(u,[l,e-l],u.shape.length-1),d=zn(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,F(xr(h[0],d[0]),p)}}),Hp=_({squaredDifference_:function D$(n,t){let e=N(n,"a","squaredDifference"),s=N(t,"b","squaredDifference");return[e,s]=Ot(e,s),Pe(e.shape,s.shape),A.runKernel(ci,{a:e,b:s},{})}}),ao=_({squeeze_:function F$(n,t){const e=N(n,"x","squeeze","string_or_numeric");return F(e,lr(e.shape,t).newShape)}}),Yn=_({stack_:function O$(n,t=0){const e=Cu(n,"tensors","stack","string_or_numeric");return S(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&S(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),A.runKernel(eu,e,{axis:t})}}),Yo=_({step_:function L$(n,t=0){const s={x:N(n,"x","step")};return A.runKernel(mi,s,{alpha:t})}}),Nx=_({stridedSlice_:function P$(n,t,e,s,r=0,o=0,a=0,i=0,l=0){const c={x:N(n,"x","stridedSlice","string_or_numeric")};return A.runKernel(bd,c,{begin:t,end:e,strides:s,beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l})}}),Cx=_({tan_:function z$(n){const e={x:N(n,"x","tan","float32")};return A.runKernel(di,e)}});function En(n,t){$o(n);const e=yr(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return br(n,null,e,t)}function Li(n,t,e){if($o(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=yr(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return br(n,t,s,e)}function kx(n,t,e){if($o(n),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=yr(n,e);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return br(n,t,s,e)}function M$(n,t,e){if($o(n),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=yr(n,e);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return br(n,t,s,e)}function B$(n,t,e){if($o(n),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=yr(n,e);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return br(n,t=t||s,s,e)}function Tx(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(o+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(o+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(o+" update.rank != "+(r+n.length-s));for(let a=0;a<r;++a)if(e.shape[a]!==t.shape[a])throw new Error(o+` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t.shape[a]}).`);for(let a=0;a<e.rank-r;++a)if(e.shape[a+r]!==n[a+s])throw new Error(o+` updates.shape[${a+r}] (${e.shape[a+r]}) != shape[${a+r}] (${n[a+r]})`)}function jp(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}Tx(e,t,n)}function lo(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,o=e.length;let a=1;for(let h=r;h<o;++h)a*=e[h];const i=r<1?1:r;return{sliceRank:r,numUpdates:G(t.shape)/i,sliceSize:a,strides:[...$e(e.slice(0,r)),1],outputSize:G(e)}}const W$=_({tensorScatterUpdate_:function V$(n,t,e){const s=N(n,"tensor","tensorScatterupdate"),r=N(t,"indices","tensorScatterupdate","int32"),o=N(e,"updates","tensorScatterupdate");if(jp(o,r,s.shape),s.dtype!==o.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${o.dtype}.`);return A.runKernel(hd,{tensor:s,indices:r,updates:o},{})}}),$x=_({topk_:function U$(n,t=1,e=!0){const s=N(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const o={x:s},a={k:t,sorted:e},[i,l]=A.runKernel(Sd,o,a);return{values:i,indices:l}}}),Kp=_({truncatedNormal_:function G$(n,t=0,e=1,s,r){if(Hn(n),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const o=new Rp(t,e,s,!0,r),a=Be(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),_x=_({unique_:function H$(n,t=0){const e=N(n,"x","unique","string_or_numeric");S(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[o,a]=A.runKernel(Cd,s,r);return{values:o,indices:a}}}),qp=_({unsortedSegmentSum_:function j$(n,t,e){const s=N(n,"x","unsortedSegmentSum"),r=N(t,"segmentIds","unsortedSegmentSum","int32");return S(_o(e),()=>"numSegments must be of dtype int"),A.runKernel(gu,{x:s,segmentIds:r},{numSegments:e})}}),hs=_({unstack_:function K$(n,t=0){const e=N(n,"x","unstack","string_or_numeric");return S(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),A.runKernel(mu,{value:e},{axis:t})}});function q$(n,t){return Ep(n,t,"right")}function Ex(n,t=!0,e,s){return A.makeVariable(n,t,e,s)}function Xp(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const s=Be(n,"int32"),r=Be([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const a=s.indexToLoc(e[o]);r.values.set(a,o*n.length)}return r.toTensor()}function Zp(){return(Zp=(0,B.Z)(function*(n){const t=N(n,"condition","whereAsync","bool"),e=yield t.data(),s=Xp(t.shape,e);return n!==t&&t.dispose(),s})).apply(this,arguments)}const Ax=function X$(n){return Zp.apply(this,arguments)};function Yp(){return(Yp=(0,B.Z)(function*(n,t,e){const s=N(n,"tensor","boolMask"),r=N(t,"mask","boolMask","bool"),o=e??0,a=r.rank,i=s.shape;S(a>0,()=>"mask cannot be scalar"),Fn(i.slice(o,o+a),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let g=o;g<o+a;g++)l*=i[g];const u=i.slice(0,o).concat([l],i.slice(o+a)),c=F(s,u),h=F(r,[-1]),d=yield Ax(h),p=ao(d,[1]),f=Ei(c,p,o);return n!==s&&s.dispose(),t!==r&&r.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f})).apply(this,arguments)}const Y$=function Z$(n,t,e){return Yp.apply(this,arguments)},Je=_({transpose_:function Q$(n,t,e){const s=N(n,"x","transpose");if(null==t&&(t=s.shape.map((a,i)=>i).reverse()),S(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(a=>{S(a>=0&&a<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},o={perm:t};return"complex64"===s.dtype?z(()=>{let a=Ri(s),i=Pu(s);return a=A.runKernel(Fo,{x:a},o),i=A.runKernel(Fo,{x:i},o),e&&(i=St(i)),xr(a,i)}):A.runKernel(Fo,r,o)}}),e2=_({movingAverage_:function J$(n,t,e,s,r=!0){const o=N(n,"v","movingAverage"),a=N(t,"x","movingAverage"),i=N(e,"decay","movingAverage");(function kS(n,t){S(n.dtype===t.dtype,()=>`The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`)})(o,a),S(Xe(o.shape,a.shape),()=>"Shape mismatch in v and x");const l=Ee(1),u=we(l,i);let c=D(we(a,o),u);if(r){S(null!=s,()=>"When using zeroDebias: true, step is required.");const h=N(s,"step","movingAverage");c=ke(c,we(l,Ir(i,h)))}return ne(o,c)}}),n2=_({scatterND_:function t2(n,t,e){Hn(e);const s=N(n,"indices","scatterND","int32"),r=N(t,"updates","scatterND");return jp(r,s,e),A.runKernel(cd,{indices:s,updates:r},{shape:e})}}),o2=_({sparseToDense_:function r2(n,t,e,s=0){Hn(e);const r=N(n,"sparseIndices","sparseToDense","int32"),o=N(t,"sparseValues","sparseToDense","string_or_numeric"),a=N(s,"defaultValue","sparseToDense",o.dtype);return function s2(n,t,e,s){if("int32"!==n.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const r=n.rank>0?n.shape[0]:1,o=n.rank>1?n.shape[1]:1;if(e.length!==o)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);if(0!==t.rank&&(1!==t.rank||t.size!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,o,e,a),A.runKernel(yd,{sparseIndices:r,sparseValues:o,defaultValue:a},{outputShape:e})}}),i2=_({gatherND_:function a2(n,t){const e=N(t,"indices","gatherND","int32"),r={params:N(n,"x","gatherND","string_or_numeric"),indices:e};return A.runKernel(Hh,r)}}),Rx=_({dropout_:function u2(n,t,e,s){const r=N(n,"x","dropout");if(S("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),S(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof It?r.clone():r;const o=function l2(n,t){if(null==t)return n.shape.slice();if(Xe(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),a=1-t,i=ke(_i(ne(oo(o,0,1,"float32",s),a)),a);return D(r,i)}});function Dx(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}function Qp(n,t,e){const s=1-n%2,r=new Float32Array(n);for(let o=0;o<n;++o){const a=2*Math.PI*o/(n+s-1);r[o]=t-e*Math.cos(a)}return En(r,"float32")}function Jp(){return(Jp=(0,B.Z)(function*(n,t,e=1){const s=N(n,"predictions","inTopK"),r=N(t,"targets","inTopK");S(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),S(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),Fn(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const o=s.shape[s.shape.length-1];S(e>0&&e<=o,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);const a=yield s.data(),i=yield r.data(),[l,u]=[a.length/o,o],c=cn("bool",l);for(let h=0;h<l;h++){const d=h*u,p=a.subarray(d,d+u),f=[];for(let g=0;g<p.length;g++)f.push({value:p[g],index:g});f.sort((g,m)=>m.value-g.value),c[h]=0;for(let g=0;g<e;g++)if(f[g].index===i[h]){c[h]=1;break}}return n!==s&&s.dispose(),t!==r&&r.dispose(),bs(c,r.shape,"bool")})).apply(this,arguments)}const h2=function c2(n,t){return Jp.apply(this,arguments)},ef=_({conv2DBackpropFilter_:function d2(n,t,e,s,r,o="NHWC",a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),S(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),S(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),S(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===o?i.shape[3]:i.shape[1],c="NHWC"===o?l.shape[3]:l.shape[1];return S(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),S(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),Sn("conv2dDerFilter",r,a),A.runKernel($h,{x:i,dy:l},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,filterShape:e})}});function Yu(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return D(n,Yo(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function Qu(n,t){let e=t;const s=Yt(n.shape,t.shape);return s.length>0&&(e=ve(e,s)),F(e,n.shape)}function Ju(n,t,e,s){if("linear"===t)return n;if("relu"===t)return Fs(n);if("elu"===t)return ki(n);if("relu6"===t)return Op(n);if("prelu"===t)return Hu(n,e);if("leakyrelu"===t)return zu(n,s);if("sigmoid"===t)return Rs(n);throw new Error(`Unknown fused activation ${t}.`)}const ec=(n,t)=>!(n>0)||"linear"===t,Fx=_({fusedConv2d_:function p2({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===ec(A.state.gradientDepth,l=l||"linear")){S("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let C=Cr(n,t,e,s,r,o,a);return null!=i&&(C=ne(C,i)),Ju(C,l,u,c)}const h=N(n,"x","conv2d","float32"),d=N(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),S(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),S(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),Sn("fused conv2d",s,a);const g="NHWC"===r?p.shape[3]:p.shape[1];S(d.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`),S(hn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const m=an(p.shape,d.shape,e,o,s,a);let y,x;if(null!=i&&(y=N(i,"bias","fused conv2d"),[y]=Ot(y,h),"NHWC"===r?Pe(m.outShape,y.shape):(S(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),S(0===y.shape.length||y.shape[0]===m.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${m.outChannels})`))),null!=u){const C=u.shape;if(S(C.length<=1||3===C.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${C.length}.`),1===C.length)S(1===C[0]||C[0]===m.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the number of output channels (${m.outChannels}).`);else if(3===C.length)try{Pe(C,m.outShape)}catch{throw Error(`Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the output shape of the conv2d (${m.outShape}).`)}x=N(u,"prelu weights","fused conv2d")}const b=(C,k)=>{S("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[T,E,R,L]=k,V=Yu(C,R,l);S(Nr(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const j=[wp(E.shape,V,T,e,s),ef(E,V,T.shape,e,s)];if(null!=L){const X=Qu(L,V);j.push(X)}return j},v={x:p,filter:d,bias:y,preluActivationWeights:x},I={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?qs((k,T,E)=>{let R=A.runKernel(bu,v,I);return E([T,k,R]),f&&(R=F(R,[R.shape[1],R.shape[2],R.shape[3]])),{value:R,gradFunc:b}})(p,d):qs((k,T,E,R)=>{let L=A.runKernel(bu,v,I);return R([T,k,L,E]),f&&(L=F(L,[L.shape[1],L.shape[2],L.shape[3]])),{value:L,gradFunc:b}})(p,d,y)}}),Ox=_({depthwiseConv2dNativeBackpropFilter_:function f2(n,t,e,s,r,o=[1,1],a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),A.runKernel(Oh,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:a,dilations:o,filterShape:e})}}),Lx=_({depthwiseConv2dNativeBackpropInput_:function m2(n,t,e,s,r,o=[1,1],a){let i=t,l=!1;3===t.rank&&(l=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=A.runKernel(Lh,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:a,dilations:o,inputShape:n});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),y2=_({fusedDepthwiseConv2d_:function g2({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===ec(A.state.gradientDepth,l)){let I=Ci(n,t,e,s,r,o,a);return null!=i&&(I=ne(I,i)),Ju(I,l,u,c)}const h=N(n,"x","depthwiseConv2d","float32"),d=N(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),S(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),S(4===d.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`),S(p.shape[3]===d.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`),null==o&&(o=[1,1]),S(hn(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),Sn("fused depthwiseConv2d",s,a);const g=an(p.shape,d.shape,e,o,s,a,!0);let m,y;null!=i&&(m=N(i,"bias","fused conv2d"),[m]=Ot(m,h),Pe(g.outShape,m.shape)),null!=u&&(y=N(u,"prelu weights","fused depthwiseConv2d"));const x=(I,C)=>{S(Nr(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[k,T,E,R]=C,L=Yu(I,E,l),V=Lx(T.shape,L,k,e,s,o,a),U=Ox(T,L,k.shape,e,s,o,a);return null!=R?[V,U,Qu(m,L)]:[V,U]},b={x:p,filter:d,bias:m,preluActivationWeights:y},v={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?qs((C,k,T)=>{let E=A.runKernel(wu,b,v);return T([k,C,E]),f&&(E=F(E,[E.shape[1],E.shape[2],E.shape[3]])),{value:E,gradFunc:x}})(p,d):qs((C,k,T,E)=>{let R=A.runKernel(wu,b,v);return E([k,C,R,T]),f&&(R=F(R,[R.shape[1],R.shape[2],R.shape[3]])),{value:R,gradFunc:x}})(p,d,m)}}),nf=_({fusedMatMul_:function x2({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:a,leakyreluAlpha:i=.2}){if(!1===ec(A.state.gradientDepth,o)){let L=je(n,t,e,s);return null!=r&&(L=ne(L,r)),Ju(L,o,a,i)}let l=N(n,"a","fused matMul"),u=N(t,"b","fused matMul");[l,u]=Ot(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),m=G(f),y=G(g);S(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const b=Pe(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),v=F(l,e?[m,c,d]:[m,d,c]),I=F(u,s?[y,p,h]:[y,h,p]);let C,k;null!=r&&(C=N(r,"bias","fused matMul"),[C]=Ot(C,l),Pe(b,C.shape)),null!=a&&(k=N(a,"prelu weights","fused matMul"));const T=(L,V)=>{const[U,H,j,X]=V,Z=Yu(F(L,j.shape),j,o);let K,Y;return e||s?!e&&s?(K=je(Z,H,!1,!1),Y=je(Z,U,!0,!1)):e&&!s?(K=je(H,Z,!1,!0),Y=je(U,Z,!1,!1)):(K=je(H,Z,!0,!0),Y=je(Z,U,!0,!0)):(K=je(Z,H,!1,!0),Y=je(U,Z,!0,!1)),null!=r?[K,Y,Qu(X,Z)]:[K,Y]},E={a:v,b:I,bias:C,preluActivationWeights:k},R={transposeA:e,transposeB:s,activation:o,leakyreluAlpha:i};return null==r?qs((V,U,H)=>{const j=A.runKernel(xu,E,R);return H([V,U,j]),{value:F(j,b),gradFunc:T}})(v,I):qs((V,U,H,j)=>{const X=A.runKernel(xu,E,R);return j([V,U,X,H]),{value:F(X,b),gradFunc:T}})(v,I,C)}}),w2=_({hammingWindow_:function b2(n){return Qp(n,.54,.46)}}),Px=_({hannWindow_:function v2(n){return Qp(n,.5,.5)}}),zx=_({frame_:function I2(n,t,e,s=!1,r=0){let o=0;const a=[];for(;o+t<=n.size;)a.push(Qe(n,o,t)),o+=e;if(s)for(;o<n.size;){const i=o+t-n.size,l=Kt([Qe(n,o,t-i),Wo([i],r)]);a.push(l),o+=e}return 0===a.length?Li([],[0,t]):F(Kt(a),[a.length,t])}}),N2=_({stft_:function S2(n,t,e,s,r=Px){null==s&&(s=Dx(t));const o=zx(n,t,e),a=D(o,r(t));return Zu(a,s)}}),k2=_({cropAndResize_:function C2(n,t,e,s,r="bilinear",o=0){const a=N(n,"image","cropAndResize"),i=N(t,"boxes","cropAndResize","float32"),l=N(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return S(4===a.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),S(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),S(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),S(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),S(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),S("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),A.runKernel(Rh,{image:a,boxes:i,boxInd:l},{method:r,extrapolationValue:o,cropSize:s})}}),$2=_({flipLeftRight_:function T2(n){const t=N(n,"image","flipLeftRight","float32");return S(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),A.runKernel(Gh,{image:t},{})}}),E2=_({grayscaleToRGB_:function _2(n){const t=N(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];S(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),S(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,us(t,r)}}),R2=_({rotateWithOffset_:function A2(n,t,e=0,s=.5){const r=N(n,"image","rotateWithOffset","float32");return S(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),A.runKernel(Td,{image:r},{radians:t,fillValue:e,center:s})}});function Qo(n,t,e,s,r,o){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==o&&(o=0);const a=n.shape[0];return e=Math.min(e,a),S(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),S(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),S(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),S(1===t.rank,()=>"scores must be a 1D tensor"),S(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${t.shape[0]}`),S(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:o}}const F2=_({nonMaxSuppression_:function D2(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppression","float32"),a=N(t,"scores","nonMaxSuppression","float32"),i=Qo(o,a,e,s,r);return A.runKernel(ed,{boxes:o,scores:a},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}});function O2(n,t,e){const s=function L2(n,t,e){return function z2(n,t,e){let s=0,r=n.length,o=0,a=!1;for(;s<r;){o=s+(r-s>>>1);const i=e(t,n[o]);i>0?s=o+1:(r=o,a=!i)}return a?s:-s-1}(n,t,e||P2)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function P2(n,t){return n>t?1:n<t?-1:0}function sf(n,t,e,s,r){return af(n,t,e,s,r,0)}function rf(n,t,e,s,r,o){return af(n,t,e,s,r,0,!1,o,!0)}function of(n,t,e,s,r,o){return af(n,t,e,s,r,o,!0)}function af(n,t,e,s,r,o,a=!1,i=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(Mx);const c=o>0?-.5/o:0,h=[],d=[];for(;h.length<e&&u.length>0;){const m=u.pop(),{score:y,boxIndex:x,suppressBeginIndex:b}=m;if(y<r)break;let v=!1;for(let I=h.length-1;I>=b;--I){const C=M2(n,x,h[I]);if(C>=s){v=!0;break}if(m.score=m.score*B2(s,c,C),m.score<=r)break}m.suppressBeginIndex=h.length,v||(m.score===y?(h.push(x),d.push(m.score)):m.score>r&&O2(u,m,Mx))}const p=h.length,f=e-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return a&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function M2(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),o=Math.min(s[0],s[2]),a=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-o)*(l-a),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(o,u),m=Math.max(a,c),y=Math.min(i,h),x=Math.min(l,d),b=Math.max(y-g,0)*Math.max(x-m,0);return b/(p+f-b)}function B2(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function Mx(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function lf(){return(lf=(0,B.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),i=Qo(o,a,e,s,r);e=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=yield Promise.all([o.data(),a.data()]),u=l[0],c=l[1],{selectedIndices:h}=sf(u,c,e,s,r);return o!==n&&o.dispose(),a!==t&&a.dispose(),En(h,"int32")})).apply(this,arguments)}const G2=_({nonMaxSuppressionWithScore_:function U2(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=Qo(a,i,e,s,r,o),h=A.runKernel(nd,{boxes:a,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:o=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function uf(){return(uf=(0,B.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=Qo(a,i,e,s,r,o);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,o=l.softNmsSigma;const u=yield Promise.all([a.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=of(c,h,e,s,r,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:En(d,"int32"),selectedScores:En(p)}})).apply(this,arguments)}const q2=_({nonMaxSuppressionPadded_:function K2(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=Qo(a,i,e,s,r,null),f=A.runKernel(td,{boxes:a,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:f[0],validOutputs:f[1]}}});function cf(){return(cf=(0,B.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=Qo(a,i,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([a.data(),i.data()]),{selectedIndices:f,validOutputs:g}=rf(d,p,u,c,h,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:En(f,"int32"),validOutputs:Ee(g,"int32")}})).apply(this,arguments)}const Bx=_({resizeBilinear_:function Y2(n,t,e=!1,s=!1){const r=N(n,"images","resizeBilinear");S(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),S(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),S(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=A.runKernel(au,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Vx=_({resizeNearestNeighbor_:function Q2(n,t,e=!1,s=!1){const r=N(n,"images","resizeNearestNeighbor");S(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),S(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),S("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),S(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=A.runKernel(ou,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),t_=_({threshold_:function J2(n,t="binary",e=!1,s=.5){const r=N(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=D(En([s]),255);if(S(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),S(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),S("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),S("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=zn(r,[1,1,1],-1);const m=D(c,.2989),y=D(h,.587),x=D(d,.114);p=ne(ne(m,y),x)}else p=n;"otsu"===t&&(u=function e_(n,t){let o,a,i,l,u,c,e=En([-1]),s=En([0]),r=En([0]);for(let h=0;h<n.size-1;h++){o=Qe(n,0,h+1),a=Qe(n,h+1),u=ke(ve(o),t),c=ke(ve(a),t);const d=ve(D(o,Zo(0,o.size)));i=ke(d,ve(o));const p=Wo(a.shape,o.size),f=ne(Zo(0,a.size),p),g=D(a,f);l=ke(ve(g),ve(a));const m=we(i,l),y=we(i,l),x=D(u,c);r=D(D(x,m),y);const b=Pn(r,s);s=bn(b,r,s),e=bn(b,En([h]),e)}return e}(Ky(ge(Lp(p),"int32"),bs([]),256),l));const f=e?so(p,u):Pn(p,u);return ge(D(f,255),"int32")}}),s_=_({transform_:function n_(n,t,e="nearest",s="constant",r=0,o){const a=N(n,"image","transform","float32"),i=N(t,"transforms","transform","float32");return S(4===a.rank,()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`),S(2===i.rank&&(i.shape[0]===a.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),S(null==o||2===o.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`),A.runKernel(Nd,{image:a,transforms:i},{interpolation:e,fillMode:s,fillValue:r,outputShape:o})}}),o_=_({bandPart_:function r_(n,t,e){const s=N(n,"a","bandPart");S(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[o,a]=s.shape.slice(-2);let i,l;"number"==typeof t?(S(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),S(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),i=N(t<0?o:t,"numLower","bandPart")):(S("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),i=bn(Ai(t,0),o,ro(t,o))),"number"==typeof e?(S(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),S(e<=a,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`),l=N(e<0?a:e,"numUpper","bandPart")):(S("int32"===e.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=bn(Ai(e,0),a,ro(e,a)));const u=F(Zo(0,o,1,"int32"),[-1,1]),c=Zo(0,a,1,"int32"),h=we(u,c),d=Ds(so(h,i),Tr(h,St(l))),p=Qt([o,a],s.dtype);return F(Yn(hs(F(s,[-1,o,a])).map(f=>bn(d,f,p))),r)}}),i_=_({gramSchmidt_:function a_(n){let t;if(Array.isArray(n)){t=!1,S(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let o=1;o<n.length;++o)S(n[o].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`)}else t=!0,n=zn(n,n.shape[0],0).map(r=>ao(r,[0]));S(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(A.tidy(()=>{let o=s[r];if(r>0)for(let a=0;a<r;++a){const i=D(ve(D(e[a],o)),e[a]);o=we(o,i)}return ke(o,$i(o,"euclidean"))}));return t?Yn(e,0):e}});function Wx(n,t=!1){return A.tidy(()=>{S(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=kp(e),o=Ks(n);const a=Li([[1]],[1,1]);let i=Ks(a);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=o,h=i,d=r;[i,o,r]=A.tidy(()=>{const p=Qe(o,[u,u],[e-u,1]),f=$i(p),g=Qe(o,[u,u],[1,1]),m=bn(Pn(g,0),Li([[-1]]),Li([[1]])),y=we(g,D(m,f)),x=ke(p,y);i=1===x.shape[0]?Ks(a):Kt([a,Qe(x,[1,0],[x.shape[0]-1,x.shape[1]])],0);const b=St(ke(je(m,y),f)),v=Qe(o,[u,0],[e-u,s]),I=D(b,i),C=Je(i);if(0===u)o=we(v,je(I,je(C,v)));else{const E=we(v,je(I,je(C,v)));o=Kt([Qe(o,[0,0],[u,s]),E],0)}const k=Je(I),T=Qe(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=we(T,je(je(T,i),k));else{const E=we(T,je(je(T,i),k));r=Kt([Qe(r,[0,0],[e,u]),E],1)}return[i,o,r]}),He([c,h,d])}return!t&&e>s&&(r=Qe(r,[0,0],[e,s]),o=Qe(o,[0,0],[s,s])),[r,o]})}const u_=_({qr_:function l_(n,t=!1){if(S(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return Wx(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=hs(F(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],o=[];return s.forEach(l=>{const[u,c]=Wx(l,t);r.push(u),o.push(c)}),[F(Yn(r,0),n.shape),F(Yn(o,0),n.shape)]}}});var _t=(()=>((_t=_t||{})[_t.NONE=0]="NONE",_t[_t.MEAN=1]="MEAN",_t[_t.SUM=2]="SUM",_t[_t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",_t))();const Qs=_({computeWeightedLoss_:function c_(n,t,e=_t.SUM_BY_NONZERO_WEIGHTS){const s=N(n,"losses","computeWeightedLoss");let r=null;null!=t&&(r=N(t,"weights","computeWeightedLoss"));const o=null==r?s:D(s,r);if(e===_t.NONE)return o;if(e===_t.SUM)return ve(o);if(e===_t.MEAN){if(null==r)return Lt(o);{const a=s.size/r.size,i=ke(ve(o),ve(r));return a>1?ke(i,Ee(a)):i}}if(e===_t.SUM_BY_NONZERO_WEIGHTS){if(null==r)return ke(ve(o),Ee(s.size));{const a=D(r,Xn(s.shape)),i=ge(ve(Xo(a,Ee(0))),"float32");return ke(ve(o),i)}}throw Error(`Unknown reduction: ${e}`)}}),d_=_({absoluteDifference_:function h_(n,t,e,s=_t.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","absoluteDifference"),o=N(t,"predictions","absoluteDifference");let a=null;null!=e&&(a=N(e,"weights","absoluteDifference")),Fn(r.shape,o.shape,"Error in absoluteDifference: ");const i=Zt(we(r,o));return Qs(i,a,s)}}),f_=_({cosineDistance_:function p_(n,t,e,s,r=_t.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","cosineDistance"),a=N(t,"predictions","cosineDistance");let i=null;null!=s&&(i=N(s,"weights","cosineDistance")),Fn(o.shape,a.shape,"Error in cosineDistance: ");const l=Ee(1),u=we(l,ve(D(o,a),e,!0));return Qs(u,i,r)}}),g_=_({hingeLoss_:function m_(n,t,e,s=_t.SUM_BY_NONZERO_WEIGHTS){let r=N(n,"labels","hingeLoss");const o=N(t,"predictions","hingeLoss");let a=null;null!=e&&(a=N(e,"weights","hingeLoss")),Fn(r.shape,o.shape,"Error in hingeLoss: ");const i=Ee(1);r=we(D(Ee(2),r),i);const l=Fs(we(i,D(r,o)));return Qs(l,a,s)}}),x_=_({huberLoss_:function y_(n,t,e,s=1,r=_t.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","huberLoss"),a=N(t,"predictions","huberLoss");let i=null;null!=e&&(i=N(e,"weights","huberLoss")),Fn(o.shape,a.shape,"Error in huberLoss: ");const l=Ee(s),u=Zt(we(a,o)),c=ro(u,l),h=we(u,c),d=ne(D(Ee(.5),pt(c)),D(l,h));return Qs(d,i,r)}}),w_=_({logLoss_:function b_(n,t,e,s=1e-7,r=_t.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","logLoss"),a=N(t,"predictions","logLoss");let i=null;null!=e&&(i=N(e,"weights","logLoss")),Fn(o.shape,a.shape,"Error in logLoss: ");const l=Ee(1),u=Ee(s),c=St(D(o,qn(ne(a,u)))),h=D(we(l,o),qn(ne(we(l,a),u))),d=we(c,h);return Qs(d,i,r)}}),I_=_({meanSquaredError_:function v_(n,t,e,s=_t.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","meanSquaredError"),o=N(t,"predictions","meanSquaredError");let a=null;null!=e&&(a=N(e,"weights","meanSquaredError")),Fn(r.shape,o.shape,"Error in meanSquaredError: ");const i=Hp(r,o);return Qs(i,a,s)}}),C_=_({sigmoidCrossEntropy_:function N_(n,t,e,s=0,r=_t.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"multiClassLabels","sigmoidCrossEntropy");const a=N(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","sigmoidCrossEntropy")),Fn(o.shape,a.shape,"Error in sigmoidCrossEntropy: "),s>0){const u=Ee(s),c=Ee(1),h=Ee(.5);o=ne(D(o,we(c,u)),D(h,u))}const l=function S_(n,t){const e=N(n,"labels","sigmoidCrossEntropyWithLogits"),s=N(t,"logits","sigmoidCrossEntropyWithLogits");Fn(e.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Fs(s),o=D(s,e),a=Mu(Kn(St(Zt(s))));return ne(we(r,o),a)}(o,a);return Qs(l,i,r)}}),$_=_({softmaxCrossEntropy_:function T_(n,t,e,s=0,r=_t.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"onehotLabels","softmaxCrossEntropy");const a=N(t,"logits","softmaxCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","softmaxCrossEntropy")),Fn(o.shape,a.shape,"Error in softmaxCrossEntropy: "),s>0){const u=Ee(s),c=Ee(1),h=Ee(o.shape[1]);o=ne(D(o,we(c,u)),ke(u,h))}const l=function k_(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return qs((r,o,a)=>{const l=$p(o,[e],!0),u=we(ge(o,"float32"),l);a([r,u]);const c=St(D(u,r));return{value:ve(c,[e]),gradFunc:(p,f)=>{const[g,m]=f,y=Vt(p.shape,[e]);return[D(F(p,y),we(ge(g,"float32"),Kn(m))),D(F(p,y),we(Kn(m),ge(g,"float32")))]}}})(n,t)}(o,a);return Qs(l,i,r)}}),H_={fft:Xu,ifft:Oi,rfft:Zu,irfft:Gp},j_={hammingWindow:w2,hannWindow:Px,frame:zx,stft:N2},Os={flipLeftRight:$2,grayscaleToRGB:E2,resizeNearestNeighbor:Vx,resizeBilinear:Bx,rotateWithOffset:R2,cropAndResize:k2,nonMaxSuppression:F2,nonMaxSuppressionAsync:function V2(n,t,e){return lf.apply(this,arguments)},nonMaxSuppressionWithScore:G2,nonMaxSuppressionWithScoreAsync:function H2(n,t,e){return uf.apply(this,arguments)},nonMaxSuppressionPadded:q2,nonMaxSuppressionPaddedAsync:function X2(n,t,e){return cf.apply(this,arguments)},threshold:t_,transform:s_},Ux={bandPart:o_,gramSchmidt:i_,qr:u_},Gx={absoluteDifference:d_,computeWeightedLoss:Qs,cosineDistance:f_,hingeLoss:g_,huberLoss:x_,logLoss:w_,meanSquaredError:I_,sigmoidCrossEntropy:C_,softmaxCrossEntropy:$_},K_={sparseFillEmptyRows:_({sparseFillEmptyRows_:function __(n,t,e,s){const r=N(n,"indices","sparseFillEmptyRows","int32"),o=N(t,"values","sparseFillEmptyRows"),a=N(e,"denseShape","sparseFillEmptyRows","int32"),i=N(s,"defaultValue","sparseFillEmptyRows",o.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);if(1!==a.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u=A.runKernel(pd,{indices:r,values:o,denseShape:a,defaultValue:i});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),sparseReshape:_({sparseReshape_:function A_(n,t,e){const s=N(n,"inputIndices","sparseReshape","int32"),r=N(t,"inputShape","sparseReshape","int32"),o=N(e,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==o.rank)throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);const i=A.runKernel(fd,{inputIndices:s,inputShape:r,newShape:o});return{outputIndices:i[0],outputShape:i[1]}}}),sparseSegmentMean:_({sparseSegmentMean_:function D_(n,t,e){const s=N(n,"data","sparseSegmentMean"),r=N(t,"indices","sparseSegmentMean","int32"),o=N(e,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);return A.runKernel(md,{data:s,indices:r,segmentIds:o})}}),sparseSegmentSum:_({sparseSegmentSum_:function O_(n,t,e){const s=N(n,"data","sparseSegmentSum"),r=N(t,"indices","sparseSegmentSum","int32"),o=N(e,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);return A.runKernel(gd,{data:s,indices:r,segmentIds:o})}})},q_={stringNGrams:_({stringNGrams_:function P_(n,t,e,s,r,o,a,i){const l=N(n,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=N(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const d=A.runKernel(wd,{data:l,dataSplits:u},{separator:e,nGramWidths:s,leftPad:r,rightPad:o,padWidth:a,preserveShortSequences:i});return{nGrams:d[0],nGramsSplits:d[1]}}}),stringSplit:_({stringSplit_:function M_(n,t,e=!0){const s=N(n,"input","stringSplit","string"),r=N(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const i=A.runKernel(vd,{input:s,delimiter:r},{skipEmpty:e});return{indices:i[0],values:i[1],shape:i[2]}}}),stringToHashBucketFast:_({stringToHashBucketFast_:function V_(n,t){const e=N(n,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return A.runKernel(Id,{input:e},s)}}),staticRegexReplace:_({staticRegexReplace_:function U_(n,t,e,s=!0){const r=N(n,"input","staticRegexReplace","string");return A.runKernel(fu,{x:r},{pattern:t,rewrite:e,replaceGlobal:s})}})},Jo=class X_{static sgd(t){return new ep(t)}static momentum(t,e,s=!1){return new my(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,o=!1){return new gy(t,e,s,r,o)}static adam(t=.001,e=.9,s=.999,r=null){return new py(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new hy(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,o=0){return new fy(t,e,s,r,o)}static adagrad(t,e=.1){return new dy(t,e)}},Z_=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function Hx(){return new Promise(n=>Z_(()=>n()))}function hf(n,t){const e=n[0].length;n.forEach((r,o)=>{S(r.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),S(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,o)=>{for(let a=0;a<e;a++)S(a===t||r[a]===s[a],()=>`Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`)})}function Ls(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}var Et=(()=>((Et=Et||{})[Et.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",Et[Et.VALUE_ROWIDS=1]="VALUE_ROWIDS",Et[Et.ROW_LENGTHS=2]="ROW_LENGTHS",Et[Et.ROW_SPLITS=3]="ROW_SPLITS",Et[Et.ROW_LIMITS=4]="ROW_LIMITS",Et[Et.ROW_STARTS=5]="ROW_STARTS",Et))();function jx(n,t,e){let s=new Array;if(null==e&&null==t)return s;if(null==t)for(;s.length<n+e.length;)s.push(-1);else s=t.slice();if(null==e)return s;if(n+e.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${s.length}`);for(let r=1;r<e.length;++r){const o=e[r],a=s[s.length-e.length+r],i=s[a];if(o>=0)if(i>=0){if(i!==o)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+n}] = ${o} but shape[${r+n}] = ${i}`)}else s[a]=o}return s}function Kx(n){const t={FIRST_DIM_SIZE:Et.FIRST_DIM_SIZE,VALUE_ROWIDS:Et.VALUE_ROWIDS,ROW_LENGTHS:Et.ROW_LENGTHS,ROW_SPLITS:Et.ROW_SPLITS,ROW_LIMITS:Et.ROW_LIMITS,ROW_STARTS:Et.ROW_STARTS},e=[];for(const s of n){if(!(s in t))break;e.push(t[s])}return e}function qx(n){return 0===n.length?0:n[0]===Et.FIRST_DIM_SIZE?n.length-1:n.length}function Xx(n,t){if(null==n||null==t)return;const e=n.length,s=t.length;if(e>=s)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(e,s-1);++r){const o=n[r],a=t[r+1];if(o>=0&&a>=0&&1!==o&&o!==a)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-n.length}] = ${o} but ragged tensor input.flatValues.shape[${r-n.length}] = ${a}`)}}const df=30;function tc(n){return n<=df?n:gh(n,Math.floor(Math.sqrt(n)))}function pf(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function Pi(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const o=t.length;for(let a=0;a<o;++a)r=r.concat([n[a+1]/t[a],t[a]]);r=r.concat(n.slice(o+1))}return r}function zi(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],o=[];for(let a=1;a<n;++a)a>=2*t+1||a%2==1?o.push(a):r.push(a);s.push(...r),s.push(0),s.push(...o)}return s}function Mi(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)r.push(o<=t.length?s?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return r}function ff(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function mf(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}function gf(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===G(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,o=r[r.length-1];let a=1;for(let h=0;h<r.length-1;++h)a*=r[h];const i=n.shape,l=r.slice();l.pop();let u=1;for(let h=o;h<e;++h)u*=i[h],l.push(i[h]);const c=[...$e(n.shape).map(h=>h/u),1].slice(0,o);return[l,a,u,c]}const nc=1.7580993408473768,sc=1.0507009873554805,yf=.3275911,xf=.254829592,bf=-.284496736,wf=1.421413741,vf=-1.453152027,If=1.061405429;function Js(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function Zx(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function Yx(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Qx(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function Sf(n,t){return{real:n[2*t],imag:n[2*t+1]}}function Jx(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function eb(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const o=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(o),s[r]=Math.sin(o)}return{real:e,imag:s}}function tb(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Nf="->",Y_=/->/g,nb=",",sb="...";function Cf(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(Y_,"").length)/Nf.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${Nf}").`);const[s,r]=n.split(Nf);S(-1===s.indexOf(sb),()=>`The ellipsis notation ("${sb}") is not supported yet.`);const o=s.split(nb),a=o.length;if(t!==a)throw new Error(`Expected ${a} input tensors, received ${t}`);if(a>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<r.length;++d){const p=r[d];if(!o.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===i.indexOf(p)&&i.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===i.indexOf(p)&&p!==nb&&i.push(p)}const l=new Array(o.length);for(let d=0;d<a;++d){if(new Set(o[d].split("")).size!==o[d].length)throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<o[d].length;++p)l[d].push(i.indexOf(o[d][p]))}const u=i.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:i,summedDims:h,idDims:l}}function kf(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function Tf(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const o=e[r].shape;for(let a=0;a<t[r].length;++a)void 0===s[t[r][a]]?s[t[r][a]]=o[a]:S(s[t[r][a]]===o[a],()=>`Expected dimension ${s[t[r][a]]} at axis ${a} of input shaped ${JSON.stringify(o)}, but got dimension ${o[a]}`)}}function $f(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let a=0;a<r;++a)s.push([]);const o=[];for(let a=0;a<e.length;++a){const l=Q_(t,e[a]);for(const u of l)-1===o.indexOf(u)&&(s[a].push(u),o.push(u))}return{path:e,steps:s}}function _f(n){return n.every((t,e)=>t===e)}function Q_(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function Ef(n,t,e=0){let s=[];if("number"==typeof t)S(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{S(t.reduce((a,i)=>(-1===i&&(a+=1),a),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const a=t.reduce((i,l)=>l>0?i+l:i);t[o]=n.shape[e]-a}S(n.shape[e]===t.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function rb(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function ob(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function ab(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function ib(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function lb(n,t){return`size ${n} must be non-negative, not ${t}`}function ub(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function cb(n,t){return`Input to reshape is a SparseTensor with ${G(n)}\n  dense values, but the requested shape requires a multiple of ${G(t)}. inputShape=${n} outputShape= ${t}`}function hb(n,t){return`Input to reshape is a tensor with ${G(n)} dense values, but the requested shape has ${G(t)}. inputShape=${n} outputShape=${t}`}function Af(){return"segment ids must be >= 0"}function db(){return"segment ids are not increasing"}function pb(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function fb(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function mb(n,t){let s,e=!1;for(n<=df?(s=n,e=!0):s=gh(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=gh(n,s+1);return s}function gb(n,t,e){const s=[],r=n.length;for(let o=0;o<r;o++)s.push(o!==t?n[o]:e);return s}function Rf(n,t,e,s){const r=t.shape.length,o=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>o)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${o}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const a=n.shape[e],i=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)i.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)i.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)i.push(t.shape[h]);for(let h=e+1;h<o;h++)i.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:a,outputShape:i}}function er(n){try{return n.map(t=>dr(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function yb(n){return n.map(t=>hr(t))}!function SN(){for(const n of IN)se(n)}();const xb={kernelName:gl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Yo(ge(e,"float32"),-1))}}},J_={kernelName:va,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=pt(ge(e,"float32")),r=xn(we(Ee(1),s));return St(ke(n,r))}}}},eE={kernelName:Ia,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=xn(we(pt(ge(e,"float32")),1));return ke(n,s)}}}},tE={kernelName:Do,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{let i=n;const l=Yt(e.shape,r);return l.length>0&&(i=ve(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Yt(s.shape,r);return l.length>0&&(i=ve(i,l)),F(i,s.shape)}}}},nE={kernelName:yl,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},sE={kernelName:xl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ye(e)}}},rE={kernelName:bl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ye(e)}}},oE={kernelName:Sa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,xn(we(Ee(1),pt(ge(e,"float32")))))}}},aE={kernelName:Na,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=xn(ne(Ee(1),pt(ge(e,"float32"))));return ke(n,s)}}}},iE={kernelName:Ta,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=ne(pt(e),pt(s));let l=D(n,ke(s,i));const u=Yt(e.shape,r);return u.length>0&&(l=ve(l,u)),F(l,e.shape)},b:()=>{const i=ne(pt(e),pt(s));let l=St(D(n,ke(e,i)));const u=Yt(s.shape,r);return u.length>0&&(l=ve(l,u)),F(l,s.shape)}}}},lE={kernelName:Ca,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ne(pt(ge(e,"float32")),1))}}},uE={kernelName:ka,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,we(Ee(1),pt(ge(e,"float32"))))}}},hE=_({avgPool3dGrad_:function cE(n,t,e,s,r,o){const a=N(n,"dy","avgPool3dGrad"),i=N(t,"input","avgPool3dGrad");let l=a,u=i,c=!1;4===i.rank&&(c=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),u=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),S(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),S(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),Sn("avgPool3dGrad",r,o);const p=A.runKernel(Sh,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:o});return c?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),dE={kernelName:vl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a,dimRoundingMode:i}=e;return{x:()=>hE(n,s,r,o,a,i)}}},fE=_({avgPoolGrad_:function pE(n,t,e,s,r){const o=N(n,"dy","avgPoolGrad"),a=N(t,"input","avgPoolGrad");S(a.rank===o.rank,()=>`Rank of input (${a.rank}) does not match rank of dy (${o.rank})`);let i=a,l=o,u=!1;3===a.rank&&(u=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),S(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),S(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const d=A.runKernel(Ih,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),mE={kernelName:wl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a}=e;return{x:()=>fE(n,s,r,o,a)}}},gE={kernelName:Il,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:o,transposeB:a}=e;return o||a?!o&&a?{a:()=>je(n,r,!1,!1),b:()=>je(n,s,!0,!1)}:o&&!a?{a:()=>je(r,n,!1,!0),b:()=>je(s,n,!1,!1)}:{a:()=>je(r,n,!0,!0),b:()=>je(n,s,!0,!0)}:{a:()=>je(n,r,!1,!0),b:()=>je(s,n,!0,!1)}}},yE={kernelName:Sl,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>Gu(n,s,r)}}},xE={kernelName:"BroadcastTo",gradFunc:(n,t,e)=>{const r=e.inputShape,o=e.shape,a=Array.from(o);for(let l=r.length-1;l>=0;l--)if(r[l]===o[l])a[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const i=[];for(let l=0;l<a.length;l++)a[l]>1&&i.push(l);return{x:()=>ve(n,i,!0)}}},bE={kernelName:$a,gradFunc:n=>({x:()=>n.clone()})},wE={kernelName:_a,gradFunc:n=>({x:()=>Ye(n)})},vE={kernelName:Ea,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>bn(Ds(Tr(s,r),so(s,o)),n,Ye(n))}}},IE={kernelName:Nl,inputsToSave:["x"],gradFunc:xb.gradFunc},SE={kernelName:Cl,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,o=Ge(r,t[0].shape)[0],a=s.map(l=>l[o]);return zn(n,a,o).map(l=>()=>l)}},NE={kernelName:kl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:o,strides:a,pad:i,dataFormat:l}=e;return S(Nr(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>wp(s.shape,n,r,a,i,l),filter:()=>ef(s,n,r.shape,a,i,l)}}},CE={kernelName:Tl,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:o,pad:a,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>Cr(n,r,o,a,i,1,l),filter:()=>ef(n,s,r.shape,o,a,i,l)}}},TE=_({conv3DBackpropFilter_:function kE(n,t,e,s,r){let o=n;4===n.rank&&(o=F(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let a=t;return 4===a.rank&&(a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),S(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),S(5===a.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`),S(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),S(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),S(a.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${e[4]}).`),A.runKernel(_h,{x:o,dy:a},{strides:s,pad:r,filterShape:e})}}),$E={kernelName:$l,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o}=e;S(Nr(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[a,i]=t;return{x:()=>ex(a.shape,n,i,r,o),filter:()=>TE(a,n,i.shape,r,o)}}},_E={kernelName:Aa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(St(Vp(ge(e,"float32"))),n)}}},EE={kernelName:Ra,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Wp(ge(e,"float32")),n)}}},AE={kernelName:_l,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:o,reverse:a}=e;return{x:()=>{const i=$t([r],s.rank);let l=Sp(n,r,o,!a);return null!=i&&(l=Je(l,i)),l}}}},RE={kernelName:El,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:a}=e,i=s??[1,1];S(Nr(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return S(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),S(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),S(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),S(hn(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),Sn("depthwiseConv2d",o,a),{x:()=>Lx(l.shape,n,u,r,o,i,a),filter:()=>Ox(l,n,u.shape,r,o,i,a)}}},DE={kernelName:Al,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,o={x:s,filter:r,dy:n},a={x:s,filter:r,dy:n};return{x:()=>A.runKernel(zh,o,e),filter:()=>A.runKernel(Mh,a,e)}}},FE={kernelName:Fa,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>A.runKernel(Vh,s)}}},OE={kernelName:Oa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(Kn(St(pt(e))),2/Math.sqrt(Math.PI));return{x:()=>D(n,s)}}},LE={kernelName:La,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,e)}}},PE={kernelName:Dl,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>F(n,e.shape)}}},zE={kernelName:Pa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Kn(e))}}},ME={kernelName:za,gradFunc:n=>({x:()=>Ye(n)})},BE={kernelName:Ma,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=ke(n,ge(s,"float32")),l=Yt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{let i=D(n,ge(e,"float32"));const l=Yt(s.shape,r);l.length>0&&(i=F(ve(i,l),s.shape));const u=pt(s);return St(ke(i,ge(u,"float32")))}}}},VE={kernelName:Fl,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,o,a,i]=t,l=i??Ee(1),u=Yt(o.shape,r.shape),c=[];if(1===o.rank){for(let v=0;v<r.shape.length-1;++v)c.push(r.shape[v]);c.push(1)}const h=we(r,o),d=D(n,l),p=Pp(ne(a,Ee(s))),f=D(D(D(p,p),p),Ee(-.5));return{x:()=>F(D(D(n,1===o.rank?us(F(p,[1,1,1,o.shape[0]]),c):p),l),r.shape),mean:()=>{let v=D(D(p,Ee(-1)),d);return 1===o.rank&&(v=ve(v,u)),F(v,o.shape)},variance:()=>{let v=D(D(f,h),d);return 1===o.rank&&(v=ve(v,u)),F(v,o.shape)},scale:()=>{const v=D(h,p);let I=D(n,v);return 1===o.rank&&(I=ve(I,u)),F(I,o.shape)},offset:()=>{let v=n;return 1===o.rank&&(v=ve(v,u)),F(v,o.shape)}}}},WE={kernelName:Ol,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:o}=e,a=Ge(o,s.shape)[0];return{x:()=>{const l=s.shape,u=r.size,c=l.slice(0,a),h=c.length,d=l.slice(o,l.length).slice(1),p=d.length,f=bb(0,h),g=bb(h+1,h+1+p),m=wb([c,[u],d]),y=F(n,m),x=F(r,[u]),b=wb([[h],f,g]),v=Je(y,b);let I=qp(v,x,s.shape[a]);const C=kr(b);return I=Je(I,C),I},indices:()=>r}}};function bb(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function wb(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const UE={kernelName:Ba,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Ye(e),b:()=>Ye(s)}}},GE={kernelName:Va,gradFunc:n=>({x:()=>ge(n,"float32")})},HE={kernelName:Wa,gradFunc:n=>({x:()=>Ye(n)})},jE={kernelName:Ua,gradFunc:n=>({x:()=>Ye(n)})},KE={kernelName:Ga,gradFunc:n=>({x:()=>Ye(n)})},qE={kernelName:Pl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,o=Pn(s,0);return{x:()=>bn(o,n,D(n,r))}}},XE={kernelName:ja,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ne(e,1))}}},ZE={kernelName:Ha,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ge(e,"float32"))}}},YE={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const a=Kn(s);return we(n,D(ve(n,r,!0),a))}}}},JE=_({localResponseNormalizationBackprop_:function QE(n,t,e,s=5,r=1,o=1,a=.5){return A.runKernel(Xh,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:o,beta:a})}}),eA={kernelName:Ul,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:o,bias:a,alpha:i,beta:l}=e;return{x:()=>JE(s,r,n,o,a,i,l)}}};function vb(n,t,e,s){return t.rank<e.rank&&(t=F(t,Vt(t.shape,s))),n.rank<e.rank&&(n=F(n,Vt(n.shape,s))),{x:()=>D(n,ge(ws(e,t),n.dtype))}}const Ib={kernelName:Gl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,o=t[0],l=vb(n,t[1],o,Ge(r,o.shape));return{x:()=>l.x()}}},tA={kernelName:Ka,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,ge(Tr(e,s),"float32")),b:()=>D(n,ge(Ai(e,s),"float32"))}}},sA=_({maxPool3dGrad_:function nA(n,t,e,s,r,o,a){const i=N(n,"dy","maxPool3dGrad"),l=N(t,"input","maxPool3dGrad"),u=N(e,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),S(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),S(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),S(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),Sn("maxPool3dGrad",o,a);const m=A.runKernel(Yh,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:o,dimRoundingMode:a});return p?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),rA={kernelName:jl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=e;return{x:()=>sA(n,s,r,o,a,i,l)}}},aA=_({maxPoolGrad_:function oA(n,t,e,s,r,o,a){const i=N(n,"dy","maxPoolGrad"),l=N(t,"input","maxPoolGrad"),u=N(e,"output","maxPoolGrad");return S(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),S(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),S(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),Sn("maxPoolGrad",o,a),A.runKernel(Zh,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:o,dimRoundingMode:a})}}),Sb={kernelName:tu,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>Qe(n,o,s.shape)}}};const Nb={kernelName:hu,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>Fu(n,s,r)}}},Cb={kernelName:du,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>Kt(n,s)}}},nR=[xb,J_,eE,tE,nE,sE,rE,oE,aE,iE,lE,uE,dE,mE,gE,yE,xE,bE,wE,vE,IE,SE,CE,NE,$E,_E,EE,AE,RE,DE,{kernelName:Da,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=ke(n,ge(s,"float32")),l=Yt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{let i=D(n,ge(e,"float32"));const l=Yt(s.shape,r);l.length>0&&(i=F(ve(i,l),s.shape));const u=pt(s);return St(ke(i,ge(u,"float32")))}}}},FE,OE,LE,PE,zE,BE,ME,VE,WE,UE,GE,HE,jE,KE,qE,XE,ZE,YE,eA,Ib,Ib,tA,rA,{kernelName:Hl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i}=e;return{x:()=>aA(n,s,r,o,a,i)}}},{kernelName:Kl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,o=Ge(r,s.shape),l=G(ln(s.shape,o)[1]);return{x:()=>{const c=s.shape.slice();o.forEach(p=>{c[p]=1});const h=F(n,c);return ke(D(h,Xn(s.shape,"float32")),l)}}}},{kernelName:ql,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[o,a]=t,l=vb(n,a,o,Ge(r,o.shape));return{x:()=>l.x()}}},{kernelName:qa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,ge(so(e,s),"float32")),b:()=>D(n,ge(Pn(e,s),"float32"))}}},{kernelName:Xl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>Qe(n,o,s.shape)}}},{kernelName:Xa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=Yt(e.shape,r);return i.length>0?F(ve(n,i),e.shape):n},b:()=>{const i=D(n,St(_i(ke(e,s)))),l=Yt(s.shape,r);return l.length>0?F(ve(i,l),s.shape):i}}}},{kernelName:Za,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{const i=D(n,ge(s,"float32")),l=Yt(e.shape,r);return l.length>0?F(ve(i,l),e.shape):i},b:()=>{const i=D(n,ge(e,"float32")),l=Yt(s.shape,r);return l.length>0?F(ve(i,l),s.shape):i}}}},{kernelName:Zl,gradFunc:n=>({x:()=>St(n)})},{kernelName:Jl,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>Qt(e.shape,"float32")}}},{kernelName:Ql,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:eu,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return hs(n,s).map(o=>()=>o)}},Sb,Sb,{kernelName:Ya,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,o=e,a=s,i=Pe(o.shape,a.shape);return{a:()=>{const c=ge(a,"float32");let h=D(n,D(c,Ir(o,we(c,Ee(1)))));const d=Yt(o.shape,i);return d.length>0&&(h=ve(h,d)),F(h,o.shape)},b:()=>{const c=Pn(o,0),h=bn(c,qn(o),Ye(o));let d=D(n,D(r,h));const p=Yt(a.shape,i);return p.length>0&&(d=ve(d,p)),F(d,a.shape)}}}},{kernelName:nu,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=Pn(e,0);return{x:()=>bn(r,n,D(n,s)),alpha:()=>{let o=bn(r,Ye(n),D(n,e));const a=Yt(s.shape,n.shape);return a.length>0&&(o=ve(o,a)),F(o,s.shape)}}}},{kernelName:su,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;let o=[];return o=null==r?s.shape.map((a,i)=>i):"number"==typeof r?[r]:r,{x:()=>function vA(n,t,e){const s=n.shape.length,r=s-e.length,o=$t(e,s);let a=n;null!=o&&(a=Je(n,o));const i=a.shape.slice(),u=i.splice(s-e.length,e.length).reduce((d,p)=>d*p,1);i.push(u);let h=function wA(n,t,e){const s=n.shape.slice();s[e]=1;const r=F(t,s),o=Lu(n,e,!0,!1),a=Lu(n,e,!0,!0),i=D(o,a);return D(r,i)}(a.reshape(i),t,r);if(h=h.reshape(a.shape),null!=o){const d=kr(o);h=Je(h,d)}return h}(s,n,o)}}},{kernelName:Qa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,St(pt(e)))}}},{kernelName:ei,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(so(e,6),Yo(e));return{x:()=>D(n,ge(s,"float32"))}}},{kernelName:Ja,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,ge(Yo(e),"float32"))}}},{kernelName:ru,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>F(n,e.shape)}}},{kernelName:au,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>A.runKernel(ud,r,e)}}},{kernelName:ou,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>A.runKernel(ld,r,e)}}},{kernelName:iu,gradFunc:(n,t,e)=>{const{dims:s}=e,r=Ge(s,n.shape);return{x:()=>cs(n,r)}}},{kernelName:ti,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:ni,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>St(ke(n,D(Ir(e,1.5),2)))}}},{kernelName:lu,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>ge(Ye(e),"float32"),t:()=>D(n,ge(e,n.dtype)),e:()=>D(n,ge(Bu(e),n.dtype))}}},{kernelName:si,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=Pn(e,Ee(0)),r=Ee(nc),o=Ee(sc),a=D(n,o),i=D(D(n,r),Kn(ge(e,"float32")));return bn(s,a,i)}}}},{kernelName:ii,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(e,we(Ee(1),e)))}}},{kernelName:ai,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:ri,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Ou(ge(e,"float32")),n)}}},{kernelName:oi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Ip(ge(e,"float32")),n)}}},{kernelName:uu,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:o}=e,a=s.shape,[i,l]=Au(s,r,o),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],a[c]-i[c]-l[c]]);return{x:()=>$r(n,u)}}},{kernelName:pu,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,a=D(n,s);return{logits:()=>we(a,D(ve(a,[r],!0),s))}}},{kernelName:li,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Rs(e))}}},Nb,Nb,Cb,Cb,{kernelName:ui,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,D(xn(ge(e,"float32")),2))}}},{kernelName:ci,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ee(2);return{a:()=>D(n,D(r,we(e,s))),b:()=>D(n,D(r,we(s,e)))}}},{kernelName:xd,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(ge(e,"float32"),2))}}},{kernelName:mi,gradFunc:n=>({x:()=>Ye(n)})},{kernelName:hi,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Pe(e.shape,s.shape);return{a:()=>{let i=n;const l=Yt(e.shape,r);return l.length>0&&(i=ve(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Yt(s.shape,r);return l.length>0&&(i=ve(i,l)),F(St(i),s.shape)}}}},{kernelName:cu,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:o}=e;Ge(o,s.shape).forEach(u=>{r[u]=1});const i=F(n,r),l=D(i,Xn(s.shape,"float32"));return{x:()=>l}}},{kernelName:di,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,pt(Ou(e)))}}},{kernelName:pi,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(we(Ee(1),pt(e)),n)}}},{kernelName:fi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let a=Ye(s);if(1===s.rank)for(let i=0;i<r[0];++i)a=ne(a,Qe(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)a=ne(a,Qe(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)a=ne(a,Qe(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)a=ne(a,Qe(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return a}}}},{kernelName:Fo,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,o=kr(r);return{x:()=>Je(n,o)}}},{kernelName:mu,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>Yn(n,r)}}},{kernelName:gu,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function eR(n,t){const e=Xs(t,Ye(t)),s=Ei(n,e);let r=Tr(t,Ee(0,"int32"));const o=s.rank-r.rank;for(let i=0;i<o;++i)r=_n(r,i+1);r=Ds(r,Xn(s.shape,"bool"));const a=Ye(s);return bn(r,s,a)}(n,e)}}},{kernelName:yu,gradFunc:n=>({x:()=>Ye(n)})}];for(const n of nR)iS(n);q().prototype.abs=function(){return this.throwIfDisposed(),Zt(this)},q().prototype.acos=function(){return this.throwIfDisposed(),Oy(this)},q().prototype.acosh=function(){return this.throwIfDisposed(),Ly(this)},q().prototype.add=function(n){return this.throwIfDisposed(),ne(this,n)},q().prototype.all=function(n,t){return this.throwIfDisposed(),gp(this,n,t)},q().prototype.any=function(n,t){return this.throwIfDisposed(),Ru(this,n,t)},q().prototype.argMax=function(n){return this.throwIfDisposed(),Go(this,n)},q().prototype.argMin=function(n){return this.throwIfDisposed(),Py(this,n)},q().prototype.asScalar=function(){return this.throwIfDisposed(),S(1===this.size,()=>"The array must have only 1 element."),F(this,[])},q().prototype.asType=function(n){return this.throwIfDisposed(),ge(this,n)},q().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])},q().prototype.as2D=function(n,t){return this.throwIfDisposed(),F(this,[n,t])},q().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),F(this,[n,t,e])},q().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),F(this,[n,t,e,s])},q().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),F(this,[n,t,e,s,r])},q().prototype.asin=function(){return this.throwIfDisposed(),zy(this)},q().prototype.asinh=function(){return this.throwIfDisposed(),My(this)},q().prototype.atan=function(){return this.throwIfDisposed(),By(this)},q().prototype.atan2=function(n){return this.throwIfDisposed(),Vy(this,n)},q().prototype.atanh=function(){return this.throwIfDisposed(),Wy(this)},q().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),Du(this,n,t,e,s)},q().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),Fu(this,n,t)},q().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),Ni(this,n,t,e,s,r)},q().prototype.broadcastTo=function(n){return this.throwIfDisposed(),Ko(this,n)},q().prototype.cast=function(n){return this.throwIfDisposed(),ge(this,n)},q().prototype.ceil=function(){return this.throwIfDisposed(),qy(this)},q().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),Ln(this,n,t)},q().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof It&&(n=[n]),Kt([this,...n],t)},q().prototype.conv1d=function(n,t,e,s,r,o){return this.throwIfDisposed(),bp(this,n,t,e,s,r,o)},q().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),vp(this,n,t,e,s,r)},q().prototype.conv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Cr(this,n,t,e,s,r,o)},q().prototype.cos=function(){return this.throwIfDisposed(),Ou(this)},q().prototype.cosh=function(){return this.throwIfDisposed(),Ip(this)},q().prototype.cumprod=function(n,t,e){return this.throwIfDisposed(),Lu(this,n,t,e)},q().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),Sp(this,n,t,e)},q().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),nx(this,n,t)},q().prototype.depthwiseConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Ci(this,n,t,e,s,r,o)},q().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),sx(this,n,t,e,s,r)},q().prototype.divNoNan=function(n){return this.throwIfDisposed(),rx(this,n)},q().prototype.div=function(n){return this.throwIfDisposed(),ke(this,n)},q().prototype.dot=function(n){return this.throwIfDisposed(),ox(this,n)},q().prototype.elu=function(){return this.throwIfDisposed(),ki(this)},q().prototype.equal=function(n){return this.throwIfDisposed(),ws(this,n)},q().prototype.erf=function(){return this.throwIfDisposed(),ax(this)},q().prototype.euclideanNorm=function(n,t){return this.throwIfDisposed(),ux(this,n,t)},q().prototype.exp=function(){return this.throwIfDisposed(),Kn(this)},q().prototype.expandDims=function(n){return this.throwIfDisposed(),_n(this,n)},q().prototype.expm1=function(){return this.throwIfDisposed(),cx(this)},q().prototype.fft=function(){return this.throwIfDisposed(),Xu(this)},q().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])},q().prototype.floor=function(){return this.throwIfDisposed(),_i(this)},q().prototype.floorDiv=function(n){return this.throwIfDisposed(),Jd(this,n)},q().prototype.gather=function(n,t,e){return this.throwIfDisposed(),Ei(this,n,t,e)},q().prototype.greaterEqual=function(n){return this.throwIfDisposed(),Tr(this,n)},q().prototype.greater=function(n){return this.throwIfDisposed(),Pn(this,n)},q().prototype.ifft=function(){return this.throwIfDisposed(),Oi(this)},q().prototype.irfft=function(){return this.throwIfDisposed(),Gp(this)},q().prototype.isFinite=function(){return this.throwIfDisposed(),hx(this)},q().prototype.isInf=function(){return this.throwIfDisposed(),dx(this)},q().prototype.isNaN=function(){return this.throwIfDisposed(),px(this)},q().prototype.leakyRelu=function(n){return this.throwIfDisposed(),zu(this,n)},q().prototype.lessEqual=function(n){return this.throwIfDisposed(),so(this,n)},q().prototype.less=function(n){return this.throwIfDisposed(),Ai(this,n)},q().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),fx(this,n,t,e,s)},q().prototype.logSigmoid=function(){return this.throwIfDisposed(),mx(this)},q().prototype.logSoftmax=function(n){return this.throwIfDisposed(),Tp(this,n)},q().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),$p(this,n,t)},q().prototype.log=function(){return this.throwIfDisposed(),qn(this)},q().prototype.log1p=function(){return this.throwIfDisposed(),Mu(this)},q().prototype.logicalAnd=function(n){return this.throwIfDisposed(),Ds(this,n)},q().prototype.logicalNot=function(){return this.throwIfDisposed(),Bu(this)},q().prototype.logicalOr=function(n){return this.throwIfDisposed(),_p(this,n)},q().prototype.logicalXor=function(n){return this.throwIfDisposed(),gx(this,n)},q().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),je(this,n,t,e)},q().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),Wu(this,n,t,e,s)},q().prototype.max=function(n,t){return this.throwIfDisposed(),ls(this,n,t)},q().prototype.maximum=function(n){return this.throwIfDisposed(),Xs(this,n)},q().prototype.mean=function(n,t){return this.throwIfDisposed(),Lt(this,n,t)},q().prototype.min=function(n,t){return this.throwIfDisposed(),Ti(this,n,t)},q().prototype.minimum=function(n){return this.throwIfDisposed(),ro(this,n)},q().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),xx(this,n,t)},q().prototype.mod=function(n){return this.throwIfDisposed(),bx(this,n)},q().prototype.mul=function(n){return this.throwIfDisposed(),D(this,n)},q().prototype.neg=function(){return this.throwIfDisposed(),St(this)},q().prototype.norm=function(n,t,e){return this.throwIfDisposed(),$i(this,n,t,e)},q().prototype.notEqual=function(n){return this.throwIfDisposed(),Xo(this,n)},q().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),Ap(this,n,t,e)},q().prototype.onesLike=function(){return this.throwIfDisposed(),Zn(this)},q().prototype.pad=function(n,t){return this.throwIfDisposed(),$r(this,n,t)},q().prototype.pool=function(n,t,e,s,r,o){return this.throwIfDisposed(),wx(this,n,t,e,s,r,o)},q().prototype.pow=function(n){return this.throwIfDisposed(),Ir(this,n)},q().prototype.prelu=function(n){return this.throwIfDisposed(),Hu(this,n)},q().prototype.prod=function(n,t){return this.throwIfDisposed(),vx(this,n,t)},q().prototype.reciprocal=function(){return this.throwIfDisposed(),Ix(this)},q().prototype.relu=function(){return this.throwIfDisposed(),Fs(this)},q().prototype.relu6=function(){return this.throwIfDisposed(),Op(this)},q().prototype.reshapeAs=function(n){return this.throwIfDisposed(),F(this,n.shape)},q().prototype.reshape=function(n){return this.throwIfDisposed(),F(this,n)},q().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),Bx(this,n,t,e)},q().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),Vx(this,n,t,e)},q().prototype.reverse=function(n){return this.throwIfDisposed(),cs(this,n)},q().prototype.rfft=function(){return this.throwIfDisposed(),Zu(this)},q().prototype.round=function(){return this.throwIfDisposed(),Lp(this)},q().prototype.rsqrt=function(){return this.throwIfDisposed(),Pp(this)},q().prototype.selu=function(){return this.throwIfDisposed(),zp(this)},q().prototype.separableConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Mp(this,n,t,e,s,r,o)},q().prototype.sigmoid=function(){return this.throwIfDisposed(),Rs(this)},q().prototype.sign=function(){return this.throwIfDisposed(),Sx(this)},q().prototype.sin=function(){return this.throwIfDisposed(),Vp(this)},q().prototype.sinh=function(){return this.throwIfDisposed(),Wp(this)},q().prototype.slice=function(n,t){return this.throwIfDisposed(),Qe(this,n,t)},q().prototype.softmax=function(n){return this.throwIfDisposed(),Fi(this,n)},q().prototype.softplus=function(){return this.throwIfDisposed(),qo(this)},q().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),Gu(this,n,t)},q().prototype.split=function(n,t){return this.throwIfDisposed(),zn(this,n,t)},q().prototype.sqrt=function(){return this.throwIfDisposed(),xn(this)},q().prototype.square=function(){return this.throwIfDisposed(),pt(this)},q().prototype.squaredDifference=function(n){return this.throwIfDisposed(),Hp(this,n)},q().prototype.squeeze=function(n){return this.throwIfDisposed(),ao(this,n)},q().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof It?[this,n]:[this,...n];return Yn(e,t)},q().prototype.step=function(n){return this.throwIfDisposed(),Yo(this,n)},q().prototype.stridedSlice=function(n,t,e,s,r,o,a,i){return this.throwIfDisposed(),Nx(this,n,t,e,s,r,o,a,i)},q().prototype.sub=function(n){return this.throwIfDisposed(),we(this,n)},q().prototype.sum=function(n,t){return this.throwIfDisposed(),ve(this,n,t)},q().prototype.tan=function(){return this.throwIfDisposed(),Cx(this)},q().prototype.tanh=function(){return this.throwIfDisposed(),jo(this)},q().prototype.tile=function(n){return this.throwIfDisposed(),us(this,n)},q().prototype.toBool=function(){return this.throwIfDisposed(),ge(this,"bool")},q().prototype.toFloat=function(){return this.throwIfDisposed(),ge(this,"float32")},q().prototype.toInt=function(){return this.throwIfDisposed(),ge(this,"int32")},q().prototype.topk=function(n,t){return this.throwIfDisposed(),$x(this,n,t)},q().prototype.transpose=function(n){return this.throwIfDisposed(),Je(this,n)},q().prototype.unique=function(n){return this.throwIfDisposed(),_x(this,n)},q().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),qp(this,n,t)},q().prototype.unstack=function(n){return this.throwIfDisposed(),hs(this,n)},q().prototype.where=function(n,t){return this.throwIfDisposed(),bn(n,this,t)},q().prototype.zerosLike=function(){return this.throwIfDisposed(),Ye(this)};class Ps extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ps.prototype)}}class ds extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ds.prototype)}}class O extends Error{constructor(t){super(t),Object.setPrototypeOf(this,O.prototype)}}class ze extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ze.prototype)}}class Df extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Df.prototype)}}class kb extends Error{constructor(t){super(t),Object.setPrototypeOf(this,kb.prototype)}}class Tb{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=t}}function uo(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function Qn(n,t){if(!n)throw new Df(t)}function $b(n,t){let e=0;for(const s of n)s===t&&e++;return e}function An(n){return 1===n.length?n[0]:n}function yt(n){return Array.isArray(n)?n:[n]}function tr(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function co(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let ps={};function Ff(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function Of(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>Of(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?Of(s):n[e]=s.value)}}}function Bi(n,t={},e={},s="object",r=!1){if("string"==typeof n){let a;if(n in e)a=e[n];else if(n in ps)a=ps[n];else if(a=t[n],null==a)throw new O(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const o=n;if(null==o.className||null==o.config)throw new O(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const a=o.className;let i,l;if(a in e?[i,l]=e[a]:a in ps?[i,l]=ps.className:a in t&&([i,l]=t[a]),null==i)throw new O(`Unknown ${s}: ${a}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(ps))u[p]=ps[p];for(const p of Object.keys(e))u[p]=e[p];o.config.customObjects=u;const h=Object.assign({},ps);for(const p of Object.keys(e))ps[p]=e[p];Of(o.config);const d=l(i,o.config,e,r);return ps=Object.assign({},h),d}{const u=Object.assign({},ps);for(const h of Object.keys(e))ps[h]=e[h];const c=new i(o.config);return ps=Object.assign({},u),c}}}function rc(n,t){return-1*function sR(n,t){return n<t?-1:n>t?1:0}(n,t)}function _r(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function rR(n){if(null==n)throw new O(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function ho(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new O(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function Lf(n,t,e=0,s=1/0){return Qn(e>=0),Qn(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function un(n,t){Array.isArray(n)?(S(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>un(e,`element ${s+1} of ${t}`))):S(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${_b(n)}.`)}function _b(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>_b(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function Eb(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}let aR=0;function Ab(){return aR++}const oc={};function ac(n=""){return n in oc||(oc[n]=0),oc[n]+=1,n+oc[n].toString()}const iR=["channelsFirst","channelsLast"],lR=["nearest","bilinear"],uR=["valid","same","causal"],cR=["max","avg"],hR=["sum","mul","concat","ave"],ea=new Map;function Ut(n){ho(iR,"DataFormat",n)}function Jn(n){ho(uR,"PaddingMode",n)}function Rb(n){ho(cR,"PoolMode",n)}const Vi=[];function po(n,t){Vi.push(n);try{const e=t();return Vi.pop(),e}catch(e){throw Vi.pop(),e}}function Fb(n){if(!Lb(n))throw new Error("Not a valid tensor name: '"+n+"'");return function pR(){return 0===Vi.length?"":Vi.join("/")+"/"}()+n}function Ob(n){if(!Lb(n))throw new Error("Not a valid tensor name: '"+n+"'");ea.has(n)||ea.set(n,0);const t=ea.get(n);if(ea.set(n,ea.get(n)+1),t>0){const e=`${n}_${t}`;return ea.set(e,1),e}return n}const fR=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Lb(n){return!!n.match(fR)}function mR(n){return n===parseInt(n.toString(),10)}function Er(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function ta(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function Ar(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function vs(n,t){if(t<n)throw new O(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}let ic;function Jt(){return null==ic&&(ic=function uN(){return A.backend}().epsilon()),ic}function zs(n,t){return ge(n,t)}function Wi(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(n,e)}function fo(n,t,e){return z(()=>{switch(n.rank){case 1:return Ku(n,t,e);case 2:return Up(n,[t,0],[e,n.shape[1]]);case 3:return qu(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return Di(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return Qe(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return Qe(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new O(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Pf(n,t,e){return z(()=>{switch(n.rank){case 1:return Ku(n,t,e);case 2:return Up(n,[0,t],[n.shape[0],e]);case 3:return qu(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return Di(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function lc(n,t,e,s){return z(()=>{switch(n.rank){case 1:return Ku(n,t,e);case 2:switch(s){case 1:return fo(n,t,e);case 2:return Pf(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return fo(n,t,e);case 2:return qu(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return Pf(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return fo(n,t,e);case 2:return Di(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return Di(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return Pf(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function zf(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),Kt(n,t)}function zb(n,t){switch(n.rank){case 1:return Xy([n,t]);case 2:return Zy([n,t],0);case 3:return Yy([n,t],0);case 4:return Qy([n,t],0);default:throw new O(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function Mf(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new O(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return us(n,t)}function uc(n,t=0,e=1,s,r){return Fp(n,t,e,s,r)}function Ms(n,t,e,s){if(n.rank<2||t.rank<2)throw new ze(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new ze(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return nf({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Bf(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),o=r.pop();n=F(n,[-1,o]);const a=t.shape.slice(),i=a.pop(),l=a.pop(),u=[...a,i],c=Array.from({length:t.rank},(f,g)=>0===g?t.rank-2:g<=t.rank-2?g-1:g);t=F(Je(t,c),[l,-1]);const h=[...r,...u];return F(nf({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Bf(n.rank,s,"channelsLast"):null,activation:e}),h)}}function Mb(n,t,e){return z(()=>(t=Array.isArray(t)?En(t,"int32"):ge(t,"int32"),Ei(n,t,e)))}function Ui(n){return D(n,n)}function Bf(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new O(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new O(`Unsupported input rank by biasAdd: ${t.rank}`)}function Ss(n,t,e){return z(()=>(null==e&&(e="channelsLast"),Ut(e),ne(n,Bf(n.rank,t,e))))}function Bb(n,t,e,s){return z(()=>Rx(n,t,e,s))}function Gi(n,t,e=!1){return e?n():t()}const NR=["fanIn","fanOut","fanAvg"],CR=["normal","uniform","truncatedNormal"];class fs extends Vo{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}se((()=>{class n extends fs{apply(e,s){return Qt(e,s)}}return n.className="Zeros",n})());let Vb=(()=>{class n extends fs{apply(e,s){return Xn(e,s)}}return n.className="Ones",n})();se(Vb),se((()=>{class n extends fs{constructor(e){if(super(),"object"!=typeof e)throw new O(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new O(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return z(()=>D(Ee(this.value),Xn(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),se((()=>{class n extends fs{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return oo(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),se((()=>{class n extends fs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new ze(`randomNormal does not support dType ${s}.`);return uc(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),se((()=>{class n extends fs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new ze(`truncatedNormal does not support dType ${s}.`);return Kp(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),se((()=>{class n extends fs{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return z(()=>{if(2!==e.length||e[0]!==e[1])throw new O("Identity matrix initializer can only be used for 2D square matrices.");return D(this.gain,kp(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let es=(()=>{class n extends fs{constructor(e){if(super(),e.scale<0)throw new O(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function kR(n){ho(NR,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function TR(n){ho(CR,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function $R(n,t="channelsLast"){let e,s;if(Ut(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=Er(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=Er(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=Er(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],a=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,a):Math.max(1,(o+a)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new ze(`${this.getClassName()} does not support dType ${s}.`);return Kp(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return oo(e,-l,l,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();se(es);let Wb=(()=>{class n extends es{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return es.className}}return n.className="GlorotUniform",n})();se(Wb);let Ub=(()=>{class n extends es{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return es.className}}return n.className="GlorotNormal",n})();se(Ub);let Gb=(()=>{class n extends es{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return es.className}}return n.className="HeNormal",n})();se(Gb);let Hb=(()=>{class n extends es{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return es.className}}return n.className="HeUniform",n})();se(Hb);let jb=(()=>{class n extends es{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return es.className}}return n.className="LeCunNormal",n})();se(jb);let Kb=(()=>{class n extends es{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return es.className}}return n.className="LeCunUniform",n})();se(Kb),se((()=>{class n extends fs{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,s){return z(()=>{if(e.length<2)throw new ze("Shape must be at least 2D.");if("int32"!==s&&"float32"!==s&&void 0!==s)throw new TypeError(`Unsupported data type ${s}.`);const r=G(e.slice(0,-1)),o=e[e.length-1],a=r*o;a>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);const l=uc([Math.max(o,r),Math.min(o,r)],0,1,s,this.seed),u=Ux.qr(l,!1);let c=u[0];const d=u[1].flatten().stridedSlice([0],[Math.min(o,r)*Math.min(o,r)],[Math.min(o,r)+1]);return c=D(c,d.sign()),r<o&&(c=c.transpose()),D(Ee(this.gain),c.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const qb={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Xb(n,t={}){return Bi(n,as.getMap().classNameMap,t,"initializer")}function At(n){return Ff(n)}function Nt(n){if("string"==typeof n){const t=n in qb?qb[n]:n;if("GlorotNormal"===t)return new Ub;if("GlorotUniform"===t)return new Wb;if("HeNormal"===t)return new Gb;if("HeUniform"===t)return new Hb;if("LeCunNormal"===t)return new jb;if("LeCunUniform"===t)return new Kb;{const e={};return e.className=t,e.config={},Xb(e)}}return n instanceof fs?n:Xb(n)}function Vf(n){return Array.isArray(n)&&Array.isArray(n[0])}function cc(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function Le(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new O(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function nt(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new O(`Expected exactly 1 Shape; got ${n.length}`)}return n}function hc(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const Zb="Variable";class Bs{constructor(t,e="float32",s=Zb,r=!0,o=null){this.dtype=e??"float32",this.shape=t.shape,this.id=Ab(),this.originalName=Fb(s=s??Zb),this.name=Ob(this.originalName),this.trainable_=r,this.constraint=o,this.val=Ex(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function _R(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Wf(n){return n.map(t=>t.read())}function Uf(n){n.forEach(t=>{t[0].write(t[1])})}class en{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Vs{constructor(t,e,s,r,o,a,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=i,this.id=Ab(),null!=a&&(this.originalName=Fb(a),this.name=Ob(this.originalName)),this.rank=e.length}}let ER=0;class dc{constructor(t,e){this.callArgs=e,this.id=ER++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)s?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let AR=0;class We extends Vo{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=AR++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=tr(s)+"_"+ac(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let o=null;null!=t.batchSize&&(o=t.batchSize),s=[o].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new ds(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new O(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return An(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return An(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Ps(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Ps(`Layer ${this.name} is not connected, no input to return.`);return An(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Ps(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Ps(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return An(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=yt(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=yt(this.inputSpec);if(t.length!==e.length)throw new O(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let s=0;s<t.length;s++){const r=t[s],o=e[s];if(null==o)continue;const a=r.rank;if(null!=o.ndim&&a!==o.ndim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${a}`);if(null!=o.maxNDim&&a>o.maxNDim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${a}`);if(null!=o.minNDim&&a<o.minNDim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${a}.`);if(null!=o.dtype&&r.dtype!==o.dtype)throw new O(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);if(o.axes){const i=r.shape;for(const l in o.axes){const u=Number(l),c=o.axes[l];if(null!=c&&-1===[c,null].indexOf(u>=0?i[u]:i[i.length+u]))throw new O(`Input ${s} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${i}.`)}}if(null!=o.shape)for(let i=0;i<o.shape.length;++i){const l=o.shape[i],u=r.shape[i];if(null!=l&&null!=u&&l!==u)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=yt(t);let r=!0;for(const a of s)if(!(a instanceof Vs)){r=!1;break}let o=!0;for(const a of s)if(a instanceof Vs){o=!1;break}if(r===o)throw new O("Arguments to apply() must be all SymbolicTensors or all Tensors");return po(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const a=[];for(const i of yt(t))a.push(i.shape);this.build(An(a)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(t),o){let a=this.call(t,e);const i=yt(a),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(a=An(l),null!=this.activityRegularizer)throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const a=function RR(n){n=yt(n);const t=[];for(const e of n)t.push(e.shape);return An(t)}(t),i=this.computeOutputShape(a);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?a[0]:a),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,h)=>new Vs(u,c,this,yt(t),e,this.name,h)):new Vs(u,i,this,yt(t),e,this.name),this.addInboundNode(t,l,null,null,a,i,e),this._refCount++,null!=this.activityRegularizer)throw new ze("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Ps(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Ps(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new ds(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return hc(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Wf(t?this.trainableWeights:this.weights)}setWeights(t){z(()=>{const e=this.weights;if(e.length!==t.length)throw new O(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=Wf(e);for(let o=0;o<r.length;++o){const a=r[o],i=e[o],l=t[o];if(!Xe(a.shape,l.shape))throw new O(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}Uf(s)})}addWeight(t,e,s,r,o,a,i,l){if(-1!==this._addedWeightNames.indexOf(t))throw new O(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=l?l():Nt("zeros"));const u=r.apply(e,s),c=new Bs(u,s,t,a,i);return u.dispose(),null!=o&&this.addLoss(()=>o.apply(c.read())),null==a&&(a=!0),a?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=yt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,s,r,o,a,i=null){const l=yt(t);e=yt(e),s=yt(s),r=yt(r),o=cc(o),a=cc(a);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new dc({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:a},i);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Yb(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const u=Yb(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let Hi=(()=>{class n extends We{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:ac("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new O("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new O("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new O("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new Vs(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new dc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new O(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();function Qb(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new O("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new Hi({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}se(Hi);class Rr{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Rr)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new O(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function FR(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return ge(t,n.dtype)}catch{throw new O(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Vs){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Vs){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&He(this.id2Mask)}}const pc=new Tb,fc=new Tb;function ji(n,t,e,s){const r=null!=e&&e.training,o=Array.isArray(n),a=o?n:[n],i=a.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let d,h=pc.get(c);if(null==h){const f=function LR(n,t){S(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=Jb(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of n){const{sorted:a,recipientMap:i}=Jb(o,t);for(const l of a)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:PR(s)}}(a,t);h=f.sorted,d=f.recipientCounts,pc.put(c,h),fc.put(c,d)}d={},r||Object.assign(d,fc.get(c));const p=new Rr(t);for(let f=0;f<h.length;++f){if(null!=s){const E=Qd().numTensors;E>s.maxNumTensors&&(s.maxNumTensors=E),E<s.minNumTensors&&(s.minNumTensors=E)}const g=h[f],m=g.sourceLayer;if(m instanceof Hi)continue;const y=[],x=[],b=[];let v=!1;for(const E of g.inputs){const R=p.getValue(E),L=p.getMask(E);y.push(R),x.push(L),null!=L&&(v=!0),r||(d[E.name]--,0===d[E.name]&&!t.hasKey(E)&&-1===i.indexOf(E.name)&&!R.isDisposed&&!0!==E.sourceLayer.stateful&&b.push(R))}v&&((e=e||{}).mask=x[0]);const I=yt(m.apply(y,e));let C=null;m.supportsMasking&&(C=m.computeMask(y,x));const k=zR(g),T=Array.isArray(k)?k:[k];for(let E=0;E<T.length;++E){p.hasKey(T[E])||p.add(T[E],I[E],Array.isArray(C)?C[0]:C);const R=i.indexOf(T[E].name);-1!==R&&(l[R]=I[E])}r||He(b)}return p.disposeMasks(),o?l:l[0]}function PR(n){const t={};for(const e in n)t[e]=n[e].size;return t}function Jb(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const o=[],a=[];for(o.push(n);o.length>0;){const i=o[o.length-1];if(e.has(i.name)){o.pop();continue}const l=a[a.length-1]===o.length-1;if(0===i.inputs.length||l)o.pop(),s.push(i),e.add(i.name),l&&a.pop();else{a.push(o.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&o.push(u)}}return{sorted:s,recipientMap:r}}function zR(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}function Gf(n,t){return z(()=>xn(ve(D(n,n),t,!0)))}M().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function OR(n){pc?.setMaxEntries(n),fc?.setMaxEntries(n)});class Ki extends Vo{getConfig(){return{}}}se((()=>{class n extends Ki{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>{const s=Gf(e,this.axis),r=Ln(s,0,this.maxValue);return D(e,ke(r,ne(Jt(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),se((()=>{class n extends Ki{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>ke(e,ne(Jt(),Gf(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),se((()=>{class n extends Ki{apply(e){return Fs(e)}}return n.className="NonNeg",n})()),se((()=>{class n extends Ki{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return z(()=>{const s=Gf(e,this.axis),r=ne(D(this.rate,Ln(s,this.minValue,this.maxValue)),D(1-this.rate,s));return D(e,ke(r,ne(Jt(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const e0={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function tn(n){return Ff(n)}function t0(n,t={}){return Bi(n,as.getMap().classNameMap,t,"constraint")}function nn(n){return null==n?null:"string"==typeof n?t0({className:n in e0?e0[n]:n,config:{}}):n instanceof Ki?n:t0(n)}function Dr(n){return Hf.apply(this,arguments)}function Hf(){return(Hf=(0,B.Z)(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const o=n[r];if("number"!=typeof o){const a=o;t.push(a.data()),e.push(r),s.push(a)}}if(t.length>0){const r=yield Promise.all(t);for(let o=0;o<r.length;++o)n[e[o]]=r[o][0];He(s)}})).apply(this,arguments)}function n0(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}class na{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return(0,B.Z)(function*(){})()}onEpochEnd(t,e){return(0,B.Z)(function*(){})()}onBatchBegin(t,e){return(0,B.Z)(function*(){})()}onBatchEnd(t,e){return(0,B.Z)(function*(){})()}onTrainBegin(t){return(0,B.Z)(function*(){})()}onTrainEnd(t){return(0,B.Z)(function*(){})()}setModel(t){}}class BR{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return(0,B.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return(0,B.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return(0,B.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return(0,B.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return(0,B.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return(0,B.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class VR extends na{constructor(){super()}onEpochBegin(t){var e=this;return(0,B.Z)(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return(0,B.Z)(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const o in e){const a=e[o];if("number"==typeof a)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+a*r;else{let i;o in s.totals?i=s.totals[o]:s.totals[o]=0;const l=z(()=>ne(s.totals[o],D(a,r)));s.totals[o]=l,i?.dispose()}}})()}onEpochEnd(t,e){var s=this;return(0,B.Z)(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:z(()=>{const o=D(ke(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),on(e[r])}))})()}}class WR extends na{onTrainBegin(t){var e=this;return(0,B.Z)(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return(0,B.Z)(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return(0,B.Z)(function*(){const e=[],s=[],r=[];for(const a in t.history){const i=t.history[a];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(a),r.push(l))}const o=yield Promise.all(e);for(let a=0;a<o.length;++a)t.history[s[a]][r[a]].dispose(),t.history[s[a]][r[a]]=o[a][0]})()}}class UR extends na{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Hx,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");fh(this.yieldEvery)&&(this.maybeWait=function oR(n,t,e){let r,s=null!=e?e():Tn();return(...a)=>{const i=null!=e?e():Tn();return i-s<t||(s=i,r=n(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return(0,B.Z)(function*(){const o=[];null!=r.yield&&(yield Dr(s),o.push(r.yield(t,e,s))),o.push(r.nextFrameFunc()),yield Promise.all(o)})()}onEpochBegin(t,e){var s=this;return(0,B.Z)(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield Dr(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return(0,B.Z)(function*(){const r=[];null!=s.epochEnd&&(yield Dr(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return(0,B.Z)(function*(){null!=s.batchBegin&&(yield Dr(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return(0,B.Z)(function*(){const r=[];null!=s.batchEnd&&(yield Dr(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):fh(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return(0,B.Z)(function*(){null!=e.trainBegin&&(yield Dr(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return(0,B.Z)(function*(){null!=e.trainEnd&&(yield Dr(t),yield e.trainEnd(t))})()}}function s0(n,t){return null==n&&(n={}),n instanceof na?[n]:Array.isArray(n)&&n[0]instanceof na?n:yt(n).map(s=>new UR(s,t))}let GR=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){S(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(o=>{if(o===e)throw new O("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const o=+r;e>=o&&s.push(...n.constructors[o])}return s.map(r=>new r)}}return n.constructors={},n})();function r0(n,t,e,s,r,o,a,i,l){const u=new WR,c=[new VR,...GR.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new BR(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:a,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function nr(n,t={},e=!1){return Bi(n,as.getMap().classNameMap,t,"layer",e)}function mc(n,t){return z(()=>{"float32"!==n.dtype&&(n=ge(n,"float32"));const e=ve(Ui(n),t,!0),s=Wo(e.shape,Jt()),r=xn(Xs(e,s));return ke(n,r)})}function gc(n,t){return z(()=>Lt(Ui(we(t,n)),-1))}function jf(n,t){return z(()=>Lt(Zt(we(t,n)),-1))}function Kf(n,t){return z(()=>{const e=we(n,t),s=Ln(Zt(n),Jt(),Number.MAX_VALUE),r=Zt(ke(e,s));return D(100,Lt(r,-1))})}function qi(n,t,e=!1){return z(()=>{if(e)t=Fi(t);else{const s=ve(t,t.shape.length-1,!0);t=ke(t,s)}return t=Ln(t,Jt(),1-Jt()),St(ve(D(ge(n,"float32"),qn(t)),t.shape.length-1))})}function yc(n,t,e=!1){return z(()=>{const s=ge(_i(function bR(n){const t=[Er(n.shape)];return F(n,t)}(n)),"int32"),r=(t=Ln(t,Jt(),1-Jt())).shape;return qi(F(Ap(s,r[r.length-1]),r),t,e)})}function xc(n,t){return z(()=>{let e;return e=Ln(t,Jt(),1-Jt()),e=qn(ke(e,we(1,e))),Lt(function ZR(n,t){if(!Xe(n.shape,t.shape))throw new O(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return z(()=>{const e=Fs(t),s=St(Zt(t));return ne(we(e,D(t,n)),Mu(Kn(s)))})}(n,e),-1)})}function o0(n,t){return z(()=>{const e=mc(n,-1),s=mc(t,-1),r=D(e,s);return St(ve(r,-1))})}const bc={meanSquaredError:gc,meanAbsoluteError:jf,meanAbsolutePercentageError:Kf,meanSquaredLogarithmicError:function HR(n,t){return z(()=>{const e=Ln(t,Jt(),Number.MAX_VALUE),s=qn(ne(1,e)),r=Ln(n,Jt(),Number.MAX_VALUE),o=qn(ne(1,r));return Lt(Ui(we(s,o)),-1)})},squaredHinge:function jR(n,t){return z(()=>{const e=Xs(0,we(1,D(n,t)));return Lt(Ui(e),-1)})},hinge:function KR(n,t){return z(()=>{const e=Xs(0,we(1,D(n,t)));return Lt(e,-1)})},categoricalHinge:function qR(n,t){return z(()=>{const e=ve(D(n,t),-1),s=ls(D(we(1,n),t),-1);return Xs(0,ne(1,we(s,e)))})},logcosh:function XR(n,t){return z(()=>{const e=Math.log(2),s=we(t,n),r=we(ne(s,qo(D(-2,s))),e);return Lt(r,-1)})},categoricalCrossentropy:qi,sparseCategoricalCrossentropy:yc,binaryCrossentropy:xc,kullbackLeiblerDivergence:function YR(n,t){return z(()=>{const e=Ln(n,Jt(),1),s=Ln(t,Jt(),1);return ve(D(n,qn(ke(e,s))),-1)})},poisson:function QR(n,t){return z(()=>{const e=qn(ne(Jt(),t));return Lt(we(t,D(n,e)),-1)})},cosineProximity:o0};function qf(n){if("string"==typeof n){if(n in bc)return bc[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new O(t)}return n}function a0(n,t){return z(()=>{const e=D(.5,Zn(t)),s=zs(Pn(t,e),n.dtype);return Lt(ws(n,s),-1)})}function i0(n,t){return z(()=>zs(ws(Go(n,-1),Go(t,-1)),"float32"))}function nD(n,t){return xc(n,t)}function sD(n,t){return n.rank===t.rank&&(n=ao(n,[n.rank-1])),(t=Go(t,-1)).dtype!==n.dtype&&(t=ge(t,n.dtype)),ge(ws(n,t),"float32")}const u0=qi,c0=yc,wc={binaryAccuracy:a0,categoricalAccuracy:i0,precision:function tD(n,t){return z(()=>{const e=function l0(n,t){return z(()=>ge(ve(Ds(ws(n,1),ws(t,1))),"float32"))}(n,t),s=function eD(n,t){return z(()=>ge(ve(Ds(ws(n,0),ws(t,1))),"float32"))}(n,t),r=ne(e,s);return ge(bn(Pn(r,0),ke(e,r),0),"float32")})},categoricalCrossentropy:u0,sparseCategoricalCrossentropy:c0,mse:gc,MSE:gc,mae:jf,MAE:jf,mape:Kf,MAPE:Kf,cosine:o0};function hD(n){if("string"==typeof n&&n in wc)return wc[n];if("string"!=typeof n&&null!=n)return n;throw new O(`Unknown metric ${n}`)}function vc(n){if(Qn(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(bc))if(bc[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(wc))if(wc[e]===n){t=e;break}return void 0!==t?t:n.name}}function d0(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!Xf(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Xf(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!Xf(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!Xf(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function Ic(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function gD(n,t,e){let s,r;try{r=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{r="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}Ic([`${n.name} (${n.getClassName()})`,r,s,n.countParams().toString()],t,e)}function yD(n,t,e,s){let r,o;try{o=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{o="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const a=[];for(const h of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let d=0;d<h.inboundLayers.length;++d)a.push(`${h.inboundLayers[d].name}[${h.nodeIndices[d]}][${h.tensorIndices[d]}]`);const i=n.name,l=n.getClassName(),u=0===a.length?"":a[0];Ic([`${i} (${l})`,o,r,n.countParams().toString(),u],t,s);for(let h=1;h<a.length;++h)Ic(["","","","",a[h]],t,s)}function p0(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function Zf(n,t){if(null===n)return null;if("string"==typeof n)return co(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];p0(t,r,o)?e.push(o):e.push(Zf(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=co(s);e[o]=Zf(r,o)}}return e}}function Yf(n,t){if(null==n)return null;if("string"==typeof n)return tr(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];p0(t,r,o)?e.push(o):e.push(Yf(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[tr(s)]="name"!==s&&"className"!==s||"string"!=typeof r?Yf(r,s):r}return e}}class Ns extends We{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const x=this.getClassName().toLowerCase();this.name=ac(x)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],_r(this.inputs).length!==this.inputs.length)throw new O(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(x=>x.name)}`);_r(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(x=>x.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const x of this.outputs){const v=x.nodeIndex,I=x.tensorIndex;this.outputLayers.push(x.sourceLayer),this.outputLayersNodeIndices.push(v),this.outputLayersTensorIndices.push(I)}for(const x of this.inputs){const b=x.sourceLayer,v=x.nodeIndex,I=x.tensorIndex;Qn(0===v,"input layer has >1 nodes"),Qn(0===I,"input layer has >1 tensors"),this.inputLayers.push(b),this.inputLayersNodeIndices.push(v),this.inputLayersTensorIndices.push(I)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let x=0;x<this.inputLayers.length;x++){const b=this.inputLayers[x];if(!(b instanceof Hi))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${b.getClassName()}.`);this.inputNames.push(b.name),this.feedInputShapes.push(b.batchInputShape),this.feedInputNames.push(b.name)}for(const x of this.outputLayers)this.outputNames.push(x.name);this.internalInputShapes=this.inputs.map(x=>x.shape),this.internalOutputShapes=this.outputs.map(x=>x.shape);const e={},s={},r={},o={},a={},i=[],l=(x,b,v,I,C,k)=>{(null==I||null==C||null==k)&&(I=x.sourceLayer,C=x.nodeIndex,k=x.tensorIndex);const T=I.inboundNodes[C];if(-1!==v.indexOf(T))throw new ds(`The tensor ${x.name} at layer "${I.name}" is part of a cycle.`);if(-1!==b.indexOf(T))return;this.containerNodes.add(Ns.nodeKey(I,C)),I.id in a||(a[I.id]=Object.keys(a).length),-1===v.indexOf(T)&&v.push(T);const E=T.inboundLayers.length;for(let R=0;R<E;R++)l(T.inputTensors[R],b,v,T.inboundLayers[R],T.nodeIndices[R],T.tensorIndices[R]);for(b.push(T);v.indexOf(T)>=0;)v.splice(v.indexOf(T),1);i.push(T)},u=[],c=[];for(const x of this.outputs)l(x,u,c);const h=i.slice().reverse();for(const x of h){s[x.id]=x,x.id in e||(e[x.id]=0);let b=e[x.id];b=Math.max(b,null==r[x.outboundLayer.id]?0:r[x.outboundLayer.id]),r[x.outboundLayer.id]=b,o[x.outboundLayer.id]=x.outboundLayer,e[x.id]=b;for(let I=0;I<x.inboundLayers.length;I++){const T=x.inboundLayers[I].inboundNodes[x.nodeIndices[I]];e[T.id]=Math.max(b+1,null==e[T.id]?0:e[T.id]),s[T.id]=T}}const d={};for(const x in e){const b=e[x];b in d||(d[b]=[]),d[b].push(s[x])}const p={};for(const x in r){const b=r[x];b in p||(p[b]=[]),p[b].push(o[x])}let f=Object.keys(p).map(x=>parseInt(x,10)).sort(rc);this.layers=[];for(const x of f){const b=p[x];b.sort((v,I)=>{const C=a[v.id],k=a[I.id];return C<k?-1:C>k?1:0});for(const v of b)v instanceof Ns&&this.internalContainerRefs.push(v),this.layers.push(v)}this.layersByDepth=p,f=Object.keys(d).map(x=>parseInt(x,10)).sort(rc);const g=this.inputs.slice(),m=[];for(const x of f)for(const b of d[x]){const v=b.outboundLayer;if(null!=v){for(const I of b.inputTensors)if(-1===g.indexOf(I))throw new ds(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${v.name}". The following previous layers were accessed without issue: ${m}`);for(const I of b.outputTensors)g.push(I);m.push(v.name)}}this.nodesByDepth=d;const y=this.layers.map(x=>x.name);for(const x of y){const b=y.filter(v=>v===x).length;if(1!==b)throw new ds(`The name "${x}" is used ${b} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new dc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(x=>null),outputMasks:this.outputs.map(x=>null),inputShapes:this.inputs.map(x=>x.shape),outputShapes:this.outputs.map(x=>x.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new O("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;for(const a of this.layers)for(const i of a.weights){if(null!=s[i.originalName])throw new O(`Duplicate weight name: ${i.originalName}`);s[i.originalName]=i,r++}const o=[];for(const a in t){let i=a;if(null==s[a]){const l=a.split("/");i=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(null!=s[i])o.push([s[i],t[a]]);else if(e)throw new O(`Provided weight data has no target variable: ${a}`);delete s[i]}if(e){const a=[];for(const i in s)a.push(i);if(a.length>0)throw new O(`${a.length} of ${r} weights are not set: ${a}`)}Uf(o)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 4.5.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=Yf(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return z(()=>{t=yt(t);const s=new Rr;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return ji(this.outputs,s,e)})}computeMask(t,e){return z(()=>{let s;return t=yt(t),s=null==e?uo(null,t.length):yt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=cc(t);if(e.length!==this.inputLayers.length)throw new O(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(rc);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(g=>g.id).indexOf(c.id))continue;const h=[];for(let g=0;g<u.inboundLayers.length;g++)h.push(s[`${u.inboundLayers[g].name}_${u.nodeIndices[g]}_${u.tensorIndices[g]}`]);const p=cc(c.computeOutputShape(An(h))),f=c.inboundNodes.indexOf(u);for(let g=0;g<p.length;g++)s[`${c.name}_${f}_${g}`]=p[g]}}const o=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const l=a[i];Qn(l in s),o.push(s[l])}return An(o)}runInternalGraph(t,e){null==e&&(e=uo(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(rc);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const g of d)g.id in s&&f.push(s[g.id]);if(f.length===d.length){let m,y,x,b,g={};if(null!=c.callArgs&&(g=c.callArgs),1===f.length){const[v,I]=f[0];null==g.mask&&(g.mask=I),x=yt(h.call(v,g)),b=yt(h.computeMask(v,I)),m=[v],y=[I]}else m=f.map(v=>v[0]),y=f.map(v=>v[1]),null==g.mask&&(g.mask=y),x=yt(h.call(m,g)),b=yt(h.computeMask(m,y));if(h.activityRegularizer)throw new ze("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let v=0;v<p.length;++v)s[p[v].id]=[x[v],b[v]]}}}const o=[],a=[],i=[];for(const l of this.outputs){Qn(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),o.push(u),a.push(c)}return[o,a,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof Ns?1:0;for(let o=0;o<r.inboundNodes.length;o++){const a=Ns.nodeKey(r,o);this.containerNodes.has(a)&&(e[a]=s,s+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new O(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new O("Provide either a layer name or layer index");for(const s of this.layers)if(s.name===t)return s;throw new O(`No such layer: ${t}`)}calculateLosses(){return z(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=Ns.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const a of this.layers){const i=a.getClassName(),l=a.getConfig(),u=[];for(let h=0;h<a.inboundNodes.length;h++){const d=a.inboundNodes[h],p=Ns.nodeKey(a,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch{console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const g=[];for(let m=0;m<d.inboundLayers.length;m++){const y=d.inboundLayers[m],b=d.tensorIndices[m];let I=e[Ns.nodeKey(y,d.nodeIndices[m])];null==I&&(I=0),g.push([y.name,I,b,f])}u.push(g)}}}const c={};c.name=a.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let a=0;a<this.inputLayers.length;a++){const i=this.inputLayers[a],u=Ns.nodeKey(i,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[a]])}t.inputLayers=r;const o=[];for(let a=0;a<this.outputLayers.length;a++){const i=this.outputLayers[a],u=Ns.nodeKey(i,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),o.push([i.name,c,this.outputLayersTensorIndices[a]])}return t.outputLayers=o,t}static fromConfig(t,e,s={},r=!1){const o={},a={};function i(m,y){m.name in a?a[m.name].push(y):a[m.name]=[y]}function l(m,y){const x=[];let b;for(const v of y){const I=v[0],C=v[1],k=v[2];if(b=null==v[3]?{}:v[3],!(I in o))return void i(m,y);const T=o[I];if(T.inboundNodes.length<=C)return void i(m,y);x.push(T.inboundNodes[C].outputTensors[k])}x.length>0&&m.apply(An(x),b)}function u(m){const y=m.name,x=nr(m,null!=e.customObjects?e.customObjects:{});x.setFastWeightInitDuringBuild(r),o[y]=x,m.inboundNodes.forEach(v=>{if(!(v instanceof Array))throw new O(`Corrupted configuration, expected array for nodeData: ${v}`);i(x,v)})}const c=e.name,h=e.layers;for(const m of h)u(m);for(;!rR(a);)for(const m of h){const y=o[m.name];if(y.name in a){const x=a[y.name];delete a[y.name];for(const b of x)l(y,b)}}const d=[],p=[],f=e.inputLayers;for(const m of f){const y=m[0],x=m[1],b=m[2];Qn(y in o),d.push(o[y].inboundNodes[x].outputTensors[b])}const g=e.outputLayers;for(const m of g){const y=m[0],x=m[1],b=m[2];Qn(y in o),p.push(o[y].inboundNodes[x].outputTensors[b])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new O("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){z(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function m0(n,t){return function f0(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(o=>{r.push(o in n?n[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function g0(n,t,e,s){return Jf.apply(this,arguments)}function Jf(){return(Jf=(0,B.Z)(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=z(()=>{if(1===n.shape.length)return Ks(n);if(2===n.shape.length){if(n.shape[1]>1)return Go(n,1);if(1===n.shape[1])return F(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());He(r);const a=[];return o.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);a.push(e[i])}),En(a,"float32")}return null})).apply(this,arguments)}function xD(n,t){return D(n,t)}function y0(n,t){let e,s;e=t.xs,s=t.ys,S(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const o=x0("input",n.inputNames,e),a=x0("output",n.outputNames,s),i=o[0].shape[0];S(o.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),S(a.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<o.length;l++)S(o[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<a.length;l++)S(a[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:o,ys:a}}function x0(n,t,e){if(e instanceof It)return[e];if(Array.isArray(e))return S(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new O(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function em(){return(em=(0,B.Z)(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(S(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),S(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),S(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),S(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),S(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let o,a;if(r)if(b0(e.validationData))S(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const m=function wD(n){if(3===n.length)throw new ze("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}(e.validationData);o=m.xs,a=m.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(m=>"val_"+m)):l.slice();const c=s0(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=r0(c,h,e.epochs,null,null,function ID(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,g=yield t.iterator();for(;f<e.epochs;){const m={};yield d.onEpochBegin(f);let y=0,x=0;for(s||(g=yield t.iterator());!s||y<e.batchesPerEpoch;){const b=yield g.next();if(s&&b.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=b.value){const{xs:v,ys:I}=y0(n,b.value),C={};C.batch=x,C.size=v[0].shape[0],yield d.onBatchBegin(x,C);const k=[];if(null!=e.classWeight){const R=m0(e.classWeight,n.outputNames);for(let L=0;L<R.length;++L)k.push(yield g0(I[L],null,R[L]))}const T=v.concat(I).concat(k),E=i(T);He(T);for(let R=0;R<l.length;++R){const V=E[R];C[l[R]]=V,on(V)}yield d.onBatchEnd(x,C),n0(C),x++,y++}if(s?y>=e.batchesPerEpoch:b.done){if(r){let v;v=b0(e.validationData)?yt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):yt(n.evaluate(o,a,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let I=0;I<n.metricsNames.length;++I)m[`val_${n.metricsNames[I]}`]=v[I]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,m),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function b0(n){return"function"==typeof n.iterator}function tm(){return(tm=(0,B.Z)(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let o=[];if(e.verbose>0)throw new ze("Verbose mode is not implemented yet.");S(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const a=function SD(n){return"function"==typeof n.next}(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield a.next();if(o=z(()=>{if(u.value){const{xs:c,ys:h}=y0(n,u.value),d=c.concat(h),p=z(()=>r(d));if(He(d),0===l)for(let g=0;g<p.length;++g)o.push(Ee(0));const f=d[0].shape[0];for(let g=0;g<p.length;++g){const m=p[g],y=o[g];o[g]=z(()=>ne(o[g],D(f,m))),l>0&&He(y)}He(p),i+=f,++l}return o}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<o.length;++u){const c=o[u];o[u]=ke(o[u],i),He(c)}return An(o)})).apply(this,arguments)}function nm(n){S(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function Xi(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>fo(s,t,e-t)):fo(n,t,e-t)}function sm(n,t){return z(()=>null==n?null:Array.isArray(n)?n.map(e=>sm(e,t)):Mb(n,"int32"===t.dtype?t:ge(t,"int32")))}function rm(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function w0(n){const t=[];n instanceof It&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(Wi(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Cs(n,t){if(null==n)return;const e=[];if(t instanceof It)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof It)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const o=n[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function om(n){return Array.isArray(n)}function v0(n){return!function CD(n){return n instanceof It}(n)&&!om(n)}function I0(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let a=!1;if(om(n)&&n.length>0)a=!0;else if(v0(n)){for(const i in n)if(n.hasOwnProperty(i)){a=!0;break}}else a=!0;if(a)throw new O(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(a=>null);let o;if(v0(n)){o=[];for(const a of t){if(null==n[a])throw new O(`No data provided for "${a}". Need data for each key in: ${t}`);o.push(n[a])}}else if(om(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);o=n}else{if(t.length>1)throw new O(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);o=[n]}if(o=w0(o),null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c>=0&&i.shape[l]!==c)throw new O(`${r} expected a batch of elements where each example has shape [${e[a].slice(1,e[a].length)}] (i.e.,tensor shape [*,${e[a].slice(1,e[a].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return o}function S0(n,t,e,s=!0,r=""){let o;if(Array.isArray(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);o=n}else{if(t.length>1)throw new O(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);o=[n]}if(null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c!==i.shape[l])throw new O(`Error when checking ${r}: expected ${t[a]} to have shape ${JSON.stringify(e[a])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let sa=(()=>{class n extends Ns{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new O("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function pD(n,t,e,s=console.log){const r=function mD(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let o=!1;for(const a of r.inboundNodes)if(-1!==s.indexOf(a)){if(o){t=!1;break}o=!0}if(!t)break}return t}(n),o=["Layer (type)","Input Shape","Output shape","Param #"];let a;if(r?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){o.push("Receives inputs"),a=[];for(const c in n.nodesByDepth)a.push(...n.nodesByDepth[c])}s("_".repeat(t)),Ic(o,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?gD(i[c],e,s):yD(i[c],e,a,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function fD(n){let t;return t=hc(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=hc(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function dD(n){const t={Adagrad:()=>Jo.adagrad(.01),Adadelta:()=>Jo.adadelta(1,.95,Jt()),Adam:()=>Jo.adam(.001,.9,.999,Jt()),Adamax:()=>Jo.adamax(.002,.9,.999,Jt(),0),RMSProp:()=>Jo.rmsprop(.001,.9,0,Jt()),SGD:()=>Jo.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new O(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof vr))throw new O("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new O(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>qf(l))}else{const i=qf(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new O(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(qf(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],po("loss",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[i],i]),this.metricsNames.push(this.outputNames[i]+"_loss"))});const o=function $D(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),a=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};po("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let d,p,f;for(const g of c){if("string"==typeof g&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(g)){const y=this.internalOutputShapes[i];let x;1===y[y.length-1]||this.lossFunctions[i]===xc?-1!==["accuracy","acc"].indexOf(g)?p=a0:-1!==["crossentropy","ce"].indexOf(g)&&(p=nD):this.lossFunctions[i]===yc?-1!==["accuracy","acc"].indexOf(g)?p=sD:-1!==["crossentropy","ce"].indexOf(g)&&(p=c0):-1!==["accuracy","acc"].indexOf(g)?p=i0:-1!==["crossentropy","ce"].indexOf(g)&&(p=u0),-1!==["accuracy","acc"].indexOf(g)?x="acc":-1!==["crossentropy","ce"].indexOf(g)&&(x="ce"),f=p,d=""+x}else f=hD(g),d=""+vc(g);let m;po(d,()=>{m=f}),a(i,d,m)}})(o[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=null==r.batchSize?32:r.batchSize;nm(o);const i=this.standardizeUserDataXY(e,s,!0,o);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),An(this.testLoop(this.testFunction,l,o,r.verbose,r.steps))}finally{Cs(i[0],e),Cs(i[1],s)}}evaluateDataset(e,s){var r=this;return(0,B.Z)(function*(){return r.makeTestFunction(),function ND(n,t,e){return tm.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let a;if(null!=r){if(a=null,null!=s)throw new O(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new O(`Either the input data should have a defined shape, or ${o} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new O("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),a=this.retrieveSymbolicTensors(r?s:[s]),i=new Rr;if(e instanceof It&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new O(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new O(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=ji(a,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=uo(null,e.length);let r=e.length;for(const o of this.layers){const a=Array.isArray(o.output)?o.output:[o.output],i=a.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=a[u],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((a,i)=>{null==a&&o.push(e[i])}),new O(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return z(()=>{const o=this.checkNumSamples(e);if(r)throw new ze("Verbose predictLoop() is not implemented yet.");const a=rm(o,s),i=this.outputs.map(l=>[]);for(let l=0;l<a.length;++l)z(()=>{const d=Xi(e,a[l][0],a[l][1]),p=[];if(Array.isArray(d))for(let g=0;g<d.length;++g)p.push({key:this.inputs[g],value:d[g]});else p.push({key:this.inputs[0],value:d});const f=new Rr(p);return ji(this.outputs,f)}).forEach((c,h)=>i[h].push(c));return An(i.map(l=>Kt(l,0)))})}predict(e,s={}){const r=w0(e);S0(r,this.inputNames,this.feedInputShapes,!1);try{const o=null==s.batchSize?32:s.batchSize;return nm(o),this.predictLoop(r,o)}finally{Cs(r,e)}}predictOnBatch(e){S0(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new ds("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];a.push(this.feedLossFns[i]===yc?l.slice(0,l.length-1).concat([1]):l)}if(function kD(n,t,e){const s=_r(n.map(o=>o.shape[0]));s.sort();const r=_r(t.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new O(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(r.length>1)throw new O(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!Xe(s,r))throw new O(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=I0(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=I0(s,this.feedOutputNames,a,!1,"target")),function TD(n,t,e){const s=[gc,xc,qi];for(let r=0;r<n.length;++r){const o=n[r],a=t[r],i=e[r];if(null!=a){if(a===qi&&1===o.shape[o.shape.length-1])throw new O(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(a)){const l=o.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const d=u[c];if(null!=d&&l[c]!==d)throw new O(`A target Tensor with shape ${o.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new O(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,a=!0,i){var l=this;return(0,B.Z)(function*(){const[u,c]=l.standardizeUserDataXY(e,s,a,i);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=o){const d=m0(o,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield g0(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,o=0,a){return z(()=>{const i=this.checkNumSamples(s,r,a,"steps"),l=[];if(o>0)throw new ze("Verbose mode is not implemented yet.");if(null!=a)throw new ze("steps mode in testLoop() is not implemented yet");{const u=rm(i,r),c=En(vs(0,i));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=fo(c,d,p-d),g=sm(s,f),m=e(g);if(0===h)for(let y=0;y<m.length;++y)l.push(Ee(0));for(let y=0;y<m.length;++y)l[y]=ne(l[y],D(p-d,m[y]))}for(let h=0;h<l.length;++h)l[h]=ke(l[h],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let a=o;$b(e,o)>1&&(a+=`_${$b(e.slice(0,r),o)}`),s.push(a)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let m=0;m<this.inputs.length;++m)d.push({key:this.inputs[m],value:r[m]});const p=new Rr(d),f=ji(this.outputs,p,{training:!0});let g;for(let m=0;m<this.lossFunctions.length;++m){let x=(0,this.lossFunctions[m])(o[m],f[m]);null!=a[m]&&(x=xD(x,a[m]));const b=Lt(x);s.push(b),g=0===m?x:ne(g,x)}for(let m=0;m<this.metricsTensors.length;++m){let y;if(this.outputs.length>1&&m<this.outputs.length)y=s[m];else{const b=this.metricsTensors[m][1];y=Lt((0,this.metricsTensors[m][0])(o[b],f[b]))}on(y),i.push(y)}return g=Lt(g),this.calculateLosses().forEach(m=>{g=ne(g,m)}),g},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>z(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:o[c]});const l=new Rr(i),u=ji(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=Lt((0,this.lossFunctions[c])(a[c],u[c]));r=0===c?d:ne(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=Lt((0,this.metricsTensors[c][0])(a[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var o=this;return(0,B.Z)(function*(){if(o.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,l,u,c,h,d,p,f;o.isTraining=!0;try{const g=null==r.batchSize?32:r.batchSize;nm(g);const m=!1,y=yield o.standardizeUserData(e,s,r.sampleWeight,r.classWeight,m,g);a=y[0],i=y[1],f=y[2];let b,x=!1;if(null!=r.validationData&&r.validationData.length>0){if(x=!0,2!==r.validationData.length)throw 3===r.validationData.length?new ze("validationData including sample weights is not supported yet."):new O(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);c=r.validationData[0],h=r.validationData[1];const L=!0,V=yield o.standardizeUserData(c,h,null,null,L,g);d=V[0],p=V[1],b=d.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){x=!0;const L=Math.floor(a[0].shape[0]*(1-r.validationSplit)),V=a[0].shape[0];d=Xi(a,L,V),l=a,a=Xi(a,0,L),p=Xi(i,L,V),u=i,i=Xi(i,0,L),b=d.concat(p)}else null!=r.validationSteps&&(x=!0);const v=a.concat(i).concat(f);o.checkTrainableWeightsConsistency();const I=o.makeTrainFunction(),C=o.getDedupedMetricsNames();let k,T;x?(o.makeTestFunction(),k=o.testFunction,T=C.slice().concat(C.map(L=>"val_"+L))):(k=null,b=[],T=C.slice());const E=s0(r.callbacks,r.yieldEvery);return yield o.fitLoop(I,v,C,g,r.epochs,r.verbose,E,k,b,r.shuffle,T,r.initialEpoch,null,null)}finally{o.isTraining=!1,Cs(a,e),Cs(i,s),Cs(l,e),Cs(u,s),Cs(d,c),Cs(p,h),null!=f&&He(f)}})()}fitLoop(e,s,r,o,a,i,l,u,c,h,d,p,f,g){var m=this;return(0,B.Z)(function*(){null==o&&(o=32),null==a&&(a=1),null==h&&(h=!0),null==p&&(p=0);let y=!1;if(null!=u&&null!=c&&(y=!0),null!=g&&(y=!0,null==f))throw new O("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const x=m.checkNumSamples(s,o,f,"steps_per_epoch");let b;null!=x&&(b=vs(0,x)),null==i&&(i=1);const{callbackList:v,history:I}=r0(l,i,a,p,x,f,o,y,d);v.setModel(m),m.history=I,yield v.onTrainBegin(),m.stopTraining_=!1;for(let C=p;C<a;++C){yield v.onEpochBegin(C);const k={};if(null!=f)throw new ze("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new ze("batch shuffling is not implemneted yet");h&&Ft(b);const T=En(b),E=rm(x,o);for(let R=0;R<E.length;++R){const L={};if(yield v.onBatchBegin(R,L),z(()=>{const V=E[R][0],U=E[R][1],H=fo(T,V,U-V);L.batch=R,L.size=U-V;const j=sm(s,H),X=e(j);for(let Z=0;Z<r.length;++Z){const Y=X[Z];L[r[Z]]=Y,on(Y)}if(R===E.length-1&&y){const Z=m.testLoop(u,c,o);for(let K=0;K<r.length;++K){const Y=r[K],oe=Z[K];on(oe),k["val_"+Y]=oe}}}),yield v.onBatchEnd(R,L),n0(L),m.stopTraining_)break}T.dispose()}if(yield v.onEpochEnd(C,k),m.stopTraining_)break}return yield v.onTrainEnd(),yield m.history.syncData(),m.history})()}fitDataset(e,s){var r=this;return(0,B.Z)(function*(){return function vD(n,t,e){return em.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return(0,B.Z)(function*(){const o=yield r.standardizeUserData(e,s),a=o[0],i=o[1],u=r.makeTrainFunction()(a.concat(i)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return He(u),Cs(o[0],e),Cs(o[1],s),An(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let i=0;i<o.length;++i)r&&!o[i].trainable||s.push({name:o[i].originalName,tensor:a[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Qd().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Qd().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=tr(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>tr(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=tr(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[tr(vc(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>tr(vc(e)));{const e={};for(const s in this.metrics)e[s]=tr(vc(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=nr(Zf(e.optimizer_config));let o,a;if("string"==typeof e.loss)o=co(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(i=>co(i));else if(null!=e.loss){o={};for(const i in e.loss)o[i]=co(e.loss[i])}if(Array.isArray(e.metrics))a=e.metrics.map(i=>co(i));else if(null!=e.metrics){a={};for(const i in e.metrics)a[i]=co(e.metrics[i])}this.compile({loss:o,metrics:a,optimizer:r})}save(e,s){var r=this;return(0,B.Z)(function*(){if("string"==typeof e){const h=ty(e);if(0===h.length)throw new O(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new O(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new O("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield zd(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.5.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield zd(yield r.optimizer.getWeights(),h);o.specs.push(...p),o.data=Tu([o.data,d])}return null!=r.userDefinedMetadata&&(d0(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=o.data,u.weightSpecs=o.specs,e.save(u)})()}setUserDefinedMetadata(e){d0(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();se(sa),se((()=>{class n extends sa{}return n.className="Functional",n})());let N0=(()=>{class n extends sa{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:ac("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new O(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof sa;let r;if(s){if(r=e,1!==r.outputs.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new O("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new O("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=Qb({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new O(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Yb(this.outputs[0])}this.inboundNodes=[],new dc({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:uo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(nt(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new sa({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new ds("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return(0,B.Z)(function*(){if(!r.built)throw new ds("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return(0,B.Z)(function*(){if(!o.built)throw new ds("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return(0,B.Z)(function*(){if(!r.built)throw new ds("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return(0,B.Z)(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let a,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new O("Legacy serialization format not supported yet.");a=s}else S(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new ze(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of a){const h=nr(u,void 0,o);o&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new O("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new O("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})();function RD(n){return new N0(n)}function DD(n){return Qb(n)}se(N0);class Rn extends Vo{getConfig(){return{}}}se((()=>{class n extends Rn{apply(e,s=1){return function vR(n,t=1){if(1!==t)throw new ze(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return ki(n)}(e,s)}}return n.className="elu",n})()),se((()=>{class n extends Rn{apply(e){return zp(e)}}return n.className="selu",n})()),se((()=>{class n extends Rn{apply(e){return Fs(e)}}return n.className="relu",n})()),se((()=>{class n extends Rn{apply(e){return z(()=>ro(6,Fs(e)))}}return n.className="relu6",n})()),se((()=>{class n extends Rn{apply(e){return e}}return n.className="linear",n})()),se((()=>{class n extends Rn{apply(e){return Rs(e)}}return n.className="sigmoid",n})()),se((()=>{class n extends Rn{apply(e){return function SR(n){return z(()=>{const t=ne(.5,D(.2,n));return Ln(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),se((()=>{class n extends Rn{apply(e){return qo(e)}}return n.className="softplus",n})()),se((()=>{class n extends Rn{apply(e){return function IR(n){return z(()=>ke(n,ne(Zt(n),1)))}(e)}}return n.className="softsign",n})()),se((()=>{class n extends Rn{apply(e){return jo(e)}}return n.className="tanh",n})());let C0=(()=>{class n extends Rn{apply(e,s=-1){return Fi(e,s)}}return n.className="softmax",n})();function Fr(n){return n.getClassName()}function um(n,t={}){return Bi(n,as.getMap().classNameMap,t,"activation")}function Or(n){if(null==n){return um({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},um(t)}return n instanceof Rn?n:um(n)}se(C0),se((()=>{class n extends Rn{apply(e,s=-1){return Tp(e,s)}}return n.className="logSoftmax",n})()),se((()=>{class n extends Rn{apply(e,s=1){return z(()=>D(Rs(D(e,s)),e))}}return n.className="swish",n})()),se((()=>{class n extends Rn{apply(e){return z(()=>D(e,jo(qo(e))))}}return n.className="mish",n})());class k0 extends Vo{}se((()=>{class n extends k0{constructor(e){super(),function cm(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return z(()=>{let s=Qt([1]);return this.hasL1&&(s=ne(s,ve(D(this.l1,Zt(e))))),this.hasL2&&(s=ne(s,ve(D(this.l2,Ui(e))))),F(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const T0={l1l2:"L1L2"};function ft(n){return Ff(n)}function $0(n,t={}){return Bi(n,as.getMap().classNameMap,t,"regularizer")}function Ct(n){return null==n?null:"string"==typeof n?$0({className:n in T0?T0[n]:n,config:{}}):n instanceof k0?n:$0(n)}let _0=(()=>{class n extends We{constructor(e){super(e??{}),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=Le(e);let r=Fs(e);return null!=this.maxValue&&(r=Ln(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})();se(_0);let E0=(()=>{class n extends We{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Le(e);return zu(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})();se(E0);let A0=(()=>{class n extends We{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Nt(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Ct(e.alphaRegularizer),this.alphaConstraint=nn(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new O(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=nt(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new en({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=Le(e),Hu(e,this.alpha.read())}getConfig(){const e={alphaInitializer:At(this.alphaInitializer),alphaRegularizer:ft(this.alphaRegularizer),alphaConstraint:tn(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})();se(A0);let R0=(()=>{class n extends We{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new ze(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Le(e);return ki(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})();se(R0);let D0=(()=>{class n extends We{constructor(e){super(e??{}),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=Le(e);return D(r,ge(Pn(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})();se(D0);let F0=(()=>{class n extends We{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new C0).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){const r=Le(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})();function ra(n,t,e){if("number"==typeof n)return uo(n,t);if(n.length!==t)throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!mR(r))throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function ks(n,t,e,s,r=1){if(null==n)return n;let a;return a="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Ws(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+Ar([e-t,0]);else{if("same"!==s)throw new O(`Unsupport padding mode: ${s}.`);n*=t}return n}function dm(n,t){return z(()=>(Ut(t),"channelsFirst"===t?Je(n,[0,2,3,1]):n))}function O0(n,t){return z(()=>(Ut(t),"channelsFirst"===t?Je(n,[0,2,3,4,1]):n))}function pm(n,t,e,s=[1,1],r="valid",o,a,i=null){return z(()=>{if(null==o&&(o="channelsLast"),Ut(o),3!==n.rank&&4!==n.rank)throw new O(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new O(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=dm(n,o);if("causal"===r)throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Fx({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:a,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===o&&(l=Je(l,[0,3,1,2])),l})}se(F0);class Sc extends We{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Sc.verifyArgs(e),this.rank=t,un(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new ze(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ra(e.kernelSize,t,"kernelSize"),this.strides=ra(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Jn(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ut(this.dataFormat),this.activation=Or(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=nn(e.biasConstraint),this.biasRegularizer=Ct(e.biasRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.dilationRate=ra(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new O(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Qn("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Lf(t.kernelSize,"number",1,3))throw new O(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Fr(this.activation),useBias:this.useBias,biasInitializer:At(this.biasInitializer),biasRegularizer:ft(this.biasRegularizer),activityRegularizer:ft(this.activityRegularizer),biasConstraint:tn(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class oa extends Sc{constructor(t,e){super(t,e),this.kernel=null,oa.verifyArgs(e),this.filters=e.filters,un(this.filters,"filters"),this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=nn(e.kernelConstraint),this.kernelRegularizer=Ct(e.kernelRegularizer)}build(t){t=nt(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new O(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return z(()=>{let s;t=Le(t);const r=null==this.bias?null:this.bias.read(),o=Eb(this.activation.getClassName());if(null!=o&&2===this.rank)s=pm(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function L0(n,t,e,s=1,r="valid",o,a=1){return z(()=>{if(null==o&&(o="channelsLast"),Ut(o),3!==n.shape.length)throw new O(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new O(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new O(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===o&&(n=Je(n,[0,2,1])),"causal"===r)throw new ze("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=bp(n,t,s,"same"===r?"same":"valid","NWC",a);return null!=e&&(i=Ss(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=pm(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new ze("convolutions greater than 3D are not implemented yet.");s=function P0(n,t,e,s=[1,1,1],r="valid",o,a){return z(()=>{if(null==o&&(o="channelsLast"),Ut(o),4!==n.rank&&5!==n.rank)throw new O(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new O(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=O0(n,o);if("causal"===r)throw new ze("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=Jy(i,t,s,"same"===r?"same":"valid","NDHWC",a),null!=e&&(i=Ss(i,e)),"channelsFirst"===o&&(i=Je(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=nt(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let o=0;o<s.length;++o){const a=ks(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(a)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:At(this.kernelInitializer),kernelRegularizer:ft(this.kernelRegularizer),kernelConstraint:tn(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new O(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let fm=(()=>{class n extends oa{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Lf(e.kernelSize,"number",1,2))throw new O(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();se(fm);let mm=(()=>{class n extends oa{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new O(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();se(mm);let z0=(()=>{class n extends fm{constructor(e){if(super(e),this.inputSpec=[new en({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=nt(e)).length)throw new O("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new en({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r=Le(e);if(4!==r.shape.length)throw new O(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=o[l],d=this.kernelSize[1],f=this.strides[1],y=[o[0],Ws(o[i],this.strides[0],this.kernelSize[0],this.padding),Ws(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Je(r,[0,2,3,1]));let x=vp(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=Je(x,[0,3,1,2])),null!=this.bias&&(x=Ss(x,this.bias.read(),this.dataFormat)),null!=this.activation&&(x=this.activation.apply(x)),x})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,o,a;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3):(r=3,o=1,a=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[o]=Ws(s[o],u,i,this.padding),s[a]=Ws(s[a],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})();se(z0);let M0=(()=>{class n extends mm{constructor(e){if(super(e),this.inputSpec=[new en({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=nt(e)).length)throw new O("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new en({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r=Le(e);if(5!==r.shape.length)throw new O(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l,u;"channelsFirst"===this.dataFormat?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=o[i],d=o[l],f=this.kernelSize[1],g=this.kernelSize[2],y=this.strides[1],x=this.strides[2],C=[o[0],Ws(o[u],this.strides[0],this.kernelSize[0],this.padding),Ws(h,y,f,this.padding),Ws(d,x,g,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Je(r,[0,2,3,4,1]));let k=tx(r,this.kernel.read(),C,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(k=Je(k,[0,4,1,2,3])),null!==this.bias&&(k=Ss(k,this.bias.read(),this.dataFormat)),null!==this.activation&&(k=this.activation.apply(k)),k})}computeOutputShape(e){const s=(e=nt(e)).slice();let r,o,a,i;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3,i=4):(r=4,o=1,a=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[o]=Ws(s[o],h,l,this.padding),s[a]=Ws(s[a],d,u,this.padding),s[i]=Ws(s[i],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})();se(M0);let FD=(()=>{class n extends oa{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new O("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new O("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new O(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=Nt(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Ct(s.depthwiseRegularizer),this.depthwiseConstraint=nn(s.depthwiseConstraint),this.pointwiseInitializer=Nt(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Ct(s.pointwiseRegularizer),this.pointwiseConstraint=nn(s.pointwiseConstraint)}build(e){if((e=nt(e)).length<this.rank+2)throw new O(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let l=0;l<this.rank;++l)a.push(1);a.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new en({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return z(()=>{let r;if(e=Le(e),1===this.rank)throw new ze("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Je(e,[0,2,3,1])),r=Mp(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=Ss(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Je(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=At(this.depthwiseInitializer),e.pointwiseInitializer=At(this.pointwiseInitializer),e.depthwiseRegularizer=ft(this.depthwiseRegularizer),e.pointwiseRegularizer=ft(this.pointwiseRegularizer),e.depthwiseConstraint=tn(this.depthwiseConstraint),e.pointwiseConstraint=tn(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})(),B0=(()=>{class n extends FD{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})();se(B0);let V0=(()=>{class n extends oa{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Lf(e.kernelSize,"number",1,1))throw new O(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})();se(V0);let W0=(()=>{class n extends We{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return z(()=>{if(e=Le(e),"channelsLast"===this.dataFormat){const r=lc(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return lc(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=lc(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return lc(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})();se(W0);let U0=(()=>{class n extends We{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ut(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function dR(n){ho(lR,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return z(()=>{let r=Le(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=Je(r,[0,2,3,1]);const a=this.size[0]*o[2],i=this.size[1]*o[3],l="nearest"===this.interpolation?Os.resizeNearestNeighbor(r,[a,i]):Os.resizeBilinear(r,[a,i]);return Je(l,[0,3,1,2])}{const a=this.size[0]*o[1],i=this.size[1]*o[2];return"nearest"===this.interpolation?Os.resizeNearestNeighbor(r,[a,i]):Os.resizeBilinear(r,[a,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})();se(U0);let G0=(()=>{class n extends Sc{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Nt(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=nn(e.depthwiseConstraint),this.depthwiseRegularizer=Ct(e.depthwiseRegularizer)}build(e){if((e=nt(e)).length<4)throw new O(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{let r=function OD(n,t,e=[1,1],s="valid",r,o){return z(()=>{null==r&&(r="channelsLast"),Ut(r);let a=dm(n,r);if(4!==n.rank)throw new O(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new O(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return a=Ci(a,t,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(a=Je(a,[0,3,1,2])),a})}(e=Le(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=Ss(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=nt(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=ks("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=ks(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,a,i]:[e[0],a,i,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=At(this.depthwiseInitializer),e.depthwiseRegularizer=ft(this.depthwiseRegularizer),e.depthwiseConstraint=tn(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})();function H0(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new O("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function j0(n,t,e,s=!1,r,o,a=!1,i=!1){return z(()=>{const l=t.shape.length;if(l<3)throw new O(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(vs(2,l));if(t=Je(t,u),null!=o)throw new ze("The rnn() functoin of the deeplearn.js backend does not support constants yet.");a&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=ge(ge(r,"bool"),"float32")).rank===l-1&&(r=_n(r,-1)),r=Je(r,u)),s&&(t=cs(t,0),null!=r&&(r=cs(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=hs(t);let g,m;null!=r&&(g=hs(r));for(let y=0;y<p;++y){const x=f[y],b=z(()=>n(x,d));if(null==r)h=b[0],d=b[1];else{const v=z(()=>{const I=g[y],C=we(Zn(I),I);return{output:ne(D(b[0],I),D(d[0],C)),newStates:d.map((E,R)=>ne(D(b[1][R],I),D(E,C)))}});h=v.output,d=v.newStates}i&&c.push(h)}return i&&(m=Yn(c,1)),[h,m,d]})}se(G0);let mo=(()=>{class n extends We{constructor(e){let s;if(super(e),null==e.cell)throw new O("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new xm({cells:e.cell}):e.cell,null==s.stateSize)throw new O("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new en({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?vs(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Vf(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const a=[];for(const i of s)a.push([e[0],i]);return[o].concat(a)}return o}computeMask(e,s){return z(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(a=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new ze("Constants support is not implemented in RNN yet.");Vf(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new en({shape:[r,null,...o]});const a=[e[0]].concat(e.slice(2));let i;if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Xe(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new O(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new en({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){z(()=>{if(!this.stateful)throw new Ps("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>Qt([r,o])):[Qt([r,this.cell.stateSize])];else if(null==e)He(this.states_),null!=this.keptStates&&(He(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>Qt([r,o])):this.states_[0]=Qt([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):He(this.states_);for(let o=0;o<this.states_.length;++o){const a=e[o],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,l=[r,i];if(!Xe(a.shape,l))throw new O(`State ${o} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${a.shape}`);this.states_[o]=a}}this.states_=this.states_.map(o=>on(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=H0(e,r,o,this.numConstants);e=a.inputs,r=a.initialState,o=a.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new en({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=o&&(s.constants=o,i=i.concat(o),this.numConstants=o.length),i[0]instanceof Vs){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return z(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let a=null==s?null:s.initialState;e=Le(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new O(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:o},c=j0((g,m)=>{const y=this.cell.call([g].concat(m),l);return[y[0],y.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,o);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return z(()=>{let s=Qt(e.shape);return s=ve(s,[1,2]),s=Wi(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?Mf(s,[1,r]):s):this.cell.stateSize>1?[Mf(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const a=nr(s.cell,r);return new e(Object.assign(s,{cell:a}))}}return n.className="RNN",n})();se(mo);class Zi extends We{}let gm=(()=>{class n extends Zi{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,un(this.units,"units"),this.activation=Or(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Nt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=nn(e.kernelConstraint),this.recurrentConstraint=nn(e.recurrentConstraint),this.biasConstraint=nn(e.biasConstraint),this.dropout=ta([1,Ar([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ta([1,Ar([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{if(2!==e.length)throw new O(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=null!=s.training&&s.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lr({ones:()=>Zn(e),rate:this.dropout,training:o,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lr({ones:()=>Zn(r),rate:this.recurrentDropout,training:o,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,l=this.recurrentDropoutMask;a=Ms(null!=i?D(e,i):e,this.kernel.read()),null!=this.bias&&(a=Ss(a,this.bias.read())),null!=l&&(r=D(r,l));let u=ne(a,Ms(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:Fr(this.activation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),recurrentInitializer:At(this.recurrentInitializer),biasInitializer:At(this.biasInitializer),kernelRegularizer:ft(this.kernelRegularizer),recurrentRegularizer:ft(this.recurrentRegularizer),biasRegularizer:ft(this.biasRegularizer),activityRegularizer:ft(this.activityRegularizer),kernelConstraint:tn(this.kernelConstraint),recurrentConstraint:tn(this.recurrentConstraint),biasConstraint:tn(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return n.className="SimpleRNNCell",n})();se(gm);let K0=(()=>{class n extends mo{constructor(e){e.cell=new gm(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(He(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(He(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})();se(K0);let ym=(()=>{class n extends Zi{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new O("GRUCell does not support reset_after parameter set to true.");this.units=e.units,un(this.units,"units"),this.activation=Or(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Or(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Nt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=nn(e.kernelConstraint),this.recurrentConstraint=nn(e.recurrentConstraint),this.biasConstraint=nn(e.biasConstraint),this.dropout=ta([1,Ar([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ta([1,Ar([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return z(()=>{if(2!==e.length)throw new O(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lr({ones:()=>Zn(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lr({ones:()=>Zn(o),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let h=Ms(e,this.kernel.read());this.useBias&&(h=Ss(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,i[0]));const d=this.recurrentKernel.read(),[p,f]=zn(d,[2*this.units,this.units],d.rank-1),g=Ms(o,p),[m,y,x]=zn(h,3,h.rank-1),[b,v]=zn(g,2,g.rank-1);l=this.recurrentActivation.apply(ne(m,b)),u=this.recurrentActivation.apply(ne(y,v));const I=Ms(D(u,o),f);c=this.activation.apply(ne(x,I));const C=ne(D(l,o),D(ne(1,St(l)),c));return[C,C]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:Fr(this.activation),recurrentActivation:Fr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),recurrentInitializer:At(this.recurrentInitializer),biasInitializer:At(this.biasInitializer),kernelRegularizer:ft(this.kernelRegularizer),recurrentRegularizer:ft(this.recurrentRegularizer),biasRegularizer:ft(this.biasRegularizer),activityRegularizer:ft(this.activityRegularizer),kernelConstraint:tn(this.kernelConstraint),recurrentConstraint:tn(this.recurrentConstraint),biasConstraint:tn(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return n.className="GRUCell",n})();se(ym);let q0=(()=>{class n extends mo{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new ym(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(He(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(He(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})();se(q0);let Nc=(()=>{class n extends Zi{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,un(this.units,"units"),this.activation=Or(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Or(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Nt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=nn(e.kernelConstraint),this.recurrentConstraint=nn(e.recurrentConstraint),this.biasConstraint=nn(e.biasConstraint),this.dropout=ta([1,Ar([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=ta([1,Ar([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=nt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const a=this.biasInitializer,i=this.units;o=new((s=class extends fs{apply(u,c){const h=a.apply([i]),d=(new Vb).apply([i]),p=a.apply([2*i]);return zb(zb(h,d),p)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return z(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new O(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lr({ones:()=>Zn(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lr({ones:()=>Zn(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let p=Ms(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,l[0])),p=ne(p,Ms(o,this.recurrentKernel.read())),this.useBias&&(p=Ss(p,this.bias.read()));const[f,g,m,y]=zn(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(g),h=ne(D(c,a),D(u,this.activation.apply(m))),d=this.recurrentActivation.apply(y);const x=D(d,this.activation.apply(h));return[x,x,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:Fr(this.activation),recurrentActivation:Fr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),recurrentInitializer:At(this.recurrentInitializer),biasInitializer:At(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ft(this.kernelRegularizer),recurrentRegularizer:ft(this.recurrentRegularizer),biasRegularizer:ft(this.biasRegularizer),activityRegularizer:ft(this.activityRegularizer),kernelConstraint:tn(this.kernelConstraint),recurrentConstraint:tn(this.recurrentConstraint),biasConstraint:tn(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return n.className="LSTMCell",n})();se(Nc);let X0=(()=>{class n extends mo{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Nc(e),super(e)}call(e,s){return z(()=>(null!=this.cell.dropoutMask&&(He(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(He(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})();se(X0);let xm=(()=>{class n extends Zi{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return z(()=>{let r=e.slice(1);const o=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?o.push(r.splice(0,l.stateSize.length)):o.push(r.splice(0,1));o.reverse();const a=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=o[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),a.push(i.slice(1))}r=[];for(const l of a.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;Vf(e)&&(e=e[0]),this.cells.forEach((r,o)=>{po(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(a=>({className:a.getClassName(),config:a.getConfig()}))};return Object.assign(Object.assign({},e),o)}static fromConfig(e,s,r={}){const o=[];for(const a of s.cells)o.push(nr(a,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return Wf(e)}setWeights(e){const s=[];for(const r of this.cells){const a=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],a[i]])}Uf(s)}}return n.className="StackedRNNCells",n})();function Lr(n){const{ones:t,rate:e,training:s=!1,count:r=1,dropoutFunc:o}=n,a=()=>null!=o?o(t(),e):Bb(t(),e),i=()=>Gi(a,t,s);return!r||r<=1?on(i().clone()):Array(r).fill(void 0).map(i).map(u=>on(u.clone()))}se(xm);let PD=(()=>{class n extends mo{constructor(e){if(e.unroll)throw new ze("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new ze("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new en({ndim:5})]}call(e,s){return z(()=>{if(null!=this.cell.dropoutMask&&(He(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(He(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new O("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return z(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),i=Qt([o[0],...o.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){z(()=>{if(!this.stateful)throw new Ps("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),a=[o[0],...o.slice(2)];if(null==r[0])throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>Qt(a)):[Qt(a)];else if(null==e)He(this.states_),null!=this.keptStates&&(He(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Qt(a)):this.states_[0]=Qt(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):He(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=a;if(!Xe(u.shape,c))throw new O(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>on(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:a,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=ks(e[u?3:2],o[0],a,i[0],l[0]),p=ks(h,o[1],a,i[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),bm=(()=>{class n extends Nc{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:a,dataFormat:i,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,un(this.filters,"filters"),this.kernelSize=ra(r,2,"kernelSize"),this.kernelSize.forEach(u=>un(u,"kernelSize")),this.strides=ra(o||1,2,"strides"),this.strides.forEach(u=>un(u,"strides")),this.padding=a||"valid",Jn(this.padding),this.dataFormat=i||"channelsLast",Ut(this.dataFormat),this.dilationRate=ra(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>un(u,"dilationRate"))}build(e){var s;e=nt(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new O(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends fs{apply(p,f){return zf([c.apply([h]),Xn([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return z(()=>{if(3!==e.length)throw new O(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lr({ones:()=>Zn(o),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(ie,ce,ue)=>ce&&ce[ue]?D(ce[ue],ie):ie;let h=c(o,u,0),d=c(o,u,1),p=c(o,u,2),f=c(o,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lr({ones:()=>Zn(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const g=this.recurrentDropoutMask;let m=c(a,g,0),y=c(a,g,1),x=c(a,g,2),b=c(a,g,3);const[I,C,k,T]=zn(this.kernel.read(),4,3),[E,R,L,V]=this.useBias?zn(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,I,E,this.padding),d=this.inputConv(d,C,R,this.padding),p=this.inputConv(p,k,L,this.padding),f=this.inputConv(f,T,V,this.padding);const[U,H,j,X]=zn(this.recurrentKernel.read(),4,3);m=this.recurrentConv(m,U),y=this.recurrentConv(y,H),x=this.recurrentConv(x,j),b=this.recurrentConv(b,X);const Z=this.recurrentActivation.apply(ne(h,m)),K=this.recurrentActivation.apply(ne(d,y)),Y=ne(D(K,i),D(Z,this.activation.apply(ne(p,x)))),oe=D(this.recurrentActivation.apply(ne(f,b)),this.activation.apply(Y));return[oe,oe,Y]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]),o={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),o)}inputConv(e,s,r,o){const a=Cr(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?Ss(a,r,this.dataFormat):a}recurrentConv(e,s){return Cr(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();se(bm);let Z0=(()=>{class n extends PD{constructor(e){const s=new bm(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})();se(Z0);let wm=(()=>{class n extends We{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(null==this.noiseShape[o]?s[o]:this.noiseShape[o]);return r}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);if(0<this.rate&&this.rate<1){const o=null!=s.training&&s.training,a=this.getNoiseShape(r);return Gi(()=>Bb(r,this.rate,a,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();se(wm);let Y0=(()=>{class n extends wm{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})();se(Y0);let Q0=(()=>{class n extends We{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,un(this.units,"units"),this.activation=Or(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Nt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Nt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=nn(e.kernelConstraint),this.biasConstraint=nn(e.biasConstraint),this.kernelRegularizer=Ct(e.kernelRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=nt(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=nt(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e),o=Eb(this.activation.getClassName());let a;return null!=o?a=Ms(r,this.kernel.read(),o,this.bias?this.bias.read():null):(a=Ms(r,this.kernel.read()),null!=this.bias&&(a=Ss(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:Fr(this.activation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),biasInitializer:At(this.biasInitializer),kernelRegularizer:ft(this.kernelRegularizer),biasRegularizer:ft(this.biasRegularizer),activityRegularizer:ft(this.activityRegularizer),kernelConstraint:tn(this.kernelConstraint),biasConstraint:tn(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})();se(Q0);let J0=(()=>{class n extends We{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=nt(e);for(const s of e.slice(1))if(null==s)throw new O(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Er(e,1)]}call(e,s){return z(()=>{this.invokeCallHook(e,s);let r=Le(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let a=2;a<r.rank;++a)o.push(a);o.push(1),r=Je(r,o)}return function wR(n){if(n.rank<=1)throw new O(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],Er(n.shape,1)];return F(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})();se(J0);let ew=(()=>{class n extends We{constructor(e){super(e),this.supportsMasking=!0,this.activation=Or(e.activation)}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);return this.activation.apply(r)})}getConfig(){const e={activation:Fr(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})();se(ew);let tw=(()=>{class n extends We{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return z(()=>function xR(n,t){return z(()=>{if(2!==n.shape.length)throw new O(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return Mf(Wi(n,1),[1,t,1])})}(e=Le(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})();se(tw);let nw=(()=>{class n extends We{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let a=1,i=null;for(let u=0;u<o.length;++u){const c=o[u];if(this.isUnknown(c)){if(null!==i)throw new O("Can only specifiy one unknown dimension.");i=u}else a*=c}const l=Er(e);if(null!==i){if(0===a||l%a!=0)throw new O(r);o[i]=l/a}else if(l!==a)throw new O(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e),o=r.shape,a=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return F(r,a)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})();se(nw);let sw=(()=>{class n extends We{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=vs(1,e.dims.length+1);if(!Xe(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new en({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=nt(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return Je(Le(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})();se(sw);let rw=(()=>{class n extends We{constructor(e){super(e??{}),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=Le(e);return Ru(Xo(r,this.maskValue),-1)}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e),i=Ru(Xo(r,this.maskValue),-1,!0);return D(r,ge(i,r.dtype))})}}return n.className="Masking",n})();se(rw);let ow=(()=>{class n extends We{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(yt(e.inputLength))}this.inputDim=e.inputDim,un(this.inputDim,"inputDim"),this.outputDim=e.outputDim,un(this.outputDim,"outputDim"),this.embeddingsInitializer=Nt(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Ct(e.embeddingsRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.embeddingsConstraint=nn(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return z(()=>this.maskZero?(e=Le(e),Xo(e,Ye(e))):null)}computeOutputShape(e){if(e=nt(e),null==this.inputLength)return[...e,this.outputDim];const s=yt(this.inputLength);if(s.length!==e.length-1)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const a=s[o],i=e[o+1];if(null!=a&&null!=i&&a!==i)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return z(()=>{this.invokeCallHook(e,s);let r=Le(e);"int32"!==r.dtype&&(r=zs(r,"int32"));const o=Mb(this.embeddings.read(),F(r,[r.size]));return F(o,nt(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:At(this.embeddingsInitializer),embeddingsRegularizer:ft(this.embeddingsRegularizer),activityRegularizer:ft(this.activityRegularizer),embeddingsConstraint:tn(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})();se(ow);class go extends We{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new ze}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const o=t[t.length-e.length+r],a=e[r];if(null==o||null==a||o<0||a<0)s.push(null);else if(1===o)s.push(a);else if(1===a)s.push(o);else{if(o!==a)throw new O("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(o)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[nt(t)]),t.length<2)throw new O(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const o of t)null!=o&&null!==o[0]&&e.push(o[0]);if(e=_r(e),e.length>1)throw new O(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let o=1;o<t.length;++o){const a=null==t[o]?null:t[o].slice(1);s=this.computeElementwiseOpOutputShape(s,a)}const r=t.map(o=>o.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==_r(r).length}call(t,e){return z(()=>{if(this.reshapeRequired){const s=[],r=t.map(o=>o.rank);if(-1===r.indexOf(null)){const o=Ar(r);for(let a of t){const i=a.rank;for(let l=0;l<o-i;++l)a=Wi(a,1);s.push(a)}return this.mergeFunction(s)}{let o=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=F(l,[h].concat(Er(c.slice(1))));p=Je(p,[1,0]),p=F(p,d),s.push(p),o=!0}else if(u>1){const c=vs(1,u).concat([0]);s.push(Je(l,c)),o=!0}else s.push(l)}let a=this.mergeFunction(s);const i=a.rank;if(o)if(null==i){const l=a.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));a=F(Je(F(a,[-1,c]),[1,0]),h)}else if(i>1){const l=[i-1].concat(vs(0,i-1));a=Je(a,l)}return a}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const o=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=_r(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return z(()=>{if(null==e)return null;if(!Array.isArray(e))throw new O("`mask` should be an Array");if(!Array.isArray(t))throw new O("`inputs` should be an Array");if(e.length!==t.length)throw new O(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:_n(r,0)))[0];for(let r=1;r<e.length-1;++r)s=Ds(s,e[r]);return s})}}let Cc=(()=>{class n extends go{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return s})}}return n.className="Add",n})();se(Cc);let kc=(()=>{class n extends go{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=D(s,e[r]);return s})}}return n.className="Multiply",n})();se(kc);let Tc=(()=>{class n extends go{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ne(s,e[r]);return D(1/e.length,s)})}}return n.className="Average",n})();se(Tc);let $c=(()=>{class n extends go{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=Xs(s,e[r]);return s})}}return n.className="Maximum",n})();se($c);let _c=(()=>{class n extends go{constructor(e){super(e)}mergeFunction(e){return z(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=ro(s,e[r]);return s})}}return n.className="Minimum",n})();se(_c);let Ec=(()=>{class n extends go{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new O("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const a=e[o].slice();a.splice(this.axis,1);let i=!1;for(const l of r)if(Xe(l,a)){i=!0;break}i||r.push(a)}if(r.length>1)throw new O("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return z(()=>zf(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new O("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const a of s.slice(1)){if(null==r[o]||null==a[o]){r[o]=null;break}r[o]+=a[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new O("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new O("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new O(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return z(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const o=[];for(let i=0;i<e.length;++i)o.push(null==s[i]?ge(Zn(e[i]),"bool"):s[i].rank<e[i].rank?_n(s[i],-1):s[i]);const a=Kt(o,this.axis);return gp(a,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})();function Yi(n,t){for(;n<0;)n+=t;return n}se(Ec);let aw=(()=>{class n extends go{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){S(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new ze("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new O(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new O(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((a,i)=>Yi(a,e[i].shape.length)):[Yi(this.axes,s.shape.length),Yi(this.axes,r.shape.length)],this.normalize&&(s=mc(s,o[0]),r=mc(r,o[1])),function zD(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new ze("batchDot is not implemented for tensors of 4D or higher rank yet");if(S(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),S(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new ze("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return z(()=>{let a,i;if(s>r){a=s-r;const l=[];for(let u=0;u<a;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(r>s){a=r-s;const l=[];for(let u=0;u<a;++u)l.push(1);n=F(n,n.shape.concat(l))}else a=0;if(i=2===n.shape.length&&2===t.shape.length?o[0]===o[1]?ve(D(n,t),o[0]):ve(D(Je(n,[1,0]),t),o[1]):je(n,t,o[0]!==n.shape.length-1,o[1]===t.shape.length-1),a>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+a;++c)u.push(c);i=ao(i,u)}return 1===i.shape.length&&(i=_n(i,1)),i})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[Yi(this.axes,e.length),Yi(this.axes,s.length)],r}computeOutputShape(e){S(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new ze("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const a=s.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})();se(aw);let iw=(()=>{class n extends We{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);return Gi(()=>ne(uc(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})();se(iw);let lw=(()=>{class n extends We{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return z(()=>{this.invokeCallHook(e,s);const r=Le(e);return this.rate>0&&this.rate<1?Gi(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return D(r,uc(r.shape,1,a))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})();se(lw);let uw=(()=>{class n extends We{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Le(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return z(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return Gi(()=>{const a=Le(e),u=-1.7580993408473766;let c=Tr(oo(r),this.rate);c=zs(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=ne(D(a,c),D(ne(c,-1),u));return ne(D(p,h),d)},()=>Le(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})();function Qi(n,t,e,s,r,o=.001){let a;if(2===n.rank)a=Gy(n,t,e,s,r,o);else if(3===n.rank)a=Hy(n,t,e,s,r,o);else{if(4!==n.rank)throw new ze(`batchNormalization is not implemented for array of rank ${n.rank} yet`);a=jy(n,t,e,s,r,o)}return a}se(uw);let cw=(()=>{class n extends We{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Nt(e.betaInitializer||"zeros"),this.gammaInitializer=Nt(e.gammaInitializer||"ones"),this.movingMeanInitializer=Nt(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Nt(e.movingVarianceInitializer||"ones"),this.betaConstraint=nn(e.betaConstraint),this.gammaConstraint=nn(e.gammaConstraint),this.betaRegularizer=Ct(e.betaRegularizer),this.gammaRegularizer=Ct(e.gammaRegularizer)}build(e){e=nt(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new O(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new en({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return z(()=>{const r=null!=s.training&&s.training,o=Le(e),a=o.shape,i=a.length,l=vs(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=uo(1,i);c[u]=a[u];const h=l.slice();h.sort();const d=!Xe(h,vs(0,i).slice(0,i-1));if(!r)return(()=>{if(d){const b=F(this.movingMean.read(),c),v=F(this.movingVariance.read(),c),I=this.center?F(this.beta.read(),c):null,C=this.scale?F(this.gamma.read(),c):null;return Qi(o,b,v,I,C,this.epsilon)}return Qi(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,g,m]=function VD(n,t,e,s,r=.001){return Xe(s.slice().sort(),vs(0,n.rank-1))?function MD(n,t,e,s,r=.001){return z(()=>{const o=Uu(n,s),a=o.mean,i=o.variance;return[Qi(n,a,i,e,t,r),a,i]})}(n,t,e,s,r):function BD(n,t,e,s,r=.001){return z(()=>{const o=Uu(n,s),a=o.mean,i=o.variance,l=[];for(const f of vs(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=F(a,l),c=F(i,l),h=null==t?null:F(t,l),d=null==e?null:F(e,l);return[Qi(n,u,c,d,h,r),a,i]})}(n,t,e,s,r)}(o,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(b,v,I)=>{z(()=>{const C=1-I,k=b.read(),T=D(we(k,v),C);b.write(we(k,T))})};return(()=>{y(this.movingMean,g,this.momentum),y(this.movingVariance,m,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:At(this.betaInitializer),gammaInitializer:At(this.gammaInitializer),movingMeanInitializer:At(this.movingMeanInitializer),movingVarianceInitializer:At(this.movingVarianceInitializer),betaRegularizer:ft(this.betaRegularizer),gammaRegularizer:ft(this.gammaRegularizer),betaConstraint:tn(this.betaConstraint),gammaConstraint:tn(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})();se(cw);let hw=(()=>{class n extends We{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Nt(e.betaInitializer||"zeros"),this.gammaInitializer=Nt(e.gammaInitializer||"ones"),this.betaRegularizer=Ct(e.betaRegularizer),this.gammaRegularizer=Ct(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=nt(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=s);for(const a of this.axis)if(a<0||a>=s)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==_r(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(a=>e[a]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=Le(e),o=r.shape,a=o.length;return z(()=>{let{mean:l,variance:u}=Uu(r,this.axis,!0);const c=uo(1,a);for(const m of this.axis)c[m]=o[m];const h=m=>null!=m&&m.shape.length!==a?F(m,c):m;let d=this.scale?h(this.gamma.read()):null,p=this.center?h(this.beta.read()):null;const f=[],g=[];for(let m=0;m<a;++m)-1!==this.axis.indexOf(m)?(f.push(o[m]),g.push(1)):(f.push(1),g.push(o[m]));return l=us(l,f),u=us(u,f),null!=d&&(d=us(d,g)),null!=p&&(p=us(p,g)),Qi(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:At(this.betaInitializer),gammaInitializer:At(this.gammaInitializer),betaRegularizer:ft(this.betaRegularizer),gammaRegularizer:ft(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})();se(hw);let dw=(()=>{class n extends We{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new O(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new O(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new O(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new en({ndim:4})]}computeOutputShape(e){let s,r;return e=nt(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return z(()=>function WD(n,t,e){return z(()=>{if(4!==n.rank)throw new O(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new O("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new O(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],$r(n,s)})}(Le(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})();function Ac(n,t,e,s,r,o){return z(()=>{let a;Ut(r),Rb(o),Jn(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=dm(n,r);const i="same"===s?"same":"valid";return a="max"===o?Wu(n,t,e,i):Du(n,t,e,i),"channelsFirst"===r&&(a=Je(a,[0,3,1,2])),a})}function pw(n,t,e,s,r,o){return z(()=>{let a;Ut(r),Rb(o),Jn(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=O0(n,r);const i="same"===s?"same":"valid";return a="max"===o?yx(n,t,e,i):Uy(n,t,e,i),"channelsFirst"===r&&(a=Je(a,[0,4,1,2,3])),a})}se(dw);class fw extends We{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new O(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(un(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new O(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}un(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Jn(this.padding),this.inputSpec=[new en({ndim:3})]}computeOutputShape(t){const e=ks((t=nt(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return z(()=>{this.invokeCallHook(t,e),t=Wi(Le(t),2);const s=this.poolingFunction(Le(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ao(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}let mw=(()=>{class n extends fw{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Ut(a),Jn(o),Ac(e,s,r,o,a,"max")}}return n.className="MaxPooling1D",n})();se(mw);let gw=(()=>{class n extends fw{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Ut(a),Jn(o),Ac(e,s,r,o,a,"avg")}}return n.className="AveragePooling1D",n})();se(gw);class yw extends We{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new O(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];un(this.poolSize,"poolSize"),un(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Ut(this.dataFormat),Jn(this.padding),this.inputSpec=[new en({ndim:4})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=ks(e,this.poolSize[0],this.padding,this.strides[0]),s=ks(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Le(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}let xw=(()=>{class n extends yw{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Ut(a),Jn(o),Ac(e,s,r,o,a,"max")}}return n.className="MaxPooling2D",n})();se(xw);let bw=(()=>{class n extends yw{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Ut(a),Jn(o),Ac(e,s,r,o,a,"avg")}}return n.className="AveragePooling2D",n})();se(bw);class ww extends We{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new O(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];un(this.poolSize,"poolSize"),un(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Ut(this.dataFormat),Jn(this.padding),this.inputSpec=[new en({ndim:5})]}computeOutputShape(t){t=nt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=ks(e,this.poolSize[0],this.padding,this.strides[0]),s=ks(s,this.poolSize[1],this.padding,this.strides[1]),r=ks(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return z(()=>(this.invokeCallHook(t,e),this.poolingFunction(Le(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}let vw=(()=>{class n extends ww{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Ut(a),Jn(o),pw(e,s,r,o,a,"max")}}return n.className="MaxPooling3D",n})();se(vw);let Iw=(()=>{class n extends ww{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Ut(a),Jn(o),pw(e,s,r,o,a,"avg")}}return n.className="AveragePooling3D",n})();se(Iw);class Sw extends We{constructor(t){super(t),this.inputSpec=[new en({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new ze}}let Nw=(()=>{class n extends Sw{constructor(e){super(e||{})}call(e,s){return z(()=>{const r=Le(e);return Lt(r,1)})}}return n.className="GlobalAveragePooling1D",n})();se(Nw);let Cw=(()=>{class n extends Sw{constructor(e){super(e||{})}call(e,s){return z(()=>{const r=Le(e);return ls(r,1)})}}return n.className="GlobalMaxPooling1D",n})();se(Cw);class kw extends We{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Ut(this.dataFormat),this.inputSpec=[new en({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new ze}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}let Tw=(()=>{class n extends kw{call(e,s){return z(()=>{const r=Le(e);return Lt(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})();se(Tw);let $w=(()=>{class n extends kw{call(e,s){return z(()=>{const r=Le(e);return ls(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})();se($w);class _w extends We{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const o=nr(e.layer,s);delete e.layer;const a={layer:o};return Object.assign(a,e),new t(a)}}let Ew=(()=>{class n extends _w{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=nt(e)).length<3)throw new O(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=nt(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return z(()=>j0((i,l)=>[Le(this.layer.call(i,s)),[]],e=Le(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})();se(Ew);let Aw=(()=>{class n extends _w{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=nr(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=nr(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function UD(n){ho(hR,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new ze("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,a,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(a=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(a).concat(a.slice()):[r].concat(a).concat(a.slice()):An(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=H0(e,r,o,this.numConstants);if(e=a.inputs,r=a.initialState,o=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new O("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const h=r.map(d=>new en({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=o)throw new ze("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof Vs;for(const c of i)if(c instanceof Vs!==u)throw new O("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return z(()=>{const r=s.initialState;let o,a,i,l;if(null==r)o=this.forwardLayer.call(e,s),a=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),a=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(o)&&(i=o.slice(1).concat(a.slice(1))),o=o[0],a=a[0]),this.returnSequences&&(a=cs(a,1)),"concat"===this.mergeMode?l=zf([o,a]):"sum"===this.mergeMode?l=ne(o,a):"ave"===this.mergeMode?l=D(.5,ne(o,a)):"mul"===this.mergeMode?l=D(o,a):null==this.mergeMode&&(l=[o,a]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){po(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),po(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const a=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=nr(s.layer);if(delete s.layer,null!=s.numConstants)throw new ze("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return n.className="Bidirectional",n})();se(Aw);let Rw=(()=>{class n extends We{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return z(()=>("float32"!==(e=Le(e)).dtype&&(e=zs(e,"float32")),ne(D(e,this.scale),this.offset)))}}return n.className="Rescaling",n})();se(Rw);const{resizeBilinear:HD,cropAndResize:jD}=Os;let Dw=(()=>{class n extends We{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,o,a,i,l,u){return z(()=>{let c,h=!1;const m=[s/i,r/l,(o+s)/i,(a+r)/l],y=[];3===e.rank?(h=!0,c=Yn([e])):c=e;for(let C=0;C<c.shape[0];C++)y.push(m);const x=bs(y,[y.length,4]),b=Zo(0,y.length,1,"int32"),I=jD(c,x,b,[o,a],"nearest");return zs(h?Le(hs(I)):I,u)})}upsize(e,s,r,o){return z(()=>zs(HD(e,[s,r]),o))}call(e,s){return z(()=>{const r=Le(e),o=r.dtype,a=r.shape,i=a[a.length-3],l=a[a.length-2];let u=0;i!==this.height&&(u=Math.floor((i-this.height)/2));let c=0;return l!==this.width&&(c=Math.floor((l-this.width)/2),0===c&&(c=1)),u>=0&&c>=0?this.centerCrop(r,u,c,this.height,this.width,i,l,o):this.upsize(e,this.height,this.width,o)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=nt(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return n.className="CenterCrop",n})();se(Dw);let Fw=(()=>{class n extends We{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=nt(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return z(()=>{let r;if("int32"!==(e=Le(e)).dtype&&(e=zs(e,"int32")),typeof s.countWeights<"u"){if("count"!==this.outputMode)throw new O(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=Le(s.countWeights)}const o=ls(e),a=Ti(e),i=Pn(this.numTokens,o).bufferSync().get(0),l=Tr(a,0).bufferSync().get(0);if(!i||!l)throw new O(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function KD(n,t,e,s){let r=Le(n);if("int32"!==r.dtype&&(r=zs(r,"int32")),"int"===t)return r;const o=r.shape;if(0===r.rank&&(r=_n(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=_n(r,-1)),r.rank>2)throw new O(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${o} which would result in output rank ${r.rank}.`);const a=["multiHot","oneHot"].includes(t);let l;if(l=Np(r,typeof s<"u"&&"count"===t?s:[],e,a),"tfIdf"!==t)return l;if(s)return D(l,s);throw new O("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return n.className="CategoryEncoding",n})();se(Fw);const Ow=new Set(["bilinear","nearest"]);let Lw=(()=>{class n extends We{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!Ow.has(e.interpolation))throw new O(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){return e=nt(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return z(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return Os.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Os.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...Ow]} are supported`)})}}return n.className="Resizing",n})();se(Lw);let XD=(()=>{class n{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}return n.className="RandomSeed",n})(),ZD=(()=>{class n extends We{constructor(e){super(e),this.randomGenerator=new XD(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BaseRandomLayer",n})();const Pw=new Set(["bilinear","nearest"]);let zw=(()=>{class n extends ZD{constructor(e){super(e);const{factor:s,interpolation:r="bilinear"}=e;if(this.factor=s,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new O(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new O(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new O(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(r){if(!Pw.has(r))throw new O(`Invalid interpolation parameter: ${r} is not implemented`);this.interpolation=r}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return e=nt(e),[this.imgHeight,-1,e[2]]}call(e,s){return z(()=>{const r=Le(e);this.imgHeight=r.shape[r.shape.length-3];const o=r.shape[r.shape.length-2];this.widthFactor=oo([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let a=this.widthFactor.dataSync()[0]*o;a=Math.round(a);const i=[this.imgHeight,a];switch(this.interpolation){case"bilinear":return Os.resizeBilinear(e,i);case"nearest":return Os.resizeNearestNeighbor(e,i);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...Pw]} are supported`)}})}}return n.className="RandomWidth",n})();function QD(n){return new Hi(n)}function JD(n){return new R0(n)}function eF(n){return new _0(n)}function tF(n){return new E0(n)}function nF(n){return new A0(n)}function sF(n){return new F0(n)}function rF(n){return new D0(n)}function oF(n){return new V0(n)}function aF(n){return new fm(n)}function iF(n){return new z0(n)}function lF(n){return new mm(n)}function uF(n){return new M0(n)}function cF(n){return new B0(n)}function hF(n){return new W0(n)}function dF(n){return new U0(n)}function pF(n){return new G0(n)}function fF(n){return new ew(n)}function mF(n){return new Q0(n)}function gF(n){return new wm(n)}function yF(n){return new Y0(n)}function xF(n){return new J0(n)}function bF(n){return new tw(n)}function wF(n){return new nw(n)}function vF(n){return new sw(n)}function IF(n){return new ow(n)}function SF(n){return new Cc(n)}function NF(n){return new Tc(n)}function CF(n){return new Ec(n)}function kF(n){return new $c(n)}function TF(n){return new _c(n)}function $F(n){return new kc(n)}function _F(n){return new aw(n)}function EF(n){return new cw(n)}function AF(n){return new hw(n)}function RF(n){return new dw(n)}function vm(n){return new gw(n)}function DF(n){return vm(n)}function FF(n){return vm(n)}function Im(n){return new bw(n)}function OF(n){return Im(n)}function LF(n){return Im(n)}function Sm(n){return new Iw(n)}function PF(n){return Sm(n)}function zF(n){return Sm(n)}function MF(n){return new Nw(n)}function BF(n){return new Tw(n)}function Mw(n){return new Cw(n)}function Bw(n){return new $w(n)}function Vw(n){return new mw(n)}function Ww(n){return new xw(n)}function VF(n){return new vw(n)}function WF(n){return new q0(n)}function UF(n){return new ym(n)}function GF(n){return new X0(n)}function HF(n){return new Nc(n)}function jF(n){return new K0(n)}function KF(n){return new gm(n)}function qF(n){return new Z0(n)}function XF(n){return new bm(n)}function ZF(n){return new mo(n)}function YF(n){return new xm(n)}function QF(n){return new Aw(n)}function JF(n){return new Ew(n)}se(zw);const eO=Mw,tO=Bw,nO=Vw,sO=Ww;function rO(n){return new iw(n)}function oO(n){return new lw(n)}function aO(n){return new uw(n)}function iO(n){return new rw(n)}function lO(n){return new Rw(n)}function uO(n){return new Dw(n)}function cO(n){return new Lw(n)}function hO(n){return new Fw(n)}function dO(n){return new zw(n)}M().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var Gw,ee=(()=>((ee=ee||{})[ee.DT_INVALID=0]="DT_INVALID",ee[ee.DT_FLOAT=1]="DT_FLOAT",ee[ee.DT_DOUBLE=2]="DT_DOUBLE",ee[ee.DT_INT32=3]="DT_INT32",ee[ee.DT_UINT8=4]="DT_UINT8",ee[ee.DT_INT16=5]="DT_INT16",ee[ee.DT_INT8=6]="DT_INT8",ee[ee.DT_STRING=7]="DT_STRING",ee[ee.DT_COMPLEX64=8]="DT_COMPLEX64",ee[ee.DT_INT64=9]="DT_INT64",ee[ee.DT_BOOL=10]="DT_BOOL",ee[ee.DT_QINT8=11]="DT_QINT8",ee[ee.DT_QUINT8=12]="DT_QUINT8",ee[ee.DT_QINT32=13]="DT_QINT32",ee[ee.DT_BFLOAT16=14]="DT_BFLOAT16",ee[ee.DT_QINT16=15]="DT_QINT16",ee[ee.DT_QUINT16=16]="DT_QUINT16",ee[ee.DT_UINT16=17]="DT_UINT16",ee[ee.DT_COMPLEX128=18]="DT_COMPLEX128",ee[ee.DT_HALF=19]="DT_HALF",ee[ee.DT_RESOURCE=20]="DT_RESOURCE",ee[ee.DT_VARIANT=21]="DT_VARIANT",ee[ee.DT_UINT32=22]="DT_UINT32",ee[ee.DT_UINT64=23]="DT_UINT64",ee[ee.DT_FLOAT_REF=101]="DT_FLOAT_REF",ee[ee.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",ee[ee.DT_INT32_REF=103]="DT_INT32_REF",ee[ee.DT_UINT8_REF=104]="DT_UINT8_REF",ee[ee.DT_INT16_REF=105]="DT_INT16_REF",ee[ee.DT_INT8_REF=106]="DT_INT8_REF",ee[ee.DT_STRING_REF=107]="DT_STRING_REF",ee[ee.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",ee[ee.DT_INT64_REF=109]="DT_INT64_REF",ee[ee.DT_BOOL_REF=110]="DT_BOOL_REF",ee[ee.DT_QINT8_REF=111]="DT_QINT8_REF",ee[ee.DT_QUINT8_REF=112]="DT_QUINT8_REF",ee[ee.DT_QINT32_REF=113]="DT_QINT32_REF",ee[ee.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",ee[ee.DT_QINT16_REF=115]="DT_QINT16_REF",ee[ee.DT_QUINT16_REF=116]="DT_QUINT16_REF",ee[ee.DT_UINT16_REF=117]="DT_UINT16_REF",ee[ee.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",ee[ee.DT_HALF_REF=119]="DT_HALF_REF",ee[ee.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",ee[ee.DT_VARIANT_REF=121]="DT_VARIANT_REF",ee[ee.DT_UINT32_REF=122]="DT_UINT32_REF",ee[ee.DT_UINT64_REF=123]="DT_UINT64_REF",ee))();!function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(Gw||(Gw={}));const Nm={};function Hw(n){return Nm[n]}function w(n,t,e,s,r){const o=t.inputParams[n];if(o&&void 0!==o.inputIndexStart){const i=o.inputIndexStart,l=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?i+1:o.inputIndexEnd,u=i<0?t.inputNames.length+i:i;if("tensor"===o.type)return pn(t.inputNames[u],e,s,r);if("tensors"===o.type){const d=t.inputs.slice(i,l);return t.inputNames.slice(i,l).filter((f,g)=>{var m;return"NoOp"!==(null===(m=d[g])||void 0===m?void 0:m.op)}).map(f=>pn(f,e,s,r))}const c=pn(t.inputNames[u],e,s,r),h=c.dataSync();return"number"===o.type?h[0]:rs(c.shape,h)}const a=t.attrParams[n];return a&&a.value}function pn(n,t,e,s){const[r,o]=Mn(n,e);if(null!=s){const i=s.getHashTableHandleByName(r);if(null!=i)return i}const a=e.currentContextIds.find(i=>!!t[Dc(r,i)]);return void 0!==a?t[Dc(r,a)][o]:void 0}function jw(n,t,e){return t[Dc(n,e.currentContextId)]}function sr(n,t){const[e,s,r]=Mn(n,t);return[Dc(e,t&&t.currentContextId),s,r]}function Dc(n,t){return t?`${n}-${t}`:n}function Mn(n,t){if(""===n)return["",0,void 0];const e=null!=t&&null!=t.parseNodeNameCache;if(e){const o=t.parseNodeNameCache.get(n);if(null!=o)return o}const s=n.split(":");let r;if(1===s.length)r=[n,0,void 0];else{const a=3===s.length?s[1]:void 0;r=[s[0],Number(s[s.length-1]),a]}return e&&t.parseNodeNameCache.set(n,r),r}function Fc(n,t,e){let s=w("pad",n,t,e);if("explicit"===s){s=w("explicitPaddings",n,t,e);const r=[[0,0],[0,0],[0,0],[0,0]];for(let o=0;o<4;o++)r[o][0]=s[2*o],r[o][1]=s[2*o+1];return r}return s}function rr(n){return n.kept?n:Ks(n)}const gO=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],yO=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],xO=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],bO=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],wO=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],vO=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],IO=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],SO=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],NO=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],CO=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],kO=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],TO=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],$O=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],_O=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],EO=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],AO=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],RO=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],DO=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],FO=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Kw{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[pe,P,te,he,Q,ae,xe,Ce,at,qt,jt,ss,Wn,Ze,st,rt,re,J,$].map(s=>s.json));this.opMappers=e.reduce((s,r)=>(s[r.tfOpName]=r,s),{})}transformGraph(t,e={}){const r=[],o=[],a=[],i=t.node.reduce((g,m)=>(g[m.name]=this.mapNode(m),m.op.startsWith("Placeholder")?r.push(g[m.name]):"Const"===m.op?o.push(g[m.name]):(null==m.input||0===m.input.length)&&a.push(g[m.name]),g),{});let l=[];const u=[];let c={},h={};null!=e&&(c=this.mapSignatureEntries(e.inputs),h=this.mapSignatureEntries(e.outputs));const d=Object.keys(i);d.forEach(g=>{const m=i[g];m.inputNames.forEach((y,x)=>{const[b,,v]=sr(y),I=i[b];if(null!=I.outputs){const C=I.outputs.indexOf(v);-1!==C&&(m.inputNames[x]=`${b}:${C}`)}m.inputs.push(I),I.children.push(m)})}),0===Object.keys(h).length?d.forEach(g=>{const m=i[g];0===m.children.length&&u.push(m)}):Object.keys(h).forEach(g=>{const[m]=sr(g),y=i[m];null!=y&&(y.signatureKey=h[g],u.push(y))}),Object.keys(c).length>0?Object.keys(c).forEach(g=>{const[m]=sr(g),y=i[m];y&&(y.signatureKey=c[g],l.push(y))}):l=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((g,m)=>(g[m.signature.name]=this.mapFunction(m),g),{}));const f={nodes:i,inputs:l,outputs:u,weights:o,placeholders:r,signature:e,functions:p};return a.length>0&&(f.initNodes=a),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,s)=>(e[t[s].name]=s,e),{})}mapNode(t){const e=Hw(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const s={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(r=>r.startsWith("^")?r.slice(1):r),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(s.inputParams=e.inputs.reduce((r,o)=>(r[o.name]={type:o.type,inputIndexStart:o.start,inputIndexEnd:o.end},r),{})),null!=e.attrs&&(s.attrParams=e.attrs.reduce((r,o)=>{const a=o.type;let i;switch(o.type){case"string":i=Cm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Cm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"string[]":i=Dm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Dm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number":i=Tm(t.attr,o.tfName,o.defaultValue||0),void 0===i&&o.tfDeprecatedName&&(i=Tm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number[]":i=Rm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Rm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool":i=km(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=km(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool[]":i=Om(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Om(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape":i=Am(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Am(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape[]":i=Fm(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Fm(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype":i=_m(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=_m(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype[]":i=Em(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Em(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"func":i=Xw(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Xw(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`)}return r[o.name]={value:i,type:a},r},{})),s}mapFunction(t){const e=t.nodeDef,r=[];let o={};null!=e&&(o=e.reduce((h,d)=>(h[d.name]=this.mapNode(d),"Const"===d.op&&r.push(h[d.name]),h),{}));const a=[],i=[];t.signature.inputArg.forEach(h=>{const[d]=sr(h.name),p={name:d,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:$m(h.type),type:"dtype"}},children:[]};p.signatureKey=h.name,a.push(p),o[d]=p}),Object.keys(o).forEach(h=>{const d=o[h];d.inputNames.forEach((p,f)=>{const[g,,m]=sr(p),y=o[g];if(null!=y.outputs){const x=y.outputs.indexOf(m);-1!==x&&(d.inputNames[f]=`${g}:${x}`)}d.inputs.push(y),y.children.push(d)})});const u=t.ret;t.signature.outputArg.forEach(h=>{const[d,p]=sr(u[h.name]),f=o[d];null!=f&&(f.defaultOutput=p,i.push(f))});const c=this.mapArgsToSignature(t);return{nodes:o,inputs:a,outputs:i,weights:r,placeholders:[],signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s),e),{}),outputs:t.signature.outputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s,t.ret),e),{})}}mapArgToTensorInfo(t,e){let s=t.name;return null!=e&&(s=e[s]),{name:s,dtype:t.type}}}function qw(n,t){const e=Array.isArray(n)?String.fromCharCode.apply(null,n):function OO(n){const t=M().global;if(typeof t.atob<"u")return t.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(n);return t?e:e.toLowerCase()}function Cm(n,t,e,s=!1){const r=n[t];return null!=r?qw(r.s,s):e}function km(n,t,e){const s=n[t];return s?s.b:e}function Tm(n,t,e){const s=n[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:e;return"number"==typeof r?r:parseInt(r,10)}function $m(n){switch("string"==typeof n&&(n=ee[n]),n){case ee.DT_FLOAT:case ee.DT_HALF:return"float32";case ee.DT_INT32:case ee.DT_INT64:case ee.DT_INT8:case ee.DT_UINT8:return"int32";case ee.DT_BOOL:return"bool";case ee.DT_DOUBLE:return"float32";case ee.DT_STRING:return"string";default:return null}}function Xw(n,t,e){const s=n[t];return s&&s.func?s.func.name:e}function _m(n,t,e){const s=n[t];return s&&s.type?$m(s.type):e}function Em(n,t,e){const s=n[t];return s&&s.list&&s.list.type?s.list.type.map(r=>$m(r)):e}function Zw(n){if(!n.unknownRank)return null!=n.dim?n.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Am(n,t,e){const s=n[t];return s&&s.shape?Zw(s.shape):e}function Rm(n,t,e){const s=n[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(r=>"number"==typeof r?r:parseInt(r,10)):e}function Dm(n,t,e,s=!1){const r=n[t];return r&&r.list&&r.list.s?r.list.s.map(o=>qw(o,s)):e}function Fm(n,t,e){const s=n[t];return s&&s.list&&s.list.shape?s.list.shape.map(r=>Zw(r)):e}function Om(n,t,e){const s=n[t];return s&&s.list&&s.list.b?s.list.b:e}class LO{constructor(t,e,s){this.node=t,this.tensorMap=e,this.context=s,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(r=>this.getInput(r)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((r,o)=>(r[o]=this.getAttr(o),r),{}))}getInput(t){return pn(t,this.tensorMap,this.context)}getAttr(t,e){const s=this.node.rawAttrs[t];if(null!=s.tensor)return pn(t,this.tensorMap,this.context);if(null!=s.i||null!=s.f)return Tm(this.node.rawAttrs,t,e);if(null!=s.s)return Cm(this.node.rawAttrs,t,e);if(null!=s.b)return km(this.node.rawAttrs,t,e);if(null!=s.shape)return Am(this.node.rawAttrs,t,e);if(null!=s.type)return _m(this.node.rawAttrs,t,e);if(null!=s.list){if(null!=s.list.i||null!=s.list.f)return Rm(this.node.rawAttrs,t,e);if(null!=s.list.s)return Dm(this.node.rawAttrs,t,e);if(null!=s.list.shape)return Fm(this.node.rawAttrs,t,e);if(null!=s.list.b)return Om(this.node.rawAttrs,t,e);if(null!=s.list.type)return Em(this.node.rawAttrs,t,e)}return e}}function ms(n,t,e=""){if("number"!=typeof n&&"number"!=typeof t){S(n.length===t.length,()=>e+` Shapes ${n} and ${t} must match`);for(let s=0;s<n.length;s++){const r=n[s],o=t[s];S(r<0||o<0||r===o,()=>e+` Shapes ${n} and ${t} must match`)}}}function Yw(n){return!("number"==typeof n||n.some(t=>t<0))}function Ji(n,t,e){let s=Lm(n,e);const r=!Yw(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach(o=>{s=Lm(o.shape,s)}),!Yw(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Lm(n,t){if("number"==typeof n)return t;if("number"==typeof t)return n;if(n.length!==t.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);const e=[];for(let s=0;s<n.length;++s){const r=n[s],o=t[s];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);e[s]=r>=0?r:o}return e}class MO{constructor(t,e,s,r,o,a,i){this.name=t,this.dtype=e,this.maxSize=s,this.elementShape=r,this.identicalElementShapes=o,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Ee(0),on(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const s=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=e.shape),ms(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),s.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(s.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);s.tensor=e,on(e),s.written=!0,this.tensors[t]=s}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((s,r)=>this.write(s,e[r]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let r=0;r<this.size();r++)t.push(r)}if(0===t.length)return bs([],[0].concat(this.elementShape));const s=this.readMany(t);return ms(this.elementShape,s[0].shape,"TensorArray shape mismatch: "),Yn(s,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return bs([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const s=this.readMany(e);return ms(this.elementShape,s[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`),Kt(s,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(!this.dynamicSize&&s>=this.maxSize)throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);this.writeMany(t,hs(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let s=0;const r=t.map(l=>(s+=l,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const o=0===s?0:e.size/s,a=[];z(()=>{e=F(e,[1,s,o]);for(let l=0;l<t.length;++l)a[l]=F(Qe(e,[0,0===l?0:r[l-1],0],[1,t[l],o]),this.elementShape);return a});const i=[];for(let l=0;l<t.length;l++)i[l]=l;this.writeMany(i,a)}}class yo{get id(){return this.idTensor.id}constructor(t,e,s,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=s,t?.forEach(o=>{if(s!==o.dtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);ms(e,o.shape,"TensorList shape mismatch: "),on(o)}),this.idTensor=Ee(0),this.maxNumElements=r,on(this.idTensor)}copy(){return new yo([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,s=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==s&&this.tensors.length!==s)throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);ms(t,this.elementShape,"TensorList shape mismatch: ");const r=Ji(this.elementShape,this.tensors,t);return z(()=>{const o=this.tensors.map(a=>F(a,r));return Yn(o,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const s=Ji(this.elementShape,this.tensors,t),r=this.tensors.pop();return r.kept=!1,ms(r.shape,t,"TensorList shape mismatch: "),F(r,s)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(ms(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");on(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new yo([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let s=0;s<Math.min(this.tensors.length,t);++s)e.tensors[s]=this.tensors[s];return e}getItem(t,e,s){if(s!==this.elementDtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);ms(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=Ji(this.elementShape,this.tensors,e);return F(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);ms(this.elementShape,e.shape,"TensorList shape mismatch: "),on(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,s){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);ms(this.elementShape,s,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=Ji(this.elementShape,this.tensors,s);return 0===t.length?bs([],[0].concat(r)):z(()=>{const o=t.map(a=>F(this.tensors[a],r));return Yn(o,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);ms(this.elementShape,e,"TensorList shape mismatch: ");const s=Ji(this.elementShape,this.tensors,e);return 0===this.size()?bs([],[0].concat(s)):z(()=>{const r=this.tensors.map(o=>F(o,s));return Kt(r,0)})}}const GO=function(){var n=(0,B.Z)(function*(t,e,s){switch(t.op){case"If":case"StatelessIf":{const r=w("thenBranch",t,e,s),o=w("elseBranch",t,e,s),a=w("cond",t,e,s),i=w("args",t,e,s);return(yield a.data())[0]?s.functionMap[r].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap):s.functionMap[o].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap)}case"While":case"StatelessWhile":{const r=w("body",t,e,s),o=w("cond",t,e,s),a=w("args",t,e,s),i=yield s.functionMap[o].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap),l=a.map(h=>h.id);let u=yield i[0].data();i.forEach(h=>{!h.kept&&-1===l.indexOf(h.id)&&h.dispose()});let c=a;for(;u[0];){const h=c;c=yield s.functionMap[r].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);const d=c.map(f=>f.id);h.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()});const p=yield s.functionMap[o].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);u=yield p[0].data(),p.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()})}return c}case"LoopCond":return[rr(w("pred",t,e,s))];case"Switch":{const r=w("pred",t,e,s);let o=w("data",t,e,s);return o.kept||(o=rr(o)),(yield r.data())[0]?[void 0,o]:[o,void 0]}case"Merge":{const r=t.inputNames.find(o=>void 0!==pn(o,e,s));return r?[rr(pn(r,e,s))]:void 0}case"Enter":{const r=w("frameName",t,e,s),o=w("tensor",t,e,s);return s.enterFrame(r),[rr(o)]}case"Exit":{const r=w("tensor",t,e,s);return s.exitFrame(),[rr(r)]}case"NextIteration":{const r=w("tensor",t,e,s);return s.nextIteration(),[rr(r)]}case"TensorArrayV3":{const r=w("size",t,e,s),o=w("dtype",t,e,s),a=w("elementShape",t,e,s),i=w("dynamicSize",t,e,s),l=w("clearAfterRead",t,e,s),u=w("identicalElementShapes",t,e,s),c=w("name",t,e,s),h=new MO(c,o,r,a,u,i,l);return s.addTensorArray(h),[h.idTensor,Ee(1)]}case"TensorArrayWriteV3":{const r=w("tensorArrayId",t,e,s),o=w("index",t,e,s),a=w("tensor",t,e,s),i=s.getTensorArray(r.id);return i.write(o,a),[i.idTensor]}case"TensorArrayReadV3":{const r=w("tensorArrayId",t,e,s),o=w("index",t,e,s);return[s.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=w("tensorArrayId",t,e,s),o=w("indices",t,e,s),a=w("dtype",t,e,s);return[s.getTensorArray(r.id).gather(o,a)]}case"TensorArrayScatterV3":{const r=w("tensorArrayId",t,e,s),o=w("indices",t,e,s),a=w("tensor",t,e,s),i=s.getTensorArray(r.id);return i.scatter(o,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=w("tensorArrayId",t,e,s),o=s.getTensorArray(r.id),a=w("dtype",t,e,s);return[o.concat(a)]}case"TensorArraySplitV3":{const r=w("tensorArrayId",t,e,s),o=w("tensor",t,e,s),a=w("lengths",t,e,s),i=s.getTensorArray(r.id);return i.split(a,o),[i.idTensor]}case"TensorArraySizeV3":{const r=w("tensorArrayId",t,e,s);return[Ee(s.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=w("tensorArrayId",t,e,s),o=s.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=w("tensorListId",t,e,s),o=w("index",t,e,s),a=w("tensor",t,e,s),i=s.getTensorList(r.id);return i.setItem(o,a),[i.idTensor]}case"TensorListGetItem":{const r=w("tensorListId",t,e,s),o=w("index",t,e,s),a=w("elementShape",t,e,s),i=w("elementDType",t,e,s);return[s.getTensorList(r.id).getItem(o,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=w("indices",t,e,s),l=function WO(n,t,e,s){if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const o=new yo([],e,n.dtype,s),a=hs(n,0);return t.forEach((i,l)=>{o.setItem(i,a[l])}),o}(w("tensor",t,e,s),r,w("elementShape",t,e,s),w("numElements",t,e,s));return s.addTensorList(l),[l.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=w("elementShape",t,e,s),o=w("elementDType",t,e,s);let a;a="TensorListReserve"===t.op?"numElements":"maxNumElements";const i=w(a,t,e,s),u=function VO(n,t,e,s){return new yo([],n,t,s)}(r,o,0,"TensorListReserve"===t.op?-1:i);return s.addTensorList(u),[u.idTensor]}case"TensorListGather":{const r=w("tensorListId",t,e,s),o=w("indices",t,e,s),a=w("elementShape",t,e,s),i=w("elementDType",t,e,s);return[s.getTensorList(r.id).gather(o,i,a)]}case"TensorListStack":{const r=w("tensorListId",t,e,s),o=w("elementShape",t,e,s),a=w("elementDType",t,e,s),i=w("numElements",t,e,s);return[s.getTensorList(r.id).stack(o,a,i)]}case"TensorListFromTensor":{const i=function BO(n,t,e){const s=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==e)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);ms(n.shape.slice(1),t,"TensorList shape mismatch: ");const o=hs(n);return new yo(o,t,s)}(w("tensor",t,e,s),w("elementShape",t,e,s),w("elementDType",t,e,s));return s.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=w("tensorListId",t,e,s),o=s.getTensorList(r.id),a=w("dtype",t,e,s),i=w("elementShape",t,e,s);return[o.concat(a,i)]}case"TensorListPushBack":{const r=w("tensorListId",t,e,s),o=w("tensor",t,e,s),a=s.getTensorList(r.id);return a.pushBack(o),[a.idTensor]}case"TensorListPopBack":{const r=w("tensorListId",t,e,s),o=w("elementShape",t,e,s),a=w("elementDType",t,e,s);return[s.getTensorList(r.id).popBack(o,a)]}case"TensorListSplit":{const r=w("tensor",t,e,s),o=w("elementShape",t,e,s),i=function UO(n,t,e){let s=0;const r=t.map(c=>(s+=c,s));if(s!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${n.shape}`);const a=Lm(n.shape.slice(1),e),i=0===s?0:n.size/s,l=z(()=>{const c=[];n=F(n,[1,s,i]);for(let h=0;h<t.length;++h)c[h]=F(Qe(n,[0,0===h?0:r[h-1],0],[1,t[h],i]),a);return n.dispose(),c}),u=new yo([],e,n.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}(r,w("lengths",t,e,s),o);return s.addTensorList(i),[i.idTensor]}case"TensorListLength":{const r=w("tensorListId",t,e,s);return[Ee(s.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=w("tensorListId",t,e,s),o=w("size",t,e,s),i=s.getTensorList(r.id).resize(o);return s.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r){return n.apply(this,arguments)}}();function Qw(n,t,e){const[s,r]=w("fusedOps",n,t,e),o="biasadd"===s,a=!o,i="prelu"===r,l="fusedbatchnorm"===s,u=w("numArgs",n,t,e);if(o){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=w("strides",n,t,e),h=Fc(n,t,e),d=w("dataFormat",n,t,e).toUpperCase(),p=w("dilations",n,t,e);let[f,g]=w("args",n,t,e);return a&&(g=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:g,activationFunc:r,leakyreluAlpha:w("leakyreluAlpha",n,t,e)}}function Pm(n,t,e){return{boxes:w("boxes",n,t,e),scores:w("scores",n,t,e),maxOutputSize:w("maxOutputSize",n,t,e),iouThreshold:w("iouThreshold",n,t,e),scoreThreshold:w("scoreThreshold",n,t,e),softNmsSigma:w("softNmsSigma",n,t,e)}}const KO=function(){var n=(0,B.Z)(function*(t,e,s,r,o=le){switch(t.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c,softNmsSigma:h}=Pm(t,e,s),d=yield o.image.nonMaxSuppressionWithScoreAsync(a,i,l,u,c,h);return[d.selectedIndices,d.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Pm(t,e,s),h=w("padToMaxOutputSize",t,e,s),d=yield o.image.nonMaxSuppressionPaddedAsync(a,i,l,u,c,h);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Pm(t,e,s);return[yield o.image.nonMaxSuppressionAsync(a,i,l,u,c)]}case"Where":{const a=o.cast(w("condition",t,e,s),"bool"),i=[yield o.whereAsync(a)];return a.dispose(),i}case"ListDiff":return o.setdiff1dAsync(w("x",t,e,s),w("y",t,e,s));default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();class ZO{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=Ee(0),this.tensorMap=new Map,on(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ee(this.size(),"int32")}import(t,e){var s=this;return(0,B.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return s.tensorMap.forEach(o=>o.dispose()),s.tensorMap.clear(),z(()=>{const o=hs(e),a=r.length,i=o.length;S(a===i,()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${i} elements.`);for(let l=0;l<a;l++){const u=r[l],c=o[l];on(c),s.tensorMap.set(u,c)}return s.handle})})()}find(t,e){var s=this;return(0,B.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return z(()=>{const o=[];for(let a=0;a<r.length;a++){const l=s.findWithDefault(r[a],e);o.push(l)}return Yn(o)})})()}findWithDefault(t,e){return this.tensorMap.get(t)??e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const YO=function(){var n=(0,B.Z)(function*(t,e,s,r){switch(t.op){case"HashTable":case"HashTableV2":{const o=r.getHashTableHandleByName(t.name);if(null!=o)return[o];{const a=w("keyDType",t,e,s),i=w("valueDType",t,e,s),l=new ZO(a,i);return r.addHashTable(t.name,l),[l.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const o=w("tableHandle",t,e,s,r),a=w("keys",t,e,s),i=w("values",t,e,s);return[yield r.getHashTableById(o.id).import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const o=w("tableHandle",t,e,s,r),a=w("keys",t,e,s),i=w("defaultValue",t,e,s);return[yield r.getHashTableById(o.id).find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=w("tableHandle",t,e,s,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();function Jw(n,t,e,s,r=z){const o=((a,i,l)=>{switch(a.category){case"arithmetic":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(w("a",n,t,e),w("b",n,t,e))];case"AddN":return[s.addN(w("tensors",n,t,e))];case"FloorMod":case"Mod":return[s.mod(w("a",n,t,e),w("b",n,t,e))];case"Mul":return[s.mul(w("a",n,t,e),w("b",n,t,e))];case"RealDiv":case"Div":return[s.div(w("a",n,t,e),w("b",n,t,e))];case"DivNoNan":return[s.divNoNan(w("a",n,t,e),w("b",n,t,e))];case"FloorDiv":return[s.floorDiv(w("a",n,t,e),w("b",n,t,e))];case"Sub":return[s.sub(w("a",n,t,e),w("b",n,t,e))];case"Minimum":return[s.minimum(w("a",n,t,e),w("b",n,t,e))];case"Maximum":return[s.maximum(w("a",n,t,e),w("b",n,t,e))];case"Pow":return[s.pow(w("a",n,t,e),w("b",n,t,e))];case"SquaredDifference":return[s.squaredDifference(w("a",n,t,e),w("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"basic_math":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"Abs":case"ComplexAbs":return[s.abs(w("x",n,t,e))];case"Acos":return[s.acos(w("x",n,t,e))];case"Acosh":return[s.acosh(w("x",n,t,e))];case"Asin":return[s.asin(w("x",n,t,e))];case"Asinh":return[s.asinh(w("x",n,t,e))];case"Atan":return[s.atan(w("x",n,t,e))];case"Atan2":return[s.atan2(w("x",n,t,e),w("y",n,t,e))];case"Atanh":return[s.atanh(w("x",n,t,e))];case"Ceil":return[s.ceil(w("x",n,t,e))];case"Complex":return[s.complex(w("real",n,t,e),w("imag",n,t,e))];case"Cos":return[s.cos(w("x",n,t,e))];case"Cosh":return[s.cosh(w("x",n,t,e))];case"Elu":return[s.elu(w("x",n,t,e))];case"Erf":return[s.erf(w("x",n,t,e))];case"Exp":return[s.exp(w("x",n,t,e))];case"Expm1":return[s.expm1(w("x",n,t,e))];case"Floor":return[s.floor(w("x",n,t,e))];case"Log":return[s.log(w("x",n,t,e))];case"Log1p":return[s.log1p(w("x",n,t,e))];case"Imag":return[s.imag(w("x",n,t,e))];case"Neg":return[s.neg(w("x",n,t,e))];case"Reciprocal":return[s.reciprocal(w("x",n,t,e))];case"Real":return[s.real(w("x",n,t,e))];case"Relu":return[s.relu(w("x",n,t,e))];case"Round":return[s.round(w("x",n,t,e))];case"Selu":return[s.selu(w("x",n,t,e))];case"Sigmoid":return[s.sigmoid(w("x",n,t,e))];case"Sin":return[s.sin(w("x",n,t,e))];case"Sign":return[s.sign(w("x",n,t,e))];case"Sinh":return[s.sinh(w("x",n,t,e))];case"Softplus":return[s.softplus(w("x",n,t,e))];case"Sqrt":return[s.sqrt(w("x",n,t,e))];case"Square":return[s.square(w("x",n,t,e))];case"Tanh":return[s.tanh(w("x",n,t,e))];case"Tan":return[s.tan(w("x",n,t,e))];case"ClipByValue":return[s.clipByValue(w("x",n,t,e),w("clipValueMin",n,t,e),w("clipValueMax",n,t,e))];case"Relu6":return[s.relu6(w("x",n,t,e))];case"Rsqrt":return[s.rsqrt(pn(n.inputNames[0],t,e))];case"LeakyRelu":return[s.leakyRelu(w("x",n,t,e),w("alpha",n,t,e))];case"Prelu":return[s.prelu(w("x",n,t,e),w("alpha",n,t,e))];case"IsNan":return[s.isNaN(pn(n.inputNames[0],t,e))];case"IsInf":return[s.isInf(pn(n.inputNames[0],t,e))];case"IsFinite":return[s.isFinite(pn(n.inputNames[0],t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"control":return GO(a,i,l);case"convolution":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"Conv1D":{const r=w("stride",n,t,e),o=w("pad",n,t,e),a=w("dataFormat",n,t,e).toUpperCase(),i=w("dilation",n,t,e);return[s.conv1d(w("x",n,t,e),w("filter",n,t,e),r,o,a,i)]}case"Conv2D":{const r=w("strides",n,t,e),o=Fc(n,t,e),a=w("dataFormat",n,t,e).toUpperCase(),i=w("dilations",n,t,e);return[s.conv2d(w("x",n,t,e),w("filter",n,t,e),[r[1],r[2]],o,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=Qw(n,t,e);return[s.fused.conv2d({x:w("x",n,t,e),filter:w("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=Qw(n,t,e);return[s.fused.depthwiseConv2d({x:w("x",n,t,e),filter:w("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=w("outputShape",n,t,e),o=w("strides",n,t,e),a=Fc(n,t,e);return[s.conv2dTranspose(w("x",n,t,e),w("filter",n,t,e),r,[o[1],o[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=w("strides",n,t,e),o=Fc(n,t,e),a=w("dilations",n,t,e),i=w("dataFormat",n,t,e).toUpperCase();return[s.depthwiseConv2d(w("input",n,t,e),w("filter",n,t,e),[r[1],r[2]],o,i,[a[1],a[2]])]}case"Conv3D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),a=w("dataFormat",n,t,e).toUpperCase(),i=w("dilations",n,t,e);return[s.conv3d(w("x",n,t,e),w("filter",n,t,e),[r[1],r[2],r[3]],o,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=w("strides",n,t,e),o=w("pad",n,t,e),a=w("kernelSize",n,t,e);return[s.avgPool(w("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPool":{const r=w("strides",n,t,e),o=w("pad",n,t,e),a=w("kernelSize",n,t,e);return[s.maxPool(w("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPoolWithArgmax":{const r=w("strides",n,t,e),o=w("pad",n,t,e),a=w("kernelSize",n,t,e),i=w("includeBatchInIndex",n,t,e),{result:l,indexes:u}=s.maxPoolWithArgmax(w("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o,i);return[l,u]}case"AvgPool3D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),a=w("kernelSize",n,t,e);return[s.avgPool3d(w("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"MaxPool3D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),a=w("kernelSize",n,t,e);return[s.maxPool3d(w("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"Dilation2D":{const r=w("strides",n,t,e),o=w("pad",n,t,e),a=w("dilations",n,t,e),i=r[1],l=r[2],u=a[1],c=a[2];return[s.dilation2d(w("x",n,t,e),w("filter",n,t,e),[i,l],o,[u,c],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"creation":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"Fill":{const r=w("shape",n,t,e),o=w("dtype",n,t,e),a=w("value",n,t,e);return[s.fill(r,a,o)]}case"LinSpace":{const r=w("start",n,t,e),o=w("stop",n,t,e),a=w("num",n,t,e);return[s.linspace(r,o,a)]}case"Multinomial":{const r=w("logits",n,t,e),o=w("numSamples",n,t,e),a=w("seed",n,t,e);return[s.multinomial(r,o,a)]}case"OneHot":{const r=w("indices",n,t,e),o=w("depth",n,t,e),a=w("onValue",n,t,e),i=w("offValue",n,t,e),l=w("dtype",n,t,e);return[s.oneHot(r,o,a,i,l)]}case"Ones":return[s.ones(w("shape",n,t,e),w("dtype",n,t,e))];case"OnesLike":return[s.onesLike(w("x",n,t,e))];case"RandomStandardNormal":return[s.randomStandardNormal(w("shape",n,t,e),w("dtype",n,t,e),w("seed",n,t,e))];case"RandomUniform":return[s.randomUniform(w("shape",n,t,e),w("minval",n,t,e),w("maxval",n,t,e),w("dtype",n,t,e))];case"RandomUniformInt":return[s.randomUniformInt(w("shape",n,t,e),w("minval",n,t,e),w("maxval",n,t,e),w("seed",n,t,e))];case"Range":{const r=w("start",n,t,e),o=w("stop",n,t,e),a=w("step",n,t,e);return[s.range(r,o,a,w("dtype",n,t,e))]}case"TruncatedNormal":{const r=w("shape",n,t,e),o=w("mean",n,t,e),a=w("stdDev",n,t,e),i=w("seed",n,t,e);return[s.truncatedNormal(r,o,a,w("dtype",n,t,e),i)]}case"Zeros":return[s.zeros(w("shape",n,t,e),w("dtype",n,t,e))];case"ZerosLike":return[s.zerosLike(w("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"dynamic":return KO(a,i,l);case"evaluation":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"LowerBound":{const r=w("sortedSequence",n,t,e),o=w("values",n,t,e);return[s.lowerBound(r,o)]}case"TopKV2":{const r=w("x",n,t,e),o=w("k",n,t,e),a=w("sorted",n,t,e),i=s.topk(r,o,a);return[i.values,i.indices]}case"UpperBound":{const r=w("sortedSequence",n,t,e),o=w("values",n,t,e);return[s.upperBound(r,o)]}case"Unique":{const r=w("x",n,t,e),o=s.unique(r);return[o.values,o.indices]}case"UniqueV2":{const r=w("x",n,t,e),o=w("axis",n,t,e),a=s.unique(r,o);return[a.values,a.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"image":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"ResizeBilinear":{const r=w("images",n,t,e),o=w("size",n,t,e),a=w("alignCorners",n,t,e),i=w("halfPixelCenters",n,t,e);return[s.image.resizeBilinear(r,[o[0],o[1]],a,i)]}case"ResizeNearestNeighbor":{const r=w("images",n,t,e),o=w("size",n,t,e),a=w("alignCorners",n,t,e),i=w("halfPixelCenters",n,t,e);return[s.image.resizeNearestNeighbor(r,[o[0],o[1]],a,i)]}case"CropAndResize":{const r=w("image",n,t,e),o=w("boxes",n,t,e),a=w("boxInd",n,t,e),i=w("cropSize",n,t,e),l=w("method",n,t,e),u=w("extrapolationValue",n,t,e);return[s.image.cropAndResize(r,o,a,i,l,u)]}case"ImageProjectiveTransformV3":{const r=w("images",n,t,e),o=w("transforms",n,t,e),a=w("outputShape",n,t,e),i=w("fillValue",n,t,e),l=w("interpolation",n,t,e),u=w("fillMode",n,t,e);return[s.image.transform(r,o,l.toLowerCase(),u.toLowerCase(),i,a)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"graph":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"Const":return t[n.name];case"PlaceholderWithDefault":const r=w("default",n,t,e);return[pn(n.name,t,e)||r];case"Placeholder":return[pn(n.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[rr(w("x",n,t,e))];case"IdentityN":return w("x",n,t,e).map(c=>rr(c));case"Shape":return[s.tensor1d(w("x",n,t,e).shape,"int32")];case"ShapeN":return w("x",n,t,e).map(c=>s.tensor1d(c.shape));case"Size":return[s.scalar(w("x",n,t,e).size,"int32")];case"Rank":return[s.scalar(w("x",n,t,e).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=w("x",n,t,e),i=w("data",n,t,e),l=w("message",n,t,e),u=w("summarize",n,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<i.length;c++)console.log(Array.prototype.slice.call(i[c].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"logical":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"Equal":return[s.equal(w("a",n,t,e),w("b",n,t,e))];case"NotEqual":return[s.notEqual(w("a",n,t,e),w("b",n,t,e))];case"Greater":return[s.greater(w("a",n,t,e),w("b",n,t,e))];case"GreaterEqual":return[s.greaterEqual(w("a",n,t,e),w("b",n,t,e))];case"Less":return[s.less(w("a",n,t,e),w("b",n,t,e))];case"LessEqual":return[s.lessEqual(w("a",n,t,e),w("b",n,t,e))];case"LogicalAnd":return[s.logicalAnd(w("a",n,t,e),w("b",n,t,e))];case"LogicalNot":return[s.logicalNot(w("a",n,t,e))];case"LogicalOr":return[s.logicalOr(w("a",n,t,e),w("b",n,t,e))];case"Select":case"SelectV2":return[s.where(w("condition",n,t,e),w("a",n,t,e),w("b",n,t,e))];case"BitwiseAnd":return[s.bitwiseAnd(w("a",n,t,e),w("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"matrices":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(w("a",n,t,e),w("b",n,t,e),w("transposeA",n,t,e),w("transposeB",n,t,e))];case"Einsum":return[s.einsum(w("equation",n,t,e),...w("tensors",n,t,e))];case"Transpose":return[s.transpose(w("x",n,t,e),w("perm",n,t,e))];case"_FusedMatMul":const[r,o]=w("fusedOps",n,t,e),a="biasadd"===r,i="prelu"===o,l=w("numArgs",n,t,e),u=w("leakyreluAlpha",n,t,e);if(a){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=w("args",n,t,e);return[s.fused.matMul({a:w("a",n,t,e),b:w("b",n,t,e),transposeA:w("transposeA",n,t,e),transposeB:w("transposeB",n,t,e),bias:c,activation:o,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(w("a",n,t,e),w("numLower",n,t,e),w("numUpper",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"normalization":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"EuclideanNorm":return[s.euclideanNorm(w("x",n,t,e),w("axis",n,t,e),w("keepDims",n,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(w("x",n,t,e),w("mean",n,t,e),w("variance",n,t,e),w("offset",n,t,e),w("scale",n,t,e),w("epsilon",n,t,e))];case"LRN":return[s.localResponseNormalization(w("x",n,t,e),w("radius",n,t,e),w("bias",n,t,e),w("alpha",n,t,e),w("beta",n,t,e))];case"Softmax":return[s.softmax(w("x",n,t,e))];case"LogSoftmax":return[s.logSoftmax(w("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"ragged":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:o}=s.raggedGather(w("paramsNestedSplits",n,t,e),w("paramsDenseValues",n,t,e),w("indices",n,t,e),w("outputRaggedRank",n,t,e));return r.concat(o)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:o}=s.raggedRange(w("starts",n,t,e),w("limits",n,t,e),w("splits",n,t,e));return[r,o]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(w("shape",n,t,e),w("values",n,t,e),w("defaultValue",n,t,e),w("rowPartitionTensors",n,t,e),w("rowPartitionTypes",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"reduction":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"Max":{const i=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.max(w("x",n,t,e),i,l)]}case"Mean":{const i=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.mean(w("x",n,t,e),i,l)]}case"Min":{const i=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.min(w("x",n,t,e),i,l)]}case"Sum":{const i=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.sum(w("x",n,t,e),i,l)]}case"All":{const i=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.all(w("x",n,t,e),i,l)]}case"Any":{const i=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.any(w("x",n,t,e),i,l)]}case"ArgMax":{const i=w("axis",n,t,e);return[s.argMax(w("x",n,t,e),i)]}case"ArgMin":{const i=w("axis",n,t,e);return[s.argMin(w("x",n,t,e),i)]}case"Prod":{const i=w("axis",n,t,e),l=w("keepDims",n,t,e);return[s.prod(w("x",n,t,e),i,l)]}case"Cumprod":{const i=w("axis",n,t,e),l=w("exclusive",n,t,e),u=w("reverse",n,t,e);return[s.cumprod(w("x",n,t,e),i,l,u)]}case"Cumsum":{const i=w("axis",n,t,e),l=w("exclusive",n,t,e),u=w("reverse",n,t,e);return[s.cumsum(w("x",n,t,e),i,l,u)]}case"Bincount":const r=w("x",n,t,e),o=w("weights",n,t,e),a=w("size",n,t,e);return[s.bincount(r,o,a)];case"DenseBincount":{const i=w("x",n,t,e),l=w("weights",n,t,e),u=w("size",n,t,e),c=w("binaryOutput",n,t,e);return[s.denseBincount(i,l,u,c)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"slice_join":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"ConcatV2":case"Concat":{const r=w("n",n,t,e),o=w("axis",n,t,e);let a=w("tensors",n,t,e);return a=a.slice(0,r),[s.concat(a,o)]}case"Gather":{const r=w("x",n,t,e),o=w("indices",n,t,e);return[s.gather(r,s.cast(o,"int32"),0)]}case"GatherV2":{const r=w("axis",n,t,e),o=w("batchDims",n,t,e),a=w("x",n,t,e),i=w("indices",n,t,e);return[s.gather(a,s.cast(i,"int32"),r,o)]}case"Reverse":{const r=w("dims",n,t,e),o=[];for(let i=0;i<r.length;i++)r[i]&&o.push(i);const a=w("x",n,t,e);return[s.reverse(a,o)]}case"ReverseV2":{const r=w("axis",n,t,e),o=w("x",n,t,e);return[s.reverse(o,r)]}case"Slice":{const r=w("begin",n,t,e),o=w("size",n,t,e);return[s.slice(w("x",n,t,e),r,o)]}case"StridedSlice":{const r=w("begin",n,t,e),o=w("end",n,t,e),a=w("strides",n,t,e),i=w("beginMask",n,t,e),l=w("endMask",n,t,e),u=w("ellipsisMask",n,t,e),c=w("newAxisMask",n,t,e),h=w("shrinkAxisMask",n,t,e),d=w("x",n,t,e);return[s.stridedSlice(d,r,o,a,i,l,u,c,h)]}case"Pack":return z(()=>{const r=w("axis",n,t,e),o=w("tensors",n,t,e),a=o[0].shape,i=s.squeeze(o[0]).shape,l=o.map(u=>{const c=Xe(u.shape,a);if(!c&&!Xe(s.squeeze(u).shape,i))throw new Error("the input tensors shape does not match");return c?u:s.reshape(u,a)});return[s.stack(l,r)]});case"Unpack":{const r=w("axis",n,t,e),o=w("tensor",n,t,e);return s.unstack(o,r)}case"Tile":{const r=w("reps",n,t,e);return[s.tile(w("x",n,t,e),r)]}case"Split":case"SplitV":{const r=w("axis",n,t,e),o=w("numOrSizeSplits",n,t,e),a=w("x",n,t,e);return s.split(a,o,r)}case"ScatterNd":{const r=w("indices",n,t,e),o=w("values",n,t,e),a=w("shape",n,t,e);return[s.scatterND(r,o,a)]}case"GatherNd":{const r=w("x",n,t,e),o=w("indices",n,t,e);return[s.gatherND(r,o)]}case"SparseToDense":{const r=w("sparseIndices",n,t,e),o=w("outputShape",n,t,e),a=w("sparseValues",n,t,e),i=w("defaultValue",n,t,e);return[s.sparseToDense(r,a,o,a.dtype===i.dtype?i:s.cast(i,a.dtype))]}case"TensorScatterUpdate":{const r=w("indices",n,t,e),o=w("values",n,t,e),a=w("tensor",n,t,e);return[s.tensorScatterUpdate(a,r,o)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"sparse":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:o,emptyRowIndicator:a,reverseIndexMap:i}=s.sparse.sparseFillEmptyRows(w("indices",n,t,e),w("values",n,t,e),w("denseShape",n,t,e),w("defaultValue",n,t,e));return[r,o,a,i]}case"SparseReshape":{const{outputIndices:r,outputShape:o}=s.sparse.sparseReshape(w("inputIndices",n,t,e),w("inputShape",n,t,e),w("newShape",n,t,e));return[r,o]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(w("data",n,t,e),w("indices",n,t,e),w("segmentIds",n,t,e))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(w("data",n,t,e),w("indices",n,t,e),w("segmentIds",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"spectral":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"FFT":return[s.fft(w("x",n,t,e))];case"IFFT":return[s.ifft(w("x",n,t,e))];case"RFFT":return[s.rfft(w("x",n,t,e))];case"IRFFT":return[s.irfft(w("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"string":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(w("input",n,t,e),w("pattern",n,t,e),w("rewrite",n,t,e),w("replaceGlobal",n,t,e))];case"StringNGrams":{const{nGrams:r,nGramsSplits:o}=s.string.stringNGrams(w("data",n,t,e),w("dataSplits",n,t,e),w("separator",n,t,e),w("nGramWidths",n,t,e),w("leftPad",n,t,e),w("rightPad",n,t,e),w("padWidth",n,t,e),w("preserveShortSequences",n,t,e));return[r,o]}case"StringSplit":{const{indices:r,values:o,shape:a}=s.string.stringSplit(w("input",n,t,e),w("delimiter",n,t,e),w("skipEmpty",n,t,e));return[r,o,a]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(w("input",n,t,e),w("numBuckets",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"transformation":return r(()=>((n,t,e,s=le)=>{switch(n.op){case"Cast":return[s.cast(w("x",n,t,e),w("dtype",n,t,e))];case"ExpandDims":{const r=w("axis",n,t,e);return[s.expandDims(w("x",n,t,e),r)]}case"Squeeze":{const r=w("axis",n,t,e);return[s.squeeze(w("x",n,t,e),r)]}case"Reshape":return[s.reshape(w("x",n,t,e),w("shape",n,t,e))];case"EnsureShape":return[s.ensureShape(w("x",n,t,e),w("shape",n,t,e))];case"MirrorPad":return[s.mirrorPad(w("x",n,t,e),w("padding",n,t,e),w("mode",n,t,e))];case"PadV2":case"Pad":return[s.pad(w("x",n,t,e),w("padding",n,t,e),w("constantValue",n,t,e))];case"SpaceToBatchND":{const r=w("blockShape",n,t,e),o=w("paddings",n,t,e);return[s.spaceToBatchND(w("x",n,t,e),r,o)]}case"BatchToSpaceND":{const r=w("blockShape",n,t,e),o=w("crops",n,t,e);return[s.batchToSpaceND(w("x",n,t,e),r,o)]}case"DepthToSpace":{const r=w("blockSize",n,t,e),o=w("dataFormat",n,t,e).toUpperCase();return[s.depthToSpace(w("x",n,t,e),r,o)]}case"BroadcastTo":return[s.broadcastTo(w("x",n,t,e),w("shape",n,t,e))];case"BroadcastArgs":return[s.broadcastArgs(w("s0",n,t,e),w("s1",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"hash_table":return YO(a,i,l,s);case"custom":const u=Hw(a.op);if(u&&u.customExecutor)return u.customExecutor(new LO(a,i,l));throw TypeError(`Custom op ${a.op} is not registered.`);default:throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,t,e);return qr(o)?o.then(a=>[].concat(a)):[].concat(o)}class e1{constructor(t={},e={},s={},r={},o){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=s,this.functionMap=r,this.parseNodeNameCache=o,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const s=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(s))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function t1(n,t,e,s){const r=new Set,o=[];let a=null,i=null;const l=new Set,u=new Set(Object.keys(n).map(d=>Mn(d)[0]));s=s||[];const c=new Set(s.map(d=>Mn(d.name)[0])),h=[...t];for(;h.length>0;){const d=h.pop();if((xo(d)||gL(d)||yL(d))&&null==a&&(a=d,i=a.children.map(p=>p.name).filter(p=>r.has(p))),r.add(d.name),null==e[d.name]&&!u.has(d.name)&&!c.has(d.name)){if(0===d.inputs.length){o.push(d.name);continue}d.inputs.forEach(p=>{l.has(p.name)||(l.add(p.name),h.push(p))})}}return{inputs:n,outputs:t,usedNodes:r,missingInputs:o,dynamicNode:a,syncInputs:i}}class Oc extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}}const pL=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),fL=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),mL=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function xo(n){return pL.has(n.op)}function gL(n){return fL.has(n.op)}function yL(n){return mL.has(n.op)}class Lc{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(s=>t[s].map(r=>r.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(s=>{this._functionExecutorMap[s]=new Lc(t.functions[s],this)})}getCompilationKey(t,e){const s=t.map(o=>o.name).sort(),r=e.map(o=>o.name).sort();return s.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(t,e){const s=t1(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:a}=s;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const u=e.map(h=>h.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${r}]`)}const i=function uL(n,t){const{usedNodes:e,inputs:s}=t,a=m=>e.has("string"==typeof m?m:m.name);function i(m){return[...new Map(m.map(y=>[y.name,y])).values()]}const l=i([...Object.keys(s).map(m=>Mn(m)[0]).map(m=>n.nodes[m]),...n.weights,...n.initNodes||[]]).filter(a),u=i([...l,...Object.values(n.nodes)]).filter(a),c=new Map(u.map(m=>[m.name,m])),h={};for(const m of u){h[m.name]=h[m.name]||0;for(const y of m.children)a(y)||(h[y.name]=Number.POSITIVE_INFINITY),h[y.name]=(h[y.name]||0)+1}const d=Object.entries(h).filter(([,m])=>0===m).map(([m])=>m),p=[...d];for(;d.length>0;){const m=d.pop(),y=c.get(m);for(const x of y.children.filter(a))0==--h[x.name]&&(p.push(x.name),d.push(x.name))}const g=function cL(n,t){const e=new Map(n.map(a=>[a.name,a])),s=t.map(a=>a.name),r=new Set(s);for(;s.length>0;){const a=s.pop(),i=e.get(a);for(const l of i.children)!e.has(l.name)||r.has(l.name)||(r.add(l.name),s.push(l.name))}return n.filter(a=>r.has(a.name))}(p.map(m=>c.get(m)),l);return function hL(n,t){const e=new Map(n.map((i,l)=>[i.name,l])),s=new Set(t.map(i=>i.name)),r=i=>s.has("string"==typeof i?i:i.name),o=new Set(n.map(i=>i.name)),a=i=>o.has("string"==typeof i?i:i.name);for(const i of n){for(const l of i.children.filter(a)){if(!e.has(l.name))throw new Oc(`Child ${l.name} of node ${i.name} is unreachable.`);if(e.get(i.name)>e.get(l.name))throw new Oc(`Node ${i.name} is scheduled to run after its child ${l.name}.`)}if(!r(i))for(const l of i.inputs){if(!e.has(l.name))throw new Oc(`Input ${l.name} of node ${i.name} is unreachable.`);if(e.get(l.name)>e.get(i.name))throw new Oc(`Node ${i.name} is scheduled to run before its input ${l.name}.`)}}}(g,l),g}(this.graph,s),l=function dL(n){const t=new Map(n.map((i,l)=>[i.name,l])),e=Number.MAX_SAFE_INTEGER,s=n.map((i,l)=>xo(i)?e:l),r=i=>s[t.get(i.name)]??-1,o=n.map((i,l)=>i.children.map(r).reduce((u,c)=>Math.max(u,c),s[l])),a=new Map;for(let i=0;i<n.length;++i){const l=o[i];if(l===e)continue;const u=n[i],c=n[l];a.has(c.name)||a.set(c.name,[]),a.get(c.name).push(u)}return a}(i);return{orderedNodes:i,nodeLiveUntilMap:l}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return on(e),e}cloneTensorList(t){return t?t.map(s=>this.cloneAndKeepTensor(s)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,s])=>[e,this.cloneTensorList(s)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const s=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=s.map(d=>this.graph.nodes[Mn(d)[0]]),o=e.map(d=>Mn(d)[0]),a=new Set(o);let i=o.map(d=>this.graph.nodes[d]);0===i.length&&(i=this._outputs);const l=this.getCompilationKey(r,i);let u=this.compiledMap.get(l);null==u&&(u=this.compile(t,i),this.compiledMap.set(l,u));try{this.keepIntermediateTensors=M().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(d){this.keepIntermediateTensors=!1,console.warn(d.message)}const c={},h={};return z(()=>{const d=new e1(this.weightMap,c,h,this.functionExecutorMap,this.parseNodeNameCache),p=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(y=>{const[x,b]=Mn(y,d),v=[];v[b]=t[y],p[x]=v,this.keepIntermediateTensors&&(this.clonedTensorsMap[x]=this.cloneTensorList(v))});const f=this.getFrozenTensorIds(p),{orderedNodes:g,nodeLiveUntilMap:m}=u;for(const y of g){if(p[y.name])continue;const x=Jw(y,p,d,this._resourceManager);if(qr(x))throw new Error(`The execution of the op '${y.op}' returned a promise. Please use model.executeAsync() instead.`);p[y.name]=x,this.keepIntermediateTensors&&(this.clonedTensorsMap[y.name]=this.cloneTensorList(x)),this.checkTensorForDisposalWithNodeLiveUntilInfo(y,p,d,f,a,m.get(y.name))}return null==this.parent&&d.dispose(f),e.map(y=>pn(y,p,d))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(s=>t[s]).map(s=>s.map(r=>r.id)));return new Set(e)}checkTensorForDisposal(t,e,s,r,o,a,i){if(!xo(e)&&!a.has(t)){for(const l of s[t])null!=l&&(i[l.id]=(i[l.id]||0)+e.children.length);for(const l of e.inputs){if(xo(l))continue;const u=jw(l.name,s,r);if(null!=u)for(const c of u){if(!c||c.kept||o.has(c.id))continue;const h=i[c.id];1===h?(c.dispose(),delete i[c.id]):null!=h&&i[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,s,r,o,a){function i(l){return xo(l)||o.has(l.name)}if(!xo(t)&&null!=a)for(const l of a){if(i(l))continue;const u=jw(l.name,e,s);for(const c of u)!c||c.kept||r.has(c.id)||c.dispose()}}executeAsync(t,e){var s=this;return(0,B.Z)(function*(){return s._executeAsync(t,e)})()}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}_executeAsync(t,e,s=!1,r={},o={}){var a=this;return(0,B.Z)(function*(){a.disposeIntermediateTensors(),s||(t=a.mapInputs(t),a.checkInputs(t),a.checkInputShapeAndType(t),e=a.mapOutputs(e),a.checkOutputs(e));try{a.keepIntermediateTensors=M().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(p){a.keepIntermediateTensors=!1,console.warn(p.message)}const i=new e1(a.weightMap,r,o,a.functionExecutorMap,a.parseNodeNameCache);a.keepIntermediateTensors&&(a.clonedTensorsMap=a.cloneTensorMap(a.weightMap));const l=yield a.executeWithControlFlow(t,i,e,s),u=e.map(p=>pn(p,l,i)),c=u.map(p=>p.id),h=Object.keys(t).map(p=>t[p].id),d=new Set([...c,...h,...a.weightIds]);return Object.values(l).forEach(p=>{p.forEach(f=>{f&&!f.isDisposed&&!d.has(f.id)&&f.dispose()})}),null==a.parent&&i.dispose(d),u})()}executeFunctionAsync(t,e,s){var r=this;return(0,B.Z)(function*(){const o=t.reduce((a,i,l)=>(a[r.inputs[l].name]=i,a),{});return r._executeAsync(o,r.outputNodes,!0,e,s)})()}executeWithControlFlow(t,e,s,r){var o=this;return(0,B.Z)(function*(){const a=Object.keys(t),i=a.map(I=>o.graph.nodes[Mn(I)[0]]),l=s.map(I=>Mn(I)[0]),u=new Set(l);let c=l.map(I=>o.graph.nodes[I]);0===c.length&&(c=o._outputs);const{usedNodes:h,missingInputs:d,dynamicNode:p,syncInputs:f}=t1(t,c,o.weightMap,o._initNodes),g=[...i,...o.graph.weights,...o._initNodes||[]].map(I=>({node:I,contexts:e.currentContext})),m=Object.assign({},o.weightMap);Object.keys(t).forEach(I=>{const[C,k]=Mn(I),T=[];T[k]=t[I],m[C]=T});const y={},x=o.getFrozenTensorIds(m),b={};for(;g.length>0;){const I=o.processStack(i,g,e,m,b,x,u,y,h);yield Promise.all(I)}null==p&&!r&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const v=c.filter(I=>!xo(I)&&!pn(I.name,m,e)).map(I=>I.name);if(v.length>0){let I="";throw null!=p&&(I=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${f}]`),new Error(`Cannot compute the outputs [${v}] from the provided inputs [${a}]. Consider providing the following inputs: [${d}]. ${I}`)}return m})()}processStack(t,e,s,r,o,a,i,l,u){const c=[];for(;e.length>0;){const h=e.pop();s.currentContext=h.contexts;let d="";if("Enter"===h.node.op&&w("isConstant",h.node,r,s)&&([d]=sr(h.node.name,s)),null==r[h.node.name]){const p=Jw(h.node,r,s,this._resourceManager);d||([d]=sr(h.node.name,s));const f=s.currentContext;qr(p)?c.push(p.then(g=>(r[d]=g,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(g)),s.currentContext=f,this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u),g))):(r[d]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(p)),this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u))}else this.processChildNodes(h.node,e,s,r,o,u)}return c}processChildNodes(t,e,s,r,o,a){t.children.forEach(i=>{const[l]=sr(i.name,s);o[l]||!a.has(i.name)||("Merge"===i.op?i.inputNames.some(u=>!!pn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})):i.inputNames.every(u=>!!pn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const s=t[e],[r]=Mn(e),o=this.graph.nodes[r];if(o.attrParams.shape&&o.attrParams.shape.value){const a=o.attrParams.shape.value;S(a.length===s.shape.length&&s.shape.every((l,u)=>-1===a[u]||a[u]===l),()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${a}], but was [${s.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&S(s.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`)})}mapInputs(t){var e,s;const r={};for(const o in t){const a=null===(s=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===s?void 0:s[o];null!=a?r[a.name]=t[o]:r[o]=t[o]}return r}checkInputs(t){const e=Object.keys(t).filter(s=>{const[r]=Mn(s);return null==this.graph.nodes[r]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var s,r;const o=null===(r=null===(s=this._signature)||void 0===s?void 0:s.outputs)||void 0===r?void 0:r[e];return null!=o?o.name:e},{})}checkOutputs(t){t.forEach(e=>{const[s]=Mn(e);if(!this.graph.nodes[s])throw new Error(`The output '${e}' is not found in the graph`)})}}class xL{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}const bL="?tfjs-format=file",wL="model.json";class n1{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},s=Re){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=s,null==e&&(this.loadOptions={}),this.resourceManager=new xL}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return qr(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const o=this.artifacts.userDefinedMetadata;null!=o.signature&&(s=o.signature),null!=o.structuredOutputKeys&&(this.structuredOutputKeys=o.structuredOutputKeys)}this.signature=s,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Lc(Kw.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const o=Kw.Instance.transformGraph(t.modelInitializer);this.initializer=new Lc(o),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}save(t,e){var s=this;return(0,B.Z)(function*(){if("string"==typeof t){const r=s.io.getSaveHandlers(t);if(0===r.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(r.length>1)throw new Error(`Found more than one (${r.length}) save handlers for URL '${t}'`);t=r[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(s.artifacts)})()}addStructuredOutputNames(t){if(this.structuredOutputKeys){const s={};return(t instanceof It?[t]:t).forEach((r,o)=>s[this.structuredOutputKeys[o]]=r),s}return t}predict(t,e){const s=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(s)}predictAsync(t,e){var s=this;return(0,B.Z)(function*(){const r=yield s.executeAsync(t,s.outputNodes);return s.addStructuredOutputNames(r)})()}normalizeInputs(t){var e;if(!(t instanceof It||Array.isArray(t))){const o=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=o)for(const a in o){const i=o[a];null!=i.resourceId&&(t[a]=this.resourceIdToCapturedInput[i.resourceId])}return t}t=Array.isArray(t)?t:[t];const s=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+s!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-s} non-resource placeholders, while there are ${t.length} input tensors provided.`);let r=0;return this.inputNodes.reduce((o,a)=>{var i,l,u;const c=null===(u=null===(l=null===(i=this.signature)||void 0===i?void 0:i.inputs)||void 0===l?void 0:l[a])||void 0===u?void 0:u.resourceId;return o[a]=null!=c?this.resourceIdToCapturedInput[c]:t[r++],o},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:this.initializer.execute({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}executeInitializerGraphAsync(){var t=this;return(0,B.Z)(function*(){return null==t.initializer?[]:t.initializer.executeAsync({},null==t.initializerSignature?[]:Object.keys(t.initializerSignature.outputs))})()}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,s=Object.keys(e);for(let r=0;r<s.length;r++)this.resourceIdToCapturedInput[e[s[r]].resourceId]=t[r]}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const s=this.executor.execute(t,e);return s.length>1?s:s[0]}executeAsync(t,e){var s=this;return(0,B.Z)(function*(){null==s.resourceIdToCapturedInput&&s.setResourceIdToCapturedInput(yield s.executeInitializerGraphAsync()),t=s.normalizeInputs(t),e=s.normalizeOutputs(e);const r=yield s.executor.executeAsync(t,e);return r.length>1?r:r[0]})()}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,s)=>(e[s]=[t[s]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&He(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function vL(n){return zm.apply(this,arguments)}function zm(){return(zm=(0,B.Z)(function*(n,t={},e=Re){if(null==n)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof n&&(n=function IL(n){return n.endsWith("/")||(n+="/"),`${n}${wL}${bL}`}(n));const s=new n1(n,t,e);return yield s.load(),s})).apply(this,arguments)}function Ie(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&S("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const ZL=Xp;let YL=(()=>{class n extends Mt{nextDataId(){return n.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new zt(this,As())}write(e,s,r){this.firstUse&&(this.firstUse=!1,M().get("IS_NODE")&&jn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:r,refCount:1}),o}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&wa(r[0])){const a=r.map(i=>hr(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return{dataId:o,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,o,a){this.data.set(e,{values:s,dtype:o,refCount:a})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return(0,B.Z)(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Js(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):function YI(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Be(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Be(e.shape,e.dtype,s)}makeOutput(e,s,r){return As().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return(0,B.Z)(function*(){const s=Tn();return e(),{kernelMs:Tn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Ie([e],"where");const s=this.readSync(e.dataId);return ZL(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function Us(n){return(t,e,s)=>{const r=Bt(e,t.length);for(let o=0;o<t.length;++o)r[o]=n(t[o],s);return r}}function lt(n,t,e){return Pr(n,Us(t),e)}function Pr(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;Ie(a,n);const i=o,l=i.data.get(a.dataId).values;let u;if("string"===a.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=er(l)}else u=l;const c=e||a.dtype,h=t(u,c,r);return i.makeTensorInfo(a.shape,c,h)}}cy("cpu",()=>new YL,1);const p1=lt(Fa,n=>n>=0?n:Math.exp(n)-1),JL={kernelName:Fa,backendName:"cpu",kernelFunc:p1};function Gs(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const eP={kernelName:Va,backendName:"cpu",kernelFunc:Gs};function f1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s;Ie([r],"leakyRelu");const a=G(r.shape),i=e.data.get(r.dataId).values,l=cn("float32",a);for(let u=0;u<i.length;u++)l[u]=i[u]<0?o*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const tP={kernelName:Pl,backendName:"cpu",kernelFunc:f1};function Gt(n){return(t,e,s,r,o)=>{const a=Pe(t,e),i=a.length,l=$e(a),c=cn(o,G(a)),h=t.length,d=e.length,p=$e(t),f=$e(e),g=Uo(t,a),m=Uo(e,a);if(g.length+m.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const x=Ro(y,i,l),b=x.slice(-h);g.forEach(k=>b[k]=0);const v=_s(b,h,p),I=x.slice(-d);m.forEach(k=>I[k]=0);const C=_s(I,d,f);c[y]=n(s[v],r[C])}return[c,a]}}const nP=Gt((n,t)=>n<0?t*n:n);function m1(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;Ie([s,r],"prelu");const o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,[i,l]=nP(s.shape,r.shape,o,a,"float32");return e.makeTensorInfo(l,"float32",i)}const sP={kernelName:nu,backendName:"cpu",kernelFunc:m1},g1=lt(Ja,n=>Math.max(0,n)),rP={kernelName:Ja,backendName:"cpu",kernelFunc:g1},y1=lt(ei,n=>Math.min(Math.max(0,n),6)),oP={kernelName:ei,backendName:"cpu",kernelFunc:y1},aP=Us(n=>1/(1+Math.exp(-n))),x1=lt(ii,n=>1/(1+Math.exp(-n))),iP={kernelName:ii,backendName:"cpu",kernelFunc:x1};function Bc(n,t,e,s,r){if("linear"===e)return Gs({inputs:{x:t},backend:n});if("relu"===e)return g1({inputs:{x:t},backend:n});if("elu"===e)return p1({inputs:{x:t},backend:n});if("relu6"===e)return y1({inputs:{x:t},backend:n});if("prelu"===e)return m1({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return f1({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return x1({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Bn(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",a)},i}const lP={kernelName:Th,backendName:"cpu",kernelFunc:Bn};function Vc(n,t,e="float32"){if("complex64"===e)return Bn({inputs:{real:Vc(n,t,"float32"),imag:Vc(n,t,"float32")},backend:n});const s=yn(G(t),e);return n.makeTensorInfo(t,e,s)}function bo(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const uP={kernelName:id,backendName:"cpu",kernelFunc:bo};function b1(n,t,e,s){if("int32"===s)return[t,"int32",Int32Array.from(n)];if("bool"===s){const r=Yr([0],e),[o,a]=Gt((i,l)=>i!==l?1:0)(t,[],n,r,"bool");return[a,"bool",o]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function zr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Gs({inputs:{x:r},backend:e});const c=Vc(e,r.shape,r.dtype),h=zr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),d=Bn({inputs:{real:h,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),d}if("complex64"===r.dtype){const c=bo({inputs:{input:r},backend:e}),h=zr({inputs:{x:c},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(c),h}if(!Sg(r.dtype,o)){const c=Gs({inputs:{x:r},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:o}}const a=e.data.get(r.dataId).values,[i,l,u]=b1(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}const cP={kernelName:$a,backendName:"cpu",kernelFunc:zr};function sn(n,t,e,s){return null==e?({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;Ie([a,i],n);const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h="string"===a.dtype?er(u):u,d="string"===a.dtype?er(c):c,p=s||a.dtype,[f,g]=t(a.shape,i.shape,h,d,p);return l.makeTensorInfo(g,p,f)}:({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;if("complex64"===a.dtype||"complex64"===i.dtype){const u=zr({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,g=zr({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),m=l.data.get(g.dataId),x=m.complexTensorInfos.imag,b=l.data.get(m.complexTensorInfos.real.dataId).values,v=l.data.get(x.dataId).values,[I,C,k]=e(a.shape,i.shape,p,f,b,v),T=l.makeTensorInfo(k,"float32",I),E=l.makeTensorInfo(k,"float32",C),R=Bn({inputs:{real:T,imag:E},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(T),l.disposeIntermediateTensorInfo(E),R}{const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h=s||a.dtype,[d,p]=t(a.shape,i.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function Hm(n){return(t,e,s,r,o,a)=>{const i=Pe(t,e),l=G(i),u=i.length,c=$e(i),h=cn("float32",l),d=cn("float32",l),p=Uo(t,i),f=Uo(e,i),g=Js(s,r),m=Js(o,a),y=t.length,x=$e(t),b=e.length,v=$e(e);if(p.length+f.length===0)for(let I=0;I<h.length;I++){const C=I%g.length,k=I%m.length,T=n(g[2*C],g[2*C+1],m[2*k],m[2*k+1]);h[I]=T.real,d[I]=T.imag}else for(let I=0;I<h.length;I++){const C=Ro(I,u,c),k=C.slice(-y);p.forEach(V=>k[V]=0);const T=_s(k,y,x),E=C.slice(-b);f.forEach(V=>E[V]=0);const R=_s(E,b,v),L=n(g[2*T],g[2*T+1],m[2*R],m[2*R+1]);h[I]=L.real,d[I]=L.imag}return[h,d,i]}}const w1=Gt((n,t)=>n+t),hP=Hm((n,t,e,s)=>({real:n+e,imag:t+s})),aa=sn(Do,w1,hP),dP={kernelName:Do,backendName:"cpu",kernelFunc:aa};function xt(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=G(r.shape),i=Ig(o,a),l=G(i);S(a===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,h.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const pP={kernelName:ru,backendName:"cpu",kernelFunc:xt};function v1(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;Ie([r,o],"matMul");const l=r.shape.length,u=o.shape.length,c=a?r.shape[l-2]:r.shape[l-1],h=i?o.shape[u-1]:o.shape[u-2],d=a?r.shape[l-1]:r.shape[l-2],p=i?o.shape[u-2]:o.shape[u-1],f=r.shape.slice(0,-2),g=o.shape.slice(0,-2),m=G(f),y=G(g),b=Pe(r.shape.slice(0,-2),o.shape.slice(0,-2)).concat([d,p]);S(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${a} and transposeB=${i} must match.`);const I=i?[y,p,h]:[y,h,p],C=xt({inputs:{x:r},backend:e,attrs:{shape:a?[m,c,d]:[m,d,c]}}),k=xt({inputs:{x:o},backend:e,attrs:{shape:I}}),T=a?C.shape[1]:C.shape[2],E=a?C.shape[2]:C.shape[1],R=i?k.shape[1]:k.shape[2],L=Math.max(m,y),V=e.data.get(C.dataId).values,U=e.data.get(k.dataId).values,H=$e(C.shape),j=$e(k.shape),[X,Z,K]=a?[H[0],1,H[1]]:[H[0],H[1],1],[Y,oe,ie]=i?[1,j[1],j[0]]:[j[1],1,j[0]],ce=E*R,ue=Be([L,E,R],C.dtype),ye=ue.values,de=e.blockSize;for(let be=0;be<L;be++){const _e=be%m,Fe=be%y;for(let Ae=0;Ae<E;Ae+=de){const Ve=Math.min(Ae+de,E);for(let Ue=0;Ue<R;Ue+=de){const ut=Math.min(Ue+de,R);for(let bt=0;bt<T;bt+=de){const Pt=Math.min(bt+de,T);for(let wt=Ae;wt<Ve;wt++)for(let dt=Ue;dt<ut;dt++){let Rt=0;for(let kt=bt;kt<Pt;kt++)Rt+=V[_e*X+wt*Z+kt*K]*U[kt*Y+dt*oe+Fe*ie];ye[be*ce+(wt*R+dt)]+=Rt}}}}}return e.disposeIntermediateTensorInfo(C),e.disposeIntermediateTensorInfo(k),e.makeTensorInfo(b,ue.dtype,ue.values)}const fP={kernelName:Il,backendName:"cpu",kernelFunc:v1},gP={kernelName:xu,backendName:"cpu",kernelFunc:function mP(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=v1({inputs:{a:r,b:o},attrs:{transposeA:l,transposeB:u},backend:e}),a&&(p=aa({inputs:{a:d,b:a},backend:e}),g.push(d),d=p),c&&(f=Bc(e,d,c,i,h),g.push(d),d=f);for(const y of g)e.disposeIntermediateTensorInfo(y);return d}};function I1(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const yP={kernelName:gl,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;Ie(t,"abs");let s=new Float32Array(G(t.shape));return s=I1(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,t.dtype)}},xP=lt(va,n=>Math.acos(n)),bP={kernelName:va,backendName:"cpu",kernelFunc:xP},wP=lt(Ia,n=>Math.acosh(n)),vP={kernelName:Ia,backendName:"cpu",kernelFunc:wP},SP={kernelName:yl,backendName:"cpu",kernelFunc:function IP(n){const{inputs:t,backend:e}=n,s=t;Ie(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),o=Be(s[0].shape,s[0].dtype),a=o.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<a.length;u++)a[u]+=l[u]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}};function jm(n,t,e,s,r){const o=t.length,a=G(t),i=$e(t),l=$e(r),u=cn(e,G(r));for(let c=0;c<a;++c){const h=Ro(c,o,i),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[_s(d,o,l)]=n[c]}return u}function Dn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:o}=e;Ie(r,"transpose");const i=new Array(r.shape.length);for(let h=0;h<i.length;h++)i[h]=r.shape[o[h]];const u=jm(s.data.get(r.dataId).values,r.shape,r.dtype,o,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const NP={kernelName:Fo,backendName:"cpu",kernelFunc:Dn},kP={kernelName:"All",backendName:"cpu",kernelFunc:function CP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ie(r,"all");const i=Ge(o,r.shape);let l=i;const u=$t(l,r.shape.length);let c=r;null!=u&&(c=Dn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Wt(l.length,r.shape.length)),dn("all",l,c.shape.length);const[h,d]=ln(c.shape,l),p=G(d),f=yn(G(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let v=0;v<p;++v)b=b&&g[x+v];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=xt({inputs:{x:m},backend:e,attrs:{shape:Vt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},$P={kernelName:"Any",backendName:"cpu",kernelFunc:function TP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ie(r,"any");const i=Ge(o,r.shape);let l=i;const u=$t(l,r.shape.length);let c=r;null!=u&&(c=Dn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Wt(l.length,r.shape.length)),dn("any",l,c.shape.length);const[h,d]=ln(c.shape,l),p=G(d),f=yn(G(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let v=0;v<p;++v)b=b||g[x+v];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=xt({inputs:{x:m},backend:e,attrs:{shape:Vt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},EP={kernelName:xl,backendName:"cpu",kernelFunc:function _P(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Ie(r,"argMax");let a=Ge(o,r.shape);const i=$t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Dn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Wt(a.length,l.shape.length)),a=[a[0]],dn("argMax",a,l.shape.length);const[c,h]=ln(l.shape,a),p=yn(G(c),"int32"),f=G(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let v=0;v<f;++v){const I=g[y+v];I>x&&(x=I,b=v)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},RP={kernelName:bl,backendName:"cpu",kernelFunc:function AP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Ie(r,"argMin");let a=Ge(o,r.shape);const i=$t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Dn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Wt(a.length,l.shape.length)),a=[a[0]],dn("argMin",a,l.shape.length);const[c,h]=ln(l.shape,a),p=yn(G(c),"int32"),f=G(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let x=g[y],b=0;for(let v=0;v<f;++v){const I=g[y+v];I<x&&(x=I,b=v)}p[m]=b}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},DP=lt(Sa,n=>Math.asin(n)),FP={kernelName:Sa,backendName:"cpu",kernelFunc:DP},OP=lt(Na,n=>Math.asinh(n)),LP={kernelName:Na,backendName:"cpu",kernelFunc:OP},PP=lt(Ca,n=>Math.atan(n)),zP={kernelName:Ca,backendName:"cpu",kernelFunc:PP},MP=Gt((n,t)=>Math.atan2(n,t)),BP=sn(Ta,MP),VP={kernelName:Ta,backendName:"cpu",kernelFunc:BP},WP=lt(ka,n=>Math.atanh(n)),UP={kernelName:ka,backendName:"cpu",kernelFunc:WP};function Km(n,t,e,s,r,o){const a=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Be(r.outShape,e),m=g.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],b=r.outShape[3];for(let v=0;v<r.batchSize;++v){const I=v*y,C=v*s[0];for(let k=0;k<r.inChannels;++k)for(let T=0;T<r.outHeight;++T){const E=T*a-d,R=Math.max(0,E),L=Math.min(r.inHeight,c+E),V=I+T*x;for(let U=0;U<r.outWidth;++U){const H=U*i-p,j=Math.max(0,H),X=Math.min(r.inWidth,h+H);let Z=f,K=0,Y=0;for(let ie=R;ie<L;ie+=l){const ce=C+ie*s[1];for(let ue=j;ue<X;ue+=u){const de=n[ce+ue*s[2]+k];"max"===o&&de>Z?Z=de:"avg"===o&&(K+=de,Y++)}if(isNaN(Z))break}m[V+U*b+k]="avg"===o?K/Y:Z}}}return g}function S1(n,t,e,s,r=!1,o=!1){const a=Be(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=Be(t,e,n);for(let m=0;m<s.batchSize;++m)for(let y=0;y<s.inChannels;++y)for(let x=0;x<s.outHeight;++x){const b=x*i-p;let v=b;for(;v<0;)v+=u;const I=Math.min(s.inHeight,h+b);for(let C=0;C<s.outWidth;++C){const k=C*l-f;let T=k;for(;T<0;)T+=c;const E=Math.min(s.inWidth,d+k);let R=Number.NEGATIVE_INFINITY,L=-1;for(let V=v;V<I;V+=u){const U=V-b;for(let H=T;H<E;H+=c){const j=H-k,X=g.get(m,V,H,y);X>R&&(R=X,L=r?o?((m*s.inHeight+V)*s.inWidth+H)*s.inChannels+y:(V*s.inWidth+H)*s.inChannels+y:U*d+j)}}a.set(L,m,x,C,y)}}return a}function N1(n,t,e,s,r,o){const a=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,y=r.padInfo.left,x="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,b=Be(r.outShape,e),v=b.values,I=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],C=r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[3]*r.outShape[4],T=r.outShape[4];for(let E=0;E<r.batchSize;++E){const R=E*I,L=E*s[0];for(let V=0;V<r.inChannels;++V)for(let U=0;U<r.outDepth;++U){const H=U*a-g;let j=H;for(;j<0;)j+=u;const X=Math.min(r.inDepth,d+H),Z=R+U*C;for(let K=0;K<r.outHeight;++K){const Y=K*i-m;let oe=Y;for(;oe<0;)oe+=c;const ie=Math.min(r.inHeight,p+Y),ce=Z+K*k;for(let ue=0;ue<r.outWidth;++ue){const ye=ue*l-y;let de=ye;for(;de<0;)de+=h;const be=Math.min(r.inWidth,f+ye),_e=ce+ue*T;let Fe=x,Ae=0,Ve=0;for(let ut=j;ut<X;ut+=u){const bt=L+ut*s[1];for(let Pt=oe;Pt<ie;Pt+=c){const wt=bt+Pt*s[2];for(let dt=de;dt<be;dt+=h){const kt=n[wt+dt*s[3]+V];if("max"===o&&kt>Fe?Fe=kt:"avg"===o&&(Ae+=kt,Ve++),isNaN(Fe))break}if(isNaN(Fe))break}if(isNaN(Fe))break}v[_e+V]="avg"===o?Ae/Math.max(Ve,1):Fe}}}}return b}const jP={kernelName:wl,backendName:"cpu",kernelFunc:function HP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ie(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;S(hn(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=is(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))h=Gs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=$e(r.shape),f=Km(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},qP={kernelName:vl,backendName:"cpu",kernelFunc:function KP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Ie(r,"avgPool3d");const c=Zs(r.shape,o,a,1,i,l,u),d=N1(e.data.get(r.dataId).values,0,r.dtype,$e(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},ZP={kernelName:Sh,backendName:"cpu",kernelFunc:function XP(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Ie([r,o],"avgPool3DGrad");const c=Zs(o.shape,a,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,y=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,v=c.effectiveFilterDepth,I=c.effectiveFilterHeight,C=c.effectiveFilterWidth,k=v-1-c.padInfo.front,T=C-1-c.padInfo.left,E=I-1-c.padInfo.top,R=Be(o.shape,"float32"),L=1/(f*g*m),V=e.bufferSync(r);for(let U=0;U<c.batchSize;++U)for(let H=0;H<c.inChannels;++H)for(let j=0;j<c.inDepth;++j)for(let X=0;X<c.inHeight;++X)for(let Z=0;Z<c.inWidth;++Z){const K=j-k,Y=X-E,oe=Z-T;let ie=0;for(let ce=0;ce<v;ce+=y){const ue=(K+ce)/h;if(!(ue<0||ue>=c.outDepth||Math.floor(ue)!==ue))for(let ye=0;ye<I;ye+=x){const de=(Y+ye)/d;if(!(de<0||de>=c.outHeight||Math.floor(de)!==de))for(let be=0;be<C;be+=b){const _e=(oe+be)/p;_e<0||_e>=c.outWidth||Math.floor(_e)!==_e||(ie+=V.get(U,ue,de,_e,H))}}}R.set(ie*L,U,j,X,Z,H)}return e.makeTensorInfo(R.shape,R.dtype,R.values)}},QP={kernelName:Ih,backendName:"cpu",kernelFunc:function YP(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Ie([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=is(a.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,b=x-1-c.padInfo.left,v=y-1-c.padInfo.top,I=Be(a.shape,"float32"),C=1/(p*f),k=e.data.get(r.dataId).values,T=Be(r.shape,"float32",k);for(let E=0;E<c.batchSize;++E)for(let R=0;R<c.inChannels;++R)for(let L=0;L<c.inHeight;++L)for(let V=0;V<c.inWidth;++V){const U=L-v,H=V-b;let j=0;for(let X=0;X<y;X+=g){const Z=(U+X)/h;if(!(Z<0||Z>=c.outHeight||Math.floor(Z)!==Z))for(let K=0;K<x;K+=m){const Y=(H+K)/d;Y<0||Y>=c.outWidth||Math.floor(Y)!==Y||(j+=T.get(E,Z,Y,R))}}I.set(j*C,E,L,V,R)}return e.makeTensorInfo(I.shape,I.dtype,I.values)}},ez={kernelName:Fl,backendName:"cpu",kernelFunc:function JP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:o,offset:a,mean:i,variance:l}=t;S(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Ie([r,i,l,o,a],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(i.dataId).values,d=e.data.get(l.dataId).values,p=o?e.data.get(o.dataId).values:new Float32Array([1]),f=a?e.data.get(a.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),m=f.length,y=p.length,x=d.length,b=h.length;let v=0,I=0,C=0,k=0;for(let T=0;T<c.length;++T)g[T]=f[v++]+(c[T]-h[I++])*p[C++]/Math.sqrt(d[k++]+u),v>=m&&(v=0),I>=b&&(I=0),C>=y&&(C=0),k>=x&&(k=0);return e.makeTensorInfo(r.shape,r.dtype,g)}};function C1(n,t,e,s,r){const o=pp(s,t,e),a=G(e),i=$e(s);if(o){const h=fp(t,i);return"string"===r?n.slice(h,h+a):n.subarray(h,h+a)}const u=Be(s,r,"string"===r?er(n):n),c=Be(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,g)=>f+t[g]);c.set(u.get(...p),...d)}return"string"===r?yb(c.values):c.values}function wo(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s;Ie(r,"slice");const[i,l]=Au(r,o,a);hp(r,i,l);const c=C1(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const tz={kernelName:uu,backendName:"cpu",kernelFunc:wo},sz={kernelName:Sl,backendName:"cpu",kernelFunc:function nz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;Ie([r],"batchToSpaceND");const i=o.reduce((y,x)=>y*x),l=Pi(r.shape,o,i),u=zi(l.length,o.length),c=Mi(r.shape,o,i),h=ff(a,o.length),d=mf(c,a,o.length),p=xt({inputs:{x:r},backend:e,attrs:{shape:l}}),f=Dn({inputs:{x:p},backend:e,attrs:{perm:u}}),g=xt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=wo({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}};function qm(n,t,e,s,r){const o=G(s),a=yn(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(a[l]+=o>0?t[i]:1)}return a}function k1(n,t,e,s=!1){const r=n.shape[0],o=n.shape[1],a=Be([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<o;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||a.set(s?1:t.size>0?a.get(i,u)+t.get(i,l):a.get(i,u)+1,i,u)}return a}const oz={kernelName:Nh,backendName:"cpu",kernelFunc:function rz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,u=qm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},az=Gt((n,t)=>n&t),iz=sn(Ch,az),lz={kernelName:Ch,backendName:"cpu",kernelFunc:iz},cz={kernelName:kh,backendName:"cpu",kernelFunc:function uz(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=Pe(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},T1=Us(n=>Math.ceil(n)),hz=Pr(_a,T1),dz={kernelName:_a,backendName:"cpu",kernelFunc:hz},pz=lt(Ea,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),fz={kernelName:Ea,backendName:"cpu",kernelFunc:pz},mz={kernelName:Nl,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(G(t.shape)),r=e.data.get(t.dataId),a=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(a.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function $1(n,t,e,s){const r=Bt(e,G(t));if(s&&"string"!==e){let o=0;n.forEach(a=>{const i=G(a.shape);r.set(a.vals,o),o+=i})}else{let o=0;n.forEach(a=>{const i="string"===e?er(a.vals):a.vals;let l=0;for(let u=0;u<a.shape[0];++u){const c=u*t[1]+o;for(let h=0;h<a.shape[1];++h)r[c+h]=i[l++]}o+=a.shape[1]})}return r}function ia(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const gz={kernelName:Kh,backendName:"cpu",kernelFunc:ia};function la(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ge(r,t[0].shape)[0];hf(t.map(g=>g.shape),o);let i=Ls(t.map(g=>g.shape),o);if(0===G(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(g=>G(g.shape)>0);if(1===l.length)return Gs({inputs:{x:l[0]},backend:e});if("complex64"===l[0].dtype){const g=l.map(v=>bo({inputs:{input:v},backend:e})),m=l.map(v=>ia({inputs:{input:v},backend:e})),y=la({inputs:g,backend:e,attrs:{axis:o}}),x=la({inputs:m,backend:e,attrs:{axis:o}}),b=Bn({inputs:{real:y,imag:x},backend:e});return g.forEach(v=>e.disposeIntermediateTensorInfo(v)),m.forEach(v=>e.disposeIntermediateTensorInfo(v)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),b}const u=l.map(g=>{const y=[-1,G(g.shape.slice(o))];return xt({inputs:{x:g},backend:e,attrs:{shape:y}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));i=Ls(u.map(g=>g.shape),1);const d=$1(c,i,t[0].dtype,1===u[0].shape[0]),p=Ls(l.map(g=>g.shape),o),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}const yz={kernelName:Cl,backendName:"cpu",kernelFunc:la};function _1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Ie([r,o],"conv2d");const h=Ys(l),d=an(r.shape,o.shape,a,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b="channelsLast"===d.dataFormat,v=new Xt(d.outShape,r.dtype),I=$e(r.shape),C=$e(o.shape),k=I[0],T=b?I[1]:I[2],E=b?I[2]:1,R=b?1:I[1],L=v.strides[0],V=b?v.strides[1]:v.strides[2],U=b?v.strides[2]:1,H=b?1:v.strides[1],j=e.data.get(r.dataId).values,X=e.data.get(o.dataId).values,Z=v.values;for(let K=0;K<d.batchSize;++K){const Y=K*k,oe=K*L;for(let ie=0;ie<d.outHeight;++ie){const ce=oe+ie*V,ue=ie*d.strideHeight-x;for(let ye=0;ye<p;++ye){const de=ue+ye*g;if(de<0||de>=d.inHeight)continue;const be=ye*C[0],_e=Y+de*T;for(let Fe=0;Fe<d.outWidth;++Fe){const Ae=ce+Fe*U,Ve=Fe*d.strideWidth-y;for(let Ue=0;Ue<f;++Ue){const ut=Ve+Ue*m;if(ut<0||ut>=d.inWidth)continue;const Pt=_e+ut*E;let wt=be+Ue*C[1];for(let dt=0;dt<d.inChannels;++dt){const Rt=j[Pt+dt*R];for(let kt=0;kt<d.outChannels;++kt)Z[Ae+kt*H]+=Rt*X[wt+kt];wt+=d.outChannels}}}}}}return e.makeTensorInfo(v.shape,v.dtype,Z)}const xz={kernelName:kl,backendName:"cpu",kernelFunc:_1},wz={kernelName:$h,backendName:"cpu",kernelFunc:function bz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Ie([r,o],"conv2dBackpropFilter");const h=Ys(l),d=an(r.shape,c,a,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,y="channelsLast"===d.dataFormat,x=new Xt(d.filterShape,"float32"),b=d.padInfo.left,v=d.padInfo.top,I=e.data.get(r.dataId).values,C=e.data.get(o.dataId).values,k=new Xt(r.shape,r.dtype,I),T=new Xt(o.shape,o.dtype,C);for(let E=0;E<g;++E){const R=Math.max(0,Math.ceil((v-E)/p)),L=Math.min(d.outHeight,(d.inHeight+v-E)/p);for(let V=0;V<m;++V){const U=Math.max(0,Math.ceil((b-V)/f)),H=Math.min(d.outWidth,(d.inWidth+b-V)/f);for(let j=0;j<d.inChannels;++j)for(let X=0;X<d.outChannels;++X){let Z=0;for(let K=0;K<d.batchSize;++K)for(let Y=R;Y<L;++Y){const oe=E+Y*p-v;for(let ie=U;ie<H;++ie){const ce=V+ie*f-b;Z+=y?k.get(K,oe,ce,j)*T.get(K,Y,ie,X):k.get(K,j,oe,ce)*T.get(K,X,Y,ie)}}x.set(Z,E,V,j,X)}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},Iz={kernelName:Tl,backendName:"cpu",kernelFunc:function vz(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;Ie([r,o],"conv2dBackpropInput");const h=$e(o.shape),d=$e(r.shape);let p=Ys(u);const f=an(a,o.shape,i,1,l,c,!1,p),g=new Xt(f.inShape,"float32"),m=g.values,y=e.data.get(r.dataId).values,x=e.data.get(o.dataId).values,[b,v,I]=h,{batchSize:C,filterHeight:k,filterWidth:T,inChannels:E,inHeight:R,inWidth:L,outChannels:V,outHeight:U,outWidth:H,strideHeight:j,strideWidth:X}=f;p=f.dataFormat;const Z=k-1-f.padInfo.top,K=T-1-f.padInfo.left,Y="channelsLast"===p,oe=g.strides[0],ie=Y?g.strides[1]:g.strides[2],ce=Y?g.strides[2]:1,ue=Y?1:g.strides[1],ye=d[0],de=Y?d[1]:d[2],be=Y?d[2]:1,_e=Y?1:d[1];for(let Fe=0;Fe<C;++Fe)for(let Ae=0;Ae<E;++Ae)for(let Ve=0;Ve<R;++Ve){const Ue=Ve-Z,ut=Math.max(0,Math.ceil(Ue/j)),bt=Math.min(U,(k+Ue)/j);for(let Pt=0;Pt<L;++Pt){const wt=Pt-K,dt=Math.max(0,Math.ceil(wt/X)),Rt=Math.min(H,(T+wt)/X);let kt=0;for(let mn=ut;mn<bt;++mn){const Gr=mn*j-Ue;for(let ns=dt;ns<Rt;++ns){const $s=ye*Fe+de*mn+be*ns,ir=b*(k-1-Gr)+v*(T-1-(ns*X-wt))+I*Ae;for(let Hr=0;Hr<V;++Hr)kt+=y[$s+_e*Hr]*x[ir+Hr]}}m[oe*Fe+ie*Ve+ce*Pt+ue*Ae]=kt}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},Nz={kernelName:$l,backendName:"cpu",kernelFunc:function Sz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s;Ie([r,o],"conv3d");const u=Sr(r.shape,o.shape,a,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,y=m.front,x=m.left,b=m.top,v=new Xt(u.outShape,r.dtype),I=e.data.get(r.dataId).values,C=e.data.get(o.dataId).values,k=v.values,T=$e(r.shape),E=$e(o.shape);for(let R=0;R<u.batchSize;++R){const L=R*T[0],V=R*v.strides[0];for(let U=0;U<u.outDepth;++U){const H=V+U*v.strides[1],j=U*u.strideDepth-y;for(let X=0;X<c;++X){const Z=j+X*p;if(Z<0||Z>=u.inDepth)continue;const K=X*E[0],Y=L+Z*T[1];for(let oe=0;oe<u.outHeight;++oe){const ie=H+oe*v.strides[2],ce=oe*u.strideHeight-b;for(let ue=0;ue<h;++ue){const ye=ce+ue*f;if(ye<0||ye>=u.inHeight)continue;const de=K+ue*E[1],be=Y+ye*T[2];for(let _e=0;_e<u.outWidth;++_e){const Fe=ie+_e*u.outChannels,Ae=_e*u.strideWidth-x;for(let Ve=0;Ve<d;++Ve){const Ue=Ae+Ve*g;if(Ue<0||Ue>=u.inWidth)continue;const bt=be+Ue*u.inChannels;let Pt=de+Ve*E[2];for(let wt=0;wt<u.inChannels;++wt){const dt=I[bt+wt];for(let Rt=0;Rt<u.outChannels;++Rt)k[Fe+Rt]+=dt*C[Pt+Rt];Pt+=u.outChannels}}}}}}}}return e.makeTensorInfo(v.shape,v.dtype,v.values)}},kz={kernelName:_h,backendName:"cpu",kernelFunc:function Cz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s;Ie([r,o],"conv3dBackpropFilterV2");const u=$e(r.shape),c=$e(o.shape),h=Sr(r.shape,l,a,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,y=h.filterWidth,x=new Xt(h.filterShape,"float32"),b=x.values,[v,I,C,k]=x.strides,T=e.data.get(o.dataId).values,[E,R,L,V]=c,U=e.data.get(r.dataId).values,[H,j,X,Z]=u,K=h.padInfo.front,Y=h.padInfo.left,oe=h.padInfo.top;for(let ie=0;ie<g;++ie){const ce=Math.max(0,Math.ceil((K-ie)/d)),ue=Math.min(h.outDepth,(h.inDepth+K-ie)/d),ye=ie*v;for(let de=0;de<m;++de){const be=Math.max(0,Math.ceil((oe-de)/p)),_e=Math.min(h.outHeight,(h.inHeight+oe-de)/p),Fe=de*I+ye;for(let Ae=0;Ae<y;++Ae){const Ve=Math.max(0,Math.ceil((Y-Ae)/f)),Ue=Math.min(h.outWidth,(h.inWidth+Y-Ae)/f),ut=Ae*C+Fe;for(let bt=0;bt<h.inChannels;++bt){const Pt=bt*k+ut;for(let wt=0;wt<h.outChannels;++wt){let dt=0;for(let Rt=0;Rt<h.batchSize;++Rt){const kt=Rt*H,ar=Rt*E;for(let mn=ce;mn<ue;++mn){const ns=(ie+mn*d-K)*j+kt,To=mn*R+ar;for(let $s=be;$s<_e;++$s){const Hr=(de+$s*p-oe)*X+ns,jr=$s*L+To;for(let Kr=Ve;Kr<Ue;++Kr)dt+=U[(Ae+Kr*f-Y)*Z+Hr+bt]*T[Kr*V+jr+wt]}}}b[Pt+wt]=dt}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},$z={kernelName:Eh,backendName:"cpu",kernelFunc:function Tz(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s;Ie([r],"conv3dBackpropInputV2");const u=$e(r.shape),c=$e(o.shape),h=Sr(l,o.shape,i,1,a),d=new Xt(h.inShape,"float32"),p=d.values,[f,g,m,y]=d.strides,x=e.data.get(r.dataId).values,[b,v,I,C]=u,k=e.data.get(o.dataId).values,[T,E,R,L]=c,{batchSize:V,filterDepth:U,filterHeight:H,filterWidth:j,inChannels:X,inDepth:Z,inHeight:K,inWidth:Y,outChannels:oe,outDepth:ie,outHeight:ce,outWidth:ue,strideDepth:ye,strideHeight:de,strideWidth:be}=h,_e=U-1-h.padInfo.front,Fe=H-1-h.padInfo.top,Ae=j-1-h.padInfo.left;for(let Ve=0;Ve<V;++Ve)for(let Ue=0;Ue<X;++Ue)for(let ut=0;ut<Z;++ut){const bt=ut-_e,Pt=Math.max(0,Math.ceil(bt/ye)),wt=Math.min(ie,(U+bt)/ye);for(let dt=0;dt<K;++dt){const Rt=dt-Fe,kt=Math.max(0,Math.ceil(Rt/de)),ar=Math.min(ce,(H+Rt)/de);for(let mn=0;mn<Y;++mn){const Gr=mn-Ae,ns=Math.max(0,Math.ceil(Gr/be)),To=Math.min(ue,(j+Gr)/be);let $s=0;for(let ir=Pt;ir<wt;++ir){const Hr=ir*ye-bt;for(let jr=kt;jr<ar;++jr){const Kr=jr*de-Rt;for(let fl=ns;fl<To;++fl){const wg=b*Ve+v*ir+I*jr+C*fl,gZ=T*(U-1-Hr)+E*(H-1-Kr)+R*(j-1-(fl*be-Gr))+L*Ue;for(let dh=0;dh<oe;++dh)$s+=x[wg+dh]*k[gZ+dh]}}}p[f*Ve+g*ut+m*dt+y*mn+Ue]=$s}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},_z=lt(Aa,n=>Math.cos(n)),Ez={kernelName:Aa,backendName:"cpu",kernelFunc:_z},Az=lt(Ra,n=>Math.cosh(n)),Rz={kernelName:Ra,backendName:"cpu",kernelFunc:Az},Fz={kernelName:Rh,backendName:"cpu",kernelFunc:function Dz(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=o.shape[0],[g,m]=i,y=Be([f,g,m,p],"float32"),x=e.data.get(o.dataId).values,b=e.data.get(a.dataId).values,v=e.data.get(r.dataId).values,I=$e(r.shape),C=$e(y.shape);for(let k=0;k<f;k++){const T=4*k,E=x[T],R=x[T+1],L=x[T+2],V=x[T+3],U=b[k];if(U>=c)continue;const H=g>1?(L-E)*(h-1)/(g-1):0,j=m>1?(V-R)*(d-1)/(m-1):0;for(let X=0;X<g;X++){const Z=g>1?E*(h-1)+X*H:.5*(E+L)*(h-1);if(Z<0||Z>h-1)for(let K=0;K<m;K++)for(let Y=0;Y<p;Y++)y.values[Y+K*C[2]+X*C[1]+k*C[0]]=u;else if("bilinear"===l){const K=Math.floor(Z),Y=Math.ceil(Z),oe=Z-K;for(let ie=0;ie<m;ie++){const ce=m>1?R*(d-1)+ie*j:.5*(R+V)*(d-1);if(ce<0||ce>d-1){for(let be=0;be<p;be++)y.values[be+ie*C[2]+X*C[1]+k*C[0]]=u;continue}const ue=Math.floor(ce),ye=Math.ceil(ce),de=ce-ue;for(let be=0;be<p;be++){let _e=be+ue*I[2]+K*I[1]+U*I[0];const Fe=v[_e];_e=be+ye*I[2]+K*I[1]+U*I[0];const Ae=v[_e];_e=be+ue*I[2]+Y*I[1]+U*I[0];const Ve=v[_e];_e=be+ye*I[2]+Y*I[1]+U*I[0];const Ue=v[_e],ut=Fe+(Ae-Fe)*de;_e=be+ie*C[2]+X*C[1]+k*C[0],y.values[_e]=ut+(Ve+(Ue-Ve)*de-ut)*oe}}}else for(let K=0;K<m;++K){const Y=m>1?R*(d-1)+K*j:.5*(R+V)*(d-1);if(Y<0||Y>d-1){for(let ce=0;ce<p;ce++)y.values[ce+K*C[2]+X*C[1]+k*C[0]]=u;continue}const oe=Math.round(Y),ie=Math.round(Z);for(let ce=0;ce<p;ce++)y.values[ce+K*C[2]+X*C[1]+k*C[0]]=v[ce+oe*I[2]+ie*I[1]+U*I[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},Lz={kernelName:Ah,backendName:"cpu",kernelFunc:function Oz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Ie(r,"cumprod");const l=$t([o],r.shape.length);let u=r;null!=l&&(u=Dn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Wt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=On(u.dtype,"int32"),d=yh(G(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=a?1:p[b];else{const v=g(y,x-1);d[b]=a?p[v]*d[v]:p[b]*d[v]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=Dn({inputs:{x:m},backend:e,attrs:{perm:kr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},zz={kernelName:_l,backendName:"cpu",kernelFunc:function Pz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Ie(r,"cumsum");const l=$t([o],r.shape.length);let u=r;null!=l&&(u=Dn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=Wt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=On(u.dtype,"int32"),d=yn(G(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=g(y,x);if(0===x)d[b]=a?0:p[b];else{const v=g(y,x-1);d[b]=a?p[v]+d[v]:p[b]+d[v]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=Dn({inputs:{x:m},backend:e,attrs:{perm:kr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),x}return m}},Bz={kernelName:Dh,backendName:"cpu",kernelFunc:function Mz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const c=qm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const c=k1(e.bufferSync(r),e.bufferSync(o),a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},Wz={kernelName:Fh,backendName:"cpu",kernelFunc:function Vz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;S("NHWC"===a,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*o,d=u*o,p=c/(o*o),f=e.data.get(r.dataId).values,g=new Float32Array(i*h*d*p);let m=0;for(let y=0;y<i;++y)for(let x=0;x<h;++x){const b=Math.floor(x/o),v=x%o;for(let I=0;I<d;++I){const C=Math.floor(I/o),T=(v*o+I%o)*p;for(let E=0;E<p;++E)g[m++]=f[E+T+c*(C+u*(b+l*y))]}}return e.makeTensorInfo([i,h,d,p],r.dtype,g)}};function E1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;Ie([r,o],"depthwiseConv2DNative");const c=$e(r.shape),h=$e(o.shape);let d=l;null==d&&(d=[1,1]),S(hn(a,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${d}'`);const p=an(r.shape,o.shape,a,d,i,u,!0),{filterHeight:f,filterWidth:g,dilationHeight:m,dilationWidth:y,padInfo:x}=p,b=x.left,v=x.top,I=p.outChannels/p.inChannels,C=new Xt(p.outShape,r.dtype),k=e.data.get(r.dataId).values,T=e.data.get(o.dataId).values,E=C.values;for(let R=0;R<p.batchSize;++R){const L=R*c[0],V=R*C.strides[0];for(let U=0;U<p.outHeight;++U){const H=V+U*C.strides[1],j=U*p.strideHeight-v;for(let X=0;X<f;++X){const Z=j+X*m;if(Z<0||Z>=p.inHeight)continue;const K=X*h[0],Y=L+Z*c[1];for(let oe=0;oe<p.outWidth;++oe){const ie=H+oe*C.strides[2],ce=oe*p.strideWidth-b;for(let ue=0;ue<g;++ue){const ye=ce+ue*y;if(ye<0||ye>=p.inWidth)continue;const be=Y+ye*p.inChannels;let _e=ie,Fe=K+ue*h[1];for(let Ae=0;Ae<p.inChannels;++Ae){const Ve=k[be+Ae];for(let Ue=0;Ue<I;++Ue)E[_e+Ue]+=Ve*T[Fe+Ue];_e+=I,Fe+=I}}}}}}return e.makeTensorInfo(C.shape,C.dtype,C.values)}const Uz={kernelName:El,backendName:"cpu",kernelFunc:E1},Hz={kernelName:Oh,backendName:"cpu",kernelFunc:function Gz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;Ie([r,o],"depthwiseConv2dNativeBackpropFilter");const h=an(r.shape,c,a,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new Xt(h.filterShape,"float32"),y=h.padInfo.left,x=h.padInfo.top,b=h.outChannels/h.inChannels,v=e.data.get(r.dataId).values,I=new Xt(r.shape,r.dtype,v),C=e.data.get(o.dataId).values,k=new Xt(o.shape,o.dtype,C);for(let T=0;T<f;++T){const E=Math.max(0,Math.ceil((x-T)/d)),R=Math.min(h.outHeight,(h.inHeight+x-T)/d);for(let L=0;L<g;++L){const V=Math.max(0,Math.ceil((y-L)/p)),U=Math.min(h.outWidth,(h.inWidth+y-L)/p);for(let H=0;H<h.outChannels;++H){const j=Math.trunc(H/b),X=H%b;let Z=0;for(let K=0;K<h.batchSize;++K)for(let Y=E;Y<R;++Y){const oe=T+Y*d-x;for(let ie=V;ie<U;++ie)Z+=I.get(K,oe,L+ie*p-y,j)*k.get(K,Y,ie,H)}m.set(Z,T,L,j,X)}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},Kz={kernelName:Lh,backendName:"cpu",kernelFunc:function jz(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;Ie([r,o],"depthwiseConv2DNativeBackpropInput");const h=$e(r.shape),d=$e(o.shape),p=an(c,o.shape,a,i,l,u,!0),f=new Xt(p.inShape,"float32"),g=f.values,[m,y,x]=f.strides,b=e.data.get(r.dataId).values,[v,I,C]=h,k=e.data.get(o.dataId).values,[T,E,R]=d,{batchSize:L,filterHeight:V,filterWidth:U,inChannels:H,inHeight:j,inWidth:X,outChannels:Z,outHeight:K,outWidth:Y,strideHeight:oe,strideWidth:ie}=p,ce=V-1-p.padInfo.top,ue=U-1-p.padInfo.left,ye=Z/H;for(let de=0;de<L;++de)for(let be=0;be<H;++be)for(let _e=0;_e<j;++_e){const Fe=_e-ce,Ae=Math.max(0,Math.ceil(Fe/oe)),Ve=Math.min(K,(V+Fe)/oe);for(let Ue=0;Ue<X;++Ue){const ut=Ue-ue,bt=Math.max(0,Math.ceil(ut/ie)),Pt=Math.min(Y,(U+ut)/ie);let wt=0;for(let dt=Ae;dt<Ve;++dt){const Rt=dt*oe-Fe;for(let kt=bt;kt<Pt;++kt){const mn=v*de+I*dt+C*kt,Gr=T*(V-1-Rt)+E*(U-1-(kt*ie-ut))+R*be;for(let ns=0;ns<ye;++ns)wt+=b[mn+(be*ye+ns)]*k[Gr+ns]}}g[m*de+y*_e+x*Ue+be]=wt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},Xz={kernelName:Ph,backendName:"cpu",kernelFunc:function qz(n){const{inputs:t,backend:e}=n,{x:s}=t,r=G(s.shape),o=e.data.get(s.dataId).values,a=Be([r,r],s.dtype),i=a.values;for(let u=0;u<o.length;u++)i[u*r+u]=o[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,a.dtype,a.values)}},Zz={kernelName:Al,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:o,pad:a,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:y,outWidth:x,padInfo:b,strideHeight:v,strideWidth:I,filterHeight:C,filterWidth:k,dilationHeight:T,dilationWidth:E,outShape:R}=vi(s.shape,r.shape,o,a,"NHWC",i),L=G(R),V=R.length,U=Bt(s.dtype,L);for(let j=0;j<p;++j)for(let X=0;X<y;++X){const Z=X*v-b.top;for(let K=0;K<x;++K){const Y=K*I-b.left;for(let oe=0;oe<m;++oe){let ie=Number.MIN_SAFE_INTEGER;for(let ue=0;ue<C;++ue){const ye=Z+ue*T;if(ye>=0&&ye<f)for(let de=0;de<k;++de){const be=Y+de*E;if(be>=0&&be<g){const _e=_s([j,ye,be,oe],c,$e(s.shape)),Fe=_s([ue,de,oe],d,$e(r.shape)),Ae=u[_e]+h[Fe];Ae>ie&&(ie=Ae)}}}U[_s([j,X,K,oe],V,$e(R))]=ie}}}return{dataId:l.write(Yr(U,s.dtype),R,s.dtype),shape:R,dtype:s.dtype}}},Yz={kernelName:Mh,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=rs(s.shape,u.data.get(s.dataId).values),h=rs(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:v,filterHeight:I,filterWidth:C,dilationHeight:k,dilationWidth:T,outShape:E}=vi(s.shape,r.shape,a,i,"NHWC",l);S(o.rank===E.length,()=>`Error in ${Mh}, dy must have the same rank as output ${E.length}, but got ${o.rank}`);const R=rs(E,u.data.get(o.dataId).values),L=Cg(r.shape,r.dtype);for(let U=0;U<d;++U)for(let H=0;H<m;++H){const j=H*b-x.top;for(let X=0;X<y;++X){const Z=X*v-x.left;for(let K=0;K<g;++K){let Y=Number.MIN_SAFE_INTEGER,oe=0,ie=0;for(let ce=0;ce<I;++ce){const ue=j+ce*k;if(ue>=0&&ue<p)for(let ye=0;ye<C;++ye){const de=Z+ye*T;if(de>=0&&de<f){const be=c[U][ue][de][K]+h[ce][ye][K];be>Y&&(Y=be,oe=ce,ie=ye)}}}L[oe][ie][K]+=R[U][H][X][K]}}}return{dataId:u.write(Yr(L,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Qz={kernelName:zh,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=rs(s.shape,u.data.get(s.dataId).values),h=rs(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:x,strideHeight:b,strideWidth:v,filterHeight:I,filterWidth:C,dilationHeight:k,dilationWidth:T,outShape:E}=vi(s.shape,r.shape,a,i,"NHWC",l);S(o.rank===E.length,()=>`Error in ${zh}, dy must have the same rank as output ${E.length}, but got ${o.rank}`);const R=rs(E,u.data.get(o.dataId).values),L=Cg(s.shape,s.dtype);for(let U=0;U<d;++U)for(let H=0;H<m;++H){const j=H*b-x.top;for(let X=0;X<y;++X){const Z=X*v-x.left;for(let K=0;K<g;++K){let Y=Number.MIN_SAFE_INTEGER,oe=j<0?0:j,ie=Z<0?0:Z;for(let ce=0;ce<I;++ce){const ue=j+ce*k;if(ue>=0&&ue<p)for(let ye=0;ye<C;++ye){const de=Z+ye*T;if(de>=0&&de<f){const be=c[U][ue][de][K]+h[ce][ye][K];be>Y&&(Y=be,oe=ue,ie=de)}}}L[U][oe][ie][K]+=R[U][H][X][K]}}}return{dataId:u.write(Yr(L,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Xm=Gt((n,t)=>n*t),Jz=Hm((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),Wc=sn(Za,Xm,Jz),e3={kernelName:Za,backendName:"cpu",kernelFunc:Wc};function nl(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;let i;Ie(r,"sum"),i="bool"===r.dtype?zr({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):Gs({inputs:{x:r},backend:e});const l=i.shape.length,u=Ge(o,i.shape),c=$t(u,l);let h=u,d=i;null!=c&&(d=Dn({inputs:{x:i},backend:e,attrs:{perm:c}}),h=Wt(h.length,l)),dn("sum",h,d.shape.length);const[p,f]=ln(d.shape,h);let m=Vc(e,p,On(d.dtype,"int32"));const y=G(f),x=e.data.get(m.dataId).values,b=e.data.get(d.dataId).values;for(let v=0;v<x.length;++v){const I=v*y;let C=0;for(let k=0;k<y;++k)C+=b[I+k];x[v]=C}if(a){const I=m;m=xt({inputs:{x:m},backend:e,attrs:{shape:Vt(m.shape,u)}}),e.disposeIntermediateTensorInfo(I)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(d),m}const t3={kernelName:cu,backendName:"cpu",kernelFunc:nl},s3={kernelName:Bh,backendName:"cpu",kernelFunc:function n3(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=Cf(r,o.length);Tf(a.length,l,o);const{path:u,steps:c}=$f(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=kf(p,l[m]);let b;_f(y)?b=o[m]:(b=Dn({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(b));const v=b.shape.slice();for(let I=0;I<x.length;++I)v.splice(x[I],0,1);Xe(b.shape,v)||(b=xt({inputs:{x:b},backend:e,attrs:{shape:v}}),f.push(b)),null===d?d=b:(d=Wc({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=nl({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},o3={kernelName:Vh,backendName:"cpu",kernelFunc:function r3(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;Ie([s,r],"eluGrad");const o=new Float32Array(G(r.shape)),a=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<a.length;++l){const u=a[l];o[l]=u>=0?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",o)}},A1=Gt((n,t)=>n===t?1:0),R1=sn(Rl,A1,null,"bool"),a3={kernelName:Rl,backendName:"cpu",kernelFunc:R1},i3=yf,l3=xf,u3=bf,c3=wf,h3=vf,d3=If,p3=lt(Oa,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+i3*e);return t*(1-((((d3*s+h3)*s+c3)*s+u3)*s+l3)*s*Math.exp(-e*e))}),f3={kernelName:Oa,backendName:"cpu",kernelFunc:p3},D1=Us(n=>Math.exp(n)),F1=Pr(La,D1,"float32"),m3={kernelName:La,backendName:"cpu",kernelFunc:F1};function Uc(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:o}=s,a=r.shape.length,i=r.shape.slice();let l=o;return o<0&&(S(-(a+1)<=o,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+o+1),i.splice(l,0,1),xt({inputs:{x:r},backend:e,attrs:{shape:i}})}const g3={kernelName:Dl,backendName:"cpu",kernelFunc:Uc},O1=Us(n=>Math.expm1(n)),y3=Pr(Pa,O1),x3={kernelName:Pa,backendName:"cpu",kernelFunc:y3},b3=Gt((n,t)=>n/t),Zm=sn(Da,b3),Ym={kernelName:Da,backendName:"cpu",kernelFunc:Zm},L1=Gt((n,t)=>n-t),w3=Hm((n,t,e,s)=>({real:n-e,imag:t-s})),Qm=sn(hi,L1,w3),v3={kernelName:hi,backendName:"cpu",kernelFunc:Qm};function P1(n,t,e){const s=n.shape,r=s[0],o=s[1],a=e.data.get(n.dataId),i=a.complexTensorInfos.real,l=a.complexTensorInfos.imag,u=[r,o],c=G(u),h=cn("float32",c),d=cn("float32",c);for(let m=0;m<r;m++){const y=wo({inputs:{x:i},backend:e,attrs:{begin:[m,0],size:[1,o]}}),x=wo({inputs:{x:l},backend:e,attrs:{begin:[m,0],size:[1,o]}}),b=Bn({inputs:{real:y,imag:x},backend:e}),{real:v,imag:I}=I3(b,t,e),C=Js(v,I);for(let k=0;k<o;k++){const T=Sf(C,k);h[m*o+k]=T.real,d[m*o+k]=T.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),g=Bn({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),g}function I3(n,t,e){const s=G(n.shape),r=e.data.get(n.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,a=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function S3(n){return 0==(n&n-1)}(s)){const i=Jm(o,a,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),h=e.makeTensorInfo([],"float32",cr(s,"float32")),d=Gs({inputs:{x:h},backend:e}),p=Ym.kernelFunc({inputs:{a:u,b:h},backend:e}),f=Ym.kernelFunc({inputs:{a:c,b:d},backend:e}),g=e.data.get(p.dataId).values,m=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:g,imag:m}}return i}{const l=function N3(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let o=0,a=0;for(let i=0;i<t;i++){const l=tb(r*i,t,e),u=Sf(n,i);o+=u.real*l.real-u.imag*l.imag,a+=u.real*l.imag+u.imag*l.real}e&&(o/=t,a/=t),Jx(s,o,a,r)}return s}(Js(o,a),s,t);return Zx(l)}}function Jm(n,t,e,s,r){if(1===e)return{real:n,imag:t};const o=Js(n,t),a=e/2,i=Yx(o),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=Bn({inputs:{real:h,imag:d},backend:r}),f=Qx(o),g=f.real,m=f.imag,y=[g.length],x=r.makeTensorInfo(y,"float32",g),b=r.makeTensorInfo(y,"float32",m),v=Bn({inputs:{real:x,imag:b},backend:r}),I=Jm(l,u,a,s,r),C=I.real,k=I.imag,T=[C.length],E=r.makeTensorInfo(T,"float32",C),R=r.makeTensorInfo(T,"float32",k),L=Bn({inputs:{real:E,imag:R},backend:r}),V=Jm(g,m,a,s,r),U=V.real,H=V.imag,j=[U.length],X=r.makeTensorInfo(j,"float32",U),Z=r.makeTensorInfo(j,"float32",H),K=Bn({inputs:{real:X,imag:Z},backend:r}),Y=eb(e,s),oe=[Y.real.length],ie=r.makeTensorInfo(oe,"float32",Y.real),ce=r.makeTensorInfo(oe,"float32",Y.imag),ue=Bn({inputs:{real:ie,imag:ce},backend:r}),ye=Wc({inputs:{a:ue,b:K},backend:r}),de=aa({inputs:{a:L,b:ye},backend:r}),be=Qm({inputs:{a:L,b:ye},backend:r}),_e=bo({inputs:{input:de},backend:r}),Fe=bo({inputs:{input:be},backend:r}),Ae=ia({inputs:{input:de},backend:r}),Ve=ia({inputs:{input:be},backend:r}),Ue=la({inputs:[_e,Fe],backend:r,attrs:{axis:0}}),ut=la({inputs:[Ae,Ve],backend:r,attrs:{axis:0}}),bt=r.data.get(Ue.dataId).values,Pt=r.data.get(ut.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(E),r.disposeIntermediateTensorInfo(R),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(X),r.disposeIntermediateTensorInfo(Z),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(ie),r.disposeIntermediateTensorInfo(ce),r.disposeIntermediateTensorInfo(ue),r.disposeIntermediateTensorInfo(ye),r.disposeIntermediateTensorInfo(de),r.disposeIntermediateTensorInfo(be),r.disposeIntermediateTensorInfo(_e),r.disposeIntermediateTensorInfo(Ae),r.disposeIntermediateTensorInfo(Fe),r.disposeIntermediateTensorInfo(Ve),r.disposeIntermediateTensorInfo(Ue),r.disposeIntermediateTensorInfo(ut),{real:bt,imag:Pt}}const k3={kernelName:"FFT",backendName:"cpu",kernelFunc:function C3(n){const{inputs:t,backend:e}=n,{input:s}=t,r=G(s.shape),o=s.shape[s.shape.length-1],i=xt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=P1(i,!1,e),u=xt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function eg(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:o}=e,a=o||Ao(r),i=Bt(a,G(s));return function $3(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,a,i)}const T3={kernelName:Uh,backendName:"cpu",kernelFunc:eg},_3={kernelName:Gh,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,o=cn(s.dtype,G(s.shape)),[a,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<a;d++){const p=d*l*i*u;for(let f=0;f<i;f++){const g=f*(l*u);for(let m=0;m<l;m++){const y=m*u;for(let x=0;x<u;x++){const b=Math.round(l-m-1),v=p+g+y+x;let I=c[v];b>=0&&b<l&&(I=c[p+g+b*u+x]),o[v]=I}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},z1=Us(n=>Math.floor(n)),E3=Pr(za,z1),A3={kernelName:za,backendName:"cpu",kernelFunc:E3},R3=Gt((n,t)=>Math.floor(n/t)),D3=sn(Ma,R3,null,"int32"),F3={kernelName:Ma,backendName:"cpu",kernelFunc:D3},L3={kernelName:bu,backendName:"cpu",kernelFunc:function O3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=_1({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;if("NCHW"===c&&1===a.shape.length&&1!==a.shape[0]){const y=xt({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});g=aa({inputs:{a:g,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else g=aa({inputs:{a:g,b:a},backend:e});e.disposeIntermediateTensorInfo(m)}if(p){const m=g;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const y=xt({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=Bc(e,g,p,y,f),e.disposeIntermediateTensorInfo(y)}else g=Bc(e,g,p,i,f);e.disposeIntermediateTensorInfo(m)}return g}},z3={kernelName:wu,backendName:"cpu",kernelFunc:function P3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=E1({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;g=aa({inputs:{a:g,b:a},backend:e}),e.disposeIntermediateTensorInfo(m)}if(p){const m=g;g=Bc(e,g,p,i,f),e.disposeIntermediateTensorInfo(m)}return g}};function M1(n,t,e,s,r,o,a,i,l){const u=Be([s,o],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*a[p],h.push(f)}if(d<0||d>=l/o)throw new Error(`Invalid indices: ${h} does not index into ${i}`);for(let p=0;p<o;p++)u.values[c*o+p]=t.get(...t.indexToLoc(d*o+p))}return u}const B3={kernelName:Hh,backendName:"cpu",kernelFunc:function M3(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=G(s.shape),a=r.shape,i=a[a.length-1],[l,u,c,h]=gf(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=M1(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,i,c,h,s.shape,o);return e.makeTensorInfo(l,s.dtype,f.values)}};function B1(n,t,e){const s=Be(e,n.dtype);for(let r=0;r<s.size;++r){const a=s.indexToLoc(r).slice(),u=t.locToIndex([a[0],a[2]]);a[2]=t.values[u];const c=n.locToIndex(a);0<=c&&c<n.values.length&&(s.values[r]=n.values[c])}return s}const W3={kernelName:Ol,backendName:"cpu",kernelFunc:function V3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s;Ie([r,o],"gatherV2");const l=Ge(a,r.shape)[0],u=e.data.get(o.dataId).values,c=r.shape[l];for(let v=0;v<u.length;++v){const I=u[v];S(I<=c-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${c-1}]`)}let h=i;null==i&&(h=0);const d=G(o.shape),p=Rf(r,o,l,h),f=xt({inputs:{x:r},backend:e,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),g=xt({inputs:{x:o},backend:e,attrs:{shape:[p.batchSize,d/p.batchSize]}}),m=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=e.bufferSync(g),b=B1(e.bufferSync(f),y,m);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(p.outputShape,b.dtype,b.values)}},V1=Gt((n,t)=>n>t?1:0),U3=sn(Ll,V1,null,"bool"),G3={kernelName:Ll,backendName:"cpu",kernelFunc:U3},W1=Gt((n,t)=>n>=t?1:0),H3=sn(Ba,W1,null,"bool"),j3={kernelName:Ba,backendName:"cpu",kernelFunc:H3},q3={kernelName:jh,backendName:"cpu",kernelFunc:function K3(n){const{inputs:t,backend:e}=n,{input:s}=t,r=G(s.shape),o=s.shape[s.shape.length-1],i=xt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=P1(i,!0,e),u=xt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},X3=lt(Wa,n=>Number.isFinite(n)?1:0,"bool"),Z3={kernelName:Wa,backendName:"cpu",kernelFunc:X3},Y3=lt(Ua,n=>Math.abs(n)===1/0?1:0,"bool"),Q3={kernelName:Ua,backendName:"cpu",kernelFunc:Y3},J3=lt(Ga,n=>Number.isNaN(n)?1:0,"bool"),eM={kernelName:Ga,backendName:"cpu",kernelFunc:J3},U1=Gt((n,t)=>n<t?1:0),tM=sn(zl,U1,null,"bool"),nM={kernelName:zl,backendName:"cpu",kernelFunc:tM},G1=Gt((n,t)=>n<=t?1:0),sM=sn(Ml,G1,null,"bool"),rM={kernelName:Ml,backendName:"cpu",kernelFunc:sM};function H1(n,t,e){const s=(t-n)/(e-1),r=yn(e,"float32");r[0]=n;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const aM={kernelName:qh,backendName:"cpu",kernelFunc:function oM(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=H1(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},j1=Us(n=>Math.log(n)),iM=Pr(Ha,j1),lM={kernelName:Ha,backendName:"cpu",kernelFunc:iM},uM=lt(ja,n=>Math.log1p(n)),cM={kernelName:ja,backendName:"cpu",kernelFunc:uM},hM=Gt((n,t)=>n&&t),dM=sn(Bl,hM,null,"bool"),pM={kernelName:Bl,backendName:"cpu",kernelFunc:dM},fM=lt(Vl,n=>n?0:1,"bool"),mM={kernelName:Vl,backendName:"cpu",kernelFunc:fM},gM=Gt((n,t)=>n||t),yM=sn(Wl,gM,null,"bool"),xM={kernelName:Wl,backendName:"cpu",kernelFunc:yM},wM={kernelName:Ul,backendName:"cpu",kernelFunc:function bM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s;Ie(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=G(r.shape),p=new Float32Array(d);function f(g){const m=g%u;let y=g-m+Math.max(0,m-o);const x=g-m+Math.min(m+o,c);let b=0;for(;y<=x;y++){const v=h[y];b+=v*v}return b}for(let g=0;g<d;g++){const m=f(g),y=h[g]*Math.pow(a+i*m,-l);p[g]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},IM={kernelName:Xh,backendName:"cpu",kernelFunc:function vM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;Ie(a,"LRNGrad");const h=G(a.shape),d=a.shape[3],p=e.data.get(a.dataId).values,f=e.data.get(r.dataId).values,g=e.data.get(o.dataId).values,m=new Float32Array(h),y=h;for(let x=0;x<y;x++){const b=x%d,v=x-b+Math.max(0,b-i),I=x-b+Math.min(d,b+i+1);let C=0;for(let k=v;k<I;k++)C+=Math.pow(f[k],2);C=u*C+l;for(let k=v;k<I;k++){let T=-2*u*c*f[k]*g[x]/C;x===k&&(T+=Math.pow(C,-c)),T*=p[x],m[k]+=T}}return e.makeTensorInfo(a.shape,r.dtype,m)}};function K1(n,t,e,s){const r=cn(s,G(e));for(let o=0;o<r.length;++o){const a=o*t;let i=n[a];for(let l=0;l<t;++l){const u=n[a+l];(Number.isNaN(u)||u>i)&&(i=u)}r[o]=i}return r}function q1(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=e;let l=r.shape;const u=l.length,c=Ge(o,l);let h=c;const d=$t(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const v=new Array(u);for(let I=0;I<v.length;I++)v[I]=l[d[I]];p=jm(p,l,r.dtype,d,v),h=Wt(h.length,u),l=v}Ie(r,"max"),dn("max",h,u);const[f,g]=ln(l,h),y=K1(p,G(g),f,r.dtype),x=i.write(y,f,r.dtype);let b=f;return a&&(b=Vt(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const SM={kernelName:Gl,backendName:"cpu",kernelFunc:q1},X1=Gt((n,t)=>Math.max(n,t)),NM=sn(Ka,X1),CM={kernelName:Ka,backendName:"cpu",kernelFunc:NM},TM={kernelName:Hl,backendName:"cpu",kernelFunc:function kM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ie(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;S(hn(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=is(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))h=Gs({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=$e(r.shape),f=Km(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},_M={kernelName:jl,backendName:"cpu",kernelFunc:function $M(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Ie(r,"maxPool3d");const c=Zs(r.shape,o,a,1,i,l,u),d=N1(e.data.get(r.dataId).values,0,r.dtype,$e(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},AM={kernelName:Yh,backendName:"cpu",kernelFunc:function EM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Ie([r,o],"maxPool3DGrad");const c=Zs(o.shape,a,i,1,l,u),d=function GP(n,t){const e=Be(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let y=0;y<t.outDepth;++y){const x=y*s-d;let b=x;for(;b<0;)b+=a;const v=Math.min(t.inDepth,u+x);for(let I=0;I<t.outHeight;++I){const C=I*r-p;let k=C;for(;k<0;)k+=i;const T=Math.min(t.inHeight,c+C);for(let E=0;E<t.outWidth;++E){const R=E*o-f;let L=R;for(;L<0;)L+=l;const V=Math.min(t.inWidth,h+R);let U=Number.NEGATIVE_INFINITY,H=-1;for(let j=b;j<v;j+=a){const X=j-x;for(let Z=k;Z<T;Z+=i){const K=Z-C;for(let Y=L;Y<V;Y+=l){const oe=Y-R,ie=n.get(g,j,Z,Y,m);ie>=U&&(U=ie,H=X*c*h+K*c+oe)}}}e.set(H,g,y,I,E,m)}}}return e}(e.bufferSync(o),c),p=c.strideDepth,f=c.strideHeight,g=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,v=c.effectiveFilterHeight,I=c.effectiveFilterWidth,C=b-1-c.padInfo.front,k=I-1-c.padInfo.left,T=v-1-c.padInfo.top,E=Be(o.shape,"float32"),R=e.bufferSync(r);for(let L=0;L<c.batchSize;++L)for(let V=0;V<c.inChannels;++V)for(let U=0;U<c.inDepth;++U)for(let H=0;H<c.inHeight;++H)for(let j=0;j<c.inWidth;++j){const X=U-C,Z=H-T,K=j-k;let Y=0;for(let oe=0;oe<b;oe+=m){const ie=(X+oe)/p;if(!(ie<0||ie>=c.outDepth||Math.floor(ie)!==ie))for(let ce=0;ce<v;ce+=y){const ue=(Z+ce)/f;if(!(ue<0||ue>=c.outHeight||Math.floor(ue)!==ue))for(let ye=0;ye<I;ye+=x){const de=(K+ye)/g;if(de<0||de>=c.outWidth||Math.floor(de)!==de)continue;const Fe=b*v*I-1-d.get(L,ie,ue,de,V)===oe*v*I+ce*I+ye?1:0;0!==Fe&&(Y+=R.get(L,ie,ue,de,V)*Fe)}}}E.set(Y,L,U,H,j,V)}return e.makeTensorInfo(E.shape,E.dtype,E.values)}},DM={kernelName:Zh,backendName:"cpu",kernelFunc:function RM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Ie([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=is(i.shape,l,u,1,c,h),p=e.data.get(i.dataId).values,f=Be(d.outShape,i.dtype,S1(p,i.shape,i.dtype,d).values),g=d.strideHeight,m=d.strideWidth,y=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterHeight,v=d.effectiveFilterWidth,I=v-1-d.padInfo.left,C=b-1-d.padInfo.top,k=Be(i.shape,"float32"),T=e.data.get(r.dataId).values,E=Be(r.shape,"float32",T);for(let R=0;R<d.batchSize;++R)for(let L=0;L<d.inChannels;++L)for(let V=0;V<d.inHeight;++V)for(let U=0;U<d.inWidth;++U){const H=V-C,j=U-I;let X=0;for(let Z=0;Z<b;Z+=y){const K=(H+Z)/g;if(!(K<0||K>=d.outHeight||Math.floor(K)!==K))for(let Y=0;Y<v;Y+=x){const oe=(j+Y)/m;if(oe<0||oe>=d.outWidth||Math.floor(oe)!==oe)continue;const ue=b*v-1-f.get(R,K,oe,L)===Z*v+Y?1:0;0!==ue&&(X+=E.get(R,K,oe,L)*ue)}}k.set(X,R,V,U,L)}return e.makeTensorInfo(k.shape,k.dtype,k.values)}},OM={kernelName:Qh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;Ie(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=is(s.shape,r,o,[1,1],a),[h,d]=function FM(n,t,e,s,r){const a=Km(n,0,e,$e(t),r,"max"),i=S1(n,t,e,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},PM={kernelName:Kl,backendName:"cpu",kernelFunc:function LM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=Ge(o,r.shape),c=G(ln(r.shape,i)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=zr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=Zm({inputs:{a:p,b:d},backend:e});h.push(f);const g=nl({inputs:{x:f},backend:e,attrs:{axis:o,keepDims:a}});return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),g}},MM={kernelName:ql,backendName:"cpu",kernelFunc:function zM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ie(r,"min");const i=Ge(o,r.shape);let l=i;const u=$t(l,r.shape.length);let c=r;null!=u&&(c=Dn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=Wt(l.length,r.shape.length)),dn("min",l,c.shape.length);const[h,d]=ln(c.shape,l),p=G(d),f=yn(G(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=g[x];for(let v=0;v<p;++v){const I=g[x+v];(Number.isNaN(I)||I<b)&&(b=I)}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const x=xt({inputs:{x:m},backend:e,attrs:{shape:Vt(h,i)}});return e.disposeIntermediateTensorInfo(m),x}return m}},Z1=Gt((n,t)=>Math.min(n,t)),BM=sn(qa,Z1),VM={kernelName:qa,backendName:"cpu",kernelFunc:BM},UM={kernelName:Xl,backendName:"cpu",kernelFunc:function WM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,mode:a}=s;Ie(r,"mirrorPad");const i=o.map((b,v)=>b[0]+r.shape[v]+b[1]),l=o.map(b=>b[0]),u=o.map((b,v)=>b[0]+r.shape[v]),c="reflect"===a?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=$e(r.shape),f=G(i),g=i.length,m=$e(i),y=cn(r.dtype,f);for(let b=0;b<f;b++){let v=Ro(b,g,m);for(let C=0;C<g;C++)v[C]<l[C]?v[C]=2*l[C]-v[C]-c:v[C]>=u[C]&&(v[C]=2*(u[C]-1)-v[C]+c);v=v.map((C,k)=>C-l[k]);const I=_s(v,d,p);y[b]=h[I]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},GM=Gt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),HM=sn(Xa,GM),jM={kernelName:Xa,backendName:"cpu",kernelFunc:HM};function Y1(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=r.shape.length;let i=o;if(-1===i&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);const l=Ge([i],r.shape),u=q1({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=Vt(u.shape,l),h=xt({inputs:{x:u},backend:e,attrs:{shape:c}}),d=Qm({inputs:{a:r,b:h},backend:e}),p=F1({inputs:{x:d},backend:e}),f=nl({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),g=xt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Zm({inputs:{a:p,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}const KM={kernelName:pu,backendName:"cpu",kernelFunc:Y1},XM={kernelName:Jh,backendName:"cpu",kernelFunc:function qM(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s;Ie(r,"multinomial");const l=i?r:Y1({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,o],p=yn(G(d),"int32");for(let f=0;f<u;++f){const g=f*c,m=new Float32Array(c-1);m[0]=h[g];for(let b=1;b<m.length;++b)m[b]=m[b-1]+h[g+b];const y=ju.alea(a.toString()),x=f*o;for(let b=0;b<o;++b){const v=y();p[x+b]=m.length;for(let I=0;I<m.length;I++)if(v<m[I]){p[x+b]=I;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}};function Q1(n,t,e){const s=cr(-1,e);return Xm([],t,s,n,e)}const YM={kernelName:Zl,backendName:"cpu",kernelFunc:function ZM(n){const{inputs:t,backend:e}=n,{x:s}=t;Ie(s,"neg");const r=e.data.get(s.dataId).values,[o,a]=Q1(r,s.shape,s.dtype);return e.makeTensorInfo(a,s.dtype,o)}},QM=sf,eB={kernelName:ed,backendName:"cpu",kernelFunc:function JM(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s;Ie(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,{selectedIndices:h}=QM(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},tB=rf,sB={kernelName:td,backendName:"cpu",kernelFunc:function nB(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;Ie(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,{selectedIndices:d,validOutputs:p}=tB(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},rB=of,aB={kernelName:nd,backendName:"cpu",kernelFunc:function oB(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;Ie(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=rB(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},J1=Gt((n,t)=>n!==t?1:0),iB=sn(Yl,J1,null,"bool"),lB={kernelName:Yl,backendName:"cpu",kernelFunc:iB},cB={kernelName:Jl,backendName:"cpu",kernelFunc:function uB(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s;Ie(r,"oneHot");const u=G(r.shape),c=new Float32Array(u*a);c.fill(l);const h=e.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<a&&(c[d*a+h[d]]=i);return e.makeTensorInfo([...r.shape,a],o,c)}};function Gc(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=bo({inputs:{input:s},backend:e}),o=Gc({inputs:{x:r},backend:e}),a=ia({inputs:{input:s},backend:e}),i=Gc({inputs:{x:a},backend:e}),l=Bn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return eg({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const hB={kernelName:yu,backendName:"cpu",kernelFunc:Gc},dB={kernelName:Ql,backendName:"cpu",kernelFunc:function ev(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=bo({inputs:{input:s},backend:e}),o=ev({inputs:{x:r},backend:e}),a=ia({inputs:{input:s},backend:e}),i=Gc({inputs:{x:a},backend:e}),l=Bn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return eg({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function tv(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Uc({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Fn(o,c.shape,"All tensors passed to stack must have matching shapes"),S(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=la({inputs:t.map(c=>{const h=Uc({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const pB={kernelName:eu,backendName:"cpu",kernelFunc:tv},nv={kernelName:tu,backendName:"cpu",kernelFunc:function fB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;Ie(r,"pad");const i=o.map((x,b)=>x[0]+r.shape[b]+x[1]),l=o.map(x=>x[0]),u=e.data.get(r.dataId).values,c=G(r.shape),h=r.shape.length,d=$e(r.shape),p=G(i),f=i.length,g=$e(i),m=cn(r.dtype,p);0!==a&&m.fill(a);for(let x=0;x<c;x++)m[_s(Ro(x,h,d).map((C,k)=>C+l[k]),f,g)]=u[x];return{dataId:e.write(m,i,r.dtype),shape:i,dtype:r.dtype}}},mB=Gt((n,t)=>Math.pow(n,t)),gB=sn(Ya,mB),yB={kernelName:Ya,backendName:"cpu",kernelFunc:gB};function sv(n,t,e,s){const[r,o]=ln(n,s),a=On(t,"int32"),i=yn(G(r),a),l=G(o);for(let u=0;u<i.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];i[u]=h}return{outVals:i,outShape:r,outDtype:a}}const bB={kernelName:su,backendName:"cpu",kernelFunc:function xB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Ie(r,"prod");const i=r.shape.length,l=Ge(o,r.shape),u=$t(l,i);let c=l,h=r;const d=[];null!=u&&(h=Dn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=Wt(c.length,i));const p=e.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=sv(h.shape,h.dtype,p,c);let y=g;return a&&(y=Vt(g,l)),d.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.makeTensorInfo(y,m,f)}};function rv(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let s=t;s<n.length;s++)e[t-1]*=n[s];return e}function ov(n,t,e,s,r,o,a,i){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function wB(n,t,e){n.forEach((s,r)=>{if(s<0||s>=e){const o=Ro(r,t.length,$e(t)).join(",");throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`)}})}(o,a,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:d}=function IB(n,t,e,s){const r=[];let o=0;const i=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function vB(n,t){for(let e=0;e<n.length;++e){const s=n[e],r=e===n.length-1?t:n[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let o=1;o<s.length;++o)if(s[o-1]>s[o])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const c=t[u+1];for(let h=1;h<l+1;++h)i[u].push(h*c)}for(let u=0;u<n.length;++u){let c=n[u],h=n[u]+1;for(let d=0;d<e.length;++d){const p=e[d],f=d+t.length-1;if(f>=0){const g=i[f],m=g[g.length-1]-p[c];for(let y=c;y<h;++y)i[f].push(p[y+1]+m)}c=p[c],h=p[h]}h!==c&&(r.push([c,h]),o+=h-c)}return{outSplits:i,valueSlices:r,numValues:o}}(o,a,n,u),p=function SB(n){const t=[];for(let e=0;e<n.length;++e){const r=Bt("int32",n[e].length);t.push(r),n[e].forEach((o,a)=>r[a]=o)}return t}(c),f=function CB(n,t,e,s,r){const o=t.slice();o[0]=r;const a=Bt(e,G(o)),i=n.length;return function NB(n,t,e,s,r,o){const a=rv(t,2)[1],i=rv(o,2)[1];let l=0;for(const u of e)for(let c=u[0];c<u[1];++c){for(let h=0;h<s;++h)r[l*i+h]=n[c*a+h];++l}}(n,t,s,0===i?0:i/t[0],a,o),[a,o]}(e,s,r,h,d);return[p,f[0],f[1]]}const TB={kernelName:sd,backendName:"cpu",kernelFunc:function kB(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,l=r.map(y=>e.data.get(y.dataId).values),u=r.map(y=>y.shape),c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,[d,p,f]=ov(l,u,c,o.shape,o.dtype,h,a.shape),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},av=2147483647;function iv(n,t,e,s,r,o,a){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===r.length,u=0===a.length,c=[];i||c.push(t[0]),l||c.push(r[0]),u||c.push(a[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=Bt("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const y=i?n[0]:n[m],x=l?s[0]:s[m],b=u?o[0]:o[m];if(0===b)throw new Error("Requires delta != 0");let v;if(b>0&&x<y||b<0&&x>y)v=0;else if(v=Math.ceil(Math.abs((x-y)/b)),v>av)throw new Error(`Requires ((limit - start) / delta) <= ${av}`);d[m+1]=d[m]+v}const f=Bt(e,d[h]);let g=0;for(let m=0;m<h;++m){const y=d[m+1]-d[m];let x=i?n[0]:n[m];const b=u?o[0]:o[m];for(let v=0;v<y;++v)f[g++]=x,x+=b}return[d,f]}const _B={kernelName:rd,backendName:"cpu",kernelFunc:function $B(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=iv(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}};var gs=Et;class Hc{constructor(t,e,s,r,o,a,i,l,u,c){this.shape=t,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=o,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Kx(c),this.raggedRank=qx(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===gs.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===gs.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case gs.VALUE_ROWIDS:return Hc.getMaxWidthValueRowID(e);case gs.ROW_SPLITS:return Hc.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${gs[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const o=t[r+1]-t[r];o>s&&(s=o)}return s}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let s=0,r=t[0],o=0;for(let a=1;a<e;++a){const i=t[a];i!==r&&(r=i,o=Math.max(a-s,o),s=a)}return Math.max(e-s,o)}tensorShapeFromTensor(t,e,s=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return uv(t,s)}calculateOutputSize(t){const e=this.valuesShape;Xx(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=jx(this.raggedRank,r,e);a[0]<0&&(a[0]=t);for(let i=1;i<=this.raggedRank;++i)a[i]<0&&(a[i]=this.getMaxWidth(i));return a}calculateFirstParentOutputIndex(t,e,s){const r=Math.min(t,s),o=[];let a=0;for(let i=0;i<r;++i,a+=e)o.push(a);for(let i=r;i<t;++i)o.push(-1);return S(o.length===t,()=>"Final length of result must be equal to firstDimension."),o}calculateOutputIndexRowSplit(t,e,s,r){const o=t.length,a=[];for(let i=0;i<o-1;++i){const l=t[i+1]-t[i];let u=Math.min(r,l),c=e[i];-1===c&&(u=0);for(let h=0;h<u;++h)a.push(c),c+=s;for(let h=0;h<l-u;++h)a.push(-1)}if(o>0&&a.length!==t[o-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(t,e,s,r){const o=t.length,a=[];if(0===o)return[];let i=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];a.push(u);for(let c=1;c<o;++c){const h=t[c];if(h===l)u>=0&&(++i,i<r?u+=s:u=-1);else{if(i=0,l=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);u=e[h]}a.push(u)}if(a.length!==t.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(t,e,s,r){const o=this.getRowPartitionTensor(t),a=this.getRowPartitionTypeByDimension(t);switch(a){case gs.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,e,s,r);case gs.ROW_SPLITS:if(o.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(o,e,s,r);default:throw new Error(`Unsupported partition type: ${gs[a]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case gs.FIRST_DIM_SIZE:return t[0];case gs.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case gs.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${gs[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let l=r.length-2;l>=0;--l)r[l]=r[l+1]*s[l+1];const o=uv(s,!1),a=Bt(this.valuesDType,G(o));if(r[0]*s[0]>0){let l=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,r[u],s[u]);this.setOutput(this.raggedRank,l,a,o)}return[o,a]}setOutput(t,e,s,r){if(0===s.length)return;const o=this.values,a=s;let i=r.slice();i=i.slice(t+1);const l=G(i),u=e.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const f=this.defaultValueShape;z(()=>{const g=F(c,f);c=Ko(g,i).dataSync()})}let h=0,d=0,p=0;for(let f=0;f<=u;++f){let g=f<u?e[f]:-1;if(g!==p){if(d<p){const m=o.subarray(h*l);lv(a.subarray(d*l),m,(p-d)*l)}if(f>=u&&(g=Math.floor(s.length/l)),g>p)if(1===this.defaultValue.length)a.subarray(p*l,g*l).fill(this.defaultValue[0]),p=g;else for(;g>p;)lv(a.slice(p*l),c,l),++p;g<0?(h=f+1,d=p):(h=f,d=p,p=d+1)}else++p}}}function lv(n,t,e){for(let s=0;s<e;s++)n[s]=t[s]}function uv(n,t){const e=[];for(let s of n){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function cv(n,t,e,s,r,o,a,i,l,u){return new Hc(n,t,e,s,r,o,a,i,l,u).compute()}const AB={kernelName:od,backendName:"cpu",kernelFunc:function EB(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,d=i.map(m=>e.data.get(m.dataId).values),p=i.map(m=>m.shape),[f,g]=cv(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}};function hv(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return yn(0,s);const l=yn(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const DB={kernelName:ad,backendName:"cpu",kernelFunc:function RB(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:o,step:a}=e,i=hv(s,r,a,o);return t.makeTensorInfo([i.length],o,i)}},FB=lt(Qa,n=>1/n),OB={kernelName:Qa,backendName:"cpu",kernelFunc:FB},PB={kernelName:au,backendName:"cpu",kernelFunc:function LB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Ie(r,"resizeBilinear");const l=$e(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(G([h,u,c,f])),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c];let b=0;const v=y[0]/x[0],I=y[1]/x[1];for(let C=0;C<h;C++)for(let k=0;k<u;k++){let T;T=a?v*(k+.5)-.5:v*k;const E=Math.max(0,Math.floor(T)),R=T-E,L=Math.min(d-1,Math.ceil(T)),V=C*l[0]+E*l[1],U=C*l[0]+L*l[1];for(let H=0;H<c;H++){let j;j=a?I*(H+.5)-.5:I*H;const X=Math.max(0,Math.floor(j)),Z=j-X,K=Math.min(p-1,Math.ceil(j)),Y=V+X*l[2],oe=U+X*l[2],ie=V+K*l[2],ce=U+K*l[2];for(let ue=0;ue<f;ue++){const ye=g[Y+ue],de=g[oe+ue],Fe=ye+(g[ie+ue]-ye)*Z;m[b++]=Fe+(de+(g[ce+ue]-de)*Z-Fe)*R}}}return e.makeTensorInfo([h,u,c,f],"float32",m)}},MB={kernelName:ud,backendName:"cpu",kernelFunc:function zB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Ie([o,r],"resizeBilinearGrad");const i=$e(r.shape),[l,u,c,h]=r.shape,[,d,p]=o.shape,f=new Float32Array(l*u*c*h),g=[a&&d>1?u-1:u,a&&p>1?c-1:c],m=[a&&d>1?d-1:d,a&&p>1?p-1:p],y=g[0]/m[0],x=g[1]/m[1],b=e.data.get(o.dataId).values;let v=0;for(let I=0;I<l;I++){const C=I*i[0];for(let k=0;k<d;k++){const T=k*y,E=Math.floor(T),R=Math.min(Math.ceil(T),u-1),L=C+E*i[1],V=C+R*i[1],U=T-E,H=1-U;for(let j=0;j<p;j++){const X=j*x,Z=Math.floor(X),K=Math.min(Math.ceil(X),c-1),Y=X-Z,oe=1-Y,ie=L+Z*i[2],ce=L+K*i[2],ue=V+Z*i[2],ye=V+K*i[2],de=H*oe,be=H*Y,_e=U*oe,Fe=U*Y;for(let Ae=0;Ae<h;Ae++){const Ve=b[v++];f[ie+Ae]+=Ve*de,f[ce+Ae]+=Ve*be,f[ue+Ae]+=Ve*_e,f[ye+Ae]+=Ve*Fe}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},VB={kernelName:ou,backendName:"cpu",kernelFunc:function BB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Ie(r,"resizeNearestNeighbor");const l=$e(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c],b=y[0]/x[0],v=y[1]/x[1];let I=0;for(let C=0;C<h;C++){const k=C*l[0];for(let T=0;T<u;T++){const E=a?b*(T+.5):b*T;let R=Math.min(d-1,o?Math.round(E):Math.floor(E));a&&(R=Math.max(0,R));const L=k+R*l[1];for(let V=0;V<c;V++){const U=a?v*(V+.5):v*V;let H=Math.min(p-1,o?Math.round(U):Math.floor(U));a&&(H=Math.max(0,H));const j=L+H*l[2];for(let X=0;X<f;X++)m[I++]=g[j+X]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,m)}},UB={kernelName:ld,backendName:"cpu",kernelFunc:function WB(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Ie([o,r],"resizeNearestNeighborGrad");const i=$e(r.shape),l=$e(o.shape),[u,c,h,d]=r.shape,[,p,f]=o.shape,g=new Float32Array(u*c*h*d),m=e.data.get(o.dataId).values,y=[a&&p>1?c-1:c,a&&f>1?h-1:h],x=[a&&p>1?p-1:p,a&&f>1?f-1:f],b=y[0]/x[0],v=y[1]/x[1],I=1/b,C=1/v,k=2*Math.ceil(I)+2,T=2*Math.ceil(C)+2;for(let E=0;E<u;E++){const R=E*i[0];for(let L=0;L<c;L++){const V=R+L*i[1],U=Math.floor(L*I),H=Math.floor(U-k/2);for(let j=0;j<h;j++){const X=V+j*i[2],Z=Math.floor(j*C),K=Math.floor(Z-T/2);for(let Y=0;Y<d;Y++){let oe=0;for(let ie=0;ie<k;ie++){const ce=ie+H;if(ce<0||ce>=p)continue;const ue=R+ce*l[1],ye=ce*b;if(L===Math.min(c-1,a?Math.round(ye):Math.floor(ye)))for(let be=0;be<T;be++){const _e=be+K;if(_e<0||_e>=f)continue;const Fe=ue+_e*l[2],Ae=_e*v;j===Math.min(h-1,a?Math.round(Ae):Math.floor(Ae))&&(oe+=m[Fe+Y])}}g[X+Y]=oe}}}}return e.makeTensorInfo(r.shape,r.dtype,g)}},HB={kernelName:iu,backendName:"cpu",kernelFunc:function GB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s;Ie(r,"reverse");const a=r.shape.length,i=Ge(o,r.shape);if(0===a)return Gs({inputs:{x:r},backend:e});const l=new Xt(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();i.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},jB={kernelName:Td,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=cn(s.dtype,G(s.shape)),[u,c,h,d]=s.shape,[p,f]=pf(a,c,h),m=Math.sin(r),y=Math.cos(r),x=i.data.get(s.dataId).values;for(let v=0;v<u;v++){const I=v*h*c*d;for(let C=0;C<c;C++){const k=C*(h*d);for(let T=0;T<h;T++){const E=T*d;for(let R=0;R<d;R++){const L=[u,C,T,R],V=L[2],U=L[1];let H=(V-p)*y-(U-f)*m,j=(V-p)*m+(U-f)*y;H=Math.round(H+p),j=Math.round(j+f);let X=o;"number"!=typeof o&&(X=3===R?255:o[R]),H>=0&&H<h&&j>=0&&j<c&&(X=x[I+j*(h*d)+H*d+R]),l[I+k+E+R]=X}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},KB=lt(ti,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),qB={kernelName:ti,backendName:"cpu",kernelFunc:KB},dv=Us(n=>1/Math.sqrt(n)),XB=Pr(ni,dv),ZB={kernelName:ni,backendName:"cpu",kernelFunc:XB};function vo(n,t,e,s,r,o,a,i,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return Be(e,t.dtype);const p=l instanceof Xt?l:Be(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<o;f++){const g=[];let m=0;for(let y=0;y<a;y++){const x=h[f*a+y];g.push(x),m+=x*i[y]}if(m<0||m>=s/r)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[m*r+y]+=d[f*r+y]:p.values[m*r+y]=0===t.rank?d[0]:d[f*r+y]}return p}const QB={kernelName:cd,backendName:"cpu",kernelFunc:function YB(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=lo(0,r,a),g=vo(e.bufferSync(r),e.bufferSync(o),a,h,u,l,i,c,0,!0);return e.makeTensorInfo(a,g.dtype,g.values)}};function JB(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<t?e=r+1:s=r;return s}function eV(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<=t?e=r+1:s=r;return s}const sV={kernelName:dd,backendName:"cpu",kernelFunc:function nV(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,u=function tV(n,t,e,s,r,o){const a=Bt("int32",e*r);for(let i=0;i<e;++i){const l=n.slice(i*s,(i+1)*s),u=i*r;for(let c=0;c<r;++c)a[u+c]="left"===o?JB(l,t[c+u]):eV(l,t[c+u])}return a}(e.data.get(r.dataId).values,e.data.get(o.dataId).values,r.shape[0],r.shape[1],o.shape[1],a);return e.makeTensorInfo(o.shape,"int32",u)}},oV={kernelName:lu,backendName:"cpu",kernelFunc:function rV(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t;Ie([s,r,o],"select");const a=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=On(r.dtype,o.dtype),h=yn(G(r.shape),c);let d=0;const p=0===a||a>1||1===r.shape.length?1:G(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let g=0;g<p;g++)h[d++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},aV=nc,iV=sc,lV=lt(si,n=>n>=0?iV*n:aV*(Math.exp(n)-1)),uV={kernelName:si,backendName:"cpu",kernelFunc:lV},cV=lt(ai,n=>n<0?-1:n>0?1:0),hV={kernelName:ai,backendName:"cpu",kernelFunc:cV},dV=lt(ri,n=>Math.sin(n)),pV={kernelName:ri,backendName:"cpu",kernelFunc:dV},fV=lt(oi,n=>Math.sinh(n)),mV={kernelName:oi,backendName:"cpu",kernelFunc:fV},pv=Math.log(1.1920928955078125e-7)+2,gV=lt(li,n=>{const t=n>-pv,e=n<pv,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),yV={kernelName:li,backendName:"cpu",kernelFunc:gV},bV={kernelName:hu,backendName:"cpu",kernelFunc:function xV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;Ie([r],"spaceToBatchND");const i=G(o),l=[[0,0]];l.push(...a);for(let C=1+o.length;C<r.shape.length;++C)l.push([0,0]);const u=nv.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=Pi(u.shape,o,i,!1),h=zi(c.length,o.length,!1),d=Mi(u.shape,o,i,!1),g=xt({inputs:{x:u},backend:e,attrs:{shape:c}}),x=Dn({inputs:{x:g},backend:e,attrs:{perm:h}}),I=xt({inputs:{x},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(x),I}};function fv(n,t,e,s,r,o,a){const i=t[0],l=o[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(rb(i));return[Bt(e,0),[0,h],Bt(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<i;++m){const y=n[m*h];if(y<0)throw new Error(ob(m,y));if(y>=l)throw new Error(ab(m,y,l));++f[y],d=d&&y>=p,p=y}let g=!0;for(let m=0;m<l;++m){const y=0===f[m];u[m]=y,g=g&&!y,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const m=n,y=s;for(let x=0;x<i;++x)c[x]=x;return[m,[i,h],y,u,c]}{const m=f[l-1],y=Bt(e,m*h),x=Bt(r,m),b=new Array(l).fill(0);for(let v=0;v<i;++v){const I=n[v*h],k=(0===I?0:f[I-1])+b[I];b[I]++;for(let T=0;T<h;++T)y[k*h+T]=n[v*h+T];x[k]=s[v],c[v]=k}for(let v=0;v<l;++v)if(0===b[v]){const C=0===v?0:f[v-1];y[C*h+0]=v;for(let k=1;k<h;++k)y[C*h+k]=0;x[C]=a}return[y,[m,h],x,u,c]}}const vV={kernelName:pd,backendName:"cpu",kernelFunc:function wV(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=e.data.get(a.dataId).values[0],[h,d,p,f,g]=fv(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}};function mv(n,t,e,s,r){const o=G(s),a=t[0],i=r.length,l=[];let u=1,c=-1;for(let m=0;m<i;++m){const y=r[m];if(-1===y){if(-1!==c)throw new Error(ib(c,m));c=m,l.push(1)}else{if(y<0)throw new Error(lb(m,y));u*=y,l.push(y)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const m=Math.trunc(o/u);if(u*m!==o)throw new Error(cb(s,l));l[c]=m}if(G(l)!==o)throw new Error(hb(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let m=d-2;m>=0;--m)p[m]=p[m+1]*s[m+1]}const f=[];if(i>0){f[i-1]=1;for(let m=i-2;m>=0;--m)f[m]=f[m+1]*l[m+1]}const g=Bt(e,a*i);for(let m=0;m<a;++m){let y=0;for(let x=0;x<d;++x)y+=n[m*d+x]*p[x];for(let x=0;x<i;++x)g[m*i+x]=Math.trunc(y/f[x]),y%=f[x]}return[g,[a,i],l]}const SV={kernelName:fd,backendName:"cpu",kernelFunc:function IV(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.data.get(r.dataId).values),i=e.data.get(s.dataId).values,l=Array.from(e.data.get(o.dataId).values),[u,c,h]=mv(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}};function tg(n,t,e,s,r,o=!1,a=0){const i=s.length,l=[t[0],n.length/t[0]],u=l[1],h=i>0?r[i-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=Bt(e,d.reduce((b,v)=>b*v,1));if(0===i)return h>0&&f.fill(a),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let g=0,m=1,y=0,x=r[g];for(;;){let b=0;if(m<i){if(b=r[m],x===b){++m;continue}if(x>=b)throw new Error("segment ids are not increasing")}if(x<0||x>=h)throw new Error(pb(x,h));x>y&&f.fill(a,y*u,x*u);for(let v=g;v<m;++v){const I=s[v];if(I<0||I>=l[0])throw new Error(fb(v,s[v],l[0]));for(let C=0;C<u;C++)f[x*u+C]+=n[I*u+C]}if(o)for(let v=0;v<u;v++)f[x*u+v]/=m-g;if(g=m,++m,y=x+1,x=b,m>i)break}return y<h&&f.fill(a,y*u,h*u),[f,d]}const CV={kernelName:md,backendName:"cpu",kernelFunc:function NV(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=tg(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},TV={kernelName:gd,backendName:"cpu",kernelFunc:function kV(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=tg(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},_V={kernelName:yd,backendName:"cpu",kernelFunc:function $V(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=lo(0,r,i),p=!1,f=e.bufferSync(r);let g;switch(o.dtype){case"bool":g=vo(f,e.bufferSync(o),i,d,c,u,l,h,!!e.data.get(a.dataId).values[0],p);break;case"float32":case"int32":g=vo(f,e.bufferSync(o),i,d,c,u,l,h,e.data.get(a.dataId).values[0],p);break;case"string":g=vo(f,e.bufferSync(o),i,d,c,u,l,h,dr(e.data.get(a.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${o.dtype}`)}return e.makeTensorInfo(i,g.dtype,g.values)}},AV={kernelName:du,backendName:"cpu",kernelFunc:function EV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Ge(a,r.shape)[0],l=Ef(r,o,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[i]=h;const p=wo({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[i]+=h,p})}},RV=Us(n=>Math.sqrt(n)),DV=lt(ui,n=>Math.sqrt(n)),FV={kernelName:ui,backendName:"cpu",kernelFunc:DV},OV={kernelName:xd,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;Ie(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];o[i]=l*l}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},LV=Gt((n,t)=>{const e=n-t;return e*e}),PV=sn(ci,LV),zV={kernelName:ci,backendName:"cpu",kernelFunc:PV},gv=Us((n,t)=>{const{pattern:e,replaceGlobal:s,rewrite:r}=t;return n.replace(new RegExp(e,s?"g":""),r)}),MV=Pr(fu,gv),BV={kernelName:fu,backendName:"cpu",kernelFunc:MV},VV=lt(mi,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),WV={kernelName:mi,backendName:"cpu",kernelFunc:VV};function yv(n,t,e,s){const r=Be(n,t.dtype);for(let o=0;o<r.size;o++){const a=r.indexToLoc(o),i=new Array(a.length);for(let l=0;l<i.length;l++)i[l]=a[l]*e[l]+s[l];r.set(t.get(...i),...a)}return r}const GV={kernelName:bd,backendName:"cpu",kernelFunc:function UV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;Ie(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:v}=mp(r.shape,o,a,i,l,u,c,h,d);let I;if(g)I=xt({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){S(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const C=dp(x,b,v),k=wo({inputs:{x:r},backend:e,attrs:{begin:x,size:C}});I=xt({inputs:{x:k},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(k)}else{const k=yv(p,e.bufferSync(r),v,x);I=e.makeTensorInfo(f,k.dtype,k.values)}return I}};class HV{constructor(t,e,s,r,o,a){this.separator=hr(t),this.nGramWidths=e,this.leftPad=hr(s),this.rightPad=hr(r),this.padWidth=o,this.preserveShort=a}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,o,a){for(let i=0;i<o;++i){const l=this.getPadWidth(a),u=Math.max(0,l-i),c=Math.max(0,l-(o-(i+1))),h=a-(u+c),d=e+(u>0?0:i-l);let p=0;p+=u*this.leftPad.length;for(let x=0;x<h;++x)p+=t[d+x].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+i]=new Uint8Array(p);const g=s[r+i];let m=0;const y=x=>x.forEach(b=>g[m++]=b);for(let x=0;x<u;++x)y(this.leftPad),y(this.separator);for(let x=0;x<h-1;++x)y(t[d+x]),y(this.separator);if(h>0){y(t[d+h-1]);for(let x=0;x<c;++x)y(this.separator),y(this.rightPad)}else{for(let x=0;x<c-1;++x)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const o=r-1,a=Bt("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=o;++u)a[u]=0;return[l,a]}a[0]=0;for(let l=1;l<=o;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),a[l]=a[l-1]+c}const i=new Array(a[o]);for(let l=0;l<o;++l){const u=e[l];let c=a[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,i,c,p,h),c+=p}),this.preserveShort&&c===a[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,i,c,1,h+2*this.padWidth)}}return[i,a]}}function xv(n,t,e,s,r,o,a,i){return new HV(e,s,r,o,a,i).compute(n,t)}const KV={kernelName:wd,backendName:"cpu",kernelFunc:function jV(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,g]=xv(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}};function qV(n,t,e,s){if(!n.length)return;if(0===t.length){for(let o=0;o<n.length;++o)s.push(n.subarray(o,o+1));return}if(1===t.length){const o=t[0];let a=n.indexOf(o);for(;-1!==a;){const i=n.subarray(0,a);(!e||0!==i.length)&&s.push(i),a=(n=n.subarray(a+1)).indexOf(o)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let o=0;o<n.length+1;o++)if(o===n.length||-1!==t.indexOf(n[o])){const a=n.subarray(r,o);(!e||0!==a.length)&&s.push(a),r=o+1}}function bv(n,t,e){const s=n.length,r=[];let o=0,a=0;const i=new Array(s);for(let d=0;d<s;++d){const p=r.length;qV(n[d],t,e,r);const f=r.length-p;i[d]=f,o+=f,a=Math.max(a,f)}const l=Bt("int32",2*o),u=new Array(o),c=[s,a];let h=0;for(let d=0;d<s;++d)for(let p=0;p<i[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}const ZV={kernelName:vd,backendName:"cpu",kernelFunc:function XV(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.data.get(o.dataId).values,l=e.data.get(a.dataId).values[0],[u,c,h]=bv(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function wv(n,t){const e=Bt("int32",n.length);for(let s=0;s<n.length;++s)e[s]=pS(n[s]).modulo(t).getLowBitsUnsigned();return e}const QV={kernelName:Id,backendName:"cpu",kernelFunc:function YV(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=wv(e.data.get(o.dataId).values,r);return e.makeTensorInfo(o.shape,"int32",i)}},JV=lt(di,n=>Math.tan(n)),eW={kernelName:di,backendName:"cpu",kernelFunc:JV},tW=lt(pi,n=>Math.tanh(n));function vv(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=Be(e,n.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),a=new Array(n.rank);for(let l=0;l<a.length;l++)a[l]=o[l]%n.shape[l];const i=n.locToIndex(a);s.values[r]=n.values[i]}return s}const sl=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function Iv(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const i=s-e+1,l=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(l-i/2);Iv(n,t,Math.max(e,Math.floor(t-l*c/i+h)),Math.min(s,Math.floor(t+(i-l)*c/i+h)))}const r=n[t];let o=e,a=s;for(Gn(n,e,t),sl(n[s],r)>0&&Gn(n,e,s);o<a;){for(Gn(n,o,a),o++,a--;sl(n[o],r)<0;)o+=1;for(;sl(n[a],r)>0;)a-=1}0===sl(n[e],r)?Gn(n,e,a):(a+=1,Gn(n,a,s)),a<=t&&(e=a+1),t<=a&&(s=a-1)}}function Sv(n,t,e,s,r){const o=t[t.length-1],[a,i]=[n.length/o,o],l=cn(e,a*s),u=cn("int32",a*s);for(let h=0;h<a;h++){const d=h*i,p=n.subarray(d,d+i);let f=new Array(p.length);p.forEach((x,b)=>f[b]={value:x,index:b}),s<f.length&&(Iv(f,s),f=f.slice(0,s)),r&&f.sort(sl);const g=h*s,m=l.subarray(g,g+s),y=u.subarray(g,g+s);for(let x=0;x<s;x++)m[x]=f[x].value,y[x]=f[x].index}const c=t.slice();return c[c.length-1]=s,[Be(c,e,l),Be(c,"int32",u)]}function Nv(n,t,e){switch(e){case"reflect":return function hW(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return vt(0,e,t-1)}(n,t);case"wrap":return function dW(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),vt(0,e,t-1)}(n,t);case"nearest":return function fW(n,t){return vt(0,n,t-1)}(n,t);default:return function pW(n,t){return n}(n)}}function rl(n,t,e,s,r,o,a,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<e?n[a*s+i*r+l*o+u]:c}function mW(n,t,e,s,r,o,a,i,l,u,c){return rl(n,t,e,s,r,o,a,Math.round(i),Math.round(l),u,c)}function gW(n,t,e,s,r,o,a,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*rl(n,t,e,s,r,o,a,h,d,u,c)+(l-d)*rl(n,t,e,s,r,o,a,h,f,u,c))+(i-h)*((f-l)*rl(n,t,e,s,r,o,a,p,d,u,c)+(l-d)*rl(n,t,e,s,r,o,a,p,f,u,c))}function Cv(n,t,e,s){const r=Ge(t,e)[0],o=[1,e[0],1];for(let f=0;f<r;f++)o[0]*=e[f];o[1]=e[r];for(let f=r+1;f<e.length;f++)o[2]*=e[f];const a=new Map,i=new Int32Array(e[r]),l=new Xt(o,s,n),u=[],c=1===o[0]&&1===o[2];for(let f=0;f<e[r];f++){let g;if(c)g=n[f].toString();else{const y=[];for(let x=0;x<o[0];x++)for(let b=0;b<o[2];b++)y.push(l.get(x,f,b));g=y.join(",")}const m=a.get(g);if(null!=m)i[f]=m;else{const y=a.size;a.set(g,y),i[f]=y,u.push(f)}}const h=o.slice();h[1]=a.size;const d=new Xt(h,s);u.forEach((f,g)=>{for(let m=0;m<o[0];m++)for(let y=0;y<o[2];y++)d.set(l.get(m,f,y),m,g,y)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const SW=[gP,yP,bP,vP,dP,SP,kP,$P,EP,RP,FP,LP,zP,VP,UP,jP,qP,ZP,QP,fP,ez,sz,oz,lz,cz,cP,dz,fz,lP,mz,yz,xz,wz,Iz,Nz,kz,$z,Ez,Rz,Fz,Lz,zz,Bz,Wz,Uz,Hz,Kz,Xz,Zz,Yz,Qz,s3,JL,o3,a3,f3,m3,g3,x3,k3,T3,_3,A3,F3,L3,z3,B3,W3,G3,j3,eP,q3,gz,Z3,Q3,eM,tP,nM,rM,aM,lM,cM,pM,mM,xM,wM,IM,SM,CM,TM,_M,AM,DM,OM,PM,MM,VM,UM,jM,XM,e3,YM,eB,sB,aB,lB,cB,dB,pB,nv,yB,sP,bB,TB,_B,AB,DB,uP,Ym,OB,rP,oP,pP,PB,MB,VB,UB,HB,jB,qB,ZB,QB,sV,oV,uV,iP,hV,pV,mV,tz,KM,yV,bV,vV,SV,CV,TV,_V,AV,FV,OV,zV,BV,WV,GV,KV,ZV,QV,v3,t3,eW,{kernelName:pi,backendName:"cpu",kernelFunc:tW},{kernelName:hd,backendName:"cpu",kernelFunc:function sW(n){const{inputs:t,backend:e}=n,{tensor:s,indices:r,updates:o}=t,{sliceRank:a,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=lo(0,r,s.shape),d=e.bufferSync(r),p=e.bufferSync(o),f=e.bufferSync(s),g=vo(d,p,s.shape,c,l,i,a,u,f,!1);return e.makeTensorInfo(s.shape,g.dtype,g.values)}},{kernelName:fi,backendName:"cpu",kernelFunc:function oW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;Ie(r,"tile");const a=vv(e.bufferSync(r),o);return e.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:Sd,backendName:"cpu",kernelFunc:function iW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s;Ie(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=Sv(i,r.shape,r.dtype,o,a);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:Nd,backendName:"cpu",kernelFunc:function uW(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,g]=u??[h,d],m=[c,f,g,p],y=$e(r.shape),x=y[0],b=y[1],v=y[2],I=$e(m),C=I[0],k=I[1],T=I[2],E=cn(r.dtype,G(m));E.fill(l);const R=s.data.get(r.dataId).values,L=s.data.get(o.dataId).values;for(let U=0;U<c;++U){const H=1===o.shape[0]?L:L.subarray(8*U,8*U+8);for(let j=0;j<f;++j)for(let X=0;X<g;++X)for(let Z=0;Z<p;++Z){let K;const Y=H[6]*X+H[7]*j+1;if(0===Y)continue;const ie=(H[3]*X+H[4]*j+H[5])/Y,ce=Nv((H[0]*X+H[1]*j+H[2])/Y,d,i),ue=Nv(ie,h,i);switch(a){case"nearest":K=mW(R,h,d,x,b,v,U,ue,ce,Z,l);break;case"bilinear":K=gW(R,h,d,x,b,v,U,ue,ce,Z,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}E[U*C+j*k+X*T+Z]=K}return s.makeTensorInfo(m,r.dtype,E)}return{dataId:s.write(E,m,r.dtype),shape:r.shape,dtype:r.dtype}}},NP,{kernelName:Cd,backendName:"cpu",kernelFunc:function yW(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Ie(o,"unique");const a=s.data.get(o.dataId).values,{outputValues:i,outputShape:l,indices:u}=Cv(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:mu,backendName:"cpu",kernelFunc:function bW(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r.shape.length,i=r.shape[o],l=new Array(a-1);let u=0;for(let p=0;p<a;p++)p!==o&&(l[u++]=r.shape[p]);const c=new Array(a).fill(0),h=r.shape.slice();h[o]=1;const d=new Array(i);for(let p=0;p<d.length;p++){c[o]=p;const f=wo({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=xt({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:gu,backendName:"cpu",kernelFunc:function vW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s;Ie(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-o.shape.length;let d=o;for(let f=0;f<h;++f){const g=Uc({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=g,c.push(g)}for(let f=0;f<a;++f){const g=cr(f,"int32"),m=e.makeTensorInfo([],"int32",g),y=R1({inputs:{a:m,b:d},backend:e}),x=zr({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),b=Wc({inputs:{a:x,b:r},backend:e}),v=nl({inputs:{x:b},backend:e,attrs:{axis:0,keepDims:!1}});u.push(v),c.push(m),c.push(y),c.push(x),c.push(b),c.push(v)}const p=tv({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},hB];for(const n of SW)Ed(n);const Mr={},jc={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ts(n,t){if(!(n in Mr)||null!=t){const s=function kW(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=t??function CW(n){if(!M().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n);return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete Mr[n]},!1),M().getBool("SOFTWARE_WEBGL_ENABLED")&&(jc.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",jc)||e.getContext("experimental-webgl",jc):e.getContext("webgl2",jc)}(n,t);if(null===s)return console.log("Could not get context for WebGL version",n),null;Mr[n]=s}const e=Mr[n];return null==e||e.isContextLost()?(delete Mr[n],Ts(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Mr[n])}var Hs=(()=>((Hs=Hs||{})[Hs.DENSE=0]="DENSE",Hs[Hs.SHARED_BATCH=1]="SHARED_BATCH",Hs))(),Ht=(()=>((Ht=Ht||{})[Ht.RENDER=0]="RENDER",Ht[Ht.UPLOAD=1]="UPLOAD",Ht[Ht.PIXELS=2]="PIXELS",Ht[Ht.DOWNLOAD=3]="DOWNLOAD",Ht))(),ct=(()=>((ct=ct||{})[ct.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",ct[ct.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",ct[ct.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",ct[ct.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",ct[ct.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",ct))();function ol(n,t){return[t,n]}function Kc(n){const t=G(n);return ph(Math.ceil(t/4))}function ua(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function ng(n,t){const e=n;let s,r,o,a,i,l,u,c,h,d;return 2===M().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,a=e.RGBA32F,i=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT,l=e.RGBA8):(s=n.RGBA,r=n.RGBA,o=n.RGBA,a=e.RGBA,i=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function me(n,t){const e=t();return M().getBool("DEBUG")&&function _W(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function DW(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function RW(n){return!!(M().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504)}function qc(n,t){return or(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const LW=/ERROR: [0-9]+:([0-9]+):/g;function kv(n,t){const e=LW.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),o=r.length.toString().length+2,a=r.map((h,d)=>Eo((d+1).toString(),o)+h);let i=0;for(let h=0;h<a.length;h++)i=Math.max(a[h].length,i);const l=a.slice(0,s-1),u=a.slice(s-1,s),c=a.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Eo(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function sg(n,t){if(me(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Tv(n,t,e,s,r,o,a){const i=n.getAttribLocation(t,e);return-1!==i&&(me(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),me(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,o,a)),me(n,()=>n.enableVertexAttribArray(i)),!0)}function KW(n,t,e,s){me(n,()=>function GW(n,t,e){(function _v(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),me(n,()=>n.activeTexture(n.TEXTURE0+e)),me(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),me(n,()=>n.uniform1i(e,s))}function rg(n,t,e){me(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),me(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function $v(n,t){me(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),me(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function Xc(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function qW(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function or(n,t,e){const s=me(n,()=>t());if(null==s)throw new Error(e);return s}function ca(n,t=2){return G(n.slice(0,n.length-t))}function ha(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function Zc(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[ca(n),...ha(n)]),t}function Yc(n){return n%2==0}function Qc(n,t){if(Xe(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n[n.length-1],s=t[t.length-1];if(e===s||Yc(e)&&Yc(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&Yc(n[0])&&Yc(t[0])}let Jc,eh;function ys(n,t){return null!=n.getExtension(t)}function Ev(n){try{if(null!=Ts(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function og(n){const t=ng(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),a}function al(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&S("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const Se=M();function Nn(){let n,t,e,s,r,o,a,i,l,u;return 2===M().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",o="outputColor",a="out vec4 outputColor;",i=M().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",a="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function Io(n,t,e="index"){const s=$e(t);return s.map((r,o)=>`int ${n[o]} = ${e} / ${r}; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r}`:`index -= ${n[o]} * ${r}`};`).join("")}function th(n,t,e="index"){const s=$e(t);return s.map((r,o)=>`int ${n[o]} = ${e} / outShapeStrides[${o}]; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * outShapeStrides[${o}]`:`index -= ${n[o]} * outShapeStrides[${o}]`};`).join("")}function ag(n){const t=$e(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Se.registerFlag("HAS_WEBGL",()=>Se.getNumber("WEBGL_VERSION")>0),Se.registerFlag("WEBGL_VERSION",()=>Ev(2)?2:Ev(1)?1:0),Se.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Se.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Se.get("WEBGL_VERSION")),Se.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Se.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Se.registerFlag("WEBGL_PACK",()=>Se.getBool("HAS_WEBGL")),Se.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_PACK_CLIP",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_PACK_REDUCE",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_LAZILY_UNPACK",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_CONV_IM2COL",()=>Se.getBool("WEBGL_PACK")),Se.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function ZW(n){if(null==Jc){const t=Ts(n);Jc=t.getParameter(t.MAX_TEXTURE_SIZE)}return Jc}(Se.getNumber("WEBGL_VERSION"))),Se.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function YW(n){if(null==eh){const t=Ts(n);eh=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,eh)}(Se.getNumber("WEBGL_VERSION"))),Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=Se.getNumber("WEBGL_VERSION");return 0===n?0:function QW(n){if(0===n)return 0;let t;const e=Ts(n);return t=ys(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:ys(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Se.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Gg()),Se.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function JW(n){if(0===n)return!1;const t=Ts(n);if(1===n){if(!ys(t,"OES_texture_float"))return!1}else if(!ys(t,"EXT_color_buffer_float"))return!1;return og(t)}(Se.getNumber("WEBGL_VERSION"))),Se.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Se.getBool("WEBGL_FORCE_F16_TEXTURES")&&Se.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Se.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function e4(n){if(0===n)return!1;const t=Ts(n);if(1!==n){if(ys(t,"EXT_color_buffer_float"))return og(t);const s="EXT_color_buffer_half_float";if(ys(t,s)){const r=t.getExtension(s);return function t4(n,t){const e=ng(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(a),i}(t,r)}return!1}return!(!ys(t,"OES_texture_float")||!ys(t,"WEBGL_color_buffer_float"))&&og(t)}(Se.getNumber("WEBGL_VERSION"))),Se.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function n4(n){return 2===n&&null!=Ts(n).fenceSync}(Se.getNumber("WEBGL_VERSION"))),Se.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Se.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Se.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),Se.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Gg()?1:-1,n=>{if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),Se.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),Se.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),Se.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),Se.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),Se.registerFlag("WEBGL_EXP_CONV",()=>!1),Se.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Se.getBool("IS_TEST")),Se.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),Se.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),Se.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),Se.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const Av="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Rv}=Ne;function o4(n,t,e){const s=[];if(n.forEach(p=>{const f=G(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:g}=lg(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(g.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),o=n.map(p=>function a4(n,t,e=!1,s){let r="";r+=e?Dv(n,s):da(n,s);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function M4(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=n.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=Rv(n.shapeInfo.logicalShape,t.logicalShape),l=ht(a),u=a-o;let c;const h=["x","y","z","w","u","v"];c=0===o?"":a<2&&i.length>=1?"coords = 0;":i.map(x=>`coords.${h[x+u]} = 0;`).join("\n");let d="";d=a<2&&o>0?"coords":n.shapeInfo.logicalShape.map((x,b)=>`coords.${h[b+u]}`).join(", ");let p="return outputValue;";const g=1===G(n.shapeInfo.logicalShape),y=1===G(t.logicalShape);if(1!==o||g||y){if(g&&!y)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const x=o-2,b=o-1;i.indexOf(x)>-1&&i.indexOf(b)>-1?p="return vec4(outputValue.x);":i.indexOf(x)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(b)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function B4(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&Xe(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=ht(l),c=Rv(n.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${p[g+h]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((g,m)=>`coords.${p[m+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),a=t.texShape,i=Nn(),l=function u4(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function d4(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${p4}\n    ${f4}\n    ${m4}\n  `}(i);return t.isPacked?(u=function i4(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function y4(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function C4(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Xe(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function b4(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),o=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function v4(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),o=r*Math.ceil(n[n.length-2]/2);let a=o,i="",l="b, r, c";for(let u=2;u<n.length-1;u++)a*=n[n.length-u-1],i=`\n      int b${u} = index / ${a};\n      index -= b${u} * ${a};\n    `+i,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,a,e.enableShapeUniforms),c=function h4(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(i)):(u=function l4(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function x4(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function k4(n,t,e){return Xe(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function w4(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${th(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=Io(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function I4(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${th(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Io(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function S4(n,t){const e=Io(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function N4(n,t){const e=Io(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,a,e.enableShapeUniforms),c=function c4(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),e.packedInputs&&(h+=g4),[h,l,c,r,u,o,e.userCode].join("\n")}function da(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function $4(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,o]=n.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=So(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[i,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function E4(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${pa(n)}\n      }\n    `;const r=n.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=So(e);return 1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function R4(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape;if(null!=o&&Xe(e,o))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:a,keptDims:i}=lr(e);if(a.length<e.length){const p=["row","col"];return`\n      ${da(fa(n,a),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${ma(p,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${pa(n)}\n      }\n    `;const u=o[0],c=o[1],h=So(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function F4(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[1]*e[2],a=e[2],{newShape:i,keptDims:l}=lr(e);if(i.length<e.length){const m=["row","col","depth"];return`\n        ${da(fa(n,i),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${ma(m,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${a}, 1)));\n        ${pa(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=So(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${a} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function L4(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,{newShape:l,keptDims:u}=lr(e);if(l.length<e.length){const b=["row","col","depth","depth2"];return`\n      ${da(fa(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${ma(b,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${o}, 1)));\n        ${pa(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=So(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function P4(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],o=t[3]*r,a=t[2]*o,i=t[1]*a,{newShape:l,keptDims:u}=lr(t);if(l.length<t.length){const m=["row","col","depth","depth2","depth3"];return`\n      ${da(fa(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${ma(m,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${a}, ${o}, ${r})) +\n          depth3;\n        ${pa(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${So(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function z4(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=lr(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${da(fa(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${ma(y,o)});\n      }\n    `}const a=t[5],i=t[4]*a,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${pa(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${a} + depth4 + ${So(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function Dv(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function T4(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${Nn().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function _4(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=Nn();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function A4(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=o[0],i=o[1],l=Nn();if(null!=o&&Xe(e,o))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function D4(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const p=[1,2],g=["b","row","col"];return`\n        ${Dv(fa(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${ma(g,p)});\n        }\n      `}const i=Nn();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=a[0],u=a[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function O4(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Nn();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const o=n.shapeInfo.logicalShape,a=o.length,i=n.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(o[a-1]/2);let d=h*Math.ceil(o[a-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<a-1;g++)p=`int b${g}, `+p,d*=o[a-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const p4="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",f4="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",m4="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",g4="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function So(n){return`offset${n}`}function pa(n){const t=n.name,e=G(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function ht(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function lg(n,t,e){const{newShape:s,keptDims:r}=lr(t),o=t.length,a=n&&3===o&&1===t[0],i=a?t.slice(1):s,l=!n&&o>1&&!Xe(t,e)&&s.length<o||a;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function fa(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function ma(n,t){return t.map(e=>n[e]).join(", ")}function Ov(n,t,e){const s=[],r=[];let o,a,i,l=null,u=null;u=n.getUniformLocation(e,"NAN",!1),1===M().getNumber("WEBGL_VERSION")&&(l=n.getUniformLocation(e,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const d={name:h,uniform:n.getUniformLocation(e,h,c),offset:n.getUniformLocation(e,`offset${h}`,c)};t.enableShapeUniforms&&(d.shape=n.getUniformLocation(e,`${h}Shape`,c),d.texShape=n.getUniformLocation(e,`${h}TexShape`,c)),s.push(d)}if(t.enableShapeUniforms&&(o=n.getUniformLocation(e,"outShape",c),i=n.getUniformLocation(e,"outShapeStrides",c),a=n.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(n.getUniformLocation(e,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:o,outShapeStridesLocation:i,outTexShapeLocation:a}}function Lv(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,o=t[s],a=o.shape;if(!Xe(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&o.isUniform)return;const i=e.texShape,l=o.isUniform?null:o.texData.texShape;if(!Xe(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function wn(n){return M().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class G4{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Hs.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=Nn();this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?th(["r","c","d"],t):Io(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class H4{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Hs.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=Nn();this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?th(["r","c","d"],t):Io(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class j4{constructor(t){this.variableNames=["A"],this.outTexUsage=Ht.DOWNLOAD;const e=Nn();this.outputShape=t,this.userCode=`\n      ${Av}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class K4{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ht.DOWNLOAD;const e=Nn();this.outputShape=t,this.userCode=`\n      ${Av}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const q4={R:0,G:1,B:2,A:3};class Pv{constructor(t,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=Nn();this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length);let o="result";e&&(o="floor(result * 255. + 0.5)");let a="";for(let i=0;i<s.length;i++)a+=`\n          if(offset == ${i}) {\n            result = values[${q4[s[i]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ag(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class X4{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=Nn();this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length);let r="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let i=0;i<=1;i++){const l=2*a+i;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${i};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ag(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${o};\n        }\n    `}}function il(n,t,e,s,r,o){!function WW(n,t){const e=M().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const a=function VW(n){return or(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),i=n.TEXTURE_2D;return me(n,()=>n.bindTexture(i,a)),me(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),me(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),me(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),me(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===M().getNumber("WEBGL_VERSION")?me(n,()=>n.texImage2D(i,0,s,t,e,0,r,o,null)):me(n,()=>n.texStorage2D(i,1,s,t,e)),me(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:a,texShape:[e,t]}}function zv(n){return n.internalFormatFloat}function Mv(n){return n.internalFormatHalfFloat}function Bv(n){return n.downloadTextureFormat}function Vv(n){return n.internalFormatPackedFloat}function Wv(n){return n.internalFormatPackedHalfFloat}class ug{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=M().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,function NW(n,t){Mr[n]=t}(e,t)):this.gl=Ts(e),t=this.gl,2===M().getNumber("WEBGL_VERSION")){const o=t;this.createVertexArray=()=>me(o,()=>o.createVertexArray()),this.bindVertexArray=a=>me(o,()=>o.bindVertexArray(a)),this.deleteVertexArray=a=>me(o,()=>o.deleteVertexArray(a)),this.getVertexArray=()=>me(o,()=>o.getParameter(o.VERTEX_ARRAY_BINDING))}else if(null!=t){const o=t.getExtension("OES_vertex_array_object");if(null==o)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>me(t,()=>o.createVertexArrayOES()),this.bindVertexArray=a=>me(t,()=>o.bindVertexArrayOES(a)),this.deleteVertexArray=a=>me(t,()=>o.deleteVertexArrayOES(a)),this.getVertexArray=()=>me(t,()=>t.getParameter(o.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===M().getNumber("WEBGL_VERSION")){const a="OES_texture_half_float";if(this.textureFloatExtension=qc(this.gl,"OES_texture_float"),ys(this.gl,a))this.textureHalfFloatExtension=qc(this.gl,a);else if(M().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),ys(this.gl,r))this.colorBufferHalfFloatExtension=qc(this.gl,r);else if(M().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",ys(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!ys(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function Y4(n){return function MW(n,t){const e=or(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return me(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),me(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function Q4(n){return function BW(n,t){const e=or(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return me(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),me(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function UW(n){return or(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=ng(this.gl,this.textureHalfFloatExtension)}get debug(){return M().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;me(t,()=>t.finish()),me(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),me(t,()=>t.deleteFramebuffer(this.framebuffer)),me(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),me(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),me(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function J4(n,t,e,s){const[r,o]=ol(t,e);return il(n,r,o,zv(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function eU(n,t,e,s){const[r,o]=ol(t,e);return il(n,r,o,Mv(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function tU(n,t,e,s){const[r,o]=ol(t,e);return il(n,r,o,Bv(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function aU(n,t,e){me(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===M().getNumber("WEBGL_VERSION")?me(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):me(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===M().getNumber("WEBGL_VERSION")?me(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):me(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),me(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function oU(n,t,e,s,r,o){let a,i,l;me(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(a=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(a=new Float32Array(e*s*4),i=n.FLOAT,l=o.internalFormatPackedFloat),a.set(r),2===M().getNumber("WEBGL_VERSION")?me(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,s,n.RGBA,i,a)):me(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,a)),me(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function sU(n,t,e,s){const[r,o]=ua(t,e);return il(n,r,o,Wv(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function nU(n,t,e,s){const[r,o]=ua(t,e);return il(n,r,o,Vv(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&($v(this.gl,this.framebuffer),this.outputTexture=null),me(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function uU(n,t,e,s){const[r,o]=ol(t,e),i=new Uint8Array(function TW(n,t){return n*t}(t*e,4));return me(n,()=>n.readPixels(0,0,r,o,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,o,a){return function cU(n,t,e,s,r,o,a,i){const l=n,u=new Float32Array(function $W(n,t){const[e,s]=ua(n,t);return e*s*4}(o,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,o,a)}downloadFloat32MatrixFromBuffer(t,e){return function lU(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function iU(n,t,e,s){const r=n.createBuffer();me(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return me(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),me(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),me(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(M().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const a=r.clientWaitSync(o,0,0);return a===r.ALREADY_SIGNALED||a===r.CONDITION_SATISFIED},e=o}else M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function hU(n,t,e){const s=new Float32Array(t*e*4);return me(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function Z4(n){const t=Nn();return function FW(n,t){const e=or(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(me(n,()=>n.shaderSource(e,t)),me(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const s=function PW(n){return or(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);me(e,()=>e.attachShader(s,this.vertexShader)),me(e,()=>e.attachShader(s,t)),function zW(n,t){if(me(n,()=>n.linkProgram(t)),!M().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,s);const r=Object.assign(s,{vao:this.createVertexArray()});return this.debug&&sg(e,r),r}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;me(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function rU(n,t,e){me(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),Tv(n,t,"clipSpacePos",e,3,20,0)&&Tv(n,t,"uv",e,2,20,12)}(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(me(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&sg(this.gl,this.program),me(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function HW(n,t,e){return or(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function jW(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),me(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),KW(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,o]=ua(e,s);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&sg(this.gl,this.program),Xc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}me(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),me(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=qc(this.gl,2===M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return(0,B.Z)(function*(){return yield vg(()=>e.disposed||e.isQueryAvailable(t,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function dU(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in M().platform&&(s=M().platform.setTimeoutCustom.bind(M().platform)),vg(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),rg(this.gl,t,this.framebuffer),this.debug&&Xc(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(rg(this.gl,this.outputTexture,this.framebuffer),this.debug&&Xc(this.gl)):$v(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;rg(r,t,this.framebuffer),this.debug&&Xc(r),this.outputTexture=t,me(r,()=>r.viewport(0,0,e,s)),me(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),me(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:pU,bincountImpl:Uv,bincountReduceImpl:fU,castImpl:mU,ceilImpl:gU,concatImpl:yU,equalImpl:xU,expImpl:bU,expm1Impl:wU,floorImpl:vU,gatherNdImpl:IU,gatherV2Impl:SU,greaterImpl:NU,greaterEqualImpl:CU,lessImpl:kU,lessEqualImpl:TU,linSpaceImpl:$U,logImpl:_U,maxImpl:EU,maximumImpl:AU,minimumImpl:RU,multiplyImpl:DU,negImpl:FU,notEqualImpl:OU,prodImpl:LU,raggedGatherImpl:PU,raggedRangeImpl:zU,raggedTensorToTensorImpl:MU,rangeImpl:BU,rsqrtImpl:VU,scatterImpl:WU,sigmoidImpl:UU,simpleAbsImpl:Gv,sliceImpl:GU,sparseFillEmptyRowsImpl:HU,sparseReshapeImpl:jU,sparseSegmentReductionImpl:Hv,sqrtImpl:KU,staticRegexReplaceImpl:qU,stridedSliceImpl:XU,stringNGramsImpl:ZU,stringSplitImpl:YU,stringToHashBucketFastImpl:QU,subImpl:JU,tileImpl:eG,topKImpl:tG,transposeImpl:cg,uniqueImpl:nG}=Oe;function jv(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function Cn(n,t){return 1===t?[n]:jv(n,t)}class rG{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=wn(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Cn("rc",this.rank),s=ht(this.rank),r=this.getOutOfBoundsCondition(e),o=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let a=2;a<this.rank;a++)o=`${t[t.length-1-a]},`+o;e.push(o)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${t[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class Kv{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length);let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function oG(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function r4(n,t,e="index"){const r=function s4(n,t){const e=n.length,s=n.map(o=>`${t}[${o}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let o=e-3;o>=0;--o)r[o]=`(${r[o+1]} * ${s[o+1]})`;return r}(n.map((o,a)=>a),t);return r.map((o,a)=>`int ${n[a]} = ${e} / ${r[a]}; ${a===r.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * ${r[a]}`:`index -= ${n[a]} * ${r[a]}`};`).join("")}(["r","c","d"],"inputShape"):Io(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ag(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class aG{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,s){const r=Xv(e,s),o=Zv(t,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const a=qv(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const l=this.freeTextures[o].pop();return this.usedTextures[o].push(l),l}let i;return r===ct.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===ct.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===ct.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===ct.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===ct.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const o=Xv(s,r),a=Zv(e,o,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=qv(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=M().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],c=u&&u.indexOf(t);if(null==c||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function qv(n,t,e,s,r){const o=function lG(n,t){switch(n){case ct.PACKED_2X2_FLOAT32:return Vv(t);case ct.PACKED_2X2_FLOAT16:return Wv(t);case ct.UNPACKED_FLOAT32:return zv(t);case ct.UNPACKED_FLOAT16:return Mv(t);case ct.PACKED_4X1_UNSIGNED_BYTE:return Bv(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let a;if(r){const[l,u]=ua(n[0],n[1]);a=l*u}else{const[l,u]=ol(n[0],n[1]);a=l*u}const i=function iG(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,o);return a*i}function Xv(n,t){if(n===Ht.UPLOAD)return ct.PACKED_2X2_FLOAT32;if(n===Ht.RENDER||null==n)return function uG(n){return M().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?ct.PACKED_2X2_FLOAT32:ct.UNPACKED_FLOAT32:n?ct.PACKED_2X2_FLOAT16:ct.UNPACKED_FLOAT16}(t);if(n===Ht.DOWNLOAD||n===Ht.PIXELS)return ct.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function Zv(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class js{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const ts="if (isnan(x)) return x;",cG="return x;",Yv="return abs(x);",hG="return (x >= 0.0) ? x : (exp(x) - 1.0);",dG=ts+"\n  return (x < 0.0) ? 0.0 : x;\n",pG=ts+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Br="return x;",fG="return 1.0 / (1.0 + exp(-1.0 * x));",mG="return x;",gG="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",yG="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",xG="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",bG="return 1.0 / (1.0 + exp(-1.0 * x));";class Vr{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class wG{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length);const e=t.length,s=Cn("rc",e),r=ht(e),o=function sG(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),a=s.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const vG=Xp,sh={},CG=M().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let $G=(()=>{class n extends Mt{nextDataId(){return n.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!M().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof ug)s=e;else{const r=Ts(M().getNumber("WEBGL_VERSION"),e);s=new ug(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=Ts(M().getNumber("WEBGL_VERSION"));s=new ug(r),this.binaryCache=function NG(n){return n in sh||(sh[n]={}),sh[n]}(M().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new aG(this.gpgpu),this.numMBBeforeWarning=function TG(){return null==M().global.screen?1024:M().global.screen.height*M().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new zt(this,As())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,o,a,i){const l=this.makeTensorInfo(s,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[o,a]},u.texShape=[o,a];const c=Zc(s),h=new Pv(c,!1,i),d=this.runWebGLProgram(h,[l],r,[[o,a]]);return d.shape=s,u.texture=null,this.disposeIntermediateTensorInfo(l),d.dataId}write(e,s,r){if((M().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||M().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:s,dtype:r,values:e,usage:Ht.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,o,a){if(M().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:s,usage:Ht.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:o,complexTensorInfos:a,slice:i,shape:l,isPacked:u}=s;if(null!=i){let p;p=u?new Vr(l,Br):new js(l,Br);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:o}],o),g=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),g}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===o)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=Tn()),d="complex64"===o?Js(this.readSync(a.real.dataId),this.readSync(a.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=Tn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return(0,B.Z)(function*(){if(s.pendingRead.has(e)){const m=s.pendingRead.get(e);return new Promise(y=>m.push(y))}const r=s.texData.get(e),{values:o,shape:a,slice:i,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=i){let m;m=c?new Vr(a,Br):new js(a,Br);const y=s.runWebGLProgram(m,[{dataId:e,shape:a,dtype:l}],l),x=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),x}if(null!=o)return s.convertAndCacheOnCPU(e);if(M().getBool("DEBUG")&&!M().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===M().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&M().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const m=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(m.texture.texture,...Kc(a))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const m=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Js(m[0],m[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const m=G(a);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const m=s.gpgpu.gl;me(m,()=>m.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),g=s.pendingRead.get(e);return s.pendingRead.delete(e),g.forEach(m=>m(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&As().removeDataId(e,s),s.pendingDeletes--),f})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:o,shape:a,slice:i,dtype:l,isPacked:u,texture:c}=r;if("complex64"===l)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let f;f=u?new Vr(a,Br):new js(a,Br);const g=this.runWebGLProgram(f,[{dataId:e,shape:a,dtype:l}],l),m=this.readToGPU(g,s);return this.disposeIntermediateTensorInfo(g),m}if(null==c)throw null!=o?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),d=As().makeTensorFromTensorInfo(h),p=this.texData.get(h.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Be(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Be(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!RW(r))throw M().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:o}=this.texData.get(e),a=G(s);if(M().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),g=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Kc(s)).subarray(0,a);return this.disposeIntermediateTensorInfo(p),g}const i=M().getBool("WEBGL_PACK")&&!0===o,l=i?Zc(s):s,u=i?new K4(l):new j4(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,o=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=o,a=!0):this.activeTimers.push(o),this.activeTimers=o,e();const i=Qr(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=Qr(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=r,a&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(0,B.Z)(function*(){if(M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(i);u.kernelMs=function HI(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Tn(),endMs:null}}endTimer(e){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Tn(),e)}getQueryTime(e){var s=this;return(0,B.Z)(function*(){return M().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:o,usage:a,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(s,o,a,i)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=CG){return M().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&G(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){jn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return vG(e.shape,s)}packedUnaryOp(e,s,r){const o=new Vr(e.shape,s),a=this.compileAndRun(o,[e],r);return As().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=Gv(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if(M().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Yv,e.dtype);const s=new js(e.shape,Yv),r=this.compileAndRun(s,[e]);return As().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&wa(r[0])){const a=r.map(i=>hr(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:s}}makeOutput(e,s,r){return As().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new wG(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new rG(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[ca(e.shape),...ha(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},a=[ca(s),...ha(s)],i=new Kv(a,r),c=this.runWebGLProgram(i,[o],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:o,shape:a,dtype:i}=r;null!=s&&S(G(a)<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const l=Zc(a);let u;u=o?new H4(l):new G4(l);const h=[s??Kc(l)];return{dtype:i,shape:a,dataId:this.runWebGLProgram(u,[{shape:l,dtype:i,dataId:e}],i,h,!0,s).dataId}}runWebGLProgram(e,s,r,o,a=!1,i){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===Hs.DENSE){const x=i??Kc(e.outputShape);u.texShape=x.map(b=>2*b)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===G(l.shape))return u.values=cn(l.dtype,0),l;const c=[],h=s.map(x=>{if("complex64"===x.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(null==b.texture){if(!e.packedInputs&&G(x.shape)<=M().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};e.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!e.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),c.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!Qc(b.shape,x.shape)){const v=x,I=x.shape;x.shape=b.shape,x=this.packedReshape(x,I),c.push(x),b=this.texData.get(x.dataId),v.shape=I}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(l.dataId);const d={shape:l.shape,texData:u,isUniform:!1},p=function U4(n,t,e){let s="";t.concat(e).forEach(a=>{const i=null!=a.texData&&null!=a.texData.slice&&a.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!a.isUniform){const l=a.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=lg(n.packedInputs,a.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${I[0]>1}_${I[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const I=$e(c);f=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const g=a.shape.length,m=2===c.length&&Xe(a.shape,l),y=1===G(a.shape),x=Uo(a.shape,e.shape),b=!n.packedInputs&&g===e.shape.length&&Xe(l,e.texData.texShape);s+=`${g}_${b}_${u?h:""}_${c.length}_${y}_${x}_${m}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${i}`}else s+=`${a.shape}_${a.isUniform?"uniform":a.texData.texShape}_${i}`});let o=n.constructor.name;return o+="_"+s+"_"+n.userCode+`${M().getNumber("WEBGL_VERSION")}`,o}(e,h,d),f=this.getAndSaveBinary(p,()=>function V4(n,t,e,s){const r=e.map((c,h)=>{const d={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(d.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[h],shapeInfo:d}}),o=r.map(c=>c.shapeInfo),a={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=o4(r,a,t),l=function OW(n,t){const e=or(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(me(n,()=>n.shaderSource(e,t)),me(n,()=>n.compileShader(e)),M().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw kv(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(n.gl,i),u=n.createProgram(l);return M().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a},Ov(n,t,u)))}(this.gpgpu,e,h,d)),g=null!=this.activeTimers;let m;g&&(m=this.startTimer()),M().get("ENGINE_COMPILE_ONLY")||function W4(n,t,e,s,r){t.program.enableShapeUniforms||(Lv(t.inShapeInfos,e),Lv([t.outShapeInfo],[s]));const o=s.texData.texture,a=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(o.texture,a[0],a[1]):n.setOutputMatrixTexture(o.texture,a[0],a[1]),n.setProgram(t.webGLProgram),n.bindVertexArray(t.webGLProgram.vao),1===M().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<e.length;++l){const u=e[l],{uniform:c,offset:h,shape:d,texShape:p}=t.variablesLocations[l];if(d){const{uniformShape:f}=lg(t.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:n.gl.uniform1iv(d,new Int32Array(f));break;case 2:n.gl.uniform2iv(d,new Int32Array(f));break;case 3:n.gl.uniform3iv(d,new Int32Array(f));break;case 4:n.gl.uniform4iv(d,new Int32Array(f))}}if(p&&n.gl.uniform2i(p,u.texData.texShape[0],u.texData.texShape[1]),null!=c){if(u.isUniform){if(G(u.shape)<2)n.gl.uniform1f(c,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),n.gl.uniform1fv(c,f)}continue}null!=u.texData.slice&&null!=h&&n.gl.uniform1i(h,u.texData.slice.flatOffset),n.setInputMatrixTexture(u.texData.texture.texture,c,l)}}const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:n.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=$e(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}if(t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const u=t.program.customUniforms[l],c=t.customUniformLocations[l],h=r[l];if("float"===u.type)n.gl.uniform1fv(c,h);else if("vec2"===u.type)n.gl.uniform2fv(c,h);else if("vec3"===u.type)n.gl.uniform3fv(c,h);else if("vec4"===u.type)n.gl.uniform4fv(c,h);else if("int"===u.type)n.gl.uniform1iv(c,h);else if("ivec2"===u.type)n.gl.uniform2iv(c,h);else if("ivec3"===u.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==u.type)throw Error(`uniform type ${u.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}n.executeProgram()}(this.gpgpu,f,h,d,o),c.forEach(x=>this.disposeIntermediateTensorInfo(x)),g&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const y=M().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const x=Tn();x-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!M().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){const x=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),x}return l}compileAndRun(e,s,r,o,a=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,o,a)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(M().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=z(()=>{if(!M().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=M().getBool("DEBUG");M().set("DEBUG",!1);const s=this.abs(Ee(1e-8)).dataSync()[0];if(M().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:o,values:a,texture:i,usage:l,isPacked:u}=s;if(null!=i)return;const c=null!=this.activeTimers;let h;c&&(h=Tn());let d=s.texShape;if(null==d&&(d=function XW(n,t=!1){let e=M().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=M().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&M().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),t&&(e*=2,s*=2,1===(n=n.map((i,l)=>l>=n.length-2?gn(n[l]):n[l])).length&&(n=[2,n[0]])),2!==n.length&&(n=lr(n).newShape);let r=G(n),o=null;n.length<=1&&r<=e?o=[1,r]:2===n.length&&n[0]<=e&&n[1]<=e?o=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?o=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?o=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?o=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(o=[n[0],n[1]*n[2]*n[3]]);const a=null!=o&&Math.max(...o)>s&&Math.min(...o)<=(t?2:1)&&Math.min(...o)>0;if(null==o||a)if(t){const i=ca(n);let l=2,u=2;n.length&&([l,u]=ha(n)),r=i*(l/2)*(u/2),o=ph(r).map(c=>2*c)}else o=ph(r);return o}(r,u),s.texShape=d),null!=a){const p=Zc(r);let f,g=d[1],m=d[0];const y=a instanceof Uint8Array||a instanceof Uint8ClampedArray;(u||!y)&&([g,m]=ua(d[0],d[1])),f=u?new X4(p,y):new Pv(p,y);const x=y?[m,g]:d,b=this.makeTensorInfo(x,o),v=this.texData.get(b.dataId);v.usage=y?Ht.PIXELS:Ht.UPLOAD,v.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),g,m,a);const k=this.runWebGLProgram(f,[b],o,[[m,g]],!0),T=this.texData.get(k.dataId);s.texShape=T.texShape,s.isPacked=T.isPacked,s.usage=T.usage,M().get("ENGINE_COMPILE_ONLY")?this.disposeData(k.dataId):(s.texture=T.texture,s.values=null,this.texData.delete(k.dataId)),this.disposeIntermediateTensorInfo(b),c&&(this.uploadWaitMs+=Tn()-h)}else{const p=this.acquireTexture(d,l,o,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:o}=r;return null!=s&&(r.values=function _G(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,o)),r.values}acquireTexture(e,s,r,o){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const a=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,o)}computeBytes(e,s){return e[0]*e[1]*ml(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return(0,B.Z)(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const o=new Promise(a=>{try{e.checkCompletion_(r),a(!0)}catch(i){throw i}});s.push(o)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return(0,B.Z)(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield Hx(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(kv(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:s,customUniformLocations:r,infLoc:o,nanLoc:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=Ov(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=s,e.customUniformLocations=r,e.infLoc=o,e.nanLoc=a,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:o,height:a,width:i,channels:l}=e,u=As().backend;if(!u.gpgpu.gl.isTexture(o))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=u.writeTexture(o,s,r,a,i,l);return As().makeTensorFromDataId(c,s,r,u)}}return n.nextDataId=0,n})();Hg()&&cy("webgl",()=>new $G,2);const hg="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class ga{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Pe(e,s),this.enableShapeUniforms=wn(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const No="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class ll{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Pe(e,s);const o=this.outputShape.length;this.enableShapeUniforms=wn(o);let a="";if(r)if(0===o||1===G(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${ht(o)} coords = getOutputCoords();\n        `,1===o)a+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=Cn("coords",o);a+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function Vn(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const RG={kernelName:Va,backendName:"webgl",kernelFunc:Vn};function Wr(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.makeTensorInfo(s.shape,"complex64"),a=e.texData.get(o.dataId),i=Vn({inputs:{x:s},backend:e}),l=Vn({inputs:{x:r},backend:e});return a.complexTensorInfos={real:i,imag:l},o}const DG={kernelName:Th,backendName:"webgl",kernelFunc:Wr},Qv="return (a < 0.) ? b * a : a;",Jv="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",OG={kernelName:Pl,backendName:"webgl",kernelFunc:function FG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s,a=e.makeTensorInfo([],"float32",cr(o,"float32")),i=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ll(Jv,r.shape,a.shape):new ga(Qv,r.shape,a.shape),l=e.runWebGLProgram(i,[r,a],"float32");return e.disposeIntermediateTensorInfo(a),l}},eI="return (a < 0.) ? b * a : a;",tI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",PG={kernelName:nu,backendName:"webgl",kernelFunc:function LG(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,o=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ll(tI,s.shape,r.shape):new ga(eI,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],"float32")}},ya="if (isnan(x)) return x;";function et({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:a}=r,i=o,l=s||a.dtype;if(i.shouldExecuteOnCPU([a])&&null!=e){const h=i.texData.get(a.dataId),d=e(h.values,l);return i.makeTensorInfo(a.shape,l,d)}let c;return c=M().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Vr(a.shape,t):new js(a.shape,n),i.runWebGLProgram(c,[a],l)}}function fn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:a,backend:i})=>{const{a:l,b:u}=a,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[m,y]=[[f.complexTensorInfos.real,g.complexTensorInfos.real],[f.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(b=>{const[v,I]=b,C={dataId:v.dataId,dtype:v.dtype,shape:l.shape},k={dataId:I.dataId,dtype:I.dtype,shape:u.shape},T=new ga(n,l.shape,u.shape);return c.runWebGLProgram(T,[C,k],On(v.dtype,I.dtype))}),x=Wr({inputs:{real:m,imag:y},backend:c});return c.disposeIntermediateTensorInfo(m),c.disposeIntermediateTensorInfo(y),x}const h=o||On(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,m="string"===l.dtype?er(f):f,y="string"===l.dtype?er(g):g,[x,b]=r(l.shape,u.shape,m,y,h),v=c.makeTensorInfo(b,h);return c.texData.get(v.dataId).values=x,v}let p;return p=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new ll(t,l.shape,u.shape,e):new ga(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function ul(n,t=!1){if("linear"===n)return t?mG:cG;if("relu"===n)return t?yG:dG;if("elu"===n)return t?gG:hG;if("relu6"===n)return t?xG:pG;if("prelu"===n)return t?tI:eI;if("leakyrelu"===n)return t?Jv:Qv;if("sigmoid"===n)return t?bG:fG;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class nI{constructor(t,e,s,r=!1,o=!1,a=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=wn(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",y="";i&&(m=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const x=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",v="rc.x";t[0]<e[0]?b=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(v=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${v};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${g[0]});\n          result += (${f[1]} * ${g[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}const sI={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class rI{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Pe(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const oI="return a * b;";function dg(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=On(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new rI(sI.REAL,s.shape,r.shape),c=new rI(sI.IMAG,s.shape,r.shape),h=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=Wr({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=DU(s.shape,r.shape,i.values,l.values,o),h=e.makeTensorInfo(c,o);return e.texData.get(h.dataId).values=u,h}let a;return a=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ll(oI,s.shape,r.shape):new ga(oI,s.shape,r.shape),e.runWebGLProgram(a,[s,r],o)}const zG={kernelName:Za,backendName:"webgl",kernelFunc:dg};function fe(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=e,i=G(r.shape),l=Ig(o,i),u=G(l);S(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=a.texData.get(r.dataId);return!c.isPacked||Qc(r.shape,l)||null!==c.texture&&Qc(c.shape,l)?(a.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function MG(n,t,e){const s=[ca(n.shape),...ha(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},o=[ca(t),...ha(t)],a=new Kv(o,s),u=e.runWebGLProgram(a,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,a)}const BG={kernelName:ru,backendName:"webgl",kernelFunc:fe};class aI{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${_o(h)?h.toPrecision(2):h}, ones);`}let c="";o%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class VG{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Co(n,t,e,s){const r=function WG(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=tc(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let o=n;for(let a=0;a<r.length;a++){const{inSize:i,windowSize:l,outSize:u}=r[a];let c,h;c="mean"===e?0===a?new aI({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new aI({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new VG({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),h=o,o=s.runWebGLProgram(c,[o],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return o}class UG{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[e[a]];this.outputShape=s,this.rank=s.length;const r=ht(this.rank),o=function GG(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class HG{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=ht(this.rank),o=jv("rc",this.rank),a=new Array(this.rank);for(let c=0;c<e.length;c++)a[e[c]]=o[c];const i=`vec2(${a.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function rh(n,t,e){const s=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new HG(n.shape,t):new UG(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function oh(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;return function jG(n,t,e,s){const o=n.shape.length,a=Ge(t,n.shape);let i=a;const l=$t(i,o),u=null!=l;let c=n;u&&(c=rh(n,l,s),i=Wt(i.length,o)),dn("sum",i,o);const[h,d]=ln(c.shape,i);let p=h;e&&(p=Vt(h,a));const f=G(d),y=fe({inputs:{x:c},attrs:{shape:[G(n.shape)/f,f]},backend:s}),b=Co(y,Fd(n.dtype),"sum",s),v=fe({inputs:{x:b},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(c),v}(r,o,a,e)}const KG={kernelName:cu,backendName:"webgl",kernelFunc:oh};function kn(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:o}=s,a=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[o[c]];let u;if(a.shouldExecuteOnCPU([r])){const h=a.texData.get(r.dataId).values,d=cg(h,r.shape,r.dtype,o,l);u=a.makeTensorInfo(l,r.dtype),a.texData.get(u.dataId).values=d}else u=rh(r,o,a);return u}const qG={kernelName:Fo,backendName:"webgl",kernelFunc:kn},iI=1e3;function ah({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],g=n.shape.slice(0,-2),m=t.shape.slice(0,-2),y=G(g),x=G(m),v=Pe(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);S(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const I=e?[y,h,p]:[y,p,h],C=s?[x,f,d]:[x,d,f],k=fe({inputs:{x:n},backend:r,attrs:{shape:I}}),T=fe({inputs:{x:t},backend:r,attrs:{shape:C}}),E=[k,T],R=Math.max(y,x),L=e?k.shape[1]:k.shape[2],V=null!=o,U=null!=a,H="leakyrelu"===l,j=null!=l?ul(l,!0):null;let Z;if((1===p||1===f)&&L>iI&&!1===(V||U||H||null!=j)){let Y=k,oe=T;e&&(Y=kn({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),E.push(Y)),s&&(oe=kn({inputs:{x:T},backend:r,attrs:{perm:[0,2,1]}}),E.push(oe));const ce=1===f;let ue=Y;1!==f&&(ue=fe({inputs:{x:Y},backend:r,attrs:{shape:[R,L,1]}}),E.push(ue));const ye=1===f?2:1;let de=oe;ce&&(de=fe({inputs:{x:oe},backend:r,attrs:{shape:[R,1,L]}}),E.push(de));const be=dg({inputs:{a:ue,b:de},backend:r});Z=oh({inputs:{x:be},backend:r,attrs:{axis:ye,keepDims:!0}}),E.push(be)}else{const Y=On(n.dtype,t.dtype),oe=new nI(I,C,[R,p,f],e,s,V,j,U,H),ie=[k,T];if(null!=o&&ie.push(o),U&&ie.push(a),H){const ce=r.makeTensorInfo([],"float32",cr(i,"float32"));ie.push(ce),E.push(ce)}Z=r.runWebGLProgram(oe,ie,Y)}const K=fe({inputs:{x:Z},backend:r,attrs:{shape:v}});E.push(Z);for(const Y of E)r.disposeIntermediateTensorInfo(Y);return K}const ZG={kernelName:xu,backendName:"webgl",kernelFunc:function XG(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return ah({a:r,b:o,transposeA:l,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},lI="return abs(x);",QG={kernelName:gl,backendName:"webgl",kernelFunc:function YG(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),a=Gv(o.values);return e.makeTensorInfo(s.shape,s.dtype,a)}let r;return r=M().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Vr(s.shape,lI):new js(s.shape,lI),e.runWebGLProgram(r,[s],s.dtype)}},eH=et({opSnippet:ts+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),tH={kernelName:va,backendName:"webgl",kernelFunc:eH},sH=et({opSnippet:ts+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),rH={kernelName:Ia,backendName:"webgl",kernelFunc:sH},uI="return a + b;",oH=fn({opSnippet:uI,packedOpSnippet:uI,supportsComplex:!0,cpuKernelImpl:pU}),aH={kernelName:Do,backendName:"webgl",kernelFunc:oH};class iH{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class lH{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const uH={kernelName:yl,backendName:"webgl",kernelFunc:function ih(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return Vn({inputs:{x:s[0]},backend:e});if(s.length>M().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=ih({inputs:s.slice(0,l),backend:e}),c=ih({inputs:s.slice(l),backend:e});return ih({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>On(l,u)),o=s.map(l=>l.shape),i=M().getBool("WEBGL_PACK")?new lH(s[0].shape,o):new iH(s[0].shape,o);return e.runWebGLProgram(i,s,r)}},hH={kernelName:"All",backendName:"webgl",kernelFunc:function cH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=$t(u,i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Wt(u.length,i)),dn("all",u,i);const[d,p]=ln(h.shape,u),g=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,G(p)]}}),m=Co(g,g.dtype,"all",e);let y;return y=fe(a?{inputs:{x:m},backend:e,attrs:{shape:Vt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},pH={kernelName:"Any",backendName:"webgl",kernelFunc:function dH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=$t(u,i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Wt(u.length,i)),dn("any",u,i);const[d,p]=ln(h.shape,u),g=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,G(p)]}}),m=Co(g,g.dtype,"any",e);let y;return y=fe(a?{inputs:{x:m},backend:e,attrs:{shape:Vt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}};class fH{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:a}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class mH{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,S(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=ht(l),c=Cn("coords",l);let h,d;if(1===a){d=l+1;const T=ht(d);h=`\n        ${T} sourceLocR = ${T}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${T} sourceLocG = ${T}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${T} sourceLocA = ${T}(${c.join()}, 0);\n        --${c[l-1]};\n        ${T} sourceLocB = ${T}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(T=>"int "+T),m=Cn("sourceLocR",d-1).concat("inIdx.r"),y=Cn("sourceLocG",d-1).concat("inIdx.g"),x=Cn("sourceLocB",d-1).concat("inIdx.b"),b=Cn("sourceLocA",d-1).concat("inIdx.a"),v="max"===s?"greaterThan":"lessThan",I=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,C=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${C};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${I}\n          vec4 candidate = ${C};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function cI(n,t,e,s=null){let r=t.shape[0],o=t.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const a=tc(o),i={windowSize:a,inSize:o,batchSize:r,outSize:Math.ceil(o/a)},l=new fH(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=cI(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function hI(n,t,e,s=null){const r=null!=s?s.shape:t.shape,a=tc(r[r.length-1]),i=new mH(r,a,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=hI(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function dI(n,t,e,s){const r=[e];if(dn("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!M().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],a=n.texData.get(t.dataId);let l=t;null!==a&&a.isPacked&&(l=n.unpackTensor(t),o.push(l));const[u,c]=ln(l.shape,r),h=G(c),d=fe({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});o.push(d);const p=cI(n,d,s);o.push(p);const f=fe({inputs:{x:p},backend:n,attrs:{shape:u}});return o.forEach(g=>n.disposeIntermediateTensorInfo(g)),f}return hI(n,t,s)}const yH={kernelName:xl,backendName:"webgl",kernelFunc:function gH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Ge(o,r.shape);const i=$t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=kn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Wt(a.length,l.shape.length)),dn("argMax",[a[0]],l.shape.length);const c=dI(e,l,a[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},bH={kernelName:bl,backendName:"webgl",kernelFunc:function xH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Ge(o,r.shape);const i=$t(a,r.shape.length);let l=r;const u=[];null!=i&&(l=kn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=Wt(a.length,l.shape.length)),dn("argMin",[a[0]],l.shape.length);const c=dI(e,l,a[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},vH=et({opSnippet:ts+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),IH={kernelName:Sa,backendName:"webgl",kernelFunc:vH},NH=et({opSnippet:ts+"return log(x + sqrt(x * x + 1.0));"}),CH={kernelName:Na,backendName:"webgl",kernelFunc:NH},TH=et({opSnippet:ts+"\n  return atan(x);\n"}),$H={kernelName:Ca,backendName:"webgl",kernelFunc:TH},AH=fn({opSnippet:hg+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+No+"\n  return result;\n"}),RH={kernelName:Ta,backendName:"webgl",kernelFunc:AH},FH=et({opSnippet:ts+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),OH={kernelName:ka,backendName:"webgl",kernelFunc:FH};class cl{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let x="0.0";if(g||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let v=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(v="avgValue / max(count, 1.0)");const I=4*Math.floor(a/4),C=a%4,k=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${I}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${I};\n          if (${1===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${v});\n      }\n    `}}class pg{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,g=t.effectiveFilterWidth,m=t.padInfo.front,y=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let v="0.0";if(b||(v="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${m}, ${y}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${g};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${g} +\n                      wR * ${g} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let C=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(C="avgValue / max(count, 1.0)");const k=4*Math.floor(a/4),T=a%4,E=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${m}, ${y}, ${x});\n      const float initializationValue = ${v};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${v});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${E}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${E}\n            } else if (${2===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${E}\n            } else if (${3===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${E}\n            }\n          }\n        }\n        setOutput(${C});\n      }\n    `}}const PH={kernelName:wl,backendName:"webgl",kernelFunc:function LH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;al(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;S(hn(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=is(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))return Vn({inputs:{x:r},backend:e});const h=new cl(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},MH={kernelName:vl,backendName:"webgl",kernelFunc:function zH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s,h=Zs(r.shape,o,a,[1,1,1],i,l,u),d=new pg(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class BH{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class VH{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const UH={kernelName:Sh,backendName:"webgl",kernelFunc:function WH(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Zs(a.shape,i,l,[1,1,1],u,c),p=new VH(d);return e.runWebGLProgram(p,[r],a.dtype)}},HH={kernelName:Ih,backendName:"webgl",kernelFunc:function GH(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;al([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=is(a.shape,i,l,1,u),h=new BH(c);return e.runWebGLProgram(h,[r],a.dtype)}},KH={kernelName:Il,backendName:"webgl",kernelFunc:function jH(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;return ah({a:r,b:o,transposeA:a,transposeB:i,backend:e})}};class qH{constructor(t,e,s,r,o,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Pe(t,e),Pe(t,s);let i="0.0";null!=r&&(Pe(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=o&&(Pe(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class XH{constructor(t,e,s,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Pe(t,e),Pe(t,s);let i="vec4(0.0)";null!=r&&(Pe(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=o&&(Pe(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const ZH={kernelName:Fl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:o,offset:a,scale:i}=n;S(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==a||r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,o];let c=null;null!=a&&(c=a.shape,u.push(a));let h=null;null!=i&&(h=i.shape,u.push(i));const d=M().getBool("WEBGL_PACK_NORMALIZATION")?new XH(s.shape,r.shape,o.shape,c,h,l):new qH(s.shape,r.shape,o.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class YH{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=ht(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function QH(n){if(1===n)return"sourceLoc";if(n<=6)return fg.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((a,i)=>`sourceLoc.${fg[i]} = start[${i}] + coords.${fg[i]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const fg=["x","y","z","w","u","v"];class JH{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=ht(this.rank),s=Cn("coords",this.rank),r=Cn("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${o})`,i=`\n      result.x = ${a};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}}function xa(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s,[i,l]=Au(r,o,a);if(hp(r,i,l),0===G(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=GU(h.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=pp(r.shape,i,l);if(u||!c){const h=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new JH(l):new YH(l);return e.runWebGLProgram(h,[r],r.dtype,[i])}return e.uploadToGPU(r.dataId),function ej(n,t,e,s){const r=s.texData.get(n.dataId),o=s.makeTensorInfo(e,n.dtype),a=s.texData.get(o.dataId);Object.assign(a,r),a.refCount=1,a.shape=e,a.dtype=n.dtype;let i=fp(t,$e(n.shape));r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(a.slice.origDataId)||1;return s.dataRefCount.set(a.slice.origDataId,l+1),o}(r,i,l,e)}const tj={kernelName:uu,backendName:"webgl",kernelFunc:xa},nj={kernelName:Sl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;S(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((x,b)=>x*b),l=Pi(r.shape,o,i),u=zi(l.length,o.length),c=Mi(r.shape,o,i),h=ff(a,o.length),d=mf(c,a,o.length),p=[],f=fe({inputs:{x:r},backend:e,attrs:{shape:l}}),g=kn({inputs:{x:f},backend:e,attrs:{perm:u}}),m=fe({inputs:{x:g},backend:e,attrs:{shape:c}}),y=xa({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(g),p.push(m),p.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},rj={kernelName:Nh,backendName:"webgl",kernelFunc:function sj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,i=e.readSync(r.dataId),l=e.readSync(o.dataId),u=Uv(i,l,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},aj={kernelName:kh,backendName:"webgl",kernelFunc:function oj(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.readSync(s.dataId),a=e.readSync(r.dataId),i=Pe(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},pI=fn({opSnippet:"return float(a != b);",cpuKernelImpl:OU,dtype:"bool"}),ij={kernelName:Yl,backendName:"webgl",kernelFunc:pI};function hl(n){const{inputs:t,backend:e}=n,{input:s}=t;return Vn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const lj={kernelName:id,backendName:"webgl",kernelFunc:hl},hj={kernelName:$a,backendName:"webgl",kernelFunc:function mg(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Vn({inputs:{x:r},backend:e});const a=Qt(r.shape),i=mg({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=Wr({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=hl({inputs:{input:r},backend:e}),i=mg({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!Sg(r.dtype,o)){const a=Vn({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if(e.shouldExecuteOnCPU([r])){const a=e.texData.get(r.dataId).values,[i,l,u]=mU(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}if("int32"===o)return function cj(n,t){const e=new js(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const a=e.makeTensorInfo([],"bool",cn("bool",1)),l=pI({inputs:{a:r,b:a},backend:e});return e.disposeIntermediateTensorInfo(a),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},fI="return ceil(x);",dj=et({opSnippet:fI,packedOpSnippet:fI,cpuKernelImpl:gU}),pj={kernelName:_a,backendName:"webgl",kernelFunc:dj};class fj{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class mj{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const yj={kernelName:Ea,backendName:"webgl",kernelFunc:function gj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:o,clipValueMax:a}=s;let i;return i=M().getBool("WEBGL_PACK_CLIP")?new mj(r.shape):new fj(r.shape),e.runWebGLProgram(i,[r],r.dtype,[[o],[a]])}};class xj{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function mI(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const wj={kernelName:Nl,backendName:"webgl",kernelFunc:function bj(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),o=new xj(s.shape),a=[mI(s,r.complexTensorInfos.real),mI(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,a,a[0].dtype)}};class vj{constructor(t){this.outputShape=[],this.outputShape=Ls(t,1),this.variableNames=t.map((a,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let a=1;a<e.length;a++)e[a]=e[a-1]+t[a][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<e.length;a++)s.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${e[a-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class Ij{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ls(t,e);const s=this.outputShape,r=s.length,o=ht(r),a=Cn("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((g,m)=>`T${m}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];const u=i[e],c=i.slice(-2),h=i.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let g=1;g<l.length;g++){const m=l[g-1];d+=`\n        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {\n          return getChannel(\n            getT${g}(${lh(i,u,m)}),\n            vec2(${lh(c,u,m)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${lh(i,u,f)}),\n          vec2(${lh(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(g=>"int "+g)}) {\n        ${d}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${s[r-2]} &&\n            ${a[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function lh(n,t,e){const s=n.indexOf(t);return n.map((o,a)=>a===s?`${o} - ${e}`:o).join()}function uh(n){const{inputs:t,backend:e}=n,{input:s}=t;return Vn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const Sj={kernelName:Kh,backendName:"webgl",kernelFunc:uh};function dl(n,t,e){const s=n[0].dtype;if("complex64"===s){const p=n.map(x=>hl({inputs:{input:x},backend:e})),f=n.map(x=>uh({inputs:{input:x},backend:e})),g=dl(p,t,e),m=dl(f,t,e),y=Wr({inputs:{real:g,imag:m},backend:e});return p.forEach(x=>e.disposeIntermediateTensorInfo(x)),f.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),y}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const p=n.map(v=>{const C=[-1,G(v.shape.slice(t))];return fe({inputs:{x:v},backend:e,attrs:{shape:C}})}),f=p.map(v=>({vals:e.readSync(v.dataId),shape:v.shape})),g=Ls(p.map(v=>v.shape),1),y=yU(f,g,s,1===p[0].shape[0]),x=Ls(n.map(v=>v.shape),t),b=e.makeTensorInfo(x,s,y);return p.forEach(v=>e.disposeIntermediateTensorInfo(v)),b}const o=n.filter(p=>G(p.shape)>0),a=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&o[0].shape.length>1;if(1===o.length){const p=a?new js(n[0].shape,Br):new Vr(n[0].shape,Br);return e.runWebGLProgram(p,n,s)}const i=M().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(o.length>i){const p=[];for(let g=0;g<o.length;g+=i){const m=o.slice(g,g+i);p.push(dl(m,t,e))}const f=dl(p,t,e);for(const g of p)e.disposeIntermediateTensorInfo(g);return f}if(a){const p=new Ij(o.map(f=>f.shape),t);return e.runWebGLProgram(p,o,s)}const{tensors2D:l,outShape:u}=function Nj(n,t,e){const s=Ls(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>fe({inputs:{x:o},attrs:{shape:[-1,G(o.shape.slice(t))]},backend:e})),outShape:s}}(o,t,e),c=new vj(l.map(p=>p.shape)),h=e.runWebGLProgram(c,l,s);l.forEach(p=>e.disposeIntermediateTensorInfo(p));const d=fe({inputs:{x:h},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(h),d}function gI(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ge(r,t[0].shape)[0];hf(t.map(u=>u.shape),o);const i=Ls(t.map(u=>u.shape),o);if(0===G(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(u=>G(u.shape)>0);return 1===l.length?Vn({inputs:{x:l[0]},backend:e}):dl(l,o,e)}const Cj={kernelName:Cl,backendName:"webgl",kernelFunc:gI};class yI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const a=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4,m="channelsLast"===t.dataFormat,y=m?1:2,x=m?2:3,b=m?3:1;let v="",I="";s&&(v=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,I="result = activation(result);");const C=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${v}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===g}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===g}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===g}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${C}\n        ${I}\n        setOutput(result);\n      }\n    `}}class kj{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===g}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=wn(this.outputShape.length);const a=t.padInfo.left,i=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<c;m++)d+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let m=0;m<c;m++)d+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const y=2*m;if(d+=`\n           xC = xCCorner + ${y*l};\n           `,1===i){if(y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n               `,d+=1===l&&y>0?`\n                 xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                   } else {\n                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xC${y} = xTexelC${y};\n                 `,y+1<c)){const x=a%2==0?gn(l):l;l%2==0&&a%2==1||l%2!=0&&a%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${x};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                     xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${y+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${y+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                     } else {\n                      xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                     }\n                     `:`\n                     xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                     `):d+=1===x?`\n                     xC${y+1} = xTexelC${y};\n                     `:`\n                     xCOffset = xC + ${x};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                       xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${y+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${y+1}Ready = 1;\n                     }\n\n                     xC${y+1} = xTexelC${y+1};\n                     `}}else y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n               `,y+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(\n                   xTexelC${y}.xy, xTexelC${y+1}.xy);\n               `,y+1<c&&(d+=`\n                   xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                 `)));y<c&&(d+=`\n             wTexel = getW(r, ${y}, d1, d2);\n             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,y+1<c&&(d+=`\n               wTexel = getW(r, ${y+1}, d1, d2);\n               dotProd += xC${y+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${y+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";s&&(p=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:o?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class Tj{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=wn(this.outputShape.length);const{dataFormat:s}=e,r=Nn(),o="channelsLast"===s,a=o?1:2,i=o?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function ch(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function bI({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),c=e.inChannels,h=l[0]*l[1]*l[2],d=e.outChannels,p="channelsLast"===e.dataFormat;let m;const y=[];if(null!=o){const v=ch(o.shape,p);null!=v&&(o=fe({inputs:{x:o},backend:s,attrs:{shape:v}}),y.push(o))}if(null!=r){const v=ch(r.shape,p);null!=v&&(r=fe({inputs:{x:r},backend:s,attrs:{shape:v}}),y.push(r))}if((1!==h&&1!==d||!(c>iI))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&Xe(u.shape.slice(-3),l.slice(-3))){const I={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},C=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,S(Qc(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);const k=fe({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(k);const T=ah({a:I,b:k,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a}),E=s.texData.get(T.dataId);S(E.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=C,E.shape=e.outShape,m=Vn({inputs:{x:T},backend:s}),m.shape=e.outShape,y.push(T)}else{const v=e.outHeight*e.outWidth,I=fe({inputs:{x:n},backend:s,attrs:{shape:p?[e.batchSize,v,e.inChannels]:[e.batchSize,e.inChannels,v]}}),C=fe({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),k=ah({a:p?I:C,b:p?C:I,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a});m=fe({inputs:{x:k},backend:s,attrs:{shape:e.outShape}}),y.push(I),y.push(C),y.push(k)}for(const v of y)s.disposeIntermediateTensorInfo(v);return m}function wI({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,g=l*u*c,m=d*h,y=[e.batchSize,g,m],v=[];if(null!=o){const K=ch(o.shape,f);null!=K&&(o=fe({inputs:{x:o},backend:s,attrs:{shape:K}}),v.push(o))}if(null!=r){const K=ch(r.shape,f);null!=K&&(r=fe({inputs:{x:r},backend:s,attrs:{shape:K}}),v.push(r))}const I=fe({inputs:{x:t},backend:s,attrs:{shape:[1,g,G(t.shape)/g]}});v.push(I);const C=new Tj(y,e),T=s.runWebGLProgram(C,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),E=fe({inputs:{x:T},backend:s,attrs:{shape:y}});v.push(T),v.push(E);const R=null!=r,L=null!=o,V="leakyrelu"===i,U=i?ul(i,!0):null,H=new nI(f?E.shape:I.shape,f?I.shape:E.shape,f?[e.batchSize,m,e.outChannels]:[e.batchSize,e.outChannels,m],!0,!1,R,U,L,V),j=f?[E,I]:[I,E];if(r&&j.push(r),L&&j.push(o),V){const K=s.makeTensorInfo([],"float32",cr(a,"float32"));j.push(K),v.push(K)}const X=s.runWebGLProgram(H,j,"float32"),Z=fe({inputs:{x:X},backend:s,attrs:{shape:e.outShape}});v.push(X);for(const K of v)s.disposeIntermediateTensorInfo(K);return Z}const _j={kernelName:kl,backendName:"webgl",kernelFunc:function $j(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Ys(l),d=an(r.shape,o.shape,a,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&M().getBool("WEBGL_EXP_CONV")){const g=new xI(d);p=e.runWebGLProgram(g,[r,o],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}else if(M().getBool("WEBGL_CONV_IM2COL"))p=wI({x:r,filter:o,convInfo:d,backend:e});else{const g=new yI(d);p=e.runWebGLProgram(g,[r,o],"float32")}else p=bI({x:r,filter:o,convInfo:d,backend:e});const f=fe({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class Ej{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===t.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Aj{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,a="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${a?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${a?1:2}], coords[${a?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Rj{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Dj{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Oj={kernelName:$h,backendName:"webgl",kernelFunc:function Fj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Ys(l),d=an(r.shape,c,a,1,i,u,!1,h),p=new Ej(d);return e.runWebGLProgram(p,[r,o],"float32")}};class Lj{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=wn(this.outputShape.length);const e=t.filterHeight,s=t.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int wCPerm = ${s} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const zj={kernelName:Tl,backendName:"webgl",kernelFunc:function Pj(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Ys(u),d=an(a,o.shape,i,1,l,c,!1,h);if(M().getBool("WEBGL_PACK")&&"channelsLast"===h){const p=[[d.strideHeight,d.strideWidth]],f=new Lj(d);return e.runWebGLProgram(f,[r,o],"float32",p)}{const p=new Aj(d);return e.runWebGLProgram(p,[r,o],"float32")}}},Bj={kernelName:$l,backendName:"webgl",kernelFunc:function Mj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=Sr(r.shape,o.shape,a,l,i),c=new kj(u);return e.runWebGLProgram(c,[r,o],"float32")}},Wj={kernelName:_h,backendName:"webgl",kernelFunc:function Vj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s,u=Sr(r.shape,l,a,1,i),c=new Rj(u);return e.runWebGLProgram(c,[r,o],"float32")}},Gj={kernelName:Eh,backendName:"webgl",kernelFunc:function Uj(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s,u=Sr(l,o.shape,i,1,a),c=new Dj(u);return e.runWebGLProgram(c,[r,o],"float32")}},Kj=et({opSnippet:ya+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${No}\n  return result;\n`}),qj={kernelName:Aa,backendName:"webgl",kernelFunc:Kj},Xj=et({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Zj={kernelName:Ra,backendName:"webgl",kernelFunc:Xj};class Yj{constructor(t,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,g]=[i-1+".0",l-1+".0"],[m,y,x]=h>1?[""+(i-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[b,v,I]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${v};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${I};\n        if( in_x < 0.0 || in_x > ${g} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Qj={kernelName:Rh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new Yj(r.shape,o.shape,i,l,u);return e.runWebGLProgram(c,[r,o,a],"float32")}};var Ur=(()=>((Ur=Ur||{}).Prod="*",Ur.Sum="+",Ur))();class vI{constructor(t,e,s,r){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,i=s?this.op===Ur.Prod?"1.0":"0.0":`getX(${II(o,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let u="",c="";s?(u=r?"end != "+(l-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${l}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ht(o)} coords = getOutputCoords();\n        int end = ${SI(o,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${SI(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${II(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function II(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function SI(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function NI(n,t,e,s,r,o){const a=t.shape.length,i=$t([s],a);let l=t;null!=i&&(l=kn({inputs:{x:t},backend:e,attrs:{perm:i}}));const u=Wt(1,a)[0];if(u!==a-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=Vn({inputs:{x:l},backend:e});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const p=new vI(n,l.shape,!1,o),g=h;h=e.runWebGLProgram(p,[h],h.dtype,[[d]]),e.disposeIntermediateTensorInfo(g)}if(r){const d=new vI(n,l.shape,r,o),p=h;h=e.runWebGLProgram(d,[h],h.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=i){const p=kn({inputs:{x:h},backend:e,attrs:{perm:kr(i)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(l),p}return h}const eK={kernelName:Ah,backendName:"webgl",kernelFunc:function Jj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return NI(Ur.Prod,r,e,o,a,i)}},nK={kernelName:_l,backendName:"webgl",kernelFunc:function tK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return NI(Ur.Sum,r,e,o,a,i)}},rK={kernelName:Dh,backendName:"webgl",kernelFunc:function sK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=Uv(l,u,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(o),c=fU(l,u,a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class oK{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const iK={kernelName:Fh,backendName:"webgl",kernelFunc:function aK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s,i=r.shape[0],h=("NHWC"===a?r.shape[1]:r.shape[2])*o,d=("NHWC"===a?r.shape[2]:r.shape[3])*o,p=("NHWC"===a?r.shape[3]:r.shape[1])/(o*o),g=new oK("NHWC"===a?[i,h,d,p]:[i,p,h,d],o,a);return e.runWebGLProgram(g,[r],r.dtype)}};class CI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=wn(this.outputShape.length);const a=t.filterHeight,i=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class kI{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=wn(this.outputShape.length);const a=t.outChannels/t.inChannels,i=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)p+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let y=0;y<h;y++)p+=`\n          xTexelC${2*y} = vec4(0.0);\n          xTexelC${2*y}Ready = 0;\n          xTexelC${2*y+1} = vec4(0.0);\n          xTexelC${2*y+1}Ready = 0;\n          xC${y} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(d+1)/2;y++){const x=2*y;if(p+=`\n          xC = xCCorner + ${x*u};\n          `,1===l){if(x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n              `,p+=1===u&&x>0?`\n                xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);\n                  } else {\n                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xC${x} = xTexelC${x};\n                `,x+1<h)){const b=i%2==0?gn(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${b};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                    xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${x+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${x+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);\n                    } else {\n                     xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);\n                    }\n                    `:`\n                    xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);\n                    `):p+=1===b?`\n                    xC${x+1} = xTexelC${x};\n                    `:`\n                    xCOffset = xC + ${b};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                      xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${x+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${x+1}Ready = 1;\n                    }\n\n                    xC${x+1} = xTexelC${x+1};\n                    `}}else x<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n              `,x+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {\n                  xTexelC${x} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${x}.zw = vec2(0.0);\n                  }\n                  xTexelC${x}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {\n                  xTexelC${x+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${x+1}.zw = vec2(0.);\n                  }\n                  xTexelC${x+1}Ready = 1;\n                }\n\n                xC${x} = vec4(\n                  xTexelC${x}.xy, xTexelC${x+1}.xy);\n              `,x+1<h&&(p+=`\n                  xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);\n                `)));x<h&&(p+=`\n            wTexel = getW(r, ${x}, d1, q);\n            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);\n          `,x+1<h&&(p+=`\n              wTexel = getW(r, ${x+1}, d1, q);\n              dotProd += xC${x+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,g="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const uK={kernelName:El,backendName:"webgl",kernelFunc:function lK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),S(hn(a,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const h=an(r.shape,o.shape,a,c,i,u,!0);let d;return d=M().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new kI(h):new CI(h),e.runWebGLProgram(d,[r,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class cK{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hK{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const pK={kernelName:Oh,backendName:"webgl",kernelFunc:function dK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=an(r.shape,c,a,i,l,u,!0),d=new cK(h);return e.runWebGLProgram(d,[r,o],"float32")}},mK={kernelName:Lh,backendName:"webgl",kernelFunc:function fK(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=an(c,o.shape,a,i,l,u,!0),d=new hK(h);return e.runWebGLProgram(d,[r,o],"float32")}};class gK{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const xK={kernelName:Ph,backendName:"webgl",kernelFunc:function yK(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],o=G(s.shape),a=fe({inputs:{x:s},backend:e,attrs:{shape:[o]}}),i=new gK(o),l=e.runWebGLProgram(i,[a],a.dtype),u=fe({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}};class bK{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:a,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${a});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const vK={kernelName:Al,backendName:"webgl",kernelFunc:function wK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=vi(r.shape,o.shape,a,i,"NHWC",l);let c;const h=new bK(u);c=e.runWebGLProgram(h,[r,o],"float32");const d=fe({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},SK={kernelName:Bh,backendName:"webgl",kernelFunc:function IK(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=Cf(r,o.length);Tf(a.length,l,o);const{path:u,steps:c}=$f(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:x}=kf(p,l[m]);let b;_f(y)?b=o[m]:(b=kn({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(b));const v=b.shape.slice();for(let I=0;I<x.length;++I)v.splice(x[I],0,1);Xe(b.shape,v)||(b=fe({inputs:{x:b},backend:e,attrs:{shape:v}}),f.push(b)),null===d?d=b:(d=dg({inputs:{a:b,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=oh({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},NK=et({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),CK={kernelName:Fa,backendName:"webgl",kernelFunc:NK},$K={kernelName:Vh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,o=M().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ll("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new ga("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},_K=fn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:xU}),EK={kernelName:Rl,backendName:"webgl",kernelFunc:_K},RK=et({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${yf};\n  float a1 = ${xf};\n  float a2 = ${bf};\n  float a3 = ${wf};\n  float a4 = ${vf};\n  float a5 = ${If};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),DK={kernelName:Oa,backendName:"webgl",kernelFunc:RK},TI=et({opSnippet:ya+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:bU,dtype:"float32"}),OK={kernelName:La,backendName:"webgl",kernelFunc:TI};function gg(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:o}=t,a=o.shape.length,i=o.shape.slice();let l=r;return r<0&&(S(-(a+1)<=r,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+r+1),i.splice(l,0,1),fe({inputs:{x:o},backend:s,attrs:{shape:i}})}const LK={kernelName:Dl,backendName:"webgl",kernelFunc:gg},$I="return exp(x) - 1.0;",PK=et({opSnippet:$I,packedOpSnippet:$I,cpuKernelImpl:wU}),zK={kernelName:Pa,backendName:"webgl",kernelFunc:PK};class _I{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function EI(n,t,e){const s=e.texData.get(n.dataId),r=G(n.shape),o=n.shape[n.shape.length-1],i=fe({inputs:{x:n},backend:e,attrs:{shape:[r/o,o]}}),l=i.shape,u=new _I("real",l,t),c=new _I("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=Wr({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const g=fe({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),g}const BK={kernelName:"FFT",backendName:"webgl",kernelFunc:function MK(n){const{inputs:t,backend:e}=n,{input:s}=t;return EI(s,!1,e)}};class VK{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function pl(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||Ao(r),"string"===o){const a=Bt(o,G(s));return a.fill(r),t.makeTensorInfo(s,o,a)}{const a=new VK(s,r);return t.runWebGLProgram(a,[],o,[[r]])}}const WK={kernelName:Uh,backendName:"webgl",kernelFunc:pl};class UK{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const GK={kernelName:Gh,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new UK(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},AI="return floor(x);",HK=et({opSnippet:AI,packedOpSnippet:AI,cpuKernelImpl:vU}),jK={kernelName:za,backendName:"webgl",kernelFunc:HK},KK=fn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),qK={kernelName:Ma,backendName:"webgl",kernelFunc:KK};class XK{constructor(t){this.variableNames=["A"];const e=Nn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ZK{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Nn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const YK={kernelName:kd,backendName:"webgl",kernelFunc:function QK(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:o}=s,a=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,i=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[l,u]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,o];if(i||a){const g=M().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==ba||g!==yg)&&(yg=g,ba=document.createElement("canvas").getContext("2d",{willReadFrequently:yg})),ba.canvas.width=l,ba.canvas.height=u,ba.drawImage(r,0,0,l,u),r=ba.canvas}const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=Ht.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=M().getBool("WEBGL_PACK")?new ZK(h):new XK(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let ba,yg=M().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const eq={kernelName:bu,backendName:"webgl",kernelFunc:function JK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=Ys(c),m=an(r.shape,o.shape,l,h,u,d,!1,g);let y;const x=[],b=null!=a,v=null!=i,I="leakyrelu"===p,C=()=>{const T=[r,o],E=(R,L)=>{if("NCHW"===L&&1===R.shape.length&&1!==R.shape[0]){const V=fe({inputs:{x:R},backend:e,attrs:{shape:[R.shape[0],1,1]}});return x.push(V),V}return R};if(b&&T.push(E(a,c)),v&&T.push(E(i,c)),I){const R=e.makeTensorInfo([],"float32",cr(f,"float32"));T.push(R),x.push(R)}return T};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&M().getBool("WEBGL_EXP_CONV")){const T=p?ul(p,!0):null,E=new xI(m,b,T,v,I),R=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],L=C();y=e.runWebGLProgram(E,L,"float32",R)}else if(M().getBool("WEBGL_CONV_IM2COL"))y=wI({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const T=p?ul(p,!1):null,E=new yI(m,b,T,v,I),R=C();y=e.runWebGLProgram(E,R,"float32")}else y=bI({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const k=fe({inputs:{x:y},backend:e,attrs:{shape:m.outShape}});return x.push(y),x.forEach(T=>e.disposeIntermediateTensorInfo(T)),k}},nq={kernelName:wu,backendName:"webgl",kernelFunc:function tq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let g=c;null==g&&(g=[1,1]),S(hn(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const m=an(r.shape,o.shape,l,g,u,h,!0),y=M().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1,x=d?ul(d,y):null,b=[r,o],v=null!=a,I=null!=i,C="leakyrelu"===d;if(v&&b.push(a),I&&b.push(i),C){const R=e.makeTensorInfo([],"float32",cr(p,"float32"));b.push(R),f.push(R)}let k;k=y?new kI(m,v,x,I,C):new CI(m,v,x,I,C);const E=e.runWebGLProgram(k,b,"float32",[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]]);return f.forEach(R=>e.disposeIntermediateTensorInfo(R)),E}};class sq{constructor(t,e,s,r){this.sliceDim=t,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const o=ht(s.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const oq={kernelName:Hh,backendName:"webgl",kernelFunc:function rq(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=r.shape,a=o[o.length-1],i=G(s.shape),[l,u,c,h]=gf(s,r),d=fe({inputs:{x:r},backend:e,attrs:{shape:[u,a]}}),p=fe({inputs:{x:s},backend:e,attrs:{shape:[G(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),x=e.bufferSync(s),b=IU(y,x,s.dtype,u,a,c,h,s.shape,i);return e.makeTensorInfo(l,s.dtype,b.values)}const f=new sq(a,h,[u,c],s.shape),g=e.runWebGLProgram(f,[p,d],p.dtype),m=fe({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(g),m}};class aq{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=ht(this.rank),r=function iq(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function RI(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s,l=Ge(a,r.shape)[0];if(M().get("DEBUG")){const x=e.readSync(o.dataId),b=r.shape[l];for(let v=0;v<x.length;++v){const I=x[v];S(I<=b-1&&I>=0,()=>`GatherV2: the index value ${I} is not in [0, ${b-1}]`)}}const u=Rf(r,o,l,i),c=G(o.shape),h=[],d=fe({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=fe({inputs:{x:o},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const x=e.bufferSync(p),b=e.bufferSync(d),v=SU(b,x,f);return h.forEach(I=>e.disposeIntermediateTensorInfo(I)),e.makeTensorInfo(u.outputShape,v.dtype,v.values)}const g=new aq(d.shape,f),m=e.runWebGLProgram(g,[d,p],d.dtype);h.push(m);const y=fe({inputs:{x:m},backend:e,attrs:{shape:u.outputShape}});return h.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}const lq={kernelName:Ol,backendName:"webgl",kernelFunc:RI},uq=fn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:NU,dtype:"bool"}),cq={kernelName:Ll,backendName:"webgl",kernelFunc:uq},hq=fn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:CU}),dq={kernelName:Ba,backendName:"webgl",kernelFunc:hq},fq={kernelName:jh,backendName:"webgl",kernelFunc:function pq(n){const{inputs:t,backend:e}=n,{input:s}=t;return EI(s,!0,e)}},mq=et({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),gq={kernelName:Wa,backendName:"webgl",kernelFunc:mq},yq=et({opSnippet:"return float(isinf(x));",dtype:"bool"}),xq={kernelName:Ua,backendName:"webgl",kernelFunc:yq},bq=et({opSnippet:"return float(isnan(x));",dtype:"bool"}),wq={kernelName:Ga,backendName:"webgl",kernelFunc:bq},vq=fn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:kU,dtype:"bool"}),Iq={kernelName:zl,backendName:"webgl",kernelFunc:vq},Sq=fn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:TU,dtype:"bool"}),Nq={kernelName:Ml,backendName:"webgl",kernelFunc:Sq},kq={kernelName:qh,backendName:"webgl",kernelFunc:function Cq(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=$U(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},$q=et({opSnippet:ya+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:_U}),_q={kernelName:Ha,backendName:"webgl",kernelFunc:$q},Aq=et({opSnippet:ya+"\n  return log(1.0 + x);\n"}),Rq={kernelName:ja,backendName:"webgl",kernelFunc:Aq},Dq=fn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Fq={kernelName:Bl,backendName:"webgl",kernelFunc:Dq},Oq=et({opSnippet:"return float(!(x >= 1.0));"}),Lq={kernelName:Vl,backendName:"webgl",kernelFunc:Oq},Pq=fn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),zq={kernelName:Wl,backendName:"webgl",kernelFunc:Pq};class Mq{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class Bq{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const Vq={kernelName:Ul,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s,u=M().getBool("WEBGL_PACK_NORMALIZATION")?new Bq(r.shape,o,a,i,l):new Mq(r.shape,o,a,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class Wq{constructor(t,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Uq={kernelName:Xh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new Wq(r.shape,i,l,u,c);return e.runWebGLProgram(h,[r,o,a],r.dtype)}};function DI(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=$t(u,i),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const b=e.texData.get(p.dataId).values,v=new Array(i);for(let k=0;k<v.length;k++)v[k]=r.shape[c[k]];const I=cg(b,r.shape,r.dtype,c,v);p=e.makeTensorInfo(v,r.dtype),e.texData.get(p.dataId).values=I}else p=rh(r,c,e);u=Wt(u.length,i)}dn("max",u,i);const[f,g]=ln(p.shape,u);let y,m=f;if(a&&(m=Vt(f,l)),d){const b=e.texData.get(p.dataId).values,v=EU(b,G(g),m,r.dtype);y=e.makeTensorInfo(m,r.dtype),e.texData.get(y.dataId).values=v}else y=function Gq(n,t,e,s){const r=G(t),i=fe({inputs:{x:n},attrs:{shape:[G(n.shape)/r,r]},backend:s}),l=Co(i,n.dtype,"max",s),u=fe({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,g,m,e);return h&&e.disposeIntermediateTensorInfo(p),y}const Hq={kernelName:Gl,backendName:"webgl",kernelFunc:DI},qq=fn({opSnippet:hg+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+No+"\n  return result;\n",cpuKernelImpl:AU}),Xq={kernelName:Ka,backendName:"webgl",kernelFunc:qq},Yq={kernelName:Hl,backendName:"webgl",kernelFunc:function Zq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;al(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;S(hn(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=is(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))return Vn({inputs:{x:r},backend:e});const h=new cl(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},Jq={kernelName:jl,backendName:"webgl",kernelFunc:function Qq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dataFormat:l,dimRoundingMode:u}=s,h=Zs(r.shape,o,a,[1,1,1],i,u,l),d=new pg(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class e6{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${a-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*a-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class t6{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const s6={kernelName:Yh,backendName:"webgl",kernelFunc:function n6(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Zs(a.shape,i,l,[1,1,1],u,c),p=new pg(d,"max",!0),f=e.runWebGLProgram(p,[a],a.dtype),g=new t6(d),m=e.runWebGLProgram(g,[r,f],a.dtype);return e.disposeIntermediateTensorInfo(f),m}},o6={kernelName:Zh,backendName:"webgl",kernelFunc:function r6(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;al([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=is(i.shape,l,u,1,c,h),f=new cl(d,"max",!0),g=e.runWebGLProgram(f,[i],i.dtype),m=new e6(d),y=e.runWebGLProgram(m,[r,g],i.dtype);return e.disposeIntermediateTensorInfo(g),y}},i6={kernelName:Qh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;S(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];S(hn(o,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const c=is(s.shape,r,o,u,a),[h,d]=function a6(n,t,e,s){let r=new cl(e,"max",!1);const o=s.runWebGLProgram(r,[n],"float32");return r=new cl(e,"max",!0,!0,t),[o,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[h,d]}},u6={kernelName:Kl,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:o}=t,a=e,i=s.shape.length,l=Ge(o,s.shape);let u=l;const c=$t(u,i),h=null!=c,d=a.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const v=a.texData.get(f.dataId).values,I=new Array(i);for(let T=0;T<I.length;T++)I[T]=s.shape[c[T]];const C=cg(v,s.shape,s.dtype,c,I);f=a.makeTensorInfo(I,s.dtype),a.texData.get(f.dataId).values=C}else f=rh(s,c,a);p.push(f),u=Wt(u.length,i)}dn("sum",u,i);const[g,m]=ln(f.shape,u);let y=g;r&&(y=Vt(g,l));const x=function l6(n,t,e,s){const r=G(t),i=fe({inputs:{x:n},attrs:{shape:[G(n.shape)/r,r]},backend:s}),l=Co(i,"float32","mean",s),u=fe({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,m,y,a);for(const b of p)a.disposeIntermediateTensorInfo(b);return x}},h6={kernelName:ql,backendName:"webgl",kernelFunc:function c6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ge(o,r.shape);let u=l;const c=$t(u,i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=Wt(u.length,r.shape.length)),dn("min",u,i);const[d,p]=ln(h.shape,u),g=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,G(p)]}}),m=Co(g,g.dtype,"min",e);let y;return y=fe(a?{inputs:{x:m},backend:e,attrs:{shape:Vt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},f6=fn({opSnippet:hg+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+No+"\n  return result;\n",cpuKernelImpl:RU}),m6={kernelName:qa,backendName:"webgl",kernelFunc:f6};class g6{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,o=ht(r),a=e.map(c=>c[0]).join(","),i=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class y6{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,g)=>f[0]+t[g]+f[1]);const r=t.length,o=ht(r),a=e.map(f=>f[0]).join(","),i=e.map((f,g)=>f[0]+t[g]).join(","),l=Cn("rc",r),u=Cn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const x6={kernelName:Xl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:o}=e,a=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new y6(s.shape,r,o):new g6(s.shape,r,o);return t.runWebGLProgram(a,[s],s.dtype)}},v6=fn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+No+"\n  return result;\n"}),I6={kernelName:Xa,backendName:"webgl",kernelFunc:v6};class S6{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const FI=fn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),N6={kernelName:Da,backendName:"webgl",kernelFunc:FI},OI="return a - b;",LI=fn({opSnippet:OI,packedOpSnippet:OI,supportsComplex:!0,cpuKernelImpl:JU}),C6={kernelName:hi,backendName:"webgl",kernelFunc:LI};function PI(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=Ge([o],r.shape),i=DI({inputs:{x:r},backend:e,attrs:{reductionIndices:a,keepDims:!1}}),l=Vt(i.shape,a),u=fe({inputs:{x:i},backend:e,attrs:{shape:l}}),c=LI({inputs:{a:r,b:u},backend:e}),h=TI({inputs:{x:c},backend:e}),d=oh({inputs:{x:h},backend:e,attrs:{axis:a,keepDims:!1}}),p=fe({inputs:{x:d},backend:e,attrs:{shape:l}}),f=FI({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const k6={kernelName:pu,backendName:"webgl",kernelFunc:PI},$6={kernelName:Jh,backendName:"webgl",kernelFunc:function T6(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s,l=i?r:PI({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new S6(l.shape[0],l.shape[1],o),p=e.runWebGLProgram(h,[l],"int32",[[a]]);return i||e.disposeIntermediateTensorInfo(l),p}},_6=ts+"\n  return -x;\n",R6={kernelName:Zl,backendName:"webgl",kernelFunc:function A6(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[a,i]=FU(o.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,a)}let r;return r=M().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Vr(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new js(s.shape,_6),e.runWebGLProgram(r,[s],s.dtype)}},D6=sf,O6={kernelName:ed,backendName:"webgl",kernelFunc:function F6(n){jn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),{selectedIndices:h}=D6(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},L6=rf,z6={kernelName:td,backendName:"webgl",kernelFunc:function P6(n){jn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),{selectedIndices:d,validOutputs:p}=L6(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},M6=of,V6={kernelName:nd,backendName:"webgl",kernelFunc:function B6(n){jn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=M6(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class W6{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const U6={kernelName:Jl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s,u=G(r.shape),c=new W6(u,a,i,l),h=fe({inputs:{x:r},backend:e,attrs:{shape:[u]}}),d=e.runWebGLProgram(c,[h],o);e.disposeIntermediateTensorInfo(h);const f=fe({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,a]}});return e.disposeIntermediateTensorInfo(d),f}};function hh(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=hl({inputs:{input:s},backend:e}),o=hh({inputs:{x:r},backend:e}),a=uh({inputs:{input:s},backend:e}),i=hh({inputs:{x:a},backend:e}),l=Wr({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return pl({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const G6={kernelName:yu,backendName:"webgl",kernelFunc:hh},H6={kernelName:Ql,backendName:"webgl",kernelFunc:function zI(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=hl({inputs:{input:s},backend:e}),o=zI({inputs:{x:r},backend:e}),a=uh({inputs:{input:s},backend:e}),i=hh({inputs:{x:a},backend:e}),l=Wr({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return pl({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},K6={kernelName:eu,backendName:"webgl",kernelFunc:function j6(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return gg({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Fn(o,c.shape,"All tensors passed to stack must have matching shapes"),S(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=gI({inputs:t.map(c=>{const h=gg({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class q6{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,o=ht(r),a=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class X6{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,m)=>g[0]+t[m]+g[1]);const r=t.length,o=ht(r),a=e.map(g=>g[0]).join(","),i=e.map((g,m)=>g[0]+t[m]).join(","),l=Cn("rc",r),u=Cn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let g=0,m=1===r?2:4;g<m;g++)f+=`\n        ${d[g]}\n        if (${p}) {\n          result[${g}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${g}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const MI=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;if(0===G(r.shape))return pl({backend:e,attrs:{shape:o.map((c,h)=>c[0]+r.shape[h]+c[1]),value:a,dtype:r.dtype}});const i=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new X6(r.shape,o,a):new q6(r.shape,o,a);return e.runWebGLProgram(i,[r],r.dtype,[[a]])},Z6={kernelName:tu,backendName:"webgl",kernelFunc:MI},J6=fn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+No+"\n  return result;\n"}),eX={kernelName:Ya,backendName:"webgl",kernelFunc:J6},nX={kernelName:su,backendName:"webgl",kernelFunc:function tX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=[],u=Ge(o,r.shape);let c=u;const h=$t(c,i);let p,d=r;if(null!=h&&(d=kn({inputs:{x:r},backend:e,attrs:{perm:h}}),c=Wt(c.length,i),l.push(d)),dn("prod",c,i),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:g,outShape:m,outDtype:y}=LU(d.shape,d.dtype,f,c);p=e.makeTensorInfo(m,y,g)}else{const[f,g]=ln(d.shape,c),m=G(g),y=fe({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}}),b=Co(y,Fd(r.dtype),"prod",e);p=fe({inputs:{x:b},backend:e,attrs:{shape:f}}),l.push(y),l.push(b)}if(a){l.push(p);const f=Vt(p.shape,u);p=fe({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},rX={kernelName:sd,backendName:"webgl",kernelFunc:function sX(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,{outputRaggedRank:i}=s,l=r.map(y=>e.readSync(y.dataId)),u=r.map(y=>y.shape),c=e.readSync(o.dataId),h=e.readSync(a.dataId),[d,p,f]=PU(l,u,c,o.shape,o.dtype,h,a.shape,i),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},aX={kernelName:rd,backendName:"webgl",kernelFunc:function oX(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=zU(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},lX={kernelName:od,backendName:"webgl",kernelFunc:function iX(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),h=e.readSync(a.dataId),d=i.map(m=>e.readSync(m.dataId)),p=i.map(m=>m.shape),[f,g]=MU(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}},BI=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:o,dtype:a}=e,i=BU(s,r,o,a);return t.makeTensorInfo([i.length],a,i)},uX={kernelName:ad,backendName:"webgl",kernelFunc:BI},cX=et({opSnippet:"return 1.0 / x;"}),hX={kernelName:Qa,backendName:"webgl",kernelFunc:cX},pX=et({opSnippet:ts+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),fX={kernelName:Ja,backendName:"webgl",kernelFunc:pX},gX=et({opSnippet:ts+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),yX={kernelName:ei,backendName:"webgl",kernelFunc:gX};class xX{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class bX{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const vX={kernelName:au,backendName:"webgl",kernelFunc:function wX(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=M().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new bX(r.shape,l,u,o,a):new xX(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],"float32")}};class IX{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const NX={kernelName:ud,backendName:"webgl",kernelFunc:function SX(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new IX(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class CX{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class kX{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const $X={kernelName:ou,backendName:"webgl",kernelFunc:function TX(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=M().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new kX(r.shape,l,u,o,a):new CX(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],r.dtype)}};class _X{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const AX={kernelName:ld,backendName:"webgl",kernelFunc:function EX(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new _X(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class RX{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),a=ht(s);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class DX{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=Cn("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,a=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=ht(s);function d(f){const g=t.map((x,b)=>function p(f,g){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${g[f]} - 1`:`${g[f]}`}(b,f));return`getChannel(getX(${g.join(",")}), vec2(${g.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${o}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${o}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const OX={kernelName:iu,backendName:"webgl",kernelFunc:function FX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s,a=r.shape.length,i=Ge(o,r.shape);if(0===a)return Vn({inputs:{x:r},backend:e});const l=M().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new DX(r.shape,i):new RX(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class LX{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const PX={kernelName:Td,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=new LX(s.shape,o),[u,c]=pf(a,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},zX=et({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),MX={kernelName:ti,backendName:"webgl",kernelFunc:zX},BX=et({opSnippet:"return inversesqrt(x);",cpuKernelImpl:VU}),VX={kernelName:ni,backendName:"webgl",kernelFunc:BX};class xg{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const u=ht(o.length),c=ht(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${h}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${p});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, float(found)));\n        }\n      `}}class WX{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const u=ht(o.length),c=ht(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${t}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${h}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${p});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, found));\n        }\n      `}}const GX={kernelName:cd,backendName:"webgl",kernelFunc:function UX(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=lo(0,r,a),d=[h/u,u];if(0===h)return e.makeTensorInfo(a,r.dtype);const p=fe({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=fe({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0]));let m;m=M().getBool("WEBGL_PACK")?new WX(l,i,p.shape.length,f.shape.length,c,d):new xg(l,i,p.shape.length,f.shape.length,c,d);const y=e.runWebGLProgram(m,[f,p,g],f.dtype),x=fe({inputs:{x:y},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),x}};class HX{constructor(t,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,s];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,i=2===M().getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const KX={kernelName:dd,backendName:"webgl",kernelFunc:function jX(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,i=new HX(r.shape[0],r.shape[1],o.shape[1],a);return e.runWebGLProgram(i,[r,o],"int32",[[r.shape[1]]])}};class qX{constructor(t,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),o=u.join()}const a=ht(s);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const ZX={kernelName:lu,backendName:"webgl",kernelFunc:function XX(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t,a=new qX(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(a,[s,r,o],On(r.dtype,o.dtype))}},QX=et({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${nc};\n  float scale = ${sc};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),JX={kernelName:si,backendName:"webgl",kernelFunc:QX},t5=et({opSnippet:ya+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:UU}),n5={kernelName:ii,backendName:"webgl",kernelFunc:t5},s5=et({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),r5={kernelName:ai,backendName:"webgl",kernelFunc:s5},i5=et({opSnippet:ya+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${No}\n  return result;\n`}),l5={kernelName:ri,backendName:"webgl",kernelFunc:i5},u5=et({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),c5={kernelName:oi,backendName:"webgl",kernelFunc:u5},h5=et({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),d5={kernelName:li,backendName:"webgl",kernelFunc:h5},p5={kernelName:hu,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;S(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((y,x)=>y*x),l=[[0,0]];l.push(...a);for(let y=1+o.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=MI({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=Pi(c.shape,o,i,!1),d=zi(h.length,o.length,!1),p=Mi(c.shape,o,i,!1),f=fe({inputs:{x:c},backend:e,attrs:{shape:h}}),g=kn({inputs:{x:f},backend:e,attrs:{perm:d}}),m=fe({inputs:{x:g},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(g),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),m}},m5={kernelName:pd,backendName:"webgl",kernelFunc:function f5(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=e.readSync(a.dataId)[0],[h,d,p,f,g]=HU(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},y5={kernelName:fd,backendName:"webgl",kernelFunc:function g5(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.readSync(r.dataId)),i=e.readSync(s.dataId),l=Array.from(e.readSync(o.dataId)),[u,c,h]=jU(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},b5={kernelName:md,backendName:"webgl",kernelFunc:function x5(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=Hv(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},v5={kernelName:gd,backendName:"webgl",kernelFunc:function w5(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=Hv(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},S5={kernelName:yd,backendName:"webgl",kernelFunc:function I5(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=lo(0,r,i);if("string"===o.dtype){const y=e.bufferSync(r),x=e.bufferSync(o),b=dr(e.readSync(a.dataId)[0]),v=WU(y,x,i,d,c,u,l,h,b,!1);return e.makeTensorInfo(i,v.dtype,v.values)}const f=new xg(u,l,r.shape.length,o.shape.length,h,[d,1],!1),g=e.runWebGLProgram(f,[o,r,a],o.dtype),m=fe({inputs:{x:g},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(g),m}},C5={kernelName:du,backendName:"webgl",kernelFunc:function N5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Ge(a,r.shape)[0],l=Ef(r,o,i),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[i]=d;const f=xa({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=d,f})}},VI="return sqrt(x);",k5=et({opSnippet:VI,packedOpSnippet:VI,cpuKernelImpl:KU}),T5={kernelName:ui,backendName:"webgl",kernelFunc:k5},_5={kernelName:xd,backendName:"webgl",kernelFunc:et({opSnippet:"return x * x;"})},WI="return (a - b) * (a - b);",E5=fn({opSnippet:WI,packedOpSnippet:WI}),A5={kernelName:ci,backendName:"webgl",kernelFunc:E5},D5={kernelName:fu,backendName:"webgl",kernelFunc:function R5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=er(e.readSync(r.dataId)),i=qU(a,"string",s);return e.makeTensorInfo(r.shape,"string",i)}},O5={kernelName:mi,backendName:"webgl",kernelFunc:function F5({inputs:n,attrs:t,backend:e}){const{x:s}=n,o=new js(s.shape,ts+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class L5{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=ht(s.length),a=ht(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const z5={kernelName:bd,backendName:"webgl",kernelFunc:function P5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:x,end:b,strides:v}=mp(r.shape,o,a,i,l,u,c,h,d);let I;if(g)I=fe({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){S(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const k=dp(x,b,v),T=xa({inputs:{x:r},backend:e,attrs:{begin:x,size:k}});I=fe({inputs:{x:T},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(T)}else if(e.shouldExecuteOnCPU([r])){const T=e.readSync(r.dataId),E=Be(r.shape,r.dtype,T),R=XU(p,E,v,x);I=e.makeTensorInfo(f,r.dtype,R.values)}else{const T=new L5(x,v,p);I=e.runWebGLProgram(T,[r],r.dtype)}const C=fe({inputs:{x:I},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(I),C}},B5={kernelName:wd,backendName:"webgl",kernelFunc:function M5(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,g]=ZU(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},W5={kernelName:vd,backendName:"webgl",kernelFunc:function V5(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.readSync(o.dataId),l=e.readSync(a.dataId)[0],[u,c,h]=YU(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},G5={kernelName:Id,backendName:"webgl",kernelFunc:function U5(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const a=e.readSync(o.dataId),i=QU(a,r);return e.makeTensorInfo(o.shape,"int32",i)}},H5=et({opSnippet:"return tan(x);"}),j5={kernelName:di,backendName:"webgl",kernelFunc:H5},K5=et({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),q5={kernelName:pi,backendName:"webgl",kernelFunc:K5},Z5={kernelName:hd,backendName:"webgl",kernelFunc:function X5(n){const{inputs:t,backend:e}=n,{tensor:r,indices:o,updates:a}=t,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=lo(0,o,r.shape),d=[h/u,u];if(0===h)return e.makeTensorInfo(r.shape,o.dtype);const p=fe({inputs:{x:o},backend:e,attrs:{shape:[l,i]}}),f=fe({inputs:{x:a},backend:e,attrs:{shape:[l,u]}}),g=fe({inputs:{x:r},backend:e,attrs:{shape:d}}),m=new xg(l,i,p.shape.length,f.shape.length,c,d,!1,!0),y=e.runWebGLProgram(m,[f,p,g],g.dtype),x=fe({inputs:{x:y},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(y),x}};class Y5{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[a]*e[a];this.outputShape=s,this.rank=s.length;const r=ht(this.rank),o=function Q5(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function UI(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>dr(d)):l,c=Be(r.shape,r.dtype,u),h=eG(c,o);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const a=new Y5(r.shape,o);return e.runWebGLProgram(a,[r],r.dtype)}const J5={kernelName:fi,backendName:"webgl",kernelFunc:UI};class eZ{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class tZ{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function ko(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function GI(n){let t=1;for(;t<n;)t*=2;return t}const sZ={kernelName:Sd,backendName:"webgl",kernelFunc:function nZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s,i=M().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=M().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<i||o>l){const R=e.readSync(r.dataId),[L,V]=tG(R,u,r.dtype,o,a);return[e.makeTensorInfo(L.shape,L.dtype,L.values),e.makeTensorInfo(V.shape,V.dtype,V.values)]}if(0===o)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,pl({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,g=G(u)/c,m=fe({inputs:{x:p},attrs:{shape:[g,c]},backend:e});d&&ko(e,p);const y=GI(o),x=GI(c);let b=null;const v=()=>null===b?[m,m]:[m,b],I=(R,L,V)=>{const U=v(),H=new eZ(V),Z=b;b=e.runWebGLProgram(H,U,"int32",[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[R],[L]]),ko(e,Z)};for(let R=1;R<y;R*=2){const L=2*R;for(let V=R;V>=1;V/=2)I(L,V,[g,x])}for(let R=x;R>y;R/=2){const L=v(),V=new tZ([g,R/2]),j=b;b=e.runWebGLProgram(V,L,"int32",[[c],[null===b?1:0],[y]]),ko(e,j);const X=y/2,Z=2*X;for(let K=X;K>=1;K/=2)I(Z,K,b.shape)}let C=b;b=xa({inputs:{x:b},backend:e,attrs:{begin:0,size:[g,o]}}),ko(e,C);let k=RI({inputs:{x:m,indices:b},backend:e,attrs:{axis:1,batchDims:1}});ko(e,m);const T=u.slice(0,-1);T.push(o),C=b,b=fe({inputs:{x:b},attrs:{shape:T},backend:e}),ko(e,C);const E=k;return k=fe({inputs:{x:k},attrs:{shape:T},backend:e}),ko(e,E),[k,b]}};class rZ{constructor(t,e,s,r,o,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const aZ={kernelName:Nd,backendName:"webgl",kernelFunc:function oZ(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=u??[h,d],y=new rZ(h,d,a,i,l,[c,f,g,p]);return e.runWebGLProgram(y,[r,o],"float32")}},lZ={kernelName:Cd,backendName:"webgl",kernelFunc:function iZ(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;al(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const a=s.readSync(o.dataId),{outputValues:i,outputShape:l,indices:u}=nG(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},cZ={kernelName:mu,backendName:"webgl",kernelFunc:function uZ(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r,i=a.shape.length,l=r.shape[o],u=new Array(i-1);let c=0;for(let g=0;g<i;g++)g!==o&&(u[c++]=a.shape[g]);const h=[],d=new Array(i).fill(0),p=a.shape.slice();p[o]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[o]=g;const m=xa({inputs:{x:a},backend:e,attrs:{begin:d,size:p}}),y=fe({inputs:{x:m},backend:e,attrs:{shape:u}});f[g]=y,h.push(m)}return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}};class hZ{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const fZ=[ZG,QG,tH,rH,aH,uH,hH,pH,yH,bH,IH,CH,$H,RH,OH,PH,MH,UH,HH,KH,ZH,nj,rj,aj,hj,pj,yj,DG,wj,Cj,_j,Oj,zj,Bj,Wj,Gj,qj,Zj,Qj,eK,nK,rK,iK,uK,pK,mK,xK,vK,SK,CK,$K,EK,DK,OK,LK,zK,BK,WK,GK,jK,qK,YK,eq,nq,oq,lq,cq,dq,RG,fq,Sj,gq,xq,wq,OG,Iq,Nq,kq,_q,Rq,Fq,Lq,zq,Vq,Uq,Hq,Xq,Yq,Jq,s6,o6,i6,u6,h6,m6,x6,I6,$6,zG,R6,O6,z6,V6,ij,U6,H6,K6,Z6,eX,PG,nX,rX,aX,lX,uX,lj,N6,hX,fX,yX,BG,vX,NX,$X,AX,OX,PX,MX,VX,GX,KX,ZX,JX,n5,r5,l5,c5,tj,k6,d5,p5,m5,y5,b5,v5,S5,C5,T5,_5,A5,D5,O5,z5,B5,W5,G5,C6,KG,j5,q5,Z5,J5,sZ,aZ,qG,lZ,cZ,{kernelName:gu,backendName:"webgl",kernelFunc:function dZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s,i=r.shape.length,l=[];let u=0;const c=$t([u],i);let h=r;null!=c&&(h=kn({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=Wt(1,i)[0]);const d=gb(h.shape,u,a),p=G([h.shape[u]]),f=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const g=Fd(r.dtype),m=(v,I,C,k,T)=>{const E=v.shape[0],R=v.shape[1],L=mb(R,T),U=new hZ({windowSize:L,inSize:R,batchSize:E,numSegments:T},I),H=e.compileAndRun(U,[v,C],k);if(l.push(H),H.shape[1]===T)return H;const j=BI({backend:e,attrs:{start:0,stop:T,step:1,dtype:"float32"}}),X=UI({inputs:{x:j},backend:e,attrs:{reps:[R/L]}});return l.push(j),l.push(X),m(H,I,X,k,T)},x=fe({inputs:{x:m(f,"unsortedSegmentSum",o,g,a)},backend:e,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const v=kr(c);b=kn({inputs:{x:b},backend:e,attrs:{perm:v}})}return l.forEach(v=>e.disposeIntermediateTensorInfo(v)),b}},G6];for(const n of fZ)Ed(n)},7080:tt=>{tt.exports=W;var Ke=null;try{Ke=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function W(J,$,le){this.low=0|J,this.high=0|$,this.unsigned=!!le}function Re(J){return!0===(J&&J.__isLong__)}Object.defineProperty(W.prototype,"__isLong__",{value:!0}),W.isLong=Re;var Dt={},De={};function mt(J,$){var le,Oe,B;return $?(B=0<=(J>>>=0)&&J<256)&&(Oe=De[J])?Oe:(le=Ne(J,(0|J)<0?-1:0,!0),B&&(De[J]=le),le):(B=-128<=(J|=0)&&J<128)&&(Oe=Dt[J])?Oe:(le=Ne(J,J<0?-1:0,!1),B&&(Dt[J]=le),le)}function Me(J,$){if(isNaN(J))return $?qt:at;if($){if(J<0)return qt;if(J>=ae)return st}else{if(J<=-xe)return rt;if(J+1>=xe)return Ze}return J<0?Me(-J,$).neg():Ne(J%Q|0,J/Q|0,$)}function Ne(J,$,le){return new W(J,$,le)}W.fromInt=mt,W.fromNumber=Me,W.fromBits=Ne;var Te=Math.pow;function pe(J,$,le){if(0===J.length)throw Error("empty string");if("NaN"===J||"Infinity"===J||"+Infinity"===J||"-Infinity"===J)return at;if("number"==typeof $?(le=$,$=!1):$=!!$,(le=le||10)<2||36<le)throw RangeError("radix");var Oe;if((Oe=J.indexOf("-"))>0)throw Error("interior hyphen");if(0===Oe)return pe(J.substring(1),$,le).neg();for(var B=Me(Te(le,8)),qe=at,it=0;it<J.length;it+=8){var zt=Math.min(8,J.length-it),Mt=parseInt(J.substring(it,it+zt),le);if(zt<8){var ot=Me(Te(le,zt));qe=qe.mul(ot).add(Me(Mt))}else qe=(qe=qe.mul(B)).add(Me(Mt))}return qe.unsigned=$,qe}function P(J,$){return"number"==typeof J?Me(J,$):"string"==typeof J?pe(J,$):Ne(J.low,J.high,"boolean"==typeof $?$:J.unsigned)}W.fromString=pe,W.fromValue=P;var Q=4294967296,ae=Q*Q,xe=ae/2,Ce=mt(1<<24),at=mt(0);W.ZERO=at;var qt=mt(0,!0);W.UZERO=qt;var jt=mt(1);W.ONE=jt;var ss=mt(1,!0);W.UONE=ss;var Wn=mt(-1);W.NEG_ONE=Wn;var Ze=Ne(-1,2147483647,!1);W.MAX_VALUE=Ze;var st=Ne(-1,-1,!0);W.MAX_UNSIGNED_VALUE=st;var rt=Ne(0,-2147483648,!1);W.MIN_VALUE=rt;var re=W.prototype;re.toInt=function(){return this.unsigned?this.low>>>0:this.low},re.toNumber=function(){return this.unsigned?(this.high>>>0)*Q+(this.low>>>0):this.high*Q+(this.low>>>0)},re.toString=function($){if(($=$||10)<2||36<$)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(rt)){var le=Me($),Oe=this.div(le),B=Oe.mul(le).sub(this);return Oe.toString($)+B.toInt().toString($)}return"-"+this.neg().toString($)}for(var qe=Me(Te($,6),this.unsigned),it=this,zt="";;){var Mt=it.div(qe),Ft=(it.sub(Mt.mul(qe)).toInt()>>>0).toString($);if((it=Mt).isZero())return Ft+zt;for(;Ft.length<6;)Ft="0"+Ft;zt=""+Ft+zt}},re.getHighBits=function(){return this.high},re.getHighBitsUnsigned=function(){return this.high>>>0},re.getLowBits=function(){return this.low},re.getLowBitsUnsigned=function(){return this.low>>>0},re.getNumBitsAbs=function(){if(this.isNegative())return this.eq(rt)?64:this.neg().getNumBitsAbs();for(var $=0!=this.high?this.high:this.low,le=31;le>0&&!($&1<<le);le--);return 0!=this.high?le+33:le+1},re.isZero=function(){return 0===this.high&&0===this.low},re.eqz=re.isZero,re.isNegative=function(){return!this.unsigned&&this.high<0},re.isPositive=function(){return this.unsigned||this.high>=0},re.isOdd=function(){return 1==(1&this.low)},re.isEven=function(){return 0==(1&this.low)},re.equals=function($){return Re($)||($=P($)),(this.unsigned===$.unsigned||this.high>>>31!=1||$.high>>>31!=1)&&this.high===$.high&&this.low===$.low},re.eq=re.equals,re.notEquals=function($){return!this.eq($)},re.neq=re.notEquals,re.ne=re.notEquals,re.lessThan=function($){return this.comp($)<0},re.lt=re.lessThan,re.lessThanOrEqual=function($){return this.comp($)<=0},re.lte=re.lessThanOrEqual,re.le=re.lessThanOrEqual,re.greaterThan=function($){return this.comp($)>0},re.gt=re.greaterThan,re.greaterThanOrEqual=function($){return this.comp($)>=0},re.gte=re.greaterThanOrEqual,re.ge=re.greaterThanOrEqual,re.compare=function($){if(Re($)||($=P($)),this.eq($))return 0;var le=this.isNegative(),Oe=$.isNegative();return le&&!Oe?-1:!le&&Oe?1:this.unsigned?$.high>>>0>this.high>>>0||$.high===this.high&&$.low>>>0>this.low>>>0?-1:1:this.sub($).isNegative()?-1:1},re.comp=re.compare,re.negate=function(){return!this.unsigned&&this.eq(rt)?rt:this.not().add(jt)},re.neg=re.negate,re.add=function($){Re($)||($=P($));var Ft=0,Un=0,vt=0,gn=0;return vt+=(gn+=(65535&this.low)+(65535&$.low))>>>16,Un+=(vt+=(this.low>>>16)+($.low>>>16))>>>16,Ft+=(Un+=(65535&this.high)+(65535&$.high))>>>16,Ft+=(this.high>>>16)+($.high>>>16),Ne((vt&=65535)<<16|(gn&=65535),(Ft&=65535)<<16|(Un&=65535),this.unsigned)},re.subtract=function($){return Re($)||($=P($)),this.add($.neg())},re.sub=re.subtract,re.multiply=function($){if(this.isZero())return at;if(Re($)||($=P($)),Ke)return Ne(Ke.mul(this.low,this.high,$.low,$.high),Ke.get_high(),this.unsigned);if($.isZero())return at;if(this.eq(rt))return $.isOdd()?rt:at;if($.eq(rt))return this.isOdd()?rt:at;if(this.isNegative())return $.isNegative()?this.neg().mul($.neg()):this.neg().mul($).neg();if($.isNegative())return this.mul($.neg()).neg();if(this.lt(Ce)&&$.lt(Ce))return Me(this.toNumber()*$.toNumber(),this.unsigned);var B=65535&this.high,qe=this.low>>>16,it=65535&this.low,Mt=65535&$.high,ot=$.low>>>16,Ft=65535&$.low,Un=0,vt=0,gn=0,Gn=0;return gn+=(Gn+=it*Ft)>>>16,vt+=(gn+=qe*Ft)>>>16,gn&=65535,vt+=(gn+=it*ot)>>>16,Un+=(vt+=B*Ft)>>>16,vt&=65535,Un+=(vt+=qe*ot)>>>16,vt&=65535,Un+=(vt+=it*Mt)>>>16,Un+=(this.high>>>16)*Ft+B*ot+qe*Mt+it*($.high>>>16),Ne((gn&=65535)<<16|(Gn&=65535),(Un&=65535)<<16|(vt&=65535),this.unsigned)},re.mul=re.multiply,re.divide=function($){if(Re($)||($=P($)),$.isZero())throw Error("division by zero");var Oe,B,qe;if(Ke)return this.unsigned||-2147483648!==this.high||-1!==$.low||-1!==$.high?Ne((this.unsigned?Ke.div_u:Ke.div_s)(this.low,this.high,$.low,$.high),Ke.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?qt:at;if(this.unsigned){if($.unsigned||($=$.toUnsigned()),$.gt(this))return qt;if($.gt(this.shru(1)))return ss;qe=qt}else{if(this.eq(rt))return $.eq(jt)||$.eq(Wn)?rt:$.eq(rt)?jt:(Oe=this.shr(1).div($).shl(1)).eq(at)?$.isNegative()?jt:Wn:(B=this.sub($.mul(Oe)),qe=Oe.add(B.div($)));if($.eq(rt))return this.unsigned?qt:at;if(this.isNegative())return $.isNegative()?this.neg().div($.neg()):this.neg().div($).neg();if($.isNegative())return this.div($.neg()).neg();qe=at}for(B=this;B.gte($);){Oe=Math.max(1,Math.floor(B.toNumber()/$.toNumber()));for(var zt=Math.ceil(Math.log(Oe)/Math.LN2),Mt=zt<=48?1:Te(2,zt-48),ot=Me(Oe),Ft=ot.mul($);Ft.isNegative()||Ft.gt(B);)Ft=(ot=Me(Oe-=Mt,this.unsigned)).mul($);ot.isZero()&&(ot=jt),qe=qe.add(ot),B=B.sub(Ft)}return qe},re.div=re.divide,re.modulo=function($){return Re($)||($=P($)),Ke?Ne((this.unsigned?Ke.rem_u:Ke.rem_s)(this.low,this.high,$.low,$.high),Ke.get_high(),this.unsigned):this.sub(this.div($).mul($))},re.mod=re.modulo,re.rem=re.modulo,re.not=function(){return Ne(~this.low,~this.high,this.unsigned)},re.and=function($){return Re($)||($=P($)),Ne(this.low&$.low,this.high&$.high,this.unsigned)},re.or=function($){return Re($)||($=P($)),Ne(this.low|$.low,this.high|$.high,this.unsigned)},re.xor=function($){return Re($)||($=P($)),Ne(this.low^$.low,this.high^$.high,this.unsigned)},re.shiftLeft=function($){return Re($)&&($=$.toInt()),0==($&=63)?this:$<32?Ne(this.low<<$,this.high<<$|this.low>>>32-$,this.unsigned):Ne(0,this.low<<$-32,this.unsigned)},re.shl=re.shiftLeft,re.shiftRight=function($){return Re($)&&($=$.toInt()),0==($&=63)?this:$<32?Ne(this.low>>>$|this.high<<32-$,this.high>>$,this.unsigned):Ne(this.high>>$-32,this.high>=0?0:-1,this.unsigned)},re.shr=re.shiftRight,re.shiftRightUnsigned=function($){if(Re($)&&($=$.toInt()),0==($&=63))return this;var le=this.high;return $<32?Ne(this.low>>>$|le<<32-$,le>>>$,this.unsigned):Ne(32===$?le:le>>>$-32,0,this.unsigned)},re.shru=re.shiftRightUnsigned,re.shr_u=re.shiftRightUnsigned,re.toSigned=function(){return this.unsigned?Ne(this.low,this.high,!1):this},re.toUnsigned=function(){return this.unsigned?this:Ne(this.low,this.high,!0)},re.toBytes=function($){return $?this.toBytesLE():this.toBytesBE()},re.toBytesLE=function(){var $=this.high,le=this.low;return[255&le,le>>>8&255,le>>>16&255,le>>>24,255&$,$>>>8&255,$>>>16&255,$>>>24]},re.toBytesBE=function(){var $=this.high,le=this.low;return[$>>>24,$>>>16&255,$>>>8&255,255&$,le>>>24,le>>>16&255,le>>>8&255,255&le]},W.fromBytes=function($,le,Oe){return Oe?W.fromBytesLE($,le):W.fromBytesBE($,le)},W.fromBytesLE=function($,le){return new W($[0]|$[1]<<8|$[2]<<16|$[3]<<24,$[4]|$[5]<<8|$[6]<<16|$[7]<<24,le)},W.fromBytesBE=function($,le){return new W($[4]<<24|$[5]<<16|$[6]<<8|$[7],$[0]<<24|$[1]<<16|$[2]<<8|$[3],le)}},3291:(tt,Ke,W)=>{"use strict";W.d(Ke,{d:()=>Me});var Re=W(8023);const Dt={now:()=>(Dt.delegate||Date).now(),delegate:void 0};class De extends Re.x{constructor(Te=1/0,pe=1/0,P=Dt){super(),this._bufferSize=Te,this._windowTime=pe,this._timestampProvider=P,this._buffer=[],this._infiniteTimeWindow=!0,this._infiniteTimeWindow=pe===1/0,this._bufferSize=Math.max(1,Te),this._windowTime=Math.max(1,pe)}next(Te){const{isStopped:pe,_buffer:P,_infiniteTimeWindow:te,_timestampProvider:he,_windowTime:Q}=this;pe||(P.push(Te),!te&&P.push(he.now()+Q)),this._trimBuffer(),super.next(Te)}_subscribe(Te){this._throwIfClosed(),this._trimBuffer();const pe=this._innerSubscribe(Te),{_infiniteTimeWindow:P,_buffer:te}=this,he=te.slice();for(let Q=0;Q<he.length&&!Te.closed;Q+=P?1:2)Te.next(he[Q]);return this._checkFinalizedStatuses(Te),pe}_trimBuffer(){const{_bufferSize:Te,_timestampProvider:pe,_buffer:P,_infiniteTimeWindow:te}=this,he=(te?1:2)*Te;if(Te<1/0&&he<P.length&&P.splice(0,P.length-he),!te){const Q=pe.now();let ae=0;for(let xe=1;xe<P.length&&P[xe]<=Q;xe+=2)ae=xe;ae&&P.splice(0,ae+1)}}}var mt=W(815);function Me(Ne,Te,pe){let P,te=!1;return Ne&&"object"==typeof Ne?({bufferSize:P=1/0,windowTime:Te=1/0,refCount:te=!1,scheduler:pe}=Ne):P=Ne??1/0,(0,mt.B)({connector:()=>new De(P,Te,pe),resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:te})}},4901:(tt,Ke,W)=>{var Re=W(3366),Dt=W(9678),De=W(5278),mt=W(5457),Me=W(7594),Ne=W(9035),Te=W(8507);Te.alea=Re,Te.xor128=Dt,Te.xorwow=De,Te.xorshift7=mt,Te.xor4096=Me,Te.tychei=Ne,tt.exports=Te},3366:function(tt,Ke,W){var Re;!function(Dt,De,mt){function Me(P){var te=this,he=function pe(){var P=4022871197;return function(he){he=String(he);for(var Q=0;Q<he.length;Q++){var ae=.02519603282416938*(P+=he.charCodeAt(Q));ae-=P=ae>>>0,P=(ae*=P)>>>0,P+=4294967296*(ae-=P)}return 2.3283064365386963e-10*(P>>>0)}}();te.next=function(){var Q=2091639*te.s0+2.3283064365386963e-10*te.c;return te.s0=te.s1,te.s1=te.s2,te.s2=Q-(te.c=0|Q)},te.c=1,te.s0=he(" "),te.s1=he(" "),te.s2=he(" "),te.s0-=he(P),te.s0<0&&(te.s0+=1),te.s1-=he(P),te.s1<0&&(te.s1+=1),te.s2-=he(P),te.s2<0&&(te.s2+=1),he=null}function Ne(P,te){return te.c=P.c,te.s0=P.s0,te.s1=P.s1,te.s2=P.s2,te}function Te(P,te){var he=new Me(P),Q=te&&te.state,ae=he.next;return ae.int32=function(){return 4294967296*he.next()|0},ae.double=function(){return ae()+11102230246251565e-32*(2097152*ae()|0)},ae.quick=ae,Q&&("object"==typeof Q&&Ne(Q,he),ae.state=function(){return Ne(he,{})}),ae}De&&De.exports?De.exports=Te:W.amdD&&W.amdO?void 0!==(Re=function(){return Te}.call(Ke,W,Ke,De))&&(De.exports=Re):this.alea=Te}(0,tt=W.nmd(tt))},9035:function(tt,Ke,W){var Re;!function(Dt,De,mt){function Me(pe){var P=this,te="";P.next=function(){var Q=P.b,ae=P.c,xe=P.d,Ce=P.a;return Q=Q<<25^Q>>>7^ae,ae=ae-xe|0,xe=xe<<24^xe>>>8^Ce,Ce=Ce-Q|0,P.b=Q=Q<<20^Q>>>12^ae,P.c=ae=ae-xe|0,P.d=xe<<16^ae>>>16^Ce,P.a=Ce-Q|0},P.a=0,P.b=0,P.c=-1640531527,P.d=1367130551,pe===Math.floor(pe)?(P.a=pe/4294967296|0,P.b=0|pe):te+=pe;for(var he=0;he<te.length+20;he++)P.b^=0|te.charCodeAt(he),P.next()}function Ne(pe,P){return P.a=pe.a,P.b=pe.b,P.c=pe.c,P.d=pe.d,P}function Te(pe,P){var te=new Me(pe),he=P&&P.state,Q=function(){return(te.next()>>>0)/4294967296};return Q.double=function(){do{var Ce=((te.next()>>>11)+(te.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},Q.int32=te.next,Q.quick=Q,he&&("object"==typeof he&&Ne(he,te),Q.state=function(){return Ne(te,{})}),Q}De&&De.exports?De.exports=Te:W.amdD&&W.amdO?void 0!==(Re=function(){return Te}.call(Ke,W,Ke,De))&&(De.exports=Re):this.tychei=Te}(0,tt=W.nmd(tt))},9678:function(tt,Ke,W){var Re;!function(Dt,De,mt){function Me(pe){var P=this,te="";P.x=0,P.y=0,P.z=0,P.w=0,P.next=function(){var Q=P.x^P.x<<11;return P.x=P.y,P.y=P.z,P.z=P.w,P.w^=P.w>>>19^Q^Q>>>8},pe===(0|pe)?P.x=pe:te+=pe;for(var he=0;he<te.length+64;he++)P.x^=0|te.charCodeAt(he),P.next()}function Ne(pe,P){return P.x=pe.x,P.y=pe.y,P.z=pe.z,P.w=pe.w,P}function Te(pe,P){var te=new Me(pe),he=P&&P.state,Q=function(){return(te.next()>>>0)/4294967296};return Q.double=function(){do{var Ce=((te.next()>>>11)+(te.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},Q.int32=te.next,Q.quick=Q,he&&("object"==typeof he&&Ne(he,te),Q.state=function(){return Ne(te,{})}),Q}De&&De.exports?De.exports=Te:W.amdD&&W.amdO?void 0!==(Re=function(){return Te}.call(Ke,W,Ke,De))&&(De.exports=Re):this.xor128=Te}(0,tt=W.nmd(tt))},7594:function(tt,Ke,W){var Re;!function(Dt,De,mt){function Me(pe){var P=this;P.next=function(){var xe,Ce,he=P.w,Q=P.X,ae=P.i;return P.w=he=he+1640531527|0,Ce=Q[ae+34&127],xe=Q[ae=ae+1&127],Ce^=Ce<<13,xe^=xe<<17,Ce=Q[ae]=(Ce^=Ce>>>15)^(xe^=xe>>>12),P.i=ae,Ce+(he^he>>>16)|0},function te(he,Q){var ae,xe,Ce,at,qt,jt=[],ss=128;for(Q===(0|Q)?(xe=Q,Q=null):(Q+="\0",xe=0,ss=Math.max(ss,Q.length)),Ce=0,at=-32;at<ss;++at)Q&&(xe^=Q.charCodeAt((at+32)%Q.length)),0===at&&(qt=xe),xe^=xe<<10,xe^=xe>>>15,xe^=xe<<4,xe^=xe>>>13,at>=0&&(Ce=0==(ae=jt[127&at]^=xe+(qt=qt+1640531527|0))?Ce+1:0);for(Ce>=128&&(jt[127&(Q&&Q.length||0)]=-1),Ce=127,at=512;at>0;--at)xe=jt[Ce+34&127],ae=jt[Ce=Ce+1&127],xe^=xe<<13,ae^=ae<<17,jt[Ce]=(xe^=xe>>>15)^(ae^=ae>>>12);he.w=qt,he.X=jt,he.i=Ce}(P,pe)}function Ne(pe,P){return P.i=pe.i,P.w=pe.w,P.X=pe.X.slice(),P}function Te(pe,P){null==pe&&(pe=+new Date);var te=new Me(pe),he=P&&P.state,Q=function(){return(te.next()>>>0)/4294967296};return Q.double=function(){do{var Ce=((te.next()>>>11)+(te.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},Q.int32=te.next,Q.quick=Q,he&&(he.X&&Ne(he,te),Q.state=function(){return Ne(te,{})}),Q}De&&De.exports?De.exports=Te:W.amdD&&W.amdO?void 0!==(Re=function(){return Te}.call(Ke,W,Ke,De))&&(De.exports=Re):this.xor4096=Te}(0,tt=W.nmd(tt))},5457:function(tt,Ke,W){var Re;!function(Dt,De,mt){function Me(pe){var P=this;P.next=function(){var ae,xe,he=P.x,Q=P.i;return ae=he[Q],xe=(ae^=ae>>>7)^ae<<24,xe^=(ae=he[Q+1&7])^ae>>>10,xe^=(ae=he[Q+3&7])^ae>>>3,xe^=(ae=he[Q+4&7])^ae<<7,ae=he[Q+7&7],he[Q]=xe^=(ae^=ae<<13)^ae<<9,P.i=Q+1&7,xe},function te(he,Q){var ae,Ce=[];if(Q===(0|Q))Ce[0]=Q;else for(Q=""+Q,ae=0;ae<Q.length;++ae)Ce[7&ae]=Ce[7&ae]<<15^Q.charCodeAt(ae)+Ce[ae+1&7]<<13;for(;Ce.length<8;)Ce.push(0);for(ae=0;ae<8&&0===Ce[ae];++ae);for(8==ae&&(Ce[7]=-1),he.x=Ce,he.i=0,ae=256;ae>0;--ae)he.next()}(P,pe)}function Ne(pe,P){return P.x=pe.x.slice(),P.i=pe.i,P}function Te(pe,P){null==pe&&(pe=+new Date);var te=new Me(pe),he=P&&P.state,Q=function(){return(te.next()>>>0)/4294967296};return Q.double=function(){do{var Ce=((te.next()>>>11)+(te.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},Q.int32=te.next,Q.quick=Q,he&&(he.x&&Ne(he,te),Q.state=function(){return Ne(te,{})}),Q}De&&De.exports?De.exports=Te:W.amdD&&W.amdO?void 0!==(Re=function(){return Te}.call(Ke,W,Ke,De))&&(De.exports=Re):this.xorshift7=Te}(0,tt=W.nmd(tt))},5278:function(tt,Ke,W){var Re;!function(Dt,De,mt){function Me(pe){var P=this,te="";P.next=function(){var Q=P.x^P.x>>>2;return P.x=P.y,P.y=P.z,P.z=P.w,P.w=P.v,(P.d=P.d+362437|0)+(P.v=P.v^P.v<<4^Q^Q<<1)|0},P.x=0,P.y=0,P.z=0,P.w=0,P.v=0,pe===(0|pe)?P.x=pe:te+=pe;for(var he=0;he<te.length+64;he++)P.x^=0|te.charCodeAt(he),he==te.length&&(P.d=P.x<<10^P.x>>>4),P.next()}function Ne(pe,P){return P.x=pe.x,P.y=pe.y,P.z=pe.z,P.w=pe.w,P.v=pe.v,P.d=pe.d,P}function Te(pe,P){var te=new Me(pe),he=P&&P.state,Q=function(){return(te.next()>>>0)/4294967296};return Q.double=function(){do{var Ce=((te.next()>>>11)+(te.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},Q.int32=te.next,Q.quick=Q,he&&("object"==typeof he&&Ne(he,te),Q.state=function(){return Ne(te,{})}),Q}De&&De.exports?De.exports=Te:W.amdD&&W.amdO?void 0!==(Re=function(){return Te}.call(Ke,W,Ke,De))&&(De.exports=Re):this.xorwow=Te}(0,tt=W.nmd(tt))},8507:function(tt,Ke,W){var Re;!function(Dt,De,mt){var ae,Me=256,P=mt.pow(Me,6),te=mt.pow(2,52),he=2*te,Q=Me-1;function xe(Ze,st,rt){var re=[],J=jt(qt((st=1==st?{entropy:!0}:st||{}).entropy?[Ze,Wn(De)]:Ze??function ss(){try{var Ze;return ae&&(Ze=ae.randomBytes)?Ze=Ze(Me):(Ze=new Uint8Array(Me),(Dt.crypto||Dt.msCrypto).getRandomValues(Ze)),Wn(Ze)}catch{var st=Dt.navigator,rt=st&&st.plugins;return[+new Date,Dt,rt,Dt.screen,Wn(De)]}}(),3),re),$=new Ce(re),le=function(){for(var Oe=$.g(6),B=P,qe=0;Oe<te;)Oe=(Oe+qe)*Me,B*=Me,qe=$.g(1);for(;Oe>=he;)Oe/=2,B/=2,qe>>>=1;return(Oe+qe)/B};return le.int32=function(){return 0|$.g(4)},le.quick=function(){return $.g(4)/4294967296},le.double=le,jt(Wn($.S),De),(st.pass||rt||function(Oe,B,qe,it){return it&&(it.S&&at(it,$),Oe.state=function(){return at($,{})}),qe?(mt.random=Oe,B):Oe})(le,J,"global"in st?st.global:this==mt,st.state)}function Ce(Ze){var st,rt=Ze.length,re=this,J=0,$=re.i=re.j=0,le=re.S=[];for(rt||(Ze=[rt++]);J<Me;)le[J]=J++;for(J=0;J<Me;J++)le[J]=le[$=Q&$+Ze[J%rt]+(st=le[J])],le[$]=st;(re.g=function(Oe){for(var B,qe=0,it=re.i,zt=re.j,Mt=re.S;Oe--;)B=Mt[it=Q&it+1],qe=qe*Me+Mt[Q&(Mt[it]=Mt[zt=Q&zt+B])+(Mt[zt]=B)];return re.i=it,re.j=zt,qe})(Me)}function at(Ze,st){return st.i=Ze.i,st.j=Ze.j,st.S=Ze.S.slice(),st}function qt(Ze,st){var J,rt=[],re=typeof Ze;if(st&&"object"==re)for(J in Ze)try{rt.push(qt(Ze[J],st-1))}catch{}return rt.length?rt:"string"==re?Ze:Ze+"\0"}function jt(Ze,st){for(var re,rt=Ze+"",J=0;J<rt.length;)st[Q&J]=Q&(re^=19*st[Q&J])+rt.charCodeAt(J++);return Wn(st)}function Wn(Ze){return String.fromCharCode.apply(0,Ze)}if(jt(mt.random(),De),tt.exports){tt.exports=xe;try{ae=W(5042)}catch{}}else void 0!==(Re=function(){return xe}.call(Ke,W,Ke,tt))&&(tt.exports=Re)}(typeof self<"u"?self:this,[],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}}]);