(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["default-node_modules_tensorflow_tfjs_dist_index_js"],{

/***/ 75238:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MathBackendCPU": () => (/* binding */ MathBackendCPU)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cpu_util */ 27950);

/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const whereImpl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.kernel_impls.whereImpl;

class MathBackendCPU extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.KernelBackend {
  nextDataId() {
    return MathBackendCPU.nextDataId++;
  }
  constructor() {
    super();
    this.blockSize = 48;
    this.firstUse = true;
    this.data = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.DataStorage(this, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.engine)());
  }
  write(values, shape, dtype) {
    if (this.firstUse) {
      this.firstUse = false;
      if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('IS_NODE')) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.backend_util.warn('\n============================\n' + 'Hi, looks like you are running TensorFlow.js in ' + 'Node.js. To speed things up dramatically, install our node ' + 'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' + '\n============================');
      }
    }
    const dataId = {
      id: this.nextDataId()
    };
    this.data.set(dataId, {
      values,
      dtype,
      refCount: 1
    });
    return dataId;
  }
  /**
   * Create a data bucket in cpu backend.
   * @param shape Shape of the `TensorInfo`.
   * @param dtype DType of the `TensorInfo`.
   * @param values The value of the `TensorInfo` stored as a flattened array.
   */
  makeTensorInfo(shape, dtype, values) {
    let outId;
    if (dtype === 'string' && values != null && values.length > 0 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isString(values[0])) {
      const encodedValues = values.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.encodeString(d));
      outId = this.write(encodedValues, shape, dtype);
    } else {
      outId = this.write(values, shape, dtype);
    }
    return {
      dataId: outId,
      shape,
      dtype
    };
  }
  /** Return refCount of a `TensorData`. */
  refCount(dataId) {
    if (this.data.has(dataId)) {
      const tensorData = this.data.get(dataId);
      return tensorData.refCount;
    }
    return 0;
  }
  /** Increase refCount of a `TensorData`. */
  incRef(dataId) {
    const tensorData = this.data.get(dataId);
    tensorData.refCount++;
  }
  /** Decrease refCount of a `TensorData`. */
  decRef(dataId) {
    if (this.data.has(dataId)) {
      const tensorData = this.data.get(dataId);
      tensorData.refCount--;
    }
  }
  move(dataId, values, shape, dtype, refCount) {
    this.data.set(dataId, {
      values,
      dtype,
      refCount
    });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  read(dataId) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.readSync(dataId);
    })();
  }
  readSync(dataId) {
    const {
      dtype,
      complexTensorInfos
    } = this.data.get(dataId);
    if (dtype === 'complex64') {
      const realValues = this.readSync(complexTensorInfos.real.dataId);
      const imagValues = this.readSync(complexTensorInfos.imag.dataId);
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.backend_util.mergeRealAndImagArrays(realValues, imagValues);
    }
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.convertBackendValuesAndArrayBuffer(this.data.get(dataId).values, dtype);
  }
  bufferSync(t) {
    const data = this.readSync(t.dataId);
    if (t.dtype === 'string') {
      try {
        // Decode the bytes into string.
        const strings = data.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.decodeString(d));
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.buffer)(t.shape, t.dtype, strings);
      } catch (_a) {
        throw new Error('Failed to decode encoded string bytes into utf-8');
      }
    }
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.buffer)(t.shape, t.dtype, data);
  }
  makeOutput(values, shape, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);
  }
  /**
   * Dispose the memory if the dataId has 0 refCount. Return true if the memory
   * is released or memory is not managed in this backend, false if memory is
   * not cleared.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(dataId, force = false) {
    if (this.data.has(dataId)) {
      this.data.get(dataId).refCount--;
      if (!force && this.data.get(dataId).refCount > 0) {
        return false;
      }
      const {
        complexTensorInfos
      } = this.data.get(dataId);
      if (complexTensorInfos != null) {
        this.disposeData(complexTensorInfos.real.dataId, true);
        this.disposeData(complexTensorInfos.imag.dataId, true);
      }
      this.data.delete(dataId);
    }
    return true;
  }
  disposeIntermediateTensorInfo(tensorInfo) {
    this.disposeData(tensorInfo.dataId);
  }
  time(f) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const start = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now();
      f();
      const kernelMs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now() - start;
      return {
        kernelMs
      };
    })();
  }
  memory() {
    return {
      // Unreliable due to automatic gc. The numbers above are cumulative.
      unreliable: true,
      reasons: ['The reported memory is an upper bound. Due to automatic garbage ' + 'collection, the true allocated memory may be less.']
    };
  }
  where(condition) {
    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_2__.assertNotComplex)([condition], 'where');
    const condVals = this.readSync(condition.dataId);
    return whereImpl(condition.shape, condVals);
  }
  dispose() {}
  floatPrecision() {
    return 32;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return super.epsilon();
  }
}
MathBackendCPU.nextDataId = 0;

/***/ }),

/***/ 66236:
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MathBackendCPU": () => (/* reexport safe */ _backend_cpu__WEBPACK_IMPORTED_MODULE_1__.MathBackendCPU),
/* harmony export */   "shared": () => (/* reexport module object */ _shared__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "version_cpu": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_2__.version)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_cpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend_cpu */ 75238);
/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared */ 12582);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version */ 81715);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/*
 * base.ts contains all the exports from tfjs-backend-cpu
 * without auto-kernel registration
 */






// Side effects for default initialization of MathBackendCPU
(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerBackend)('cpu', () => new _backend_cpu__WEBPACK_IMPORTED_MODULE_1__.MathBackendCPU(), 1 /* priority */);

/***/ }),

/***/ 27950:
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertNotComplex": () => (/* binding */ assertNotComplex)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function assertNotComplex(tensor, opName) {
  if (!Array.isArray(tensor)) {
    tensor = [tensor];
  }
  tensor.forEach(t => {
    if (t != null) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);
    }
  });
}

/***/ }),

/***/ 72836:
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MathBackendCPU": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.MathBackendCPU),
/* harmony export */   "shared": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.shared),
/* harmony export */   "version_cpu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.version_cpu)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ 66236);
/* harmony import */ var _register_all_kernels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./register_all_kernels */ 69930);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// All exports from this package should be in base.



/***/ }),

/***/ 5537:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "abs": () => (/* binding */ abs),
/* harmony export */   "absConfig": () => (/* binding */ absConfig),
/* harmony export */   "simpleAbsImpl": () => (/* binding */ simpleAbsImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function simpleAbsImpl(vals) {
  const resultValues = new Float32Array(vals.length);
  for (let i = 0; i < vals.length; ++i) {
    resultValues[i] = Math.abs(vals[i]);
  }
  return resultValues;
}
const abs = args => {
  const {
    x
  } = args.inputs;
  const cpuBackend = args.backend;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'abs');
  let resultValues = new Float32Array(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape));
  const values = cpuBackend.data.get(x.dataId).values;
  resultValues = simpleAbsImpl(values);
  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);
};
const absConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Abs,
  backendName: 'cpu',
  kernelFunc: abs
};

/***/ }),

/***/ 60397:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Acos.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acos": () => (/* binding */ acos),
/* harmony export */   "acosConfig": () => (/* binding */ acosConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const acos = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acos, xi => Math.acos(xi));
const acosConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acos,
  backendName: 'cpu',
  kernelFunc: acos
};

/***/ }),

/***/ 26037:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Acosh.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acosh": () => (/* binding */ acosh),
/* harmony export */   "acoshConfig": () => (/* binding */ acoshConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const acosh = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acosh, xi => Math.acosh(xi));
const acoshConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acosh,
  backendName: 'cpu',
  kernelFunc: acosh
};

/***/ }),

/***/ 5939:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "addComplexImpl": () => (/* binding */ addComplexImpl),
/* harmony export */   "addConfig": () => (/* binding */ addConfig),
/* harmony export */   "addImpl": () => (/* binding */ addImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const addImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a + b);
const addComplexImpl = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag) => {
  return {
    real: aReal + bReal,
    imag: aImag + bImag
  };
});
const add = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Add, addImpl, addComplexImpl);
const addConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Add,
  backendName: 'cpu',
  kernelFunc: add
};

/***/ }),

/***/ 64383:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AddN.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addN": () => (/* binding */ addN),
/* harmony export */   "addNConfig": () => (/* binding */ addNConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function addN(args) {
  const {
    inputs,
    backend
  } = args;
  const tensors = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(inputs, 'addN');
  const vals = tensors.map(t => backend.data.get(t.dataId).values);
  const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(tensors[0].shape, tensors[0].dtype);
  const outVals = outBuf.values;
  for (let i = 0; i < tensors.length; i++) {
    const currVals = vals[i];
    for (let j = 0; j < outVals.length; j++) {
      outVals[j] += currVals[j];
    }
  }
  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
}
const addNConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AddN,
  backendName: 'cpu',
  kernelFunc: addN
};

/***/ }),

/***/ 83647:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/All.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "all": () => (/* binding */ all),
/* harmony export */   "allConfig": () => (/* binding */ allConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function all(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'all');
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);
  let $x = x;
  if (permutedAxes != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, x.shape.length);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes($x.shape, axes);
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape), $x.dtype);
  const aVals = backend.data.get($x.dataId).values;
  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let all = aVals[offset];
    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];
      all = all && value;
    }
    vals[i] = all;
  }
  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo($x);
  }
  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
  if (keepDims) {
    const expandedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);
    const reshapedResult = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        shape: expandedShape
      }
    });
    backend.disposeIntermediateTensorInfo(result);
    return reshapedResult;
  }
  return result;
}
const allConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.All,
  backendName: 'cpu',
  kernelFunc: all
};

/***/ }),

/***/ 73814:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Any.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "any": () => (/* binding */ any),
/* harmony export */   "anyConfig": () => (/* binding */ anyConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function any(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'any');
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);
  let $x = x;
  if (permutedAxes != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, x.shape.length);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes($x.shape, axes);
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape), $x.dtype);
  const aVals = backend.data.get($x.dataId).values;
  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let anyVal = aVals[offset];
    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];
      anyVal = anyVal || value;
    }
    vals[i] = anyVal;
  }
  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo($x);
  }
  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
  if (keepDims) {
    const expandedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);
    const reshapedResult = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        shape: expandedShape
      }
    });
    backend.disposeIntermediateTensorInfo(result);
    return reshapedResult;
  }
  return result;
}
const anyConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Any,
  backendName: 'cpu',
  kernelFunc: any
};

/***/ }),

/***/ 3532:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ArgMax.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMax": () => (/* binding */ argMax),
/* harmony export */   "argMaxConfig": () => (/* binding */ argMaxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function argMax(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'argMax');
  let axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);
  let $x = x;
  const intermediateTensorInfos = [];
  if (permutedAxes != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    intermediateTensorInfos.push($x);
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, $x.shape.length);
  }
  axes = [axes[0]];
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes($x.shape, axes);
  const outSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape);
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(outSize, 'int32');
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const aVals = backend.data.get($x.dataId).values;
  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let max = aVals[offset];
    let maxIndex = 0;
    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];
      if (value > max) {
        max = value;
        maxIndex = j;
      }
    }
    vals[i] = maxIndex;
  }
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return backend.makeTensorInfo(outShape, 'int32', vals);
}
const argMaxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMax,
  backendName: 'cpu',
  kernelFunc: argMax
};

/***/ }),

/***/ 90246:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ArgMin.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMin": () => (/* binding */ argMin),
/* harmony export */   "argMinConfig": () => (/* binding */ argMinConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function argMin(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'argMin');
  let axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);
  let $x = x;
  const intermediateTensorInfos = [];
  if (permutedAxes != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    intermediateTensorInfos.push($x);
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, $x.shape.length);
  }
  axes = [axes[0]];
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes($x.shape, axes);
  const outSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape);
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(outSize, 'int32');
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const aVals = backend.data.get($x.dataId).values;
  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let min = aVals[offset];
    let minIndex = 0;
    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];
      if (value < min) {
        min = value;
        minIndex = j;
      }
    }
    vals[i] = minIndex;
  }
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return backend.makeTensorInfo(outShape, 'int32', vals);
}
const argMinConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMin,
  backendName: 'cpu',
  kernelFunc: argMin
};

/***/ }),

/***/ 27101:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Asin.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asin": () => (/* binding */ asin),
/* harmony export */   "asinConfig": () => (/* binding */ asinConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const asin = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asin, xi => Math.asin(xi));
const asinConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asin,
  backendName: 'cpu',
  kernelFunc: asin
};

/***/ }),

/***/ 1517:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Asinh.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinh": () => (/* binding */ asinh),
/* harmony export */   "asinhConfig": () => (/* binding */ asinhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const asinh = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asinh, xi => Math.asinh(xi));
const asinhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asinh,
  backendName: 'cpu',
  kernelFunc: asinh
};

/***/ }),

/***/ 51685:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atan.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan": () => (/* binding */ atan),
/* harmony export */   "atanConfig": () => (/* binding */ atanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const atan = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan, xi => Math.atan(xi));
const atanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan,
  backendName: 'cpu',
  kernelFunc: atan
};

/***/ }),

/***/ 7825:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atan2.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan2": () => (/* binding */ atan2),
/* harmony export */   "atan2Config": () => (/* binding */ atan2Config),
/* harmony export */   "atan2Impl": () => (/* binding */ atan2Impl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const atan2Impl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((aValue, bValue) => Math.atan2(aValue, bValue));
const atan2 = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan2, atan2Impl);
const atan2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan2,
  backendName: 'cpu',
  kernelFunc: atan2
};

/***/ }),

/***/ 45035:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atanh.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanh": () => (/* binding */ atanh),
/* harmony export */   "atanhConfig": () => (/* binding */ atanhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const atanh = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atanh, xi => Math.atanh(xi));
const atanhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atanh,
  backendName: 'cpu',
  kernelFunc: atanh
};

/***/ }),

/***/ 25068:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool": () => (/* binding */ avgPool),
/* harmony export */   "avgPoolConfig": () => (/* binding */ avgPoolConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_pool_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/pool_utils */ 15062);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ 98750);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function avgPool(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'avgPool');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = 1;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
  let res;
  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
    res = (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
      inputs: {
        x
      },
      backend
    });
  } else {
    const xValues = backend.data.get(x.dataId).values;
    const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
    const buffer = (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_3__.pool)(xValues, x.shape, x.dtype, strides, convInfo, 'avg');
    res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);
  }
  return res;
}
const avgPoolConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool,
  backendName: 'cpu',
  kernelFunc: avgPool
};

/***/ }),

/***/ 18849:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool3D.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3D": () => (/* binding */ avgPool3D),
/* harmony export */   "avgPool3DConfig": () => (/* binding */ avgPool3DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/pool_utils */ 15062);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function avgPool3D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'avgPool3d');
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);
  const xValues = backend.data.get(x.dataId).values;
  const outBuf = (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__.pool3d)(xValues, x.shape, x.dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape), convInfo, 'avg');
  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);
}
const avgPool3DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3D,
  backendName: 'cpu',
  kernelFunc: avgPool3D
};

/***/ }),

/***/ 35456:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool3DGrad.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3DGrad": () => (/* binding */ avgPool3DGrad),
/* harmony export */   "avgPool3DGradConfig": () => (/* binding */ avgPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function avgPool3DGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, input], 'avgPool3DGrad');
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
  const strideDepth = convInfo.strideDepth;
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const filterDepth = convInfo.filterDepth;
  const filterHeight = convInfo.filterHeight;
  const filterWidth = convInfo.filterWidth;
  const dilationDepth = convInfo.dilationDepth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterDepth = convInfo.effectiveFilterDepth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
  const dx = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(input.shape, 'float32');
  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
  const dyBuf = backend.bufferSync(dy);
  for (let batch = 0; batch < convInfo.batchSize; ++batch) {
    for (let channel = 0; channel < convInfo.inChannels; ++channel) {
      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {
        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {
          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {
            // Shader code begins.
            const dyDepthCorner = dxDepth - padFront;
            const dyRowCorner = dxRow - padTop;
            const dyColCorner = dxCol - padLeft;
            let dotProd = 0;
            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {
              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {
                continue;
              }
              for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {
                const dyRow = (dyRowCorner + wRow) / strideHeight;
                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {
                  continue;
                }
                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {
                  const dyCol = (dyColCorner + wCol) / strideWidth;
                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {
                    continue;
                  }
                  const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                  dotProd += pixel;
                }
              }
            }
            dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const avgPool3DGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3DGrad,
  backendName: 'cpu',
  kernelFunc: avgPool3DGrad
};

/***/ }),

/***/ 68241:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPoolGrad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPoolGrad": () => (/* binding */ avgPoolGrad),
/* harmony export */   "avgPoolGradConfig": () => (/* binding */ avgPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function avgPoolGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const x = input;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, input], 'avgPoolGrad');
  const {
    filterSize,
    strides,
    pad
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const filterHeight = convInfo.filterHeight;
  const filterWidth = convInfo.filterWidth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
  const dx = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(x.shape, 'float32');
  const avgMultiplier = 1 / (filterHeight * filterWidth);
  const dyData = backend.data.get(dy.dataId).values;
  const dyBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(dy.shape, 'float32', dyData);
  for (let b = 0; b < convInfo.batchSize; ++b) {
    for (let d = 0; d < convInfo.inChannels; ++d) {
      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {
        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {
          // Shader code begins.
          const dyRCorner = dxR - padTop;
          const dyCCorner = dxC - padLeft;
          let dotProd = 0;
          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {
            const dyR = (dyRCorner + wR) / strideHeight;
            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {
              continue;
            }
            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {
              const dyC = (dyCCorner + wC) / strideWidth;
              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {
                continue;
              }
              const pixel = dyBuf.get(b, dyR, dyC, d);
              dotProd += pixel;
            }
          }
          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);
        }
      }
    }
  }
  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const avgPoolGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPoolGrad,
  backendName: 'cpu',
  kernelFunc: avgPoolGrad
};

/***/ }),

/***/ 1841:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchMatMul.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchMatMul": () => (/* binding */ batchMatMul),
/* harmony export */   "batchMatMulConfig": () => (/* binding */ batchMatMulConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function batchMatMul(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    a,
    b
  } = inputs;
  const {
    transposeA,
    transposeB
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([a, b], 'matMul');
  const aRank = a.shape.length;
  const bRank = b.shape.length;
  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];
  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];
  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];
  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];
  const outerDimsA = a.shape.slice(0, -2);
  const outerDimsB = b.shape.slice(0, -2);
  const batchDimA = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outerDimsA);
  const batchDimB = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outerDimsB);
  const outShapeOuterDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));
  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];
  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];
  // The rest of the implementation is designed to operate on rank-3 tensors
  const a3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: a
    },
    backend,
    attrs: {
      shape: a3dShape
    }
  });
  const b3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: b
    },
    backend,
    attrs: {
      shape: b3dShape
    }
  });
  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];
  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];
  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];
  const batchDim = Math.max(batchDimA, batchDimB);
  const a3dValues = backend.data.get(a3d.dataId).values;
  const b3dValues = backend.data.get(b3d.dataId).values;
  const a3dStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(a3d.shape);
  const b3dStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(b3d.shape);
  const [aBatch, aOuterStep, aInnerStep] = transposeA ? [a3dStrides[0], 1, a3dStrides[1]] : [a3dStrides[0], a3dStrides[1], 1];
  const [bInnerStep, bOuterStep, bBatch] = transposeB ? [1, b3dStrides[1], b3dStrides[0]] : [b3dStrides[1], 1, b3dStrides[0]];
  const size = leftDim * rightDim;
  const result = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)([batchDim, leftDim, rightDim], a3d.dtype);
  const resVals = result.values;
  const blockSize = backend.blockSize;
  for (let bi = 0; bi < batchDim; bi++) {
    const batchIndexA = bi % batchDimA;
    const batchIndexB = bi % batchDimB;
    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {
      // for when blockSize doesn't evenly divide the input
      const iBlock = Math.min(i0 + blockSize, leftDim);
      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {
        const jBlock = Math.min(j0 + blockSize, rightDim);
        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {
          const kBlock = Math.min(k0 + blockSize, sharedDim);
          for (let i = i0; i < iBlock; i++) {
            for (let j = j0; j < jBlock; j++) {
              let sum = 0.0;
              for (let k = k0; k < kBlock; k++) {
                const aVal =
                // tslint:disable-next-line: max-line-length
                a3dValues[batchIndexA * aBatch + i * aOuterStep + k * aInnerStep];
                const bVal =
                // tslint:disable-next-line: max-line-length
                b3dValues[k * bInnerStep + j * bOuterStep + batchIndexB * bBatch];
                sum += aVal * bVal;
              }
              resVals[bi * size + (i * rightDim + j)] += sum;
            }
          }
        }
      }
    }
  }
  backend.disposeIntermediateTensorInfo(a3d);
  backend.disposeIntermediateTensorInfo(b3d);
  // set correct shape on output.
  return backend.makeTensorInfo(outShape, result.dtype, result.values);
}
const batchMatMulConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchMatMul,
  backendName: 'cpu',
  kernelFunc: batchMatMul
};

/***/ }),

/***/ 36837:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchNorm.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchNorm": () => (/* binding */ batchNorm),
/* harmony export */   "batchNormConfig": () => (/* binding */ batchNormConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function batchNorm(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    scale,
    offset,
    mean,
    variance
  } = inputs;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, mean, variance, scale, offset], 'batchNorm');
  let {
    varianceEpsilon
  } = attrs;
  if (varianceEpsilon == null) {
    varianceEpsilon = 0.001;
  }
  const xVals = backend.data.get(x.dataId).values;
  const mVals = backend.data.get(mean.dataId).values;
  const varVals = backend.data.get(variance.dataId).values;
  const sVals = scale ? backend.data.get(scale.dataId).values : new Float32Array([1]);
  const offVals = offset ? backend.data.get(offset.dataId).values : new Float32Array([0]);
  const outVals = new Float32Array(xVals.length);
  const offValsLength = offVals.length;
  const sValsLength = sVals.length;
  const varValsLength = varVals.length;
  const mValsLength = mVals.length;
  let offi = 0;
  let mi = 0;
  let si = 0;
  let vi = 0;
  for (let i = 0; i < xVals.length; ++i) {
    outVals[i] = offVals[offi++] + (xVals[i] - mVals[mi++]) * sVals[si++] / Math.sqrt(varVals[vi++] + varianceEpsilon);
    if (offi >= offValsLength) {
      offi = 0;
    }
    if (mi >= mValsLength) {
      mi = 0;
    }
    if (si >= sValsLength) {
      si = 0;
    }
    if (vi >= varValsLength) {
      vi = 0;
    }
  }
  return backend.makeTensorInfo(x.shape, x.dtype, outVals);
}
const batchNormConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedBatchNorm,
  backendName: 'cpu',
  kernelFunc: batchNorm
};

/***/ }),

/***/ 29071:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchToSpaceND.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchToSpaceND": () => (/* binding */ batchToSpaceND),
/* harmony export */   "batchToSpaceNDConfig": () => (/* binding */ batchToSpaceNDConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Slice */ 73343);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function batchToSpaceND(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockShape,
    crops
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x], 'batchToSpaceND');
  const prod = blockShape.reduce((a, b) => a * b);
  const reshaped = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshaped(x.shape, blockShape, prod);
  const permuted = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getPermuted(reshaped.length, blockShape.length);
  const reshapedPermuted = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshapedPermuted(x.shape, blockShape, prod);
  const sliceBeginCoords = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSliceBeginCoords(crops, blockShape.length);
  const sliceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);
  const xReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: reshaped
    }
  });
  const xTransposed = (0,_Transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)({
    inputs: {
      x: xReshaped
    },
    backend,
    attrs: {
      perm: permuted
    }
  });
  const xTransposedReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: xTransposed
    },
    backend,
    attrs: {
      shape: reshapedPermuted
    }
  });
  const result = (0,_Slice__WEBPACK_IMPORTED_MODULE_4__.slice)({
    inputs: {
      x: xTransposedReshaped
    },
    backend,
    attrs: {
      begin: sliceBeginCoords,
      size: sliceSize
    }
  });
  backend.disposeIntermediateTensorInfo(xReshaped);
  backend.disposeIntermediateTensorInfo(xTransposed);
  backend.disposeIntermediateTensorInfo(xTransposedReshaped);
  return result;
}
const batchToSpaceNDConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchToSpaceND,
  backendName: 'cpu',
  kernelFunc: batchToSpaceND
};

/***/ }),

/***/ 15199:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bincount": () => (/* binding */ bincount),
/* harmony export */   "bincountConfig": () => (/* binding */ bincountConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Bincount_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bincount_impl */ 84194);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function bincount(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    weights
  } = inputs;
  const {
    size
  } = attrs;
  const xVals = backend.data.get(x.dataId).values;
  const weightsVals = backend.data.get(weights.dataId).values;
  const outVals = (0,_Bincount_impl__WEBPACK_IMPORTED_MODULE_1__.bincountImpl)(xVals, weightsVals, weights.dtype, weights.shape, size);
  return backend.makeTensorInfo([size], weights.dtype, outVals);
}
const bincountConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Bincount,
  backendName: 'cpu',
  kernelFunc: bincount
};

/***/ }),

/***/ 84194:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bincountImpl": () => (/* binding */ bincountImpl),
/* harmony export */   "bincountReduceImpl": () => (/* binding */ bincountReduceImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {
  const weightsSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(weightsShape);
  const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(size, weightsDtype);
  for (let i = 0; i < xVals.length; i++) {
    const value = xVals[i];
    if (value < 0) {
      throw new Error('Input x must be non-negative!');
    }
    if (value >= size) {
      continue;
    }
    if (weightsSize > 0) {
      outVals[value] += weightsVals[i];
    } else {
      outVals[value] += 1;
    }
  }
  return outVals;
}
function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {
  const numRows = xBuf.shape[0];
  const numCols = xBuf.shape[1];
  const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)([numRows, size], weightsBuf.dtype);
  for (let i = 0; i < numRows; i++) {
    for (let j = 0; j < numCols; j++) {
      const value = xBuf.get(i, j);
      if (value < 0) {
        throw new Error('Input x must be non-negative!');
      }
      if (value >= size) {
        continue;
      }
      if (binaryOutput) {
        outBuf.set(1, i, value);
      } else {
        if (weightsBuf.size > 0) {
          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);
        } else {
          outBuf.set(outBuf.get(i, value) + 1, i, value);
        }
      }
    }
  }
  return outBuf;
}

/***/ }),

/***/ 99797:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BitwiseAnd.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitwiseAnd": () => (/* binding */ bitwiseAnd),
/* harmony export */   "bitwiseAndConfig": () => (/* binding */ bitwiseAndConfig),
/* harmony export */   "bitwiseAndImpl": () => (/* binding */ bitwiseAndImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const bitwiseAndImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a & b);
const bitwiseAnd = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BitwiseAnd, bitwiseAndImpl);
const bitwiseAndConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BitwiseAnd,
  backendName: 'cpu',
  kernelFunc: bitwiseAnd
};

/***/ }),

/***/ 39344:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BroadcastArgs.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastArgs": () => (/* binding */ broadcastArgs),
/* harmony export */   "broadcastArgsConfig": () => (/* binding */ broadcastArgsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function broadcastArgs(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    s0,
    s1
  } = inputs;
  const s0Vals = backend.data.get(s0.dataId).values;
  const s1Vals = backend.data.get(s1.dataId).values;
  const broadcastShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));
  return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));
}
const broadcastArgsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BroadcastArgs,
  backendName: 'cpu',
  kernelFunc: broadcastArgs
};

/***/ }),

/***/ 44177:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cast": () => (/* binding */ cast),
/* harmony export */   "castConfig": () => (/* binding */ castConfig),
/* harmony export */   "castImpl": () => (/* binding */ castImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_zeros_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/zeros_impl */ 87771);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Complex */ 50311);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ 98750);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Real */ 22749);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






function castImpl(values, shape, inputType, dtype) {
  if (dtype === 'int32') {
    const resultValues = Int32Array.from(values);
    return [shape, 'int32', resultValues];
  }
  if (dtype === 'bool') {
    // This is essentially the result of notEqual(x, 0). We avoid using
    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->
    // cast -> notEqual -> binary_utils.
    const zero = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toTypedArray([0], inputType);
    const [resultData, resultShape] = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a !== b ? 1 : 0)(shape, [], values, zero, 'bool');
    return [resultShape, 'bool', resultData];
  }
  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);
}
function cast(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    dtype
  } = attrs;
  // Casting to complex64.
  if (dtype === 'complex64') {
    if (x.dtype === 'complex64') {
      return (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
        inputs: {
          x
        },
        backend
      });
    }
    const zerosTensorInfo = (0,_utils_zeros_impl__WEBPACK_IMPORTED_MODULE_3__.zeros)(backend, x.shape, x.dtype);
    const floatX = cast({
      inputs: {
        x
      },
      backend,
      attrs: {
        dtype: 'float32'
      }
    });
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_4__.complex)({
      inputs: {
        real: floatX,
        imag: zerosTensorInfo
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(zerosTensorInfo);
    backend.disposeIntermediateTensorInfo(floatX);
    return result;
  }
  // Casting from complex64
  if (x.dtype === 'complex64') {
    const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_5__.real)({
      inputs: {
        input: x
      },
      backend
    });
    const result = cast({
      inputs: {
        x: realPart
      },
      backend,
      attrs: {
        dtype
      }
    });
    backend.disposeIntermediateTensorInfo(realPart);
    return result;
  }
  if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.hasEncodingLoss(x.dtype, dtype)) {
    // We don't change the underlying data, since we cast to higher
    // precision.
    const result = (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
      inputs: {
        x
      },
      backend
    });
    return {
      dataId: result.dataId,
      shape: result.shape,
      dtype
    };
  }
  const values = backend.data.get(x.dataId).values;
  const [resultShape, resultType, resultData] = castImpl(values, x.shape, x.dtype, dtype);
  return backend.makeTensorInfo(resultShape, resultType, resultData);
}
const castConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cast,
  backendName: 'cpu',
  kernelFunc: cast
};

/***/ }),

/***/ 13085:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceil": () => (/* binding */ ceil),
/* harmony export */   "ceilConfig": () => (/* binding */ ceilConfig),
/* harmony export */   "ceilImpl": () => (/* binding */ ceilImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ceilImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => Math.ceil(xi));
const ceil = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ceil, ceilImpl);
const ceilConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ceil,
  backendName: 'cpu',
  kernelFunc: ceil
};

/***/ }),

/***/ 1028:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ClipByValue.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clipByValue": () => (/* binding */ clipByValue),
/* harmony export */   "clipByValueConfig": () => (/* binding */ clipByValueConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const clipByValue = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ClipByValue, (xi, attrs) => {
  const clipAttrs = attrs;
  if (xi > clipAttrs.clipValueMax) {
    return clipAttrs.clipValueMax;
  }
  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;
});
const clipByValueConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ClipByValue,
  backendName: 'cpu',
  kernelFunc: clipByValue
};

/***/ }),

/***/ 50311:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complex": () => (/* binding */ complex),
/* harmony export */   "complexConfig": () => (/* binding */ complexConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function complex(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    real,
    imag
  } = inputs;
  const realVals = backend.data.get(real.dataId).values;
  const imagVals = backend.data.get(imag.dataId).values;
  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');
  const complex = backend.data.get(complexInfo.dataId);
  // The complex tensor owns the underlying real and imag tensorInfos, only the
  // complex tensor tracks refCount, when complexData is disposed the
  // underlying tensorData will be disposed.
  complex.complexTensorInfos = {
    real: backend.makeTensorInfo(real.shape, 'float32', realVals),
    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)
  };
  return complexInfo;
}
const complexConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Complex,
  backendName: 'cpu',
  kernelFunc: complex
};

/***/ }),

/***/ 30960:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ComplexAbs.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complexAbs": () => (/* binding */ complexAbs),
/* harmony export */   "complexAbsConfig": () => (/* binding */ complexAbsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const complexAbs = args => {
  const {
    x
  } = args.inputs;
  const cpuBackend = args.backend;
  const resultValues = new Float32Array(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape));
  const complexVals = cpuBackend.data.get(x.dataId);
  const real = complexVals.complexTensorInfos.real;
  const imag = complexVals.complexTensorInfos.imag;
  const realVals = cpuBackend.data.get(real.dataId).values;
  const imagVals = cpuBackend.data.get(imag.dataId).values;
  for (let i = 0; i < realVals.length; i++) {
    const real = realVals[i];
    const imag = imagVals[i];
    resultValues[i] = Math.hypot(real, imag);
  }
  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');
};
const complexAbsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ComplexAbs,
  backendName: 'cpu',
  kernelFunc: complexAbs
};

/***/ }),

/***/ 41621:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat": () => (/* binding */ concat),
/* harmony export */   "concatConfig": () => (/* binding */ concatConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Complex */ 50311);
/* harmony import */ var _Concat_impl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Concat_impl */ 44113);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 98750);
/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Imag */ 469);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Real */ 22749);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Reshape */ 19422);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







function concat(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    axis
  } = attrs;
  const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, inputs[0].shape)[0];
  const shapes = inputs.map(t => t.shape);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertParamsConsistent(shapes, $axis);
  let outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs.map(t => t.shape), $axis);
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape) === 0) {
    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);
  }
  // Keep only non-empty tensors (ignore tensors with 0 in their shape).
  const $inputs = inputs.filter(t => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape) > 0);
  if ($inputs.length === 1) {
    return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
      inputs: {
        x: $inputs[0]
      },
      backend
    });
  }
  if ($inputs[0].dtype === 'complex64') {
    const reals = $inputs.map(t => (0,_Real__WEBPACK_IMPORTED_MODULE_2__.real)({
      inputs: {
        input: t
      },
      backend
    }));
    const imags = $inputs.map(t => (0,_Imag__WEBPACK_IMPORTED_MODULE_3__.imag)({
      inputs: {
        input: t
      },
      backend
    }));
    const realConcated = concat({
      inputs: reals,
      backend,
      attrs: {
        axis: $axis
      }
    });
    const imagConcated = concat({
      inputs: imags,
      backend,
      attrs: {
        axis: $axis
      }
    });
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_4__.complex)({
      inputs: {
        real: realConcated,
        imag: imagConcated
      },
      backend
    });
    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));
    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));
    backend.disposeIntermediateTensorInfo(realConcated);
    backend.disposeIntermediateTensorInfo(imagConcated);
    return result;
  }
  // Any concat of n-dimensional tensors across any axis can be reduced to
  // a concatenation of two-dimensional tensors across the axis 1 by first
  // partitioning the axes of the original tensors into those less than the
  // axis to be concatenated and the rest. Then reshape the tensors
  // into a two-dimensional tensor by collapsing these two sets of axes and
  // concatenate the resulting matrices across the axis 1, finally reshaping
  // the result to have the proper shape.
  const inputs2D = $inputs.map(t => {
    const innerSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape.slice($axis));
    const shape = [-1, innerSize];
    return (0,_Reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)({
      inputs: {
        x: t
      },
      backend,
      attrs: {
        shape
      }
    });
  });
  const inputsValShapes = inputs2D.map(t => {
    return {
      vals: backend.data.get(t.dataId).values,
      shape: t.shape
    };
  });
  // Concats 2d tensors along axis=1.
  outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);
  const simplyConcat = inputs2D[0].shape[0] === 1;
  const outVals = (0,_Concat_impl__WEBPACK_IMPORTED_MODULE_6__.concatImpl)(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);
  const finalOutShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape($inputs.map(t => t.shape), $axis);
  const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);
  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return outInfo;
}
const concatConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Concat,
  backendName: 'cpu',
  kernelFunc: concat
};

/***/ }),

/***/ 44113:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatImpl": () => (/* binding */ concatImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function concatImpl(inputs, outShape, dtype, simplyConcat) {
  const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape));
  if (simplyConcat && dtype !== 'string') {
    // Use built-in TypedArray.set() method for speed.
    let offset = 0;
    inputs.forEach(input => {
      const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(input.shape);
      outVals.set(input.vals, offset);
      offset += size;
    });
  } else {
    let colOffset = 0;
    inputs.forEach(input => {
      const decodedData = dtype === 'string' ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(input.vals) : input.vals;
      let tIdx = 0;
      for (let row = 0; row < input.shape[0]; ++row) {
        const resIdx = row * outShape[1] + colOffset;
        for (let col = 0; col < input.shape[1]; ++col) {
          outVals[resIdx + col] = decodedData[tIdx++];
        }
      }
      colOffset += input.shape[1];
    });
  }
  return outVals;
}

/***/ }),

/***/ 65732:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2D.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2D": () => (/* binding */ conv2D),
/* harmony export */   "conv2DConfig": () => (/* binding */ conv2DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv2D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, filter], 'conv2d');
  const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
  const filterHeight = convInfo.filterHeight;
  const filterWidth = convInfo.filterWidth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const padLeft = convInfo.padInfo.left;
  const padTop = convInfo.padInfo.top;
  const isChannelsLast = convInfo.dataFormat === 'channelsLast';
  const y = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.outShape, x.dtype);
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
  const filterStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(filter.shape);
  const xBatchStride = xStrides[0];
  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];
  const xColStride = isChannelsLast ? xStrides[2] : 1;
  const xChannelStride = isChannelsLast ? 1 : xStrides[1];
  const yBatchStride = y.strides[0];
  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];
  const yColStride = isChannelsLast ? y.strides[2] : 1;
  const yChannelStride = isChannelsLast ? 1 : y.strides[1];
  const xVals = backend.data.get(x.dataId).values;
  const wVals = backend.data.get(filter.dataId).values;
  const yVals = y.values;
  for (let b = 0; b < convInfo.batchSize; ++b) {
    const xOffset1 = b * xBatchStride;
    const yOffset1 = b * yBatchStride;
    for (let yR = 0; yR < convInfo.outHeight; ++yR) {
      const yOffset2 = yOffset1 + yR * yRowStride;
      const xRCorner = yR * convInfo.strideHeight - padTop;
      for (let wR = 0; wR < filterHeight; ++wR) {
        const xR = xRCorner + wR * dilationHeight;
        if (xR < 0 || xR >= convInfo.inHeight) {
          continue;
        }
        const wOffset1 = wR * filterStrides[0];
        const xOffset2 = xOffset1 + xR * xRowStride;
        for (let yC = 0; yC < convInfo.outWidth; ++yC) {
          const yOffset3 = yOffset2 + yC * yColStride;
          const xCCorner = yC * convInfo.strideWidth - padLeft;
          for (let wC = 0; wC < filterWidth; ++wC) {
            const xC = xCCorner + wC * dilationWidth;
            if (xC < 0 || xC >= convInfo.inWidth) {
              continue;
            }
            const wOffset2 = wOffset1 + wC * filterStrides[1];
            const xOffset3 = xOffset2 + xC * xColStride;
            let wOffset3 = wOffset2;
            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
              const xVal = xVals[xOffset3 + d1 * xChannelStride];
              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
                yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];
              }
              wOffset3 += convInfo.outChannels;
            }
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(y.shape, y.dtype, yVals);
}
const conv2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2D,
  backendName: 'cpu',
  kernelFunc: conv2D
};

/***/ }),

/***/ 33603:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2DBackpropFilter.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropFilter": () => (/* binding */ conv2DBackpropFilter),
/* harmony export */   "conv2DBackpropFilterConfig": () => (/* binding */ conv2DBackpropFilterConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv2DBackpropFilter(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dimRoundingMode,
    filterShape
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, dy], 'conv2dBackpropFilter');
  const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
  const {
    strideHeight,
    strideWidth,
    filterHeight,
    filterWidth
  } = convInfo;
  const isChannelsLast = convInfo.dataFormat === 'channelsLast';
  const dW = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.filterShape, 'float32');
  const leftPad = convInfo.padInfo.left;
  const topPad = convInfo.padInfo.top;
  const xVals = backend.data.get(x.dataId).values;
  const dyVals = backend.data.get(dy.dataId).values;
  const xBuf = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(x.shape, x.dtype, xVals);
  const dyBuf = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(dy.shape, dy.dtype, dyVals);
  for (let wR = 0; wR < filterHeight; ++wR) {
    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
    const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
    for (let wC = 0; wC < filterWidth; ++wC) {
      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
      const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
          let dotProd = 0;
          for (let b = 0; b < convInfo.batchSize; ++b) {
            for (let yR = yRMin; yR < yRMax; ++yR) {
              const xR = wR + yR * strideHeight - topPad;
              for (let yC = yCMin; yC < yCMax; ++yC) {
                const xC = wC + yC * strideWidth - leftPad;
                if (isChannelsLast) {
                  dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);
                } else {
                  dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);
                }
              }
            }
          }
          dW.set(dotProd, wR, wC, d1, d2);
        }
      }
    }
  }
  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);
}
const conv2DBackpropFilterConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropFilter,
  backendName: 'cpu',
  kernelFunc: conv2DBackpropFilter
};

/***/ }),

/***/ 56718:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2DBackpropInput.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropInput": () => (/* binding */ conv2DBackpropInput),
/* harmony export */   "conv2DBackpropInputConfig": () => (/* binding */ conv2DBackpropInputConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv2DBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    inputShape,
    strides,
    pad,
    dataFormat,
    dimRoundingMode
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, filter], 'conv2dBackpropInput');
  const filterStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(filter.shape);
  const dyStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(dy.shape);
  let $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);
  const dx = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.inShape, 'float32');
  const dxValues = dx.values;
  const dyValues = backend.data.get(dy.dataId).values;
  const fltValues = backend.data.get(filter.dataId).values;
  const [fltS0, fltS1, fltS2] = filterStrides;
  const {
    batchSize,
    filterHeight,
    filterWidth,
    inChannels,
    inHeight,
    inWidth,
    outChannels,
    outHeight,
    outWidth,
    strideHeight,
    strideWidth
  } = convInfo;
  $dataFormat = convInfo.dataFormat;
  const topPad = filterHeight - 1 - convInfo.padInfo.top;
  const leftPad = filterWidth - 1 - convInfo.padInfo.left;
  const isChannelsLast = $dataFormat === 'channelsLast';
  const xBatchStride = dx.strides[0];
  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];
  const xColStride = isChannelsLast ? dx.strides[2] : 1;
  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];
  const yBatchStride = dyStrides[0];
  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];
  const yColStride = isChannelsLast ? dyStrides[2] : 1;
  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];
  for (let b = 0; b < batchSize; ++b) {
    for (let d1 = 0; d1 < inChannels; ++d1) {
      for (let xR = 0; xR < inHeight; ++xR) {
        const xRCorner = xR - topPad;
        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
        for (let xC = 0; xC < inWidth; ++xC) {
          const xCCorner = xC - leftPad;
          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
          let dotProd = 0;
          for (let yR = xRMin; yR < yRMax; ++yR) {
            const wR = yR * strideHeight - xRCorner;
            for (let yC = xCMin; yC < yCMax; ++yC) {
              const wC = yC * strideWidth - xCCorner;
              const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;
              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
              for (let d2 = 0; d2 < outChannels; ++d2) {
                const pixel = dyValues[dyOffset + yChannelStride * d2];
                const weight = fltValues[fltOffset + d2];
                dotProd += pixel * weight;
              }
            }
          }
          const dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;
          dxValues[dxOffset] = dotProd;
        }
      }
    }
  }
  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const conv2DBackpropInputConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropInput,
  backendName: 'cpu',
  kernelFunc: conv2DBackpropInput
};

/***/ }),

/***/ 99705:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3D.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3D": () => (/* binding */ conv3D),
/* harmony export */   "conv3DConfig": () => (/* binding */ conv3DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv3D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, filter], 'conv3d');
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);
  const {
    filterDepth,
    filterHeight,
    filterWidth,
    dilationDepth,
    dilationHeight,
    dilationWidth,
    padInfo
  } = convInfo;
  const padFront = padInfo.front;
  const padLeft = padInfo.left;
  const padTop = padInfo.top;
  const y = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.outShape, x.dtype);
  const xVals = backend.data.get(x.dataId).values;
  const wVals = backend.data.get(filter.dataId).values;
  const yVals = y.values;
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
  const filterStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(filter.shape);
  for (let b = 0; b < convInfo.batchSize; ++b) {
    const xOffset1 = b * xStrides[0];
    const yOffset1 = b * y.strides[0];
    for (let yF = 0; yF < convInfo.outDepth; ++yF) {
      const yOffset2 = yOffset1 + yF * y.strides[1];
      const xFCorner = yF * convInfo.strideDepth - padFront;
      for (let wF = 0; wF < filterDepth; ++wF) {
        const xF = xFCorner + wF * dilationDepth;
        if (xF < 0 || xF >= convInfo.inDepth) {
          continue;
        }
        const wOffset1 = wF * filterStrides[0];
        const xOffset2 = xOffset1 + xF * xStrides[1];
        for (let yR = 0; yR < convInfo.outHeight; ++yR) {
          const yOffset3 = yOffset2 + yR * y.strides[2];
          const xRCorner = yR * convInfo.strideHeight - padTop;
          for (let wR = 0; wR < filterHeight; ++wR) {
            const xR = xRCorner + wR * dilationHeight;
            if (xR < 0 || xR >= convInfo.inHeight) {
              continue;
            }
            const wOffset2 = wOffset1 + wR * filterStrides[1];
            const xOffset3 = xOffset2 + xR * xStrides[2];
            for (let yC = 0; yC < convInfo.outWidth; ++yC) {
              const yOffset4 = yOffset3 + yC * convInfo.outChannels;
              const xCCorner = yC * convInfo.strideWidth - padLeft;
              for (let wC = 0; wC < filterWidth; ++wC) {
                const xC = xCCorner + wC * dilationWidth;
                if (xC < 0 || xC >= convInfo.inWidth) {
                  continue;
                }
                const wOffset3 = wOffset2 + wC * filterStrides[2];
                const xOffset4 = xOffset3 + xC * convInfo.inChannels;
                let wOffset4 = wOffset3;
                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
                  const xVal = xVals[xOffset4 + d1];
                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];
                  }
                  wOffset4 += convInfo.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(y.shape, y.dtype, y.values);
}
const conv3DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3D,
  backendName: 'cpu',
  kernelFunc: conv3D
};

/***/ }),

/***/ 28160:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3DBackpropFilterV2.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DBackpropFilterV2": () => (/* binding */ conv3DBackpropFilterV2),
/* harmony export */   "conv3DBackpropFilterV2Config": () => (/* binding */ conv3DBackpropFilterV2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv3DBackpropFilterV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    pad,
    filterShape
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, dy], 'conv3dBackpropFilterV2');
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
  const dyStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(dy.shape);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);
  const strideDepth = convInfo.strideDepth;
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const filterDepth = convInfo.filterDepth;
  const filterHeight = convInfo.filterHeight;
  const filterWidth = convInfo.filterWidth;
  const dw = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.filterShape, 'float32');
  const dwValues = dw.values;
  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;
  const dyValues = backend.data.get(dy.dataId).values;
  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;
  const xValues = backend.data.get(x.dataId).values;
  const [xS0, xS1, xS2, xS3] = xStrides;
  const frontPad = convInfo.padInfo.front;
  const leftPad = convInfo.padInfo.left;
  const topPad = convInfo.padInfo.top;
  for (let wF = 0; wF < filterDepth; ++wF) {
    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));
    const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);
    const wOffset1 = wF * dwS0;
    for (let wR = 0; wR < filterHeight; ++wR) {
      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
      const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
      const wOffset2 = wR * dwS1 + wOffset1;
      for (let wC = 0; wC < filterWidth; ++wC) {
        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
        const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
        const wOffset3 = wC * dwS2 + wOffset2;
        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
          const wOffset4 = d1 * dwS3 + wOffset3;
          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
            let dotProd = 0;
            for (let b = 0; b < convInfo.batchSize; ++b) {
              const xOffset1 = b * xS0;
              const yOffset1 = b * dyS0;
              for (let yF = yFMin; yF < yFMax; ++yF) {
                const xF = wF + yF * strideDepth - frontPad;
                const xOffset2 = xF * xS1 + xOffset1;
                const yOffset2 = yF * dyS1 + yOffset1;
                for (let yR = yRMin; yR < yRMax; ++yR) {
                  const xR = wR + yR * strideHeight - topPad;
                  const xOffset3 = xR * xS2 + xOffset2;
                  const yOffset3 = yR * dyS2 + yOffset2;
                  for (let yC = yCMin; yC < yCMax; ++yC) {
                    const xC = wC + yC * strideWidth - leftPad;
                    const xOffset4 = xC * xS3 + xOffset3;
                    const yOffset4 = yC * dyS3 + yOffset3;
                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];
                  }
                }
              }
            }
            dwValues[wOffset4 + d2] = dotProd;
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);
}
const conv3DBackpropFilterV2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropFilterV2,
  backendName: 'cpu',
  kernelFunc: conv3DBackpropFilterV2
};

/***/ }),

/***/ 55727:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3DBackpropInputV2.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DBackpropInputV2": () => (/* binding */ conv3DBackpropInputV2),
/* harmony export */   "conv3DBackpropInputV2Config": () => (/* binding */ conv3DBackpropInputV2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv3DBackpropInputV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    pad,
    strides,
    inputShape
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy], 'conv3dBackpropInputV2');
  const dyStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(dy.shape);
  const filterStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(filter.shape);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);
  const dx = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.inShape, 'float32');
  const dxValues = dx.values;
  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;
  const dyValues = backend.data.get(dy.dataId).values;
  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;
  const fltValues = backend.data.get(filter.dataId).values;
  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;
  const {
    batchSize,
    filterDepth,
    filterHeight,
    filterWidth,
    inChannels,
    inDepth,
    inHeight,
    inWidth,
    outChannels,
    outDepth,
    outHeight,
    outWidth,
    strideDepth,
    strideHeight,
    strideWidth
  } = convInfo;
  const frontPad = filterDepth - 1 - convInfo.padInfo.front;
  const topPad = filterHeight - 1 - convInfo.padInfo.top;
  const leftPad = filterWidth - 1 - convInfo.padInfo.left;
  for (let b = 0; b < batchSize; ++b) {
    for (let d1 = 0; d1 < inChannels; ++d1) {
      // Frames of depth
      for (let xF = 0; xF < inDepth; ++xF) {
        const xFCorner = xF - frontPad;
        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));
        const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);
        // Rows as per standard 2d matrix notation
        for (let xR = 0; xR < inHeight; ++xR) {
          const xRCorner = xR - topPad;
          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
          const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
          // Columns as per standard 2d matrix notation
          for (let xC = 0; xC < inWidth; ++xC) {
            const xCCorner = xC - leftPad;
            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
            const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
            let dotProd = 0;
            for (let yF = xFMin; yF < yFMax; ++yF) {
              const wF = yF * strideDepth - xFCorner;
              for (let yR = xRMin; yR < yRMax; ++yR) {
                const wR = yR * strideHeight - xRCorner;
                for (let yC = xCMin; yC < yCMax; ++yC) {
                  const wC = yC * strideWidth - xCCorner;
                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;
                  const fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;
                  for (let d2 = 0; d2 < outChannels; ++d2) {
                    const pixel = dyValues[dyOffset + d2];
                    const weight = fltValues[fltOffset + d2];
                    dotProd += pixel * weight;
                  }
                }
              }
            }
            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const conv3DBackpropInputV2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropInputV2,
  backendName: 'cpu',
  kernelFunc: conv3DBackpropInputV2
};

/***/ }),

/***/ 90295:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cos.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cos": () => (/* binding */ cos),
/* harmony export */   "cosConfig": () => (/* binding */ cosConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const cos = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cos, xi => Math.cos(xi));
const cosConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cos,
  backendName: 'cpu',
  kernelFunc: cos
};

/***/ }),

/***/ 1313:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cosh.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosh": () => (/* binding */ cosh),
/* harmony export */   "coshConfig": () => (/* binding */ coshConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const cosh = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cosh, xi => Math.cosh(xi));
const coshConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cosh,
  backendName: 'cpu',
  kernelFunc: cosh
};

/***/ }),

/***/ 10450:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/CropAndResize.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cropAndResize": () => (/* binding */ cropAndResize),
/* harmony export */   "cropAndResizeConfig": () => (/* binding */ cropAndResizeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function cropAndResize(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    image,
    boxes,
    boxInd
  } = inputs;
  const {
    cropSize,
    method,
    extrapolationValue
  } = attrs;
  const [batch, imageHeight, imageWidth, numChannels] = image.shape;
  const numBoxes = boxes.shape[0];
  const [cropHeight, cropWidth] = cropSize;
  const output = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)([numBoxes, cropHeight, cropWidth, numChannels], 'float32');
  const boxVals = backend.data.get(boxes.dataId).values;
  const boxIndVals = backend.data.get(boxInd.dataId).values;
  const imageVals = backend.data.get(image.dataId).values;
  const inStride = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(image.shape); // to calculate flat indexes into image
  const outStride = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(output.shape); // to calculate flat indexes into output
  // Reference implementation
  // tslint:disable-next-line:max-line-length
  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc
  for (let b = 0; b < numBoxes; b++) {
    const startInd = b * 4;
    const y1 = boxVals[startInd];
    const x1 = boxVals[startInd + 1];
    const y2 = boxVals[startInd + 2];
    const x2 = boxVals[startInd + 3];
    const bInd = boxIndVals[b];
    if (bInd >= batch) {
      continue;
    }
    const heightScale = cropHeight > 1 ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;
    const widthScale = cropWidth > 1 ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;
    for (let y = 0; y < cropHeight; y++) {
      const yInd = cropHeight > 1 ? y1 * (imageHeight - 1) + y * heightScale : 0.5 * (y1 + y2) * (imageHeight - 1);
      if (yInd < 0 || yInd > imageHeight - 1) {
        for (let x = 0; x < cropWidth; x++) {
          for (let c = 0; c < numChannels; c++) {
            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
            output.values[ind] = extrapolationValue;
          }
        }
        continue;
      }
      if (method === 'bilinear') {
        const topInd = Math.floor(yInd);
        const bottomInd = Math.ceil(yInd);
        const yLerp = yInd - topInd;
        for (let x = 0; x < cropWidth; x++) {
          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);
          if (xInd < 0 || xInd > imageWidth - 1) {
            for (let c = 0; c < numChannels; c++) {
              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
              output.values[ind] = extrapolationValue;
            }
            continue;
          }
          const leftInd = Math.floor(xInd);
          const rightInd = Math.ceil(xInd);
          const xLerp = xInd - leftInd;
          for (let c = 0; c < numChannels; c++) {
            let ind = c + leftInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];
            const topLeft = imageVals[ind];
            ind = c + rightInd * inStride[2] + topInd * inStride[1] + bInd * inStride[0];
            const topRight = imageVals[ind];
            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];
            const bottomLeft = imageVals[ind];
            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] + bInd * inStride[0];
            const bottomRight = imageVals[ind];
            const top = topLeft + (topRight - topLeft) * xLerp;
            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;
            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
            output.values[ind] = top + (bottom - top) * yLerp;
          }
        }
      } else {
        // method == "nearest"
        for (let x = 0; x < cropWidth; ++x) {
          const xInd = cropWidth > 1 ? x1 * (imageWidth - 1) + x * widthScale : 0.5 * (x1 + x2) * (imageWidth - 1);
          if (xInd < 0 || xInd > imageWidth - 1) {
            for (let c = 0; c < numChannels; c++) {
              const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
              output.values[ind] = extrapolationValue;
            }
            continue;
          }
          const closestX = Math.round(xInd);
          const closestY = Math.round(yInd);
          for (let c = 0; c < numChannels; c++) {
            const inInd = c + closestX * inStride[2] + closestY * inStride[1] + bInd * inStride[0];
            const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];
            output.values[outInd] = imageVals[inInd];
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(output.shape, output.dtype, output.values);
}
const cropAndResizeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.CropAndResize,
  backendName: 'cpu',
  kernelFunc: cropAndResize
};

/***/ }),

/***/ 30914:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cumprod.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumprod": () => (/* binding */ cumprod),
/* harmony export */   "cumprodConfig": () => (/* binding */ cumprodConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function cumprod(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    exclusive,
    reverse
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'cumprod');
  const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation([axis], x.shape.length);
  let $x = x;
  if (permutation != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
  }
  const permutedAxis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(1, x.shape.length)[0];
  if (permutedAxis !== $x.shape.length - 1) {
    throw new Error(`backend.cumprod in CPU expects an inner-most ` + `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);
  }
  const resultDtype = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)($x.dtype, 'int32');
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeOnesTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape($x.shape), resultDtype);
  const aVals = backend.data.get($x.dataId).values;
  const finalDim = $x.shape[$x.shape.length - 1];
  const indexAdjuster = reverse ? (i, j) => i + finalDim - j - 1 : (i, j) => i + j;
  for (let i = 0; i < aVals.length; i += finalDim) {
    for (let j = 0; j < finalDim; j++) {
      const idx = indexAdjuster(i, j);
      if (j === 0) {
        vals[idx] = exclusive ? 1 : aVals[idx];
      } else {
        const prevIdx = indexAdjuster(i, j - 1);
        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] : aVals[idx] * vals[prevIdx];
      }
    }
  }
  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);
  if (permutation != null) {
    const reversePermutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getUndoAxesPermutation(permutation);
    const reverseTransposedResult = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        perm: reversePermutation
      }
    });
    backend.disposeIntermediateTensorInfo(result);
    backend.disposeIntermediateTensorInfo($x);
    return reverseTransposedResult;
  }
  return result;
}
const cumprodConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cumprod,
  backendName: 'cpu',
  kernelFunc: cumprod
};

/***/ }),

/***/ 12488:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cumsum.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumsum": () => (/* binding */ cumsum),
/* harmony export */   "cumsumConfig": () => (/* binding */ cumsumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function cumsum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    exclusive,
    reverse
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'cumsum');
  const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation([axis], x.shape.length);
  let $x = x;
  if (permutation != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
  }
  const permutedAxis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(1, x.shape.length)[0];
  if (permutedAxis !== $x.shape.length - 1) {
    throw new Error(`backend.cumsum in CPU expects an inner-most ` + `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);
  }
  const resultDtype = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)($x.dtype, 'int32');
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape($x.shape), resultDtype);
  const aVals = backend.data.get($x.dataId).values;
  const finalDim = $x.shape[$x.shape.length - 1];
  const indexAdjuster = reverse ? (i, j) => i + finalDim - j - 1 : (i, j) => i + j;
  for (let i = 0; i < aVals.length; i += finalDim) {
    for (let j = 0; j < finalDim; j++) {
      const idx = indexAdjuster(i, j);
      if (j === 0) {
        vals[idx] = exclusive ? 0 : aVals[idx];
      } else {
        const prevIdx = indexAdjuster(i, j - 1);
        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];
      }
    }
  }
  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);
  if (permutation != null) {
    const reversePermutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getUndoAxesPermutation(permutation);
    const reverseTransposedResult = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        perm: reversePermutation
      }
    });
    backend.disposeIntermediateTensorInfo(result);
    backend.disposeIntermediateTensorInfo($x);
    return reverseTransposedResult;
  }
  return result;
}
const cumsumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cumsum,
  backendName: 'cpu',
  kernelFunc: cumsum
};

/***/ }),

/***/ 62972:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DenseBincount.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "denseBincount": () => (/* binding */ denseBincount),
/* harmony export */   "denseBincountConfig": () => (/* binding */ denseBincountConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Bincount_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bincount_impl */ 84194);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function denseBincount(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    weights
  } = inputs;
  const {
    size,
    binaryOutput
  } = attrs;
  if (x.shape.length === 1) {
    const xVals = backend.data.get(x.dataId).values;
    const weightsVals = backend.data.get(weights.dataId).values;
    const outVals = (0,_Bincount_impl__WEBPACK_IMPORTED_MODULE_1__.bincountImpl)(xVals, weightsVals, weights.dtype, weights.shape, size);
    return backend.makeTensorInfo([size], weights.dtype, outVals);
  } else if (x.shape.length === 2) {
    const xBuf = backend.bufferSync(x);
    const weightsBuf = backend.bufferSync(weights);
    const outBuf = (0,_Bincount_impl__WEBPACK_IMPORTED_MODULE_1__.bincountReduceImpl)(xBuf, weightsBuf, size, binaryOutput);
    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);
}
const denseBincountConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DenseBincount,
  backendName: 'cpu',
  kernelFunc: denseBincount
};

/***/ }),

/***/ 19733:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthToSpace.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthToSpace": () => (/* binding */ depthToSpace),
/* harmony export */   "depthToSpaceConfig": () => (/* binding */ depthToSpaceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function depthToSpace(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockSize,
    dataFormat
  } = attrs;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);
  const batchSize = x.shape[0];
  const inputHeight = x.shape[1];
  const inputWidth = x.shape[2];
  const inputDepth = x.shape[3];
  const outputHeight = inputHeight * blockSize;
  const outputWidth = inputWidth * blockSize;
  const outputDepth = inputDepth / (blockSize * blockSize);
  const xValues = backend.data.get(x.dataId).values;
  const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);
  let outputIdx = 0;
  for (let b = 0; b < batchSize; ++b) {
    for (let h = 0; h < outputHeight; ++h) {
      const inH = Math.floor(h / blockSize);
      const offsetH = h % blockSize;
      for (let w = 0; w < outputWidth; ++w) {
        const inW = Math.floor(w / blockSize);
        const offsetW = w % blockSize;
        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;
        for (let d = 0; d < outputDepth; ++d) {
          const inD = d + offsetD;
          const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));
          result[outputIdx++] = xValues[inputIdx];
        }
      }
    }
  }
  return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);
}
const depthToSpaceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthToSpace,
  backendName: 'cpu',
  kernelFunc: depthToSpace
};

/***/ }),

/***/ 45382:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNative.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNative": () => (/* binding */ depthwiseConv2dNative),
/* harmony export */   "depthwiseConv2dNativeConfig": () => (/* binding */ depthwiseConv2dNativeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function depthwiseConv2dNative(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations,
    dimRoundingMode
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, filter], 'depthwiseConv2DNative');
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
  const filterStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(filter.shape);
  let $dilations = dilations;
  if ($dilations == null) {
    $dilations = [1, 1];
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);
  const {
    filterHeight,
    filterWidth,
    dilationHeight,
    dilationWidth,
    padInfo
  } = convInfo;
  const padLeft = padInfo.left;
  const padTop = padInfo.top;
  const chMul = convInfo.outChannels / convInfo.inChannels;
  const y = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.outShape, x.dtype);
  const xVals = backend.data.get(x.dataId).values;
  const wVals = backend.data.get(filter.dataId).values;
  const yVals = y.values;
  for (let b = 0; b < convInfo.batchSize; ++b) {
    const xOffset1 = b * xStrides[0];
    const yOffset1 = b * y.strides[0];
    for (let yR = 0; yR < convInfo.outHeight; ++yR) {
      const yOffset2 = yOffset1 + yR * y.strides[1];
      const xRCorner = yR * convInfo.strideHeight - padTop;
      for (let wR = 0; wR < filterHeight; ++wR) {
        const xR = xRCorner + wR * dilationHeight;
        if (xR < 0 || xR >= convInfo.inHeight) {
          continue;
        }
        const wOffset1 = wR * filterStrides[0];
        const xOffset2 = xOffset1 + xR * xStrides[1];
        for (let yC = 0; yC < convInfo.outWidth; ++yC) {
          const yOffset3 = yOffset2 + yC * y.strides[2];
          const xCCorner = yC * convInfo.strideWidth - padLeft;
          for (let wC = 0; wC < filterWidth; ++wC) {
            const xC = xCCorner + wC * dilationWidth;
            if (xC < 0 || xC >= convInfo.inWidth) {
              continue;
            }
            const wOffset2 = wOffset1 + wC * filterStrides[1];
            const xOffset3 = xOffset2 + xC * convInfo.inChannels;
            let yOffset4 = yOffset3;
            let wOffset3 = wOffset2;
            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {
              const xVal = xVals[xOffset3 + d1];
              for (let q = 0; q < chMul; ++q) {
                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];
              }
              yOffset4 += chMul;
              wOffset3 += chMul;
            }
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(y.shape, y.dtype, y.values);
}
const depthwiseConv2dNativeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNative,
  backendName: 'cpu',
  kernelFunc: depthwiseConv2dNative
};

/***/ }),

/***/ 80257:
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeBackpropFilter": () => (/* binding */ depthwiseConv2dNativeBackpropFilter),
/* harmony export */   "depthwiseConv2dNativeBackpropFilterConfig": () => (/* binding */ depthwiseConv2dNativeBackpropFilterConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function depthwiseConv2dNativeBackpropFilter(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    dilations,
    pad,
    dimRoundingMode,
    filterShape
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, dy], 'depthwiseConv2dNativeBackpropFilter');
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
  const {
    strideHeight,
    strideWidth,
    filterHeight,
    filterWidth
  } = convInfo;
  const dW = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.filterShape, 'float32');
  const leftPad = convInfo.padInfo.left;
  const topPad = convInfo.padInfo.top;
  const chMul = convInfo.outChannels / convInfo.inChannels;
  const xVals = backend.data.get(x.dataId).values;
  const xBuf = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(x.shape, x.dtype, xVals);
  const dyVals = backend.data.get(dy.dataId).values;
  const dyBuf = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(dy.shape, dy.dtype, dyVals);
  for (let wR = 0; wR < filterHeight; ++wR) {
    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));
    const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);
    for (let wC = 0; wC < filterWidth; ++wC) {
      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));
      const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);
      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {
        const d1 = Math.trunc(d2 / chMul);
        const dm = d2 % chMul;
        let dotProd = 0;
        for (let b = 0; b < convInfo.batchSize; ++b) {
          for (let yR = yRMin; yR < yRMax; ++yR) {
            const xR = wR + yR * strideHeight - topPad;
            for (let yC = yCMin; yC < yCMax; ++yC) {
              const xC = wC + yC * strideWidth - leftPad;
              dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);
            }
          }
        }
        dW.set(dotProd, wR, wC, d1, dm);
      }
    }
  }
  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);
}
const depthwiseConv2dNativeBackpropFilterConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropFilter,
  backendName: 'cpu',
  kernelFunc: depthwiseConv2dNativeBackpropFilter
};

/***/ }),

/***/ 82071:
/*!******************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNativeBackpropInput.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeBackpropInput": () => (/* binding */ depthwiseConv2dNativeBackpropInput),
/* harmony export */   "depthwiseConv2dNativeBackpropInputConfig": () => (/* binding */ depthwiseConv2dNativeBackpropInputConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function depthwiseConv2dNativeBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    strides,
    dilations,
    pad,
    dimRoundingMode,
    inputShape
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, filter], 'depthwiseConv2DNativeBackpropInput');
  const dyStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(dy.shape);
  const filterStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(filter.shape);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
  const dx = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(convInfo.inShape, 'float32');
  const dxValues = dx.values;
  const [dxS0, dxS1, dxS2] = dx.strides;
  const dyValues = backend.data.get(dy.dataId).values;
  const [dyS0, dyS1, dyS2] = dyStrides;
  const fltValues = backend.data.get(filter.dataId).values;
  const [fltS0, fltS1, fltS2] = filterStrides;
  const {
    batchSize,
    filterHeight,
    filterWidth,
    inChannels,
    inHeight,
    inWidth,
    outChannels,
    outHeight,
    outWidth,
    strideHeight,
    strideWidth
  } = convInfo;
  const topPad = filterHeight - 1 - convInfo.padInfo.top;
  const leftPad = filterWidth - 1 - convInfo.padInfo.left;
  const chMul = outChannels / inChannels;
  for (let b = 0; b < batchSize; ++b) {
    for (let d1 = 0; d1 < inChannels; ++d1) {
      for (let xR = 0; xR < inHeight; ++xR) {
        const xRCorner = xR - topPad;
        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));
        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);
        for (let xC = 0; xC < inWidth; ++xC) {
          const xCCorner = xC - leftPad;
          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));
          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);
          let dotProd = 0;
          for (let yR = xRMin; yR < yRMax; ++yR) {
            const wR = yR * strideHeight - xRCorner;
            for (let yC = xCMin; yC < yCMax; ++yC) {
              const wC = yC * strideWidth - xCCorner;
              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;
              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;
              for (let dm = 0; dm < chMul; ++dm) {
                const d2 = d1 * chMul + dm;
                const pixel = dyValues[dyOffset + d2];
                const weight = fltValues[fltOffset + dm];
                dotProd += pixel * weight;
              }
            }
          }
          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;
        }
      }
    }
  }
  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const depthwiseConv2dNativeBackpropInputConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropInput,
  backendName: 'cpu',
  kernelFunc: depthwiseConv2dNativeBackpropInput
};

/***/ }),

/***/ 85344:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Diag.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "diag": () => (/* binding */ diag),
/* harmony export */   "diagConfig": () => (/* binding */ diagConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function diag(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const xVals = backend.data.get(x.dataId).values;
  const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)([xSize, xSize], x.dtype);
  const vals = outBuf.values;
  for (let i = 0; i < xVals.length; i++) {
    vals[i * xSize + i] = xVals[i];
  }
  const outShape = [...x.shape, ...x.shape];
  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);
}
const diagConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Diag,
  backendName: 'cpu',
  kernelFunc: diag
};

/***/ }),

/***/ 60084:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2D.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dilation2DConfig": () => (/* binding */ dilation2DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const dilation2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2D,
  backendName: 'cpu',
  kernelFunc: ({
    inputs,
    backend,
    attrs
  }) => {
    const {
      x,
      filter
    } = inputs;
    const {
      strides,
      pad,
      dilations
    } = attrs;
    const cpuBackend = backend;
    const xVals = cpuBackend.data.get(x.dataId).values;
    const xRank = x.shape.length;
    const filterVals = cpuBackend.data.get(filter.dataId).values;
    const filterRank = filter.shape.length;
    const {
      batchSize,
      inHeight,
      inWidth,
      inChannels,
      outHeight,
      outWidth,
      padInfo,
      strideHeight,
      strideWidth,
      filterHeight,
      filterWidth,
      dilationHeight,
      dilationWidth,
      outShape
    } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
    const outSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape);
    const outRank = outShape.length;
    const outputVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(x.dtype, outSize);
    // Upsampling the input by fill in `dilation size - 1` values between each
    // input value.
    // This implementation follows the TF c++ implementation:
    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
    for (let b = 0; b < batchSize; ++b) {
      for (let hOut = 0; hOut < outHeight; ++hOut) {
        const hBeg = hOut * strideHeight - padInfo.top;
        for (let wOut = 0; wOut < outWidth; ++wOut) {
          const wBeg = wOut * strideWidth - padInfo.left;
          for (let d = 0; d < inChannels; ++d) {
            let curVal = Number.MIN_SAFE_INTEGER;
            for (let h = 0; h < filterHeight; ++h) {
              const hIn = hBeg + h * dilationHeight;
              if (hIn >= 0 && hIn < inHeight) {
                for (let w = 0; w < filterWidth; ++w) {
                  const wIn = wBeg + w * dilationWidth;
                  if (wIn >= 0 && wIn < inWidth) {
                    const xIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex([b, hIn, wIn, d], xRank, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape));
                    const filterIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex([h, w, d], filterRank, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(filter.shape));
                    const val = xVals[xIndex] + filterVals[filterIndex];
                    if (val > curVal) {
                      curVal = val;
                    }
                  }
                }
              }
            }
            const outputIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex([b, hOut, wOut, d], outRank, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(outShape));
            outputVals[outputIndex] = curVal;
          }
        }
      }
    }
    const dataId = cpuBackend.write(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);
    return {
      dataId,
      shape: outShape,
      dtype: x.dtype
    };
  }
};

/***/ }),

/***/ 71158:
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropFilter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dilation2DBackpropFilterConfig": () => (/* binding */ dilation2DBackpropFilterConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const dilation2DBackpropFilterConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2DBackpropFilter,
  backendName: 'cpu',
  kernelFunc: ({
    inputs,
    backend,
    attrs
  }) => {
    const {
      x,
      filter,
      dy
    } = inputs;
    const {
      strides,
      pad,
      dilations
    } = attrs;
    const cpuBackend = backend;
    const $x = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);
    const $filter = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);
    const {
      batchSize,
      inHeight,
      inWidth,
      inChannels,
      outHeight,
      outWidth,
      padInfo,
      strideHeight,
      strideWidth,
      filterHeight,
      filterWidth,
      dilationHeight,
      dilationWidth,
      outShape
    } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(dy.rank === outShape.length, () => `Error in ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2DBackpropFilter}, dy ` + `must have the same rank as output ${outShape.length}, but got ` + `${dy.rank}`);
    const $dy = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);
    // The computed filter gradients has the same dimensions as the filter:
    // [filterHeight, filterWidth, depth]
    const gradients = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosNestedTypedArray(filter.shape, filter.dtype);
    // In the case of multiple argmax branches, we only back-propagate along the
    // last branch, i.e., the one with largest value of `h * filter_cols + w`,
    // similarly to the max-pooling backward routines.
    // This implementation follows the TF c++ implementation:
    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
    for (let b = 0; b < batchSize; ++b) {
      for (let hOut = 0; hOut < outHeight; ++hOut) {
        const hBeg = hOut * strideHeight - padInfo.top;
        for (let wOut = 0; wOut < outWidth; ++wOut) {
          const wBeg = wOut * strideWidth - padInfo.left;
          for (let d = 0; d < inChannels; ++d) {
            let curVal = Number.MIN_SAFE_INTEGER;
            let hMax = 0;
            let wMax = 0;
            for (let h = 0; h < filterHeight; ++h) {
              const hIn = hBeg + h * dilationHeight;
              if (hIn >= 0 && hIn < inHeight) {
                for (let w = 0; w < filterWidth; ++w) {
                  const wIn = wBeg + w * dilationWidth;
                  if (wIn >= 0 && wIn < inWidth) {
                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];
                    if (val > curVal) {
                      curVal = val;
                      hMax = h;
                      wMax = w;
                    }
                  }
                }
              }
            }
            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];
          }
        }
      }
    }
    const dataId = cpuBackend.write(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);
    return {
      dataId,
      shape: filter.shape,
      dtype: filter.dtype
    };
  }
};

/***/ }),

/***/ 24771:
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropInput.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dilation2DBackpropInputConfig": () => (/* binding */ dilation2DBackpropInputConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const dilation2DBackpropInputConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2DBackpropInput,
  backendName: 'cpu',
  kernelFunc: ({
    inputs,
    backend,
    attrs
  }) => {
    const {
      x,
      filter,
      dy
    } = inputs;
    const {
      strides,
      pad,
      dilations
    } = attrs;
    const cpuBackend = backend;
    const $x = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);
    const $filter = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);
    const {
      batchSize,
      inHeight,
      inWidth,
      inChannels,
      outHeight,
      outWidth,
      padInfo,
      strideHeight,
      strideWidth,
      filterHeight,
      filterWidth,
      dilationHeight,
      dilationWidth,
      outShape
    } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(dy.rank === outShape.length, () => `Error in ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2DBackpropInput}, dy ` + `must have the same rank as output ${outShape.length}, but got ` + `${dy.rank}`);
    const $dy = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);
    // The computed gradients has the same dimensions as the input:
    // [batch, inputHeight, inputCols, inChannel]
    const gradients = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosNestedTypedArray(x.shape, x.dtype);
    // In the case of multiple argmax branches, we only back-propagate along the
    // last branch, i.e., the one with largest value of `h * filter_cols + w`,
    // similarly to the max-pooling backward routines.
    // This implementation follows the TF c++ implementation:
    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc
    for (let b = 0; b < batchSize; ++b) {
      for (let hOut = 0; hOut < outHeight; ++hOut) {
        const hBeg = hOut * strideHeight - padInfo.top;
        for (let wOut = 0; wOut < outWidth; ++wOut) {
          const wBeg = wOut * strideWidth - padInfo.left;
          for (let d = 0; d < inChannels; ++d) {
            let curVal = Number.MIN_SAFE_INTEGER;
            let hInMax = hBeg < 0 ? 0 : hBeg;
            let wInMax = wBeg < 0 ? 0 : wBeg;
            for (let h = 0; h < filterHeight; ++h) {
              const hIn = hBeg + h * dilationHeight;
              if (hIn >= 0 && hIn < inHeight) {
                for (let w = 0; w < filterWidth; ++w) {
                  const wIn = wBeg + w * dilationWidth;
                  if (wIn >= 0 && wIn < inWidth) {
                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];
                    if (val > curVal) {
                      curVal = val;
                      hInMax = hIn;
                      wInMax = wIn;
                    }
                  }
                }
              }
            }
            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];
          }
        }
      }
    }
    const dataId = cpuBackend.write(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);
    return {
      dataId,
      shape: x.shape,
      dtype: x.dtype
    };
  }
};

/***/ }),

/***/ 50835:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Einsum.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "einsum": () => (/* binding */ einsum),
/* harmony export */   "einsumConfig": () => (/* binding */ einsumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Multiply__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Multiply */ 20306);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Sum */ 88698);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function einsum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    equation
  } = attrs;
  const tensors = inputs;
  const {
    allDims,
    summedDims,
    idDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.decodeEinsumEquation(equation, tensors.length);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);
  const {
    path,
    steps
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getEinsumComputePath(summedDims, idDims);
  const nSteps = steps.length;
  let out = null;
  let numDimsRemaining = allDims.length;
  const tensorsToDispose = [];
  for (let i = 0; i < nSteps; ++i) {
    for (const idTerm of steps[i]) {
      const {
        permutationIndices: perm,
        expandDims: dimsToExpand
      } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);
      let x;
      if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.isIdentityPermutation(perm)) {
        x = tensors[idTerm];
      } else {
        x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
          inputs: {
            x: tensors[idTerm]
          },
          backend,
          attrs: {
            perm
          }
        });
        tensorsToDispose.push(x);
      }
      const targetShape = x.shape.slice();
      for (let k = 0; k < dimsToExpand.length; ++k) {
        targetShape.splice(dimsToExpand[k], 0, 1);
      }
      if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(x.shape, targetShape)) {
        x = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
          inputs: {
            x
          },
          backend,
          attrs: {
            shape: targetShape
          }
        });
        tensorsToDispose.push(x);
      }
      if (out === null) {
        out = x;
      } else {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        out = (0,_Multiply__WEBPACK_IMPORTED_MODULE_3__.multiply)({
          inputs: {
            a: x,
            b: out
          },
          backend
        });
        tensorsToDispose.push(out);
      }
    }
    if (i < nSteps - 1) {
      if (path[i] >= 0) {
        out = (0,_Sum__WEBPACK_IMPORTED_MODULE_4__.sum)({
          inputs: {
            x: out
          },
          backend,
          attrs: {
            axis: path[i] - (allDims.length - numDimsRemaining),
            keepDims: false
          }
        });
        tensorsToDispose.push(out);
      }
      numDimsRemaining--;
    }
  }
  // Clean up intermediate tensors.
  for (const tensorInfo of tensorsToDispose) {
    if (tensorInfo === out) {
      continue;
    }
    backend.disposeIntermediateTensorInfo(tensorInfo);
  }
  return out;
}
const einsumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Einsum,
  backendName: 'cpu',
  kernelFunc: einsum
};

/***/ }),

/***/ 28787:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Elu.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "elu": () => (/* binding */ elu),
/* harmony export */   "eluConfig": () => (/* binding */ eluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const elu = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Elu, xi => xi >= 0 ? xi : Math.exp(xi) - 1);
const eluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Elu,
  backendName: 'cpu',
  kernelFunc: elu
};

/***/ }),

/***/ 43936:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/EluGrad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eluGrad": () => (/* binding */ eluGrad),
/* harmony export */   "eluGradConfig": () => (/* binding */ eluGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function eluGrad(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    dy,
    y
  } = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, y], 'eluGrad');
  const resultValues = new Float32Array(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(y.shape));
  const values = backend.data.get(y.dataId).values;
  const dyValues = backend.data.get(dy.dataId).values;
  for (let i = 0; i < values.length; ++i) {
    const v = values[i];
    if (v >= 0) {
      resultValues[i] = dyValues[i];
    } else {
      resultValues[i] = dyValues[i] * (v + 1);
    }
  }
  return backend.makeTensorInfo(y.shape, 'float32', resultValues);
}
const eluGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.EluGrad,
  backendName: 'cpu',
  kernelFunc: eluGrad
};

/***/ }),

/***/ 51085:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equal": () => (/* binding */ equal),
/* harmony export */   "equalConfig": () => (/* binding */ equalConfig),
/* harmony export */   "equalImpl": () => (/* binding */ equalImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const equalImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a === b ? 1 : 0);
const equal = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Equal, equalImpl, null /* complexImpl */, 'bool');
const equalConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Equal,
  backendName: 'cpu',
  kernelFunc: equal
};

/***/ }),

/***/ 45562:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Erf.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "erf": () => (/* binding */ erf),
/* harmony export */   "erfConfig": () => (/* binding */ erfConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const p = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_P;
const a1 = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A1;
const a2 = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A2;
const a3 = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A3;
const a4 = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A4;
const a5 = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A5;
const erf = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Erf, xi => {
  const sign = Math.sign(xi);
  const v = Math.abs(xi);
  const t = 1.0 / (1.0 + p * v);
  return sign * (1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-v * v));
});
const erfConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Erf,
  backendName: 'cpu',
  kernelFunc: erf
};

/***/ }),

/***/ 48392:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "exp": () => (/* binding */ exp),
/* harmony export */   "expConfig": () => (/* binding */ expConfig),
/* harmony export */   "expImpl": () => (/* binding */ expImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const expImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => Math.exp(xi));
const exp = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Exp, expImpl, 'float32');
const expConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Exp,
  backendName: 'cpu',
  kernelFunc: exp
};

/***/ }),

/***/ 50624:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ExpandDims.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expandDims": () => (/* binding */ expandDims),
/* harmony export */   "expandDimsConfig": () => (/* binding */ expandDimsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 19422);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function expandDims(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    input
  } = inputs;
  const {
    dim
  } = attrs;
  const inputRank = input.shape.length;
  const newShape = input.shape.slice();
  let $dim = dim;
  if (dim < 0) {
    // Negative value is counted from the tail of rank.
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);
    $dim = inputRank + dim + 1;
  }
  newShape.splice($dim, 0, 1);
  return (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: input
    },
    backend,
    attrs: {
      shape: newShape
    }
  });
}
const expandDimsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ExpandDims,
  backendName: 'cpu',
  kernelFunc: expandDims
};

/***/ }),

/***/ 52599:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expm1": () => (/* binding */ expm1),
/* harmony export */   "expm1Config": () => (/* binding */ expm1Config),
/* harmony export */   "expm1Impl": () => (/* binding */ expm1Impl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const expm1Impl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => Math.expm1(xi));
const expm1 = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Expm1, expm1Impl);
const expm1Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Expm1,
  backendName: 'cpu',
  kernelFunc: expm1
};

/***/ }),

/***/ 29228:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FFT.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fft": () => (/* binding */ fft),
/* harmony export */   "fftConfig": () => (/* binding */ fftConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_fft_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/fft_utils */ 94429);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 19422);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function fft(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const inputSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(input.shape);
  // Collapse all outer dimensions to a single batch dimension.
  const innerDimensionSize = input.shape[input.shape.length - 1];
  const batch = inputSize / innerDimensionSize;
  const input2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: input
    },
    backend,
    attrs: {
      shape: [batch, innerDimensionSize]
    }
  });
  const result = (0,_utils_fft_utils__WEBPACK_IMPORTED_MODULE_2__.fftBatch)(input2D, false, backend);
  const resultReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: result
    },
    backend,
    attrs: {
      shape: input.shape
    }
  });
  backend.disposeIntermediateTensorInfo(input2D);
  backend.disposeIntermediateTensorInfo(result);
  return resultReshaped;
}
const fftConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FFT,
  backendName: 'cpu',
  kernelFunc: fft
};

/***/ }),

/***/ 37448:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Fill.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fill": () => (/* binding */ fill),
/* harmony export */   "fillConfig": () => (/* binding */ fillConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function fill(args) {
  const {
    backend,
    attrs
  } = args;
  const {
    shape,
    value,
    dtype
  } = attrs;
  const $dtype = dtype || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.inferDtype(value);
  const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType($dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape));
  fillValues(values, value, $dtype);
  return backend.makeTensorInfo(shape, $dtype, values);
}
const fillConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Fill,
  backendName: 'cpu',
  kernelFunc: fill
};
function fillValues(values, value, dtype) {
  if (dtype === 'string') {
    values.fill(value);
  } else {
    values.fill(value);
  }
}

/***/ }),

/***/ 25350:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FlipLeftRight.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flipLeftRightConfig": () => (/* binding */ flipLeftRightConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const flipLeftRightConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FlipLeftRight,
  backendName: 'cpu',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const cpuBackend = backend;
    const output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(image.dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(image.shape));
    const [batch, imageHeight, imageWidth, numChannels] = image.shape;
    const imageVals = cpuBackend.data.get(image.dataId).values;
    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {
      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;
      for (let row = 0; row < imageHeight; row++) {
        const rowOffset = row * (imageWidth * numChannels);
        for (let col = 0; col < imageWidth; col++) {
          const colOffset = col * numChannels;
          for (let channel = 0; channel < numChannels; channel++) {
            const coordX = Math.round(imageWidth - col - 1);
            const outIdx = batchOffset + rowOffset + colOffset + channel;
            let outputValue = imageVals[outIdx];
            // If the coordinate position falls within the image boundaries...
            if (coordX >= 0 && coordX < imageWidth) {
              // set the output to the image value at the coordinate position.
              const rotatedColOffset = coordX * numChannels;
              const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;
              outputValue = imageVals[imageIdx];
            }
            output[outIdx] = outputValue;
          }
        }
      }
    }
    const dataId = cpuBackend.write(output, image.shape, image.dtype);
    return {
      dataId,
      shape: image.shape,
      dtype: image.dtype
    };
  }
};

/***/ }),

/***/ 12325:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floor": () => (/* binding */ floor),
/* harmony export */   "floorConfig": () => (/* binding */ floorConfig),
/* harmony export */   "floorImpl": () => (/* binding */ floorImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const floorImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => Math.floor(xi));
const floor = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Floor, floorImpl);
const floorConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Floor,
  backendName: 'cpu',
  kernelFunc: floor
};

/***/ }),

/***/ 80586:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FloorDiv.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorDiv": () => (/* binding */ floorDiv),
/* harmony export */   "floorDivConfig": () => (/* binding */ floorDivConfig),
/* harmony export */   "floorDivImpl": () => (/* binding */ floorDivImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const floorDivImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => Math.floor(a / b));
const floorDiv = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');
const floorDivConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FloorDiv,
  backendName: 'cpu',
  kernelFunc: floorDiv
};

/***/ }),

/***/ 38103:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FusedConv2D.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fusedConv2D": () => (/* binding */ fusedConv2D),
/* harmony export */   "fusedConv2DConfig": () => (/* binding */ fusedConv2DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_fused_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/fused_utils */ 5274);
/* harmony import */ var _Add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Add */ 5939);
/* harmony import */ var _Conv2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Conv2D */ 65732);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function fusedConv2D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  } = attrs;
  let result = (0,_Conv2D__WEBPACK_IMPORTED_MODULE_1__.conv2D)({
    inputs: {
      x,
      filter
    },
    backend,
    attrs: {
      strides,
      pad,
      dataFormat,
      dilations,
      dimRoundingMode
    }
  });
  if (bias) {
    const resultOld = result;
    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned
    // to the channel of the conv2d's result; if the bias is a scalar, the
    // bias_add is computed as if the bias was broadcasted to the shape of the
    // conv2d's result.
    if (dataFormat === 'NCHW' && bias.shape.length === 1 && bias.shape[0] !== 1) {
      const reshapedBias = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
        inputs: {
          x: bias
        },
        backend,
        attrs: {
          shape: [bias.shape[0], 1, 1]
        }
      });
      result = (0,_Add__WEBPACK_IMPORTED_MODULE_3__.add)({
        inputs: {
          a: result,
          b: reshapedBias
        },
        backend
      });
      backend.disposeIntermediateTensorInfo(reshapedBias);
    } else {
      // This condition handles NHWC and NCHW (scalar case). The only other case
      // for NCHW (1D case) is handled above.
      result = (0,_Add__WEBPACK_IMPORTED_MODULE_3__.add)({
        inputs: {
          a: result,
          b: bias
        },
        backend
      });
    }
    backend.disposeIntermediateTensorInfo(resultOld);
  }
  if (activation) {
    const resultOld = result;
    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is
    // supposed to be aligned with the channel of the conv2d's result. For other
    // cases, whether NCHW or NHWC data format, the conv2d result is
    // already aligned with the activation weights.
    if (dataFormat === 'NCHW' && activation === 'prelu' && preluActivationWeights.shape.length === 1 && preluActivationWeights.shape[0] !== 1) {
      const reshapedAlpha = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
        inputs: {
          x: preluActivationWeights
        },
        backend,
        attrs: {
          shape: [preluActivationWeights.shape[0], 1, 1]
        }
      });
      result = (0,_utils_fused_utils__WEBPACK_IMPORTED_MODULE_4__.applyActivation)(backend, result, activation, reshapedAlpha, leakyreluAlpha);
      backend.disposeIntermediateTensorInfo(reshapedAlpha);
    } else {
      result = (0,_utils_fused_utils__WEBPACK_IMPORTED_MODULE_4__.applyActivation)(backend, result, activation, preluActivationWeights, leakyreluAlpha);
    }
    backend.disposeIntermediateTensorInfo(resultOld);
  }
  return result;
}
const fusedConv2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedConv2D,
  backendName: 'cpu',
  kernelFunc: fusedConv2D
};

/***/ }),

/***/ 37941:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FusedDepthwiseConv2D.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fusedDepthwiseConv2D": () => (/* binding */ fusedDepthwiseConv2D),
/* harmony export */   "fusedDepthwiseConv2DConfig": () => (/* binding */ fusedDepthwiseConv2DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_fused_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/fused_utils */ 5274);
/* harmony import */ var _Add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Add */ 5939);
/* harmony import */ var _DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DepthwiseConv2dNative */ 45382);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function fusedDepthwiseConv2D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  } = attrs;
  let result = (0,_DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_1__.depthwiseConv2dNative)({
    inputs: {
      x,
      filter
    },
    backend,
    attrs: {
      strides,
      pad,
      dataFormat,
      dilations,
      dimRoundingMode
    }
  });
  if (bias) {
    const oldResult = result;
    result = (0,_Add__WEBPACK_IMPORTED_MODULE_2__.add)({
      inputs: {
        a: result,
        b: bias
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(oldResult);
  }
  if (activation) {
    const oldResult = result;
    result = (0,_utils_fused_utils__WEBPACK_IMPORTED_MODULE_3__.applyActivation)(backend, result, activation, preluActivationWeights, leakyreluAlpha);
    backend.disposeIntermediateTensorInfo(oldResult);
  }
  return result;
}
const fusedDepthwiseConv2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedDepthwiseConv2D,
  backendName: 'cpu',
  kernelFunc: fusedDepthwiseConv2D
};

/***/ }),

/***/ 4127:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherNd": () => (/* binding */ gatherNd),
/* harmony export */   "gatherNdConfig": () => (/* binding */ gatherNdConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _GatherNd_Impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GatherNd_Impl */ 42086);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function gatherNd(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    params,
    indices
  } = inputs;
  const paramsSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(params.shape);
  const indicesShape = indices.shape;
  const sliceRank = indicesShape[indicesShape.length - 1];
  const [resultShape, numSlices, sliceSize, strides] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.prepareAndValidate(params, indices);
  if (numSlices === 0) {
    return backend.makeTensorInfo(resultShape, params.dtype, []);
  }
  const indicesData = backend.data.get(indices.dataId).values;
  const paramsBuf = backend.bufferSync(params);
  const outBuf = (0,_GatherNd_Impl__WEBPACK_IMPORTED_MODULE_1__.gatherNdImpl)(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);
  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);
}
const gatherNdConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherNd,
  backendName: 'cpu',
  kernelFunc: gatherNd
};

/***/ }),

/***/ 42086:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherNdImpl": () => (/* binding */ gatherNdImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {
  const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)([numSlices, sliceSize], dtype);
  for (let i = 0; i < numSlices; i++) {
    const index = [];
    let flattenIndex = 0;
    for (let j = 0; j < sliceRank; j++) {
      const dim = indicesData[i * sliceRank + j];
      flattenIndex += dim * strides[j];
      index.push(dim);
    }
    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {
      throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);
    }
    for (let k = 0; k < sliceSize; k++) {
      outBuf.values[i * sliceSize + k] = paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));
    }
  }
  return outBuf;
}

/***/ }),

/***/ 7039:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherV2": () => (/* binding */ gatherV2),
/* harmony export */   "gatherV2Config": () => (/* binding */ gatherV2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _GatherV2_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GatherV2_impl */ 11422);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function gatherV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    indices
  } = inputs;
  const {
    axis,
    batchDims
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x, indices], 'gatherV2');
  // Throw error when any index is out of bound.
  const parsedAxis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape)[0];
  const indicesVals = backend.data.get(indices.dataId).values;
  const axisDim = x.shape[parsedAxis];
  for (let i = 0; i < indicesVals.length; ++i) {
    const index = indicesVals[i];
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);
  }
  let $batchDims = batchDims;
  if (batchDims == null) {
    $batchDims = 0;
  }
  const indicesSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(indices.shape);
  const shapeInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);
  const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]
    }
  });
  const flattenIndex = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]
    }
  });
  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];
  const indicesBuf = backend.bufferSync(flattenIndex);
  const xBuf = backend.bufferSync(flattenX);
  const outBuf = (0,_GatherV2_impl__WEBPACK_IMPORTED_MODULE_3__.gatherV2Impl)(xBuf, indicesBuf, flattenOutputShape);
  backend.disposeIntermediateTensorInfo(flattenX);
  backend.disposeIntermediateTensorInfo(flattenIndex);
  return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);
}
const gatherV2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherV2,
  backendName: 'cpu',
  kernelFunc: gatherV2
};

/***/ }),

/***/ 11422:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherV2Impl": () => (/* binding */ gatherV2Impl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {
  const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(flattenOutputShape, xBuf.dtype);
  for (let i = 0; i < outBuf.size; ++i) {
    const newLoc = outBuf.indexToLoc(i);
    const originalLoc = newLoc.slice();
    const batchIdx = originalLoc[0];
    const indicesIdx = originalLoc[2];
    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);
    originalLoc[2] = indicesBuf.values[indicesIndex];
    const originalIndex = xBuf.locToIndex(originalLoc);
    if (0 <= originalIndex && originalIndex < xBuf.values.length) {
      outBuf.values[i] = xBuf.values[originalIndex];
    } // Else, index is out of bounds, so leave the default zero val in outBuf.
  }

  return outBuf;
}

/***/ }),

/***/ 68465:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greater": () => (/* binding */ greater),
/* harmony export */   "greaterConfig": () => (/* binding */ greaterConfig),
/* harmony export */   "greaterImpl": () => (/* binding */ greaterImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const greaterImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a > b ? 1 : 0);
const greater = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Greater, greaterImpl, null /* complexImpl */, 'bool');
const greaterConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Greater,
  backendName: 'cpu',
  kernelFunc: greater
};

/***/ }),

/***/ 3020:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greaterEqual": () => (/* binding */ greaterEqual),
/* harmony export */   "greaterEqualConfig": () => (/* binding */ greaterEqualConfig),
/* harmony export */   "greaterEqualImpl": () => (/* binding */ greaterEqualImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const greaterEqualImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a >= b ? 1 : 0);
const greaterEqual = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');
const greaterEqualConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GreaterEqual,
  backendName: 'cpu',
  kernelFunc: greaterEqual
};

/***/ }),

/***/ 15645:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IFFT.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ifft": () => (/* binding */ ifft),
/* harmony export */   "ifftConfig": () => (/* binding */ ifftConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_fft_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/fft_utils */ 94429);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 19422);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function ifft(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const inputSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(input.shape);
  // Collapse all outer dimensions to a single batch dimension.
  const innerDimensionSize = input.shape[input.shape.length - 1];
  const batch = inputSize / innerDimensionSize;
  const input2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: input
    },
    backend,
    attrs: {
      shape: [batch, innerDimensionSize]
    }
  });
  const result = (0,_utils_fft_utils__WEBPACK_IMPORTED_MODULE_2__.fftBatch)(input2D, true, backend);
  const resultReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: result
    },
    backend,
    attrs: {
      shape: input.shape
    }
  });
  backend.disposeIntermediateTensorInfo(input2D);
  backend.disposeIntermediateTensorInfo(result);
  return resultReshaped;
}
const ifftConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IFFT,
  backendName: 'cpu',
  kernelFunc: ifft
};

/***/ }),

/***/ 98750:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "identityConfig": () => (/* binding */ identityConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function identity(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  backend.incRef(x.dataId);
  return {
    dataId: x.dataId,
    shape: x.shape,
    dtype: x.dtype
  };
}
const identityConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Identity,
  backendName: 'cpu',
  kernelFunc: identity
};

/***/ }),

/***/ 469:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Imag.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imag": () => (/* binding */ imag),
/* harmony export */   "imagConfig": () => (/* binding */ imagConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function imag(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;
  const imagVal = backend.data.get(imag.dataId).values;
  // When complex tensor is disposed, its underlying parts will be disposed too.
  // Make new tensor out of the imag value of the complex. This makes sure the
  // value is still accessible even if complex tensor is disposed.
  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);
}
const imagConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Imag,
  backendName: 'cpu',
  kernelFunc: imag
};

/***/ }),

/***/ 77453:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsFinite.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFinite": () => (/* binding */ isFinite),
/* harmony export */   "isFiniteConfig": () => (/* binding */ isFiniteConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isFinite = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsFinite, xi => Number.isFinite(xi) ? 1 : 0, 'bool');
const isFiniteConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsFinite,
  backendName: 'cpu',
  kernelFunc: isFinite
};

/***/ }),

/***/ 78573:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsInf.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInf": () => (/* binding */ isInf),
/* harmony export */   "isInfConfig": () => (/* binding */ isInfConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isInf = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsInf, xi => Math.abs(xi) === Infinity ? 1 : 0, 'bool');
const isInfConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsInf,
  backendName: 'cpu',
  kernelFunc: isInf
};

/***/ }),

/***/ 94512:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsNaN.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNaN": () => (/* binding */ isNaN),
/* harmony export */   "isNaNConfig": () => (/* binding */ isNaNConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isNaN = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsNan, xi => Number.isNaN(xi) ? 1 : 0, 'bool');
const isNaNConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsNan,
  backendName: 'cpu',
  kernelFunc: isNaN
};

/***/ }),

/***/ 76281:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRN.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LRNConfig": () => (/* binding */ LRNConfig),
/* harmony export */   "lRN": () => (/* binding */ lRN)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function lRN(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    depthRadius,
    bias,
    alpha,
    beta
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'LRN');
  const channels = x.shape[3];
  const maxD = channels - 1;
  const xValues = backend.data.get(x.dataId).values;
  const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const result = new Float32Array(size);
  function sumAcrossChannels(offset) {
    const currentChannel = offset % channels;
    let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);
    const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);
    let sum = 0.0;
    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {
      const z = xValues[beginSumOffset];
      sum += z * z;
    }
    return sum;
  }
  for (let offset = 0; offset < size; offset++) {
    const sum = sumAcrossChannels(offset);
    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);
    result[offset] = val;
  }
  return backend.makeTensorInfo(x.shape, x.dtype, result);
}
// tslint:disable-next-line: variable-name
const LRNConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRN,
  backendName: 'cpu',
  kernelFunc: lRN
};

/***/ }),

/***/ 83106:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRNGrad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LRNGradConfig": () => (/* binding */ LRNGradConfig),
/* harmony export */   "lRNGrad": () => (/* binding */ lRNGrad)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function lRNGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    y,
    dy
  } = inputs;
  const {
    depthRadius,
    bias,
    alpha,
    beta
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(dy, 'LRNGrad');
  const dySize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(dy.shape);
  const channels = dy.shape[3];
  const dyValues = backend.data.get(dy.dataId).values;
  const xValues = backend.data.get(x.dataId).values;
  const yValues = backend.data.get(y.dataId).values;
  const result = new Float32Array(dySize);
  const size = dySize;
  for (let offset = 0; offset < size; offset++) {
    const currentChannel = offset % channels;
    const depthBegin = offset - currentChannel + Math.max(0, currentChannel - depthRadius);
    const depthEnd = offset - currentChannel + Math.min(channels, currentChannel + depthRadius + 1);
    let norm = 0;
    for (let k = depthBegin; k < depthEnd; k++) {
      norm += Math.pow(xValues[k], 2);
    }
    norm = alpha * norm + bias;
    for (let k = depthBegin; k < depthEnd; k++) {
      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;
      if (offset === k) {
        dyi += Math.pow(norm, -beta);
      }
      dyi *= dyValues[offset];
      result[k] += dyi;
    }
  }
  return backend.makeTensorInfo(dy.shape, x.dtype, result);
}
// tslint:disable-next-line: variable-name
const LRNGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRNGrad,
  backendName: 'cpu',
  kernelFunc: lRNGrad
};

/***/ }),

/***/ 53173:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LeakyRelu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leakyRelu": () => (/* binding */ leakyRelu),
/* harmony export */   "leakyReluConfig": () => (/* binding */ leakyReluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function leakyRelu(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    alpha
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x], 'leakyRelu');
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const xVals = backend.data.get(x.dataId).values;
  const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('float32', xSize);
  for (let i = 0; i < xVals.length; i++) {
    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];
  }
  return backend.makeTensorInfo(x.shape, 'float32', outVals);
}
const leakyReluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LeakyRelu,
  backendName: 'cpu',
  kernelFunc: leakyRelu
};

/***/ }),

/***/ 45540:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "less": () => (/* binding */ less),
/* harmony export */   "lessConfig": () => (/* binding */ lessConfig),
/* harmony export */   "lessImpl": () => (/* binding */ lessImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const lessImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a < b ? 1 : 0);
const less = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Less, lessImpl, null /* complexImpl */, 'bool');
const lessConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Less,
  backendName: 'cpu',
  kernelFunc: less
};

/***/ }),

/***/ 2085:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lessEqual": () => (/* binding */ lessEqual),
/* harmony export */   "lessEqualConfig": () => (/* binding */ lessEqualConfig),
/* harmony export */   "lessEqualImpl": () => (/* binding */ lessEqualImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const lessEqualImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a <= b ? 1 : 0);
const lessEqual = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');
const lessEqualConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LessEqual,
  backendName: 'cpu',
  kernelFunc: lessEqual
};

/***/ }),

/***/ 13004:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linSpace": () => (/* binding */ linSpace),
/* harmony export */   "linSpaceConfig": () => (/* binding */ linSpaceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _LinSpace_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LinSpace_impl */ 7888);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function linSpace(args) {
  const {
    backend,
    attrs
  } = args;
  const {
    start,
    stop,
    num
  } = attrs;
  const outVals = (0,_LinSpace_impl__WEBPACK_IMPORTED_MODULE_1__.linSpaceImpl)(start, stop, num);
  return backend.makeTensorInfo([outVals.length], 'float32', outVals);
}
const linSpaceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LinSpace,
  backendName: 'cpu',
  kernelFunc: linSpace
};

/***/ }),

/***/ 7888:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linSpaceImpl": () => (/* binding */ linSpaceImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function linSpaceImpl(start, stop, num) {
  const step = (stop - start) / (num - 1);
  const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(num, 'float32');
  values[0] = start;
  for (let i = 1; i < values.length; i++) {
    values[i] = values[i - 1] + step;
  }
  return values;
}

/***/ }),

/***/ 1950:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "logConfig": () => (/* binding */ logConfig),
/* harmony export */   "logImpl": () => (/* binding */ logImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const logImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => Math.log(xi));
const log = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log, logImpl);
const logConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log,
  backendName: 'cpu',
  kernelFunc: log
};

/***/ }),

/***/ 85889:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log1p.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log1p": () => (/* binding */ log1p),
/* harmony export */   "log1pConfig": () => (/* binding */ log1pConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const log1p = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log1p, xi => Math.log1p(xi));
const log1pConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log1p,
  backendName: 'cpu',
  kernelFunc: log1p
};

/***/ }),

/***/ 17001:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalAnd.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalAnd": () => (/* binding */ logicalAnd),
/* harmony export */   "logicalAndConfig": () => (/* binding */ logicalAndConfig),
/* harmony export */   "logicalAndImpl": () => (/* binding */ logicalAndImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const logicalAndImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a && b);
const logicalAnd = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');
const logicalAndConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalAnd,
  backendName: 'cpu',
  kernelFunc: logicalAnd
};

/***/ }),

/***/ 98426:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalNot.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalNot": () => (/* binding */ logicalNot),
/* harmony export */   "logicalNotConfig": () => (/* binding */ logicalNotConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const logicalNot = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalNot, xi => xi ? 0 : 1, 'bool');
const logicalNotConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalNot,
  backendName: 'cpu',
  kernelFunc: logicalNot
};

/***/ }),

/***/ 62157:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalOr.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalOr": () => (/* binding */ logicalOr),
/* harmony export */   "logicalOrConfig": () => (/* binding */ logicalOrConfig),
/* harmony export */   "logicalOrImpl": () => (/* binding */ logicalOrImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const logicalOrImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a || b);
const logicalOr = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');
const logicalOrConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalOr,
  backendName: 'cpu',
  kernelFunc: logicalOr
};

/***/ }),

/***/ 8839:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "maxConfig": () => (/* binding */ maxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Max_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Max_impl */ 67276);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ 30905);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






function max(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    reductionIndices,
    keepDims
  } = attrs;
  const cpuBackend = backend;
  let xShape = x.shape;
  const xRank = xShape.length;
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(reductionIndices, xShape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  let xVals = cpuBackend.data.get(x.dataId).values;
  if (permutedAxes != null) {
    const newShape = new Array(xRank);
    for (let i = 0; i < newShape.length; i++) {
      newShape[i] = xShape[permutedAxes[i]];
    }
    xVals = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImpl)(xVals, xShape, x.dtype, permutedAxes, newShape);
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);
    xShape = newShape;
  }
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_2__.assertNotComplex)(x, 'max');
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('max', axes, xRank);
  const [maxOutShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(xShape, axes);
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const result = (0,_Max_impl__WEBPACK_IMPORTED_MODULE_3__.maxImpl)(xVals, reduceSize, maxOutShape, x.dtype);
  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);
  let outShape = maxOutShape;
  if (keepDims) {
    // reshape
    const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(maxOutShape, origAxes);
    outShape = newShape;
  }
  return {
    dataId,
    shape: outShape,
    dtype: x.dtype
  };
}
const maxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Max,
  backendName: 'cpu',
  kernelFunc: max
};

/***/ }),

/***/ 92499:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool": () => (/* binding */ maxPool),
/* harmony export */   "maxPoolConfig": () => (/* binding */ maxPoolConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_pool_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/pool_utils */ 15062);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ 98750);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function maxPool(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'maxPool');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = 1;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
  let res;
  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
    res = (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
      inputs: {
        x
      },
      backend
    });
  } else {
    const xValues = backend.data.get(x.dataId).values;
    const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
    const buffer = (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_3__.pool)(xValues, x.shape, x.dtype, strides, convInfo, 'max');
    res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);
  }
  return res;
}
const maxPoolConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool,
  backendName: 'cpu',
  kernelFunc: maxPool
};

/***/ }),

/***/ 43431:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool3D.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3D": () => (/* binding */ maxPool3D),
/* harmony export */   "maxPool3DConfig": () => (/* binding */ maxPool3DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/pool_utils */ 15062);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function maxPool3D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'maxPool3d');
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);
  const xValues = backend.data.get(x.dataId).values;
  const outBuf = (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__.pool3d)(xValues, x.shape, x.dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape), convInfo, 'max');
  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);
}
const maxPool3DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3D,
  backendName: 'cpu',
  kernelFunc: maxPool3D
};

/***/ }),

/***/ 33153:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool3DGrad.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3DGrad": () => (/* binding */ maxPool3DGrad),
/* harmony export */   "maxPool3DGradConfig": () => (/* binding */ maxPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/pool_utils */ 15062);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function maxPool3DGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, input], 'maxPool3DGrad');
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
  const inputBuf = backend.bufferSync(input);
  const maxPosBuf = (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__.maxPool3dPositions)(inputBuf, convInfo);
  const strideDepth = convInfo.strideDepth;
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const dilationDepth = convInfo.dilationDepth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterDepth = convInfo.effectiveFilterDepth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
  const dx = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(input.shape, 'float32');
  const dyBuf = backend.bufferSync(dy);
  for (let batch = 0; batch < convInfo.batchSize; ++batch) {
    for (let channel = 0; channel < convInfo.inChannels; ++channel) {
      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {
        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {
          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {
            // Shader code begins
            const dyDepthCorner = dxDepth - padFront;
            const dyRowCorner = dxRow - padTop;
            const dyColCorner = dxCol - padLeft;
            let dotProd = 0;
            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {
              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;
              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {
                continue;
              }
              for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {
                const dyRow = (dyRowCorner + wRow) / strideHeight;
                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {
                  continue;
                }
                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {
                  const dyCol = (dyColCorner + wCol) / strideWidth;
                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {
                    continue;
                  }
                  const maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                  const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;
                  const mask = maxPos === curPos ? 1 : 0;
                  if (mask === 0) {
                    continue;
                  }
                  const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);
                  dotProd += pixel * mask;
                }
              }
            }
            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);
          }
        }
      }
    }
  }
  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const maxPool3DGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3DGrad,
  backendName: 'cpu',
  kernelFunc: maxPool3DGrad
};

/***/ }),

/***/ 50084:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolGrad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolGrad": () => (/* binding */ maxPoolGrad),
/* harmony export */   "maxPoolGradConfig": () => (/* binding */ maxPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/pool_utils */ 15062);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function maxPoolGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input,
    output
  } = inputs;
  const x = input;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([input, output], 'maxPoolGrad');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
  const xValues = backend.data.get(x.dataId).values;
  const maxPosBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(convInfo.outShape, x.dtype, (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_2__.maxPoolPositions)(xValues, x.shape, x.dtype, convInfo).values);
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
  const dx = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(x.shape, 'float32');
  const dyData = backend.data.get(dy.dataId).values;
  const dyBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(dy.shape, 'float32', dyData);
  for (let b = 0; b < convInfo.batchSize; ++b) {
    for (let d = 0; d < convInfo.inChannels; ++d) {
      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {
        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {
          // Shader code begins.
          const dyRCorner = dxR - padTop;
          const dyCCorner = dxC - padLeft;
          let dotProd = 0;
          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {
            const dyR = (dyRCorner + wR) / strideHeight;
            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {
              continue;
            }
            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {
              const dyC = (dyCCorner + wC) / strideWidth;
              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {
                continue;
              }
              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);
              const curPos = wR * effectiveFilterWidth + wC;
              const mask = maxPos === curPos ? 1 : 0;
              if (mask === 0) {
                continue;
              }
              const pixel = dyBuf.get(b, dyR, dyC, d);
              dotProd += pixel * mask;
            }
          }
          dx.set(dotProd, b, dxR, dxC, d);
        }
      }
    }
  }
  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);
}
const maxPoolGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolGrad,
  backendName: 'cpu',
  kernelFunc: maxPoolGrad
};

/***/ }),

/***/ 33513:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolWithArgmaxConfig": () => (/* binding */ maxPoolWithArgmaxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _MaxPoolWithArgmax_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MaxPoolWithArgmax_impl */ 87793);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const maxPoolWithArgmaxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolWithArgmax,
  backendName: 'cpu',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      filterSize,
      strides,
      pad,
      includeBatchInIndex
    } = attrs;
    const cpuBackend = backend;
    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'MaxPoolWithArgmax');
    const values = cpuBackend.data.get(x.dataId).values;
    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);
    const [pooled, indexes] = (0,_MaxPoolWithArgmax_impl__WEBPACK_IMPORTED_MODULE_2__.maxPoolWithArgmaxImpl)(values, x.shape, x.dtype, includeBatchInIndex, convInfo);
    const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);
    const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);
    return [{
      dataId: pooledDataId,
      shape: convInfo.outShape,
      dtype: x.dtype
    }, {
      dataId: indexesDataId,
      shape: convInfo.outShape,
      dtype: 'int32'
    }];
  }
};

/***/ }),

/***/ 87793:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax_impl.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolWithArgmaxImpl": () => (/* binding */ maxPoolWithArgmaxImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_pool_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/pool_utils */ 15062);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function maxPoolWithArgmaxImpl(xValues, xShape, dtype, includeBatchInIndex, convInfo) {
  const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(xShape);
  const maxPools = (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_1__.pool)(xValues, xShape, dtype, strides, convInfo, 'max');
  const maxPositions = (0,_utils_pool_utils__WEBPACK_IMPORTED_MODULE_1__.maxPoolPositions)(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);
  return [maxPools.values, maxPositions.values];
}

/***/ }),

/***/ 67276:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxImpl": () => (/* binding */ maxImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function maxImpl(aVals, reduceSize, outShape, dtype) {
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape));
  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let max = aVals[offset];
    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];
      if (Number.isNaN(value) || value > max) {
        // comparison with NaN always return false
        max = value;
      }
    }
    vals[i] = max;
  }
  return vals;
}

/***/ }),

/***/ 77717:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maximum": () => (/* binding */ maximum),
/* harmony export */   "maximumConfig": () => (/* binding */ maximumConfig),
/* harmony export */   "maximumImpl": () => (/* binding */ maximumImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const maximumImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((aValue, bValue) => Math.max(aValue, bValue));
const maximum = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Maximum, maximumImpl);
const maximumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Maximum,
  backendName: 'cpu',
  kernelFunc: maximum
};

/***/ }),

/***/ 94982:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Mean.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mean": () => (/* binding */ mean),
/* harmony export */   "meanConfig": () => (/* binding */ meanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Cast */ 44177);
/* harmony import */ var _RealDiv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RealDiv */ 24);
/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sum */ 88698);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function mean(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  const shapes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(x.shape, axes);
  const reduceShape = shapes[1];
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const toDispose = [];
  const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));
  toDispose.push(reduceSizeScalar);
  const $x = (0,_Cast__WEBPACK_IMPORTED_MODULE_1__.cast)({
    inputs: {
      x
    },
    backend,
    attrs: {
      dtype: 'float32'
    }
  });
  toDispose.push($x);
  const res = (0,_RealDiv__WEBPACK_IMPORTED_MODULE_2__.div)({
    inputs: {
      a: $x,
      b: reduceSizeScalar
    },
    backend
  });
  toDispose.push(res);
  const result = (0,_Sum__WEBPACK_IMPORTED_MODULE_3__.sum)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      axis,
      keepDims
    }
  });
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}
const meanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mean,
  backendName: 'cpu',
  kernelFunc: mean
};

/***/ }),

/***/ 54564:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Min.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "minConfig": () => (/* binding */ minConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function min(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'min');
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);
  let $x = x;
  if (permutedAxes != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, x.shape.length);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes($x.shape, axes);
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape), $x.dtype);
  const aVals = backend.data.get($x.dataId).values;
  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let min = aVals[offset];
    for (let j = 0; j < reduceSize; ++j) {
      const value = aVals[offset + j];
      if (Number.isNaN(value) || value < min) {
        // comparison with NaN always return false
        min = value;
      }
    }
    vals[i] = min;
  }
  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo($x);
  }
  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);
  if (keepDims) {
    const expandedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);
    const reshapedResult = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        shape: expandedShape
      }
    });
    backend.disposeIntermediateTensorInfo(result);
    return reshapedResult;
  }
  return result;
}
const minConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Min,
  backendName: 'cpu',
  kernelFunc: min
};

/***/ }),

/***/ 43094:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minimum": () => (/* binding */ minimum),
/* harmony export */   "minimumConfig": () => (/* binding */ minimumConfig),
/* harmony export */   "minimumImpl": () => (/* binding */ minimumImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const minimumImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((aValue, bValue) => Math.min(aValue, bValue));
const minimum = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Minimum, minimumImpl);
const minimumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Minimum,
  backendName: 'cpu',
  kernelFunc: minimum
};

/***/ }),

/***/ 76134:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MirrorPad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mirrorPad": () => (/* binding */ mirrorPad),
/* harmony export */   "mirrorPadConfig": () => (/* binding */ mirrorPadConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function mirrorPad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    paddings,
    mode
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'mirrorPad');
  const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);
  const start = paddings.map(p => p[0]);
  const end = paddings.map((p, i) => p[0] + x.shape[i]);
  const offset = mode === 'reflect' ? 0 : 1;
  const xVals = backend.data.get(x.dataId).values;
  const xRank = x.shape.length;
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
  const resultSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape);
  const resultRank = outShape.length;
  const resultStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(outShape);
  const resVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(x.dtype, resultSize);
  for (let i = 0; i < resultSize; i++) {
    let coords = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, resultRank, resultStrides);
    for (let i = 0; i < resultRank; i++) {
      if (coords[i] < start[i]) {
        coords[i] = start[i] * 2 - coords[i] - offset;
      } else if (coords[i] >= end[i]) {
        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;
      }
    }
    coords = coords.map((c, i) => c - start[i]);
    const inIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(coords, xRank, xStrides);
    resVals[i] = xVals[inIndex];
  }
  const outId = backend.write(resVals, outShape, x.dtype);
  return {
    dataId: outId,
    shape: outShape,
    dtype: x.dtype
  };
}
const mirrorPadConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MirrorPad,
  backendName: 'cpu',
  kernelFunc: mirrorPad
};

/***/ }),

/***/ 18787:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Mod.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mod": () => (/* binding */ mod),
/* harmony export */   "modConfig": () => (/* binding */ modConfig),
/* harmony export */   "modImpl": () => (/* binding */ modImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const modImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((aValue, bValue) => {
  const rem = aValue % bValue;
  if (aValue < 0 && bValue < 0 || aValue >= 0 && bValue >= 0) {
    return rem;
  } else {
    return (rem + bValue) % bValue;
  }
});
const mod = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mod, modImpl);
const modConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mod,
  backendName: 'cpu',
  kernelFunc: mod
};

/***/ }),

/***/ 29850:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multinomial.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multinomial": () => (/* binding */ multinomial),
/* harmony export */   "multinomialConfig": () => (/* binding */ multinomialConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! seedrandom */ 67801);
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Softmax__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Softmax */ 60365);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function multinomial(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    logits
  } = inputs;
  const {
    numSamples,
    seed,
    normalized
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_2__.assertNotComplex)(logits, 'multinomial');
  const probabilities = normalized ? logits : (0,_Softmax__WEBPACK_IMPORTED_MODULE_3__.softmax)({
    inputs: {
      logits
    },
    backend,
    attrs: {
      dim: -1
    }
  });
  const batchSize = probabilities.shape[0];
  const numEvents = probabilities.shape[1];
  const probVals = backend.data.get(probabilities.dataId).values;
  const resShape = [batchSize, numSamples];
  const resVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(resShape), 'int32');
  for (let b = 0; b < batchSize; ++b) {
    const offset = b * numEvents;
    // The cdf won't include the last event. It will be implicit if no other
    // event happened.
    const cdf = new Float32Array(numEvents - 1);
    cdf[0] = probVals[offset];
    for (let event = 1; event < cdf.length; ++event) {
      cdf[event] = cdf[event - 1] + probVals[offset + event];
    }
    const random = seedrandom__WEBPACK_IMPORTED_MODULE_1__.alea(seed.toString());
    const outOffset = b * numSamples;
    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {
      const r = random();
      // Assume last event happened by default.
      resVals[outOffset + sampleId] = cdf.length;
      for (let event = 0; event < cdf.length; event++) {
        if (r < cdf[event]) {
          resVals[outOffset + sampleId] = event;
          break;
        }
      }
    }
  }
  if (!normalized) {
    backend.disposeIntermediateTensorInfo(probabilities);
  }
  return backend.makeTensorInfo(resShape, 'int32', resVals);
}
const multinomialConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multinomial,
  backendName: 'cpu',
  kernelFunc: multinomial
};

/***/ }),

/***/ 20306:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiply": () => (/* binding */ multiply),
/* harmony export */   "multiplyComplexImpl": () => (/* binding */ multiplyComplexImpl),
/* harmony export */   "multiplyConfig": () => (/* binding */ multiplyConfig),
/* harmony export */   "multiplyImpl": () => (/* binding */ multiplyImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const multiplyImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((aValue, bValue) => aValue * bValue);
const multiplyComplexImpl = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag) => {
  return {
    real: aReal * bReal - aImag * bImag,
    imag: aReal * bImag + aImag * bReal
  };
});
const multiply = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multiply, multiplyImpl, multiplyComplexImpl);
const multiplyConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multiply,
  backendName: 'cpu',
  kernelFunc: multiply
};

/***/ }),

/***/ 58668:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "neg": () => (/* binding */ neg),
/* harmony export */   "negConfig": () => (/* binding */ negConfig),
/* harmony export */   "negImpl": () => (/* binding */ negImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Multiply__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Multiply */ 20306);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function negImpl(xVals, xShape, xDtype) {
  const minusOne = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(-1, xDtype);
  return (0,_Multiply__WEBPACK_IMPORTED_MODULE_1__.multiplyImpl)([], xShape, minusOne, xVals, xDtype);
}
function neg(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_2__.assertNotComplex)(x, 'neg');
  const xVals = backend.data.get(x.dataId).values;
  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);
  return backend.makeTensorInfo(newShape, x.dtype, res);
}
const negConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Neg,
  backendName: 'cpu',
  kernelFunc: neg
};

/***/ }),

/***/ 90978:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV3.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV3": () => (/* binding */ nonMaxSuppressionV3),
/* harmony export */   "nonMaxSuppressionV3Config": () => (/* binding */ nonMaxSuppressionV3Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const nonMaxSuppressionV3Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV3Impl;

function nonMaxSuppressionV3(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(boxes, 'NonMaxSuppression');
  const boxesVals = backend.data.get(boxes.dataId).values;
  const scoresVals = backend.data.get(scores.dataId).values;
  const {
    selectedIndices
  } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
  return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));
}
const nonMaxSuppressionV3Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV3,
  backendName: 'cpu',
  kernelFunc: nonMaxSuppressionV3
};

/***/ }),

/***/ 49552:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV4.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV4": () => (/* binding */ nonMaxSuppressionV4),
/* harmony export */   "nonMaxSuppressionV4Config": () => (/* binding */ nonMaxSuppressionV4Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const nonMaxSuppressionV4Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV4Impl;

function nonMaxSuppressionV4(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    padToMaxOutputSize
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(boxes, 'NonMaxSuppressionPadded');
  const boxesVals = backend.data.get(boxes.dataId).values;
  const scoresVals = backend.data.get(scores.dataId).values;
  const {
    selectedIndices,
    validOutputs
  } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))];
}
const nonMaxSuppressionV4Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV4,
  backendName: 'cpu',
  kernelFunc: nonMaxSuppressionV4
};

/***/ }),

/***/ 48457:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV5.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV5": () => (/* binding */ nonMaxSuppressionV5),
/* harmony export */   "nonMaxSuppressionV5Config": () => (/* binding */ nonMaxSuppressionV5Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const nonMaxSuppressionV5Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV5Impl;

function nonMaxSuppressionV5(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(boxes, 'NonMaxSuppressionWithScore');
  const boxesVals = backend.data.get(boxes.dataId).values;
  const scoresVals = backend.data.get(scores.dataId).values;
  const maxOutputSizeVal = maxOutputSize;
  const iouThresholdVal = iouThreshold;
  const scoreThresholdVal = scoreThreshold;
  const softNmsSigmaVal = softNmsSigma;
  const {
    selectedIndices,
    selectedScores
  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];
}
const nonMaxSuppressionV5Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV5,
  backendName: 'cpu',
  kernelFunc: nonMaxSuppressionV5
};

/***/ }),

/***/ 76325:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notEqual": () => (/* binding */ notEqual),
/* harmony export */   "notEqualConfig": () => (/* binding */ notEqualConfig),
/* harmony export */   "notEqualImpl": () => (/* binding */ notEqualImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const notEqualImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a !== b ? 1 : 0);
const notEqual = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NotEqual, notEqualImpl, null /* complexOp */, 'bool');
const notEqualConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NotEqual,
  backendName: 'cpu',
  kernelFunc: notEqual
};

/***/ }),

/***/ 57047:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/OneHot.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "oneHot": () => (/* binding */ oneHot),
/* harmony export */   "oneHotConfig": () => (/* binding */ oneHotConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function oneHot(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    indices
  } = inputs;
  const {
    dtype,
    depth,
    onValue,
    offValue
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(indices, 'oneHot');
  const indicesSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(indices.shape);
  const res = new Float32Array(indicesSize * depth);
  res.fill(offValue);
  const indicesVal = backend.data.get(indices.dataId).values;
  for (let event = 0; event < indicesSize; ++event) {
    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {
      res[event * depth + indicesVal[event]] = onValue;
    }
  }
  return backend.makeTensorInfo([...indices.shape, depth], dtype, res);
}
const oneHotConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OneHot,
  backendName: 'cpu',
  kernelFunc: oneHot
};

/***/ }),

/***/ 60600:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/OnesLike.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onesLike": () => (/* binding */ onesLike),
/* harmony export */   "onesLikeConfig": () => (/* binding */ onesLikeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Complex */ 50311);
/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Fill */ 37448);
/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ 469);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ 22749);
/* harmony import */ var _ZerosLike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ZerosLike */ 60839);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






function onesLike(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  if (x.dtype === 'string') {
    throw new Error('onesLike is not supported for string tensors');
  } else if (x.dtype === 'complex64') {
    const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({
      inputs: {
        input: x
      },
      backend
    });
    const r = onesLike({
      inputs: {
        x: realPart
      },
      backend
    });
    const imagPart = (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({
      inputs: {
        input: x
      },
      backend
    });
    const i = (0,_ZerosLike__WEBPACK_IMPORTED_MODULE_3__.zerosLike)({
      inputs: {
        x: imagPart
      },
      backend
    });
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_4__.complex)({
      inputs: {
        real: r,
        imag: i
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(r);
    backend.disposeIntermediateTensorInfo(imagPart);
    backend.disposeIntermediateTensorInfo(i);
    return result;
  } else {
    return (0,_Fill__WEBPACK_IMPORTED_MODULE_5__.fill)({
      backend,
      attrs: {
        shape: x.shape,
        value: 1,
        dtype: x.dtype
      }
    });
  }
}
const onesLikeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OnesLike,
  backendName: 'cpu',
  kernelFunc: onesLike
};

/***/ }),

/***/ 2671:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Pack.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pack": () => (/* binding */ pack),
/* harmony export */   "packConfig": () => (/* binding */ packConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Concat */ 41621);
/* harmony import */ var _ExpandDims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExpandDims */ 50624);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function pack(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    axis
  } = attrs;
  if (inputs.length === 1) {
    return (0,_ExpandDims__WEBPACK_IMPORTED_MODULE_1__.expandDims)({
      inputs: {
        input: inputs[0]
      },
      backend,
      attrs: {
        dim: axis
      }
    });
  }
  const shape = inputs[0].shape;
  const dtype = inputs[0].dtype;
  inputs.forEach(t => {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');
  });
  const intermediateTensorInfos = [];
  const expandedTensors = inputs.map(t => {
    const expandedT = (0,_ExpandDims__WEBPACK_IMPORTED_MODULE_1__.expandDims)({
      inputs: {
        input: t
      },
      backend,
      attrs: {
        dim: axis
      }
    });
    intermediateTensorInfos.push(expandedT);
    return expandedT;
  });
  const result = (0,_Concat__WEBPACK_IMPORTED_MODULE_2__.concat)({
    inputs: expandedTensors,
    backend,
    attrs: {
      axis
    }
  });
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}
const packConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pack,
  backendName: 'cpu',
  kernelFunc: pack
};

/***/ }),

/***/ 37122:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/PadV2.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padV2": () => (/* binding */ padV2),
/* harmony export */   "padV2Config": () => (/* binding */ padV2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function padV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    paddings,
    constantValue
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'pad');
  const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);
  const start = paddings.map(p => p[0]);
  const xVals = backend.data.get(x.dataId).values;
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const xRank = x.shape.length;
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape);
  const resultSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape);
  const resultRank = outShape.length;
  const resultStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(outShape);
  const resVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(x.dtype, resultSize);
  if (constantValue !== 0) {
    resVals.fill(constantValue);
  }
  for (let i = 0; i < xSize; i++) {
    const coords = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, xRank, xStrides);
    const outCoords = coords.map((c, i) => c + start[i]);
    const outIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(outCoords, resultRank, resultStrides);
    resVals[outIndex] = xVals[i];
  }
  const outId = backend.write(resVals, outShape, x.dtype);
  return {
    dataId: outId,
    shape: outShape,
    dtype: x.dtype
  };
}
const padV2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.PadV2,
  backendName: 'cpu',
  kernelFunc: padV2
};

/***/ }),

/***/ 38422:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Pow.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pow": () => (/* binding */ pow),
/* harmony export */   "powConfig": () => (/* binding */ powConfig),
/* harmony export */   "powImpl": () => (/* binding */ powImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const powImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => Math.pow(a, b));
const pow = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pow, powImpl);
const powConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pow,
  backendName: 'cpu',
  kernelFunc: pow
};

/***/ }),

/***/ 22042:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prelu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prelu": () => (/* binding */ prelu),
/* harmony export */   "preluConfig": () => (/* binding */ preluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const preluImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);
function prelu(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x,
    alpha
  } = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_2__.assertNotComplex)([x, alpha], 'prelu');
  const aVals = backend.data.get(x.dataId).values;
  const bVals = backend.data.get(alpha.dataId).values;
  const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');
  return backend.makeTensorInfo(resultShape, 'float32', resultData);
}
const preluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prelu,
  backendName: 'cpu',
  kernelFunc: prelu
};

/***/ }),

/***/ 82848:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prod": () => (/* binding */ prod),
/* harmony export */   "prodConfig": () => (/* binding */ prodConfig),
/* harmony export */   "prodImpl": () => (/* binding */ prodImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function prodImpl(xShape, xDtype, xVals, reductionAxes) {
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(xShape, reductionAxes);
  const outDtype = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(xDtype, 'int32');
  const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape), outDtype);
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  for (let i = 0; i < outVals.length; ++i) {
    const offset = i * reduceSize;
    let prod = 1;
    for (let j = 0; j < reduceSize; ++j) {
      prod *= xVals[offset + j];
    }
    outVals[i] = prod;
  }
  return {
    outVals,
    outShape,
    outDtype
  };
}
function prod(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'prod');
  const xRank = x.shape.length;
  const axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  let reductionAxes = axes;
  let permutedX = x;
  const intermediateTensorInfos = [];
  if (permutation != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
    intermediateTensorInfos.push(permutedX);
    reductionAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(reductionAxes.length, xRank);
  }
  const xVals = backend.data.get(permutedX.dataId).values;
  const {
    outVals,
    outShape,
    outDtype
  } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);
  let resultShape = outShape;
  if (keepDims) {
    resultShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, axes);
  }
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return backend.makeTensorInfo(resultShape, outDtype, outVals);
}
const prodConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prod,
  backendName: 'cpu',
  kernelFunc: prod
};

/***/ }),

/***/ 62332:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedGather.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedGather": () => (/* binding */ raggedGather),
/* harmony export */   "raggedGatherConfig": () => (/* binding */ raggedGatherConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _RaggedGather_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RaggedGather_impl */ 35196);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function raggedGather(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    paramsNestedSplits,
    paramsDenseValues,
    indices
  } = inputs;
  const {
    outputRaggedRank
  } = attrs;
  const $paramsNestedSplits = paramsNestedSplits.map(t => backend.data.get(t.dataId).values);
  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);
  const $paramsDenseValues = backend.data.get(paramsDenseValues.dataId).values;
  const $indices = backend.data.get(indices.dataId).values;
  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = (0,_RaggedGather_impl__WEBPACK_IMPORTED_MODULE_1__.raggedGatherImpl)($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);
  const outputNestedSplitsTensors = outputNestedSplits.map(splits => backend.makeTensorInfo([splits.length], 'int32', splits));
  const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);
  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);
}
const raggedGatherConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedGather,
  backendName: 'cpu',
  kernelFunc: raggedGather
};

/***/ }),

/***/ 35196:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedGather_impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedGatherImpl": () => (/* binding */ raggedGatherImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function validateIndices(indices, indicesShape, numParams) {
  indices.forEach((index, i) => {
    if (index < 0 || index >= numParams) {
      const locString = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, indicesShape.length, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(indicesShape)).join(',');
      throw new Error(`indices[${locString}] = ${index} is not in [0, ${numParams})`);
    }
  });
}
function validateSplits(paramsNestedSplits, numParamsDenseValues) {
  // Validate
  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {
    const splits = paramsNestedSplits[dim];
    const lastSplit = dim === paramsNestedSplits.length - 1 ? numParamsDenseValues : paramsNestedSplits[dim + 1].length;
    if (splits.length === 0) {
      throw new Error('Ragged splits may not be empty');
    }
    if (splits[0] < 0) {
      throw new Error('Ragged splits must be non-negative');
    }
    if (splits[splits.length - 1] > lastSplit) {
      throw new Error('Ragged splits must not point past values');
    }
    for (let i = 1; i < splits.length; ++i) {
      if (splits[i - 1] > splits[i]) {
        throw new Error('Ragged splits must be sorted in ascending order');
      }
    }
  }
}
// Construct the `splits` output tensors, encoded using a nested vector.
// Also find the slices of values that need to be copied, and store them
// in `valueSlices`.  The total number of values that will be copied (which
// we need for allocating the output values tensor) is stored in `numValues`.
function makeSplits(indices, indicesShape, paramsNestedSplits, numParamsDenseValues) {
  const valueSlices = [];
  let numValues = 0;
  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;
  const outSplits = new Array(numSplits).fill(null).map(() => [0]);
  validateSplits(paramsNestedSplits, numParamsDenseValues);
  // Add `splits` that come from all but the last dimension of the dense
  // Tensor `indices`.  In particular, for each dimension D, we add a
  // splits tensor whose values are:
  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]
  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:
  //   [0, 3, 6]                    # length=2+1, stride=3
  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4
  let nrows = 1;
  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {
    nrows *= indicesShape[dim];
    const rowLength = indicesShape[dim + 1];
    for (let i = 1; i < nrows + 1; ++i) {
      outSplits[dim].push(i * rowLength);
    }
  }
  // Add `splits` that come from `paramsNestedSplits`.  Starting with the
  // outermost ragged dimension (i.e., the first `splits` tensor), we work
  // our way in, finding the range of values that should be copied.  As we
  // go, we update the output `splits` for each dimension with the appropriate
  // values.  In particular, the *lengths* of the slices from `param_splits`
  // should be copied to generate corresponding slice lengths in the output
  // splits.  E.g., if we are copying a ragged row with length 4, then we
  // should add a new split point to outSplits that is 4 greater than the
  // previous split point in outSplits.
  for (let i = 0; i < indices.length; ++i) {
    let start = indices[i];
    let limit = indices[i] + 1;
    // Copy splits.
    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {
      const splits = paramsNestedSplits[dim];
      const outDim = dim + indicesShape.length - 1;
      if (outDim >= 0) {
        const outSplitsOutDim = outSplits[outDim];
        const delta = outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];
        for (let j = start; j < limit; ++j) {
          outSplits[outDim].push(splits[j + 1] + delta);
        }
      }
      start = splits[start];
      limit = splits[limit];
    }
    if (limit !== start) {
      valueSlices.push([start, limit]);
      numValues += limit - start;
    }
  }
  return {
    outSplits,
    valueSlices,
    numValues
  };
}
function getSplits(outSplits) {
  const splitsOut = [];
  for (let i = 0; i < outSplits.length; ++i) {
    const numSplits = outSplits[i].length;
    const splits = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType('int32', numSplits);
    splitsOut.push(splits);
    outSplits[i].forEach((value, j) => splits[j] = value);
  }
  return splitsOut;
}
function computeFlatOuterDims(orig, numOutDims) {
  const outDims = orig.slice(0, numOutDims);
  while (outDims.length < numOutDims) {
    outDims.push(1);
  }
  for (let inDim = numOutDims; inDim < orig.length; inDim++) {
    outDims[numOutDims - 1] *= orig[inDim];
  }
  return outDims;
}
// For each slice in `(start, limit)` in `valueSlices`, append
// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates
// the number of scalars contained in each value paramsDenseValues[i].
function writeValueSlices(paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize, values, valuesShape) {
  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];
  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];
  let outPos = 0;
  for (const slice of valueSlices) {
    for (let i = slice[0]; i < slice[1]; ++i) {
      for (let j = 0; j < valueSize; ++j) {
        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];
      }
      ++outPos;
    }
  }
}
function getValues(paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, valueSlices, numValues) {
  const valuesShape = paramsDenseValuesShape.slice();
  valuesShape[0] = numValues;
  const valuesOut = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(paramsDenseValuesDType, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(valuesShape));
  const numElements = paramsDenseValues.length;
  const valueSize = numElements === 0 ? 0 : numElements / paramsDenseValuesShape[0];
  writeValueSlices(paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize, valuesOut, valuesShape);
  return [valuesOut, valuesShape];
}
function raggedGatherImpl(paramsNestedSplits, paramsNestedSplitsShapes, paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, indices, indicesShape, outputRaggedRank) {
  if (paramsNestedSplits.length === 0) {
    throw new Error('paramsNestedSplits must be non empty');
  }
  if (paramsNestedSplitsShapes[0].length === 0) {
    throw new Error('Split tensors must not be scalars');
  }
  const numParams = paramsNestedSplitsShapes[0][0] - 1;
  validateIndices(indices, indicesShape, numParams);
  if (paramsDenseValuesShape.length === 0) {
    throw new Error('params.rank must be nonzero');
  }
  const numParamsDenseValues = paramsDenseValuesShape[0];
  // Calculate the `splits`, and store the value slices that we need to
  // copy in `valueSlices`.
  const {
    outSplits,
    valueSlices,
    numValues
  } = makeSplits(indices, indicesShape, paramsNestedSplits, numParamsDenseValues);
  // Write the output tensors.
  const outputNestedSplits = getSplits(outSplits);
  const outputDenseValues = getValues(paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, valueSlices, numValues);
  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];
}

/***/ }),

/***/ 3349:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedRange.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedRange": () => (/* binding */ raggedRange),
/* harmony export */   "raggedRangeConfig": () => (/* binding */ raggedRangeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _RaggedRange_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RaggedRange_impl */ 80608);
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function raggedRange(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    starts,
    limits,
    deltas
  } = inputs;
  const $starts = backend.data.get(starts.dataId).values;
  const $limits = backend.data.get(limits.dataId).values;
  const $deltas = backend.data.get(deltas.dataId).values;
  const [rtNestedSplitsData, rtDenseValuesData] = (0,_RaggedRange_impl__WEBPACK_IMPORTED_MODULE_1__.raggedRangeImpl)($starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas, deltas.shape);
  const rtNestedSplits = backend.makeTensorInfo([rtNestedSplitsData.length], 'int32', rtNestedSplitsData);
  const rtDenseValues = backend.makeTensorInfo([rtDenseValuesData.length], starts.dtype, rtDenseValuesData);
  return [rtNestedSplits, rtDenseValues];
}
const raggedRangeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedRange,
  backendName: 'cpu',
  kernelFunc: raggedRange
};

/***/ }),

/***/ 80608:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedRange_impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedRangeImpl": () => (/* binding */ raggedRangeImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const INT32_MAX = 2147483647;
function raggedRangeImpl(starts, startsShape, startsDType, limits, limitsShape, deltas, deltasShape) {
  // Check input tensor shapes.
  if (startsShape.length > 1) {
    throw new Error('starts must be a scalar or vector');
  }
  if (limitsShape.length > 1) {
    throw new Error('limits must be a scalar or vector');
  }
  if (deltasShape.length > 1) {
    throw new Error('deltas must be a scalar or vector');
  }
  // Determine which tensors we need to broadcast.
  const broadcastStarts = startsShape.length === 0;
  const broadcastLimits = limitsShape.length === 0;
  const broadcastDeltas = deltasShape.length === 0;
  // nRows (number of output rows) is the size of the non-broadcast inputs,
  // or 1 if all inputs are scalars.
  const inSizes = [];
  if (!broadcastStarts) {
    inSizes.push(startsShape[0]);
  }
  if (!broadcastLimits) {
    inSizes.push(limitsShape[0]);
  }
  if (!broadcastDeltas) {
    inSizes.push(deltasShape[0]);
  }
  for (let i = 1; i < inSizes.length; ++i) {
    if (inSizes[i] !== inSizes[i - 1]) {
      throw new Error('starts, limits, and deltas must have the same shape');
    }
  }
  const nRows = inSizes.length === 0 ? 1 : inSizes[0];
  // Construct the rtNestedSplits tensor.
  const rtNestedSplits = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType('int32', nRows + 1);
  rtNestedSplits[0] = 0;
  for (let row = 0; row < nRows; ++row) {
    const start = broadcastStarts ? starts[0] : starts[row];
    const limit = broadcastLimits ? limits[0] : limits[row];
    const delta = broadcastDeltas ? deltas[0] : deltas[row];
    if (delta === 0) {
      throw new Error('Requires delta != 0');
    }
    let size; // The number of elements in the specified range.
    if (delta > 0 && limit < start || delta < 0 && limit > start) {
      size = 0;
    } else {
      size = Math.ceil(Math.abs((limit - start) / delta));
      if (size > INT32_MAX) {
        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);
      }
    }
    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;
  }
  const nVals = rtNestedSplits[nRows];
  // Construct the rtDenseValues tensor.
  const rtDenseValues = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(startsDType, nVals);
  let valueIndex = 0;
  for (let row = 0; row < nRows; ++row) {
    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];
    let value = broadcastStarts ? starts[0] : starts[row];
    const delta = broadcastDeltas ? deltas[0] : deltas[row];
    for (let i = 0; i < rowSize; ++i) {
      rtDenseValues[valueIndex++] = value;
      value += delta;
    }
  }
  return [rtNestedSplits, rtDenseValues];
}

/***/ }),

/***/ 54181:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedTensorToTensor.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedTensorToTensor": () => (/* binding */ raggedTensorToTensor),
/* harmony export */   "raggedTensorToTensorConfig": () => (/* binding */ raggedTensorToTensorConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _RaggedTensorToTensor_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RaggedTensorToTensor_impl */ 18058);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function raggedTensorToTensor(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    shape,
    values,
    defaultValue,
    rowPartitionTensors
  } = inputs;
  const {
    rowPartitionTypes
  } = attrs;
  const $shape = backend.data.get(shape.dataId).values;
  const $values = backend.data.get(values.dataId).values;
  const $defaultValue = backend.data.get(defaultValue.dataId).values;
  const $rowPartitionValues = rowPartitionTensors.map(t => backend.data.get(t.dataId).values);
  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);
  const [outputShape, output] = (0,_RaggedTensorToTensor_impl__WEBPACK_IMPORTED_MODULE_1__.raggedTensorToTensorImpl)($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes);
  return backend.makeTensorInfo(outputShape, values.dtype, output);
}
const raggedTensorToTensorConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedTensorToTensor,
  backendName: 'cpu',
  kernelFunc: raggedTensorToTensor
};

/***/ }),

/***/ 18058:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedTensorToTensor_impl.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedTensorToTensorImpl": () => (/* binding */ raggedTensorToTensorImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

var RowPartitionType = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.RowPartitionType;
// Based on
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc
class RaggedTensorToTensorOp {
  constructor(shape, shapeShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypeStrings) {
    this.shape = shape;
    this.shapeShape = shapeShape;
    this.values = values;
    this.valuesShape = valuesShape;
    this.valuesDType = valuesDType;
    this.defaultValue = defaultValue;
    this.defaultValueShape = defaultValueShape;
    this.rowPartitionValues = rowPartitionValues;
    this.rowPartitionValuesShapes = rowPartitionValuesShapes;
    this.rowPartitionTypes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);
    this.raggedRank = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getRaggedRank(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(dimension) {
    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {
      return this.rowPartitionTypes[dimension + 1];
    } else {
      return this.rowPartitionTypes[dimension];
    }
  }
  // Returns the relationship between dimension and dimension + 1.
  getRowPartitionTensor(dimension) {
    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {
      return this.rowPartitionValues[dimension + 1];
    } else {
      return this.rowPartitionValues[dimension];
    }
  }
  getMaxWidth(dimension) {
    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);
    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {
      case RowPartitionType.VALUE_ROWIDS:
        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);
      case RowPartitionType.ROW_SPLITS:
        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);
      default:
        throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(dimension - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(rowSplit) {
    const tensorLength = rowSplit.length;
    if (tensorLength === 0 || tensorLength === 1) {
      return 0;
    }
    let maxWidth = 0;
    for (let i = 0; i < tensorLength - 1; ++i) {
      const currentWidth = rowSplit[i + 1] - rowSplit[i];
      if (currentWidth > maxWidth) {
        maxWidth = currentWidth;
      }
    }
    return maxWidth;
  }
  static getMaxWidthValueRowID(valueRowIds) {
    const indexLength = valueRowIds.length;
    if (indexLength === 0) {
      return 0;
    }
    let firstEqualIndex = 0;
    let firstEqualIndexValue = valueRowIds[0];
    let maxWidth = 0;
    for (let i = 1; i < indexLength; ++i) {
      const value = valueRowIds[i];
      if (value !== firstEqualIndexValue) {
        firstEqualIndexValue = value;
        maxWidth = Math.max(i - firstEqualIndex, maxWidth);
        firstEqualIndex = i;
      }
    }
    return Math.max(indexLength - firstEqualIndex, maxWidth);
  }
  tensorShapeFromTensor(t, tShape, isPartial = true) {
    if (tShape.length === 0) {
      if (t[0] === -1) {
        return [];
      }
      throw new Error(`The only valid scalar shape tensor is the fully unknown shape specified as -1.`);
    }
    // MakePartialShape/MakeShapeHelper.
    return makeShape(t, isPartial);
  }
  calculateOutputSize(firstDim) {
    const valueShape = this.valuesShape;
    const defaultValueShape = this.defaultValueShape;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.validateDefaultValueShape(defaultValueShape, valueShape);
    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);
    const outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank, shape, valueShape);
    const result = outputShape;
    if (result[0] < 0) {
      result[0] = firstDim;
    }
    for (let i = 1; i <= this.raggedRank; ++i) {
      if (result[i] < 0) {
        result[i] = this.getMaxWidth(i);
      }
    }
    return result;
  }
  /**
   * The outputIndex represents the index in the output tensor
   * where the first element of a particular dimension would be written.
   * If it is -1, it indicates that the index is out of scope.
   * Example, given firstDimension = 10, firstDimensionOutput = 6,
   * and outputIndexMultiplier = 100:
   * result = [0 100 200 300 400 500 -1 -1 -1 -1]
   * If firstDimensionOutput = 11 instead, then:
   * result = [0 100 200 300 400 500 600 700 800 900]
   */
  calculateFirstParentOutputIndex(firstDimension, outputIndexMultiplier, firstDimensionOutput) {
    const minDimension = Math.min(firstDimension, firstDimensionOutput);
    const result = [];
    let currentOutputIndex = 0;
    for (let i = 0; i < minDimension; ++i, currentOutputIndex += outputIndexMultiplier) {
      result.push(currentOutputIndex);
    }
    for (let i = minDimension; i < firstDimension; ++i) {
      result.push(-1);
    }
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(result.length === firstDimension, () => 'Final length of result must be equal to firstDimension.');
    return result;
  }
  calculateOutputIndexRowSplit(rowSplit, parentOutputIndex, outputIndexMultiplier, outputSize) {
    const rowSplitSize = rowSplit.length;
    const result = [];
    for (let i = 0; i < rowSplitSize - 1; ++i) {
      const rowLength = rowSplit[i + 1] - rowSplit[i];
      let realLength = Math.min(outputSize, rowLength);
      let parentOutputIndexCurrent = parentOutputIndex[i];
      if (parentOutputIndexCurrent === -1) {
        realLength = 0;
      }
      for (let j = 0; j < realLength; ++j) {
        result.push(parentOutputIndexCurrent);
        parentOutputIndexCurrent += outputIndexMultiplier;
      }
      for (let j = 0; j < rowLength - realLength; ++j) {
        result.push(-1);
      }
    }
    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {
      throw new Error('Invalid row split size.');
    }
    return result;
  }
  // Calculate the output index of the first element of a list.
  // The parentOutputIndex is the same computation for the previous list.
  // -1 indicates an element or list that is out of range.
  // The outputIndexMultiplier is the number of output indices one moves
  // forward for each column.
  // E.g., given:
  // valueRowIds:[0 1 2 2 2 3 5 5 6]
  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
  // outputIndexMultiplier: 10
  // outputSize: 2
  // You get:
  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
  // result[0] = parentOutputIndex[valueRowIds[0]]
  // result[1] = parentOutputIndex[valueRowIds[1]]
  // result[2] = parentOutputIndex[valueRowIds[2]]
  // result[3] = parentOutputIndex[valueRowIds[2] + 10]
  // result[4] = -1 because it is the third element the size is 2.
  // result[5] = parentOutputIndex[valueRowIds[3]]
  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[8] = parentOutputIndex[valueRowIds[7]]
  calculateOutputIndexValueRowID(valueRowIds, parentOutputIndex, outputIndexMultiplier, outputSize) {
    const indexSize = valueRowIds.length;
    const result = [];
    if (indexSize === 0) {
      return [];
    }
    let currentOutputColumn = 0;
    let currentValueRowId = valueRowIds[0];
    if (currentValueRowId >= parentOutputIndex.length) {
      throw new Error(`Got currentValueRowId=${currentValueRowId}, which is not less than ${parentOutputIndex.length}`);
    }
    let currentOutputIndex = parentOutputIndex[currentValueRowId];
    result.push(currentOutputIndex);
    for (let i = 1; i < indexSize; ++i) {
      const nextValueRowId = valueRowIds[i];
      if (nextValueRowId === currentValueRowId) {
        if (currentOutputIndex >= 0) {
          ++currentOutputColumn;
          if (currentOutputColumn < outputSize) {
            currentOutputIndex += outputIndexMultiplier;
          } else {
            currentOutputIndex = -1;
          }
        }
      } else {
        currentOutputColumn = 0;
        currentValueRowId = nextValueRowId;
        if (nextValueRowId >= parentOutputIndex.length) {
          throw new Error(`Got nextValueRowId=${nextValueRowId} which is not less than ${parentOutputIndex.length}`);
        }
        currentOutputIndex = parentOutputIndex[nextValueRowId];
      }
      result.push(currentOutputIndex);
    }
    if (result.length !== valueRowIds.length) {
      throw new Error('Invalid row ids.');
    }
    return result;
  }
  calculateOutputIndex(dimension, parentOutputIndex, outputIndexMultiplier, outputSize) {
    const rowPartitionTensor = this.getRowPartitionTensor(dimension);
    const partitionType = this.getRowPartitionTypeByDimension(dimension);
    switch (partitionType) {
      case RowPartitionType.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);
      case RowPartitionType.ROW_SPLITS:
        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {
          throw new Error(`Row partition size is greater than output size: ${rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);
        }
        return this.calculateOutputIndexRowSplit(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);
      default:
        throw new Error(`Unsupported partition type: ${RowPartitionType[partitionType]}`);
    }
  }
  getFirstDimensionSize() {
    const firstPartitionTensor = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0) {
      throw new Error('No row_partition_types given.');
    }
    const firstPartitionType = this.rowPartitionTypes[0];
    switch (firstPartitionType) {
      case RowPartitionType.FIRST_DIM_SIZE:
        return firstPartitionTensor[0];
      case RowPartitionType.VALUE_ROWIDS:
        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');
      case RowPartitionType.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${RowPartitionType[firstPartitionType]}`);
    }
  }
  compute() {
    const firstPartitionTensor = this.rowPartitionValues[0];
    if (firstPartitionTensor.length <= 0) {
      throw new Error('Invalid first partition input. ' + 'Tensor requires at least one element.');
    }
    const firstDimension = this.getFirstDimensionSize();
    const outputSize = this.calculateOutputSize(firstDimension);
    const multiplier = new Array(this.raggedRank + 1);
    multiplier[multiplier.length - 1] = 1;
    for (let i = multiplier.length - 2; i >= 0; --i) {
      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];
    }
    // Full size of the tensor.
    const outputShape = makeShape(outputSize, false);
    const outputTensor = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(this.valuesDType, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outputShape));
    const fullSize = multiplier[0] * outputSize[0];
    if (fullSize > 0) {
      let outputIndex = this.calculateFirstParentOutputIndex(firstDimension, multiplier[0], outputSize[0]);
      for (let i = 1; i <= this.raggedRank; ++i) {
        const newOutputIndex = this.calculateOutputIndex(i - 1, outputIndex, multiplier[i], outputSize[i]);
        outputIndex = newOutputIndex;
      }
      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);
    }
    return [outputShape, outputTensor];
  }
  setOutput(raggedRank, outputIndex, outputTensor, outputShape) {
    if (outputTensor.length === 0) {
      return;
    }
    const valuesBase = this.values;
    const outputBase = outputTensor;
    let elementShape = outputShape.slice();
    elementShape = elementShape.slice(raggedRank + 1);
    const valueElementSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(elementShape);
    const outputIndexSize = outputIndex.length;
    // Broadcast the default value to value_element_size.  (We can skip this
    // if defaultValueTensor.size == 1, since we use fill when that's true.)
    let defaultValue = this.defaultValue;
    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {
      const srcShape = this.defaultValueShape;
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
        const defaultValueTensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(defaultValue, srcShape);
        const bCastDefault = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.broadcastTo)(defaultValueTensor, elementShape);
        defaultValue = bCastDefault.dataSync();
      });
    }
    // Loop through the outputIndex array, finding contiguous regions that
    // should be copied.  Once we find the end of a contiguous region, copy it
    // and add any necessary padding (with defaultValue).
    let srcStart = 0; // Start of contiguous region (in values)
    let dstStart = 0; // Destination for contiguous region (in output)
    let dstEnd = 0; // Destination for contiguous region (in output)
    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {
      // dstI is the destination where the value at srcI should be copied.
      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;
      // If we're still in a contiguous region, then update dstEnd go to the
      // next srcI.
      if (dstI === dstEnd) {
        ++dstEnd;
        continue;
      }
      // We found the end of contiguous region.  This can be because we found
      // a gap (dstI > dstEnd), or a source value that shouldn't be copied
      // because it's out-of-bounds (dstI == -1), or the end of the tensor
      // (dstI === -1).
      if (dstStart < dstEnd) {
        // Copy the contiguous region.
        const src = valuesBase.subarray(srcStart * valueElementSize);
        const dst = outputBase.subarray(dstStart * valueElementSize);
        const nVals = (dstEnd - dstStart) * valueElementSize;
        copyArray(dst, src, nVals);
      }
      // Add any necessary padding (w/ defaultValue).
      if (srcI >= outputIndexSize) {
        // We reached the end of values: pad to the end of output.
        const outputSize = outputTensor.length;
        dstI = Math.floor(outputSize / valueElementSize);
      }
      if (dstI > dstEnd) {
        if (this.defaultValue.length === 1) {
          outputBase.subarray(dstEnd * valueElementSize, dstI * valueElementSize).fill(this.defaultValue[0]);
          dstEnd = dstI;
        } else {
          while (dstI > dstEnd) {
            const dst = outputBase.slice(dstEnd * valueElementSize);
            copyArray(dst, defaultValue, valueElementSize);
            ++dstEnd;
          }
        }
      }
      // Update indices.
      if (dstI < 0) {
        // srcI should be skipped -- leave it out of the contiguous region.
        srcStart = srcI + 1;
        dstStart = dstEnd;
      } else {
        // srcI should be copied -- include it in the contiguous region.
        srcStart = srcI;
        dstStart = dstEnd;
        dstEnd = dstStart + 1;
      }
    }
  }
}
function copyArray(dst, src, size) {
  for (let i = 0; i < size; i++) {
    dst[i] = src[i];
  }
}
function makeShape(shape, isPartial) {
  const out = [];
  for (let dim of shape) {
    if (dim < 0) {
      if (!isPartial) {
        throw new Error(`Dimension ${dim} must be >= 0`);
      }
      if (dim < -1) {
        throw new Error(`Dimension ${dim} must be >= -1`);
      }
      dim = -1;
    }
    out.push(dim);
  }
  return out;
}
function raggedTensorToTensorImpl(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes) {
  return new RaggedTensorToTensorOp(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes).compute();
}

/***/ }),

/***/ 79383:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "rangeConfig": () => (/* binding */ rangeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Range_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Range_impl */ 17599);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function range(args) {
  const {
    backend,
    attrs
  } = args;
  const {
    start,
    stop,
    dtype,
    step
  } = attrs;
  const values = (0,_Range_impl__WEBPACK_IMPORTED_MODULE_1__.rangeImpl)(start, stop, step, dtype);
  return backend.makeTensorInfo([values.length], dtype, values);
}
const rangeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Range,
  backendName: 'cpu',
  kernelFunc: range
};

/***/ }),

/***/ 17599:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rangeImpl": () => (/* binding */ rangeImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function rangeImpl(start, stop, step, dtype) {
  const sameStartStop = start === stop;
  const increasingRangeNegativeStep = start < stop && step < 0;
  const decreasingRangePositiveStep = stop < start && step > 1;
  if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(0, dtype);
  }
  const numElements = Math.abs(Math.ceil((stop - start) / step));
  const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(numElements, dtype);
  if (stop < start && step === 1) {
    // Auto adjust the step's sign if it hasn't been set
    // (or was set to 1)
    step = -1;
  }
  values[0] = start;
  for (let i = 1; i < values.length; i++) {
    values[i] = values[i - 1] + step;
  }
  return values;
}

/***/ }),

/***/ 22749:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "real": () => (/* binding */ real),
/* harmony export */   "realConfig": () => (/* binding */ realConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function real(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const real = backend.data.get(input.dataId).complexTensorInfos.real;
  const realVal = backend.data.get(real.dataId).values;
  // When complex tensor is disposed, its underlying parts will be disposed too.
  // Make new tensor out of the real value of the complex. This makes sure the
  // value is still accessible even if complex tensor is disposed.
  return backend.makeTensorInfo(real.shape, real.dtype, realVal);
}
const realConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Real,
  backendName: 'cpu',
  kernelFunc: real
};

/***/ }),

/***/ 24:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RealDiv.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "div": () => (/* binding */ div),
/* harmony export */   "realDivConfig": () => (/* binding */ realDivConfig),
/* harmony export */   "realDivImpl": () => (/* binding */ realDivImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const realDivImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => a / b);
const div = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RealDiv, realDivImpl);
const realDivConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RealDiv,
  backendName: 'cpu',
  kernelFunc: div
};

/***/ }),

/***/ 77385:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reciprocal.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reciprocal": () => (/* binding */ reciprocal),
/* harmony export */   "reciprocalConfig": () => (/* binding */ reciprocalConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const reciprocal = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reciprocal, xi => 1 / xi);
const reciprocalConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reciprocal,
  backendName: 'cpu',
  kernelFunc: reciprocal
};

/***/ }),

/***/ 22279:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Relu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu": () => (/* binding */ relu),
/* harmony export */   "reluConfig": () => (/* binding */ reluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const relu = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu, xi => Math.max(0, xi));
const reluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu,
  backendName: 'cpu',
  kernelFunc: relu
};

/***/ }),

/***/ 59805:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Relu6.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu6": () => (/* binding */ relu6),
/* harmony export */   "relu6Config": () => (/* binding */ relu6Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const relu6 = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu6, xi => Math.min(Math.max(0, xi), 6));
const relu6Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu6,
  backendName: 'cpu',
  kernelFunc: relu6
};

/***/ }),

/***/ 19422:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reshape.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reshape": () => (/* binding */ reshape),
/* harmony export */   "reshapeConfig": () => (/* binding */ reshapeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function reshape(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    shape
  } = attrs;
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const $shape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.inferFromImplicitShape(shape, xSize);
  const $xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape($shape);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);
  backend.incRef(x.dataId);
  const xData = backend.data.get(x.dataId);
  if (xData.complexTensorInfos != null) {
    const real = xData.complexTensorInfos.real;
    const imag = xData.complexTensorInfos.imag;
    real.shape = $shape;
    imag.shape = $shape;
  }
  return {
    dataId: x.dataId,
    shape: $shape,
    dtype: x.dtype
  };
}
const reshapeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reshape,
  backendName: 'cpu',
  kernelFunc: reshape
};

/***/ }),

/***/ 4611:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeBilinear.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeBilinear": () => (/* binding */ resizeBilinear),
/* harmony export */   "resizeBilinearConfig": () => (/* binding */ resizeBilinearConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function resizeBilinear(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images
  } = inputs;
  const {
    alignCorners,
    halfPixelCenters,
    size
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(images, 'resizeBilinear');
  const imagesStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(images.shape);
  const [newHeight, newWidth] = size;
  const [batch, oldHeight, oldWidth, numChannels] = images.shape;
  const xValues = backend.data.get(images.dataId).values;
  const result = new Float32Array(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape([batch, newHeight, newWidth, numChannels]));
  const effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
  const effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
  let outputIdx = 0;
  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
  for (let b = 0; b < batch; b++) {
    for (let r = 0; r < newHeight; r++) {
      let sourceFracRow;
      if (halfPixelCenters) {
        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;
      } else {
        sourceFracRow = effectiveRowSizeRatio * r;
      }
      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));
      const rowFrac = sourceFracRow - sourceRowFloor;
      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));
      const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];
      const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];
      for (let c = 0; c < newWidth; c++) {
        let sourceFracCol;
        if (halfPixelCenters) {
          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;
        } else {
          sourceFracCol = effectiveColSizeRatio * c;
        }
        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));
        const colFrac = sourceFracCol - sourceColFloor;
        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));
        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];
        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];
        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];
        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];
        for (let d = 0; d < numChannels; d++) {
          // Begin shader.
          // Compute the fractional index of the source.
          const topLeft = xValues[topLeftOffest + d];
          const bottomLeft = xValues[botLeftOffset + d];
          const topRight = xValues[topRightOffset + d];
          const bottomRight = xValues[botRightOffest + d];
          const top = topLeft + (topRight - topLeft) * colFrac;
          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;
          const newValue = top + (bottom - top) * rowFrac;
          result[outputIdx++] = newValue;
        }
      }
    }
  }
  return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], 'float32', result);
}
const resizeBilinearConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinear,
  backendName: 'cpu',
  kernelFunc: resizeBilinear
};

/***/ }),

/***/ 62284:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeBilinearGrad.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeBilinearGrad": () => (/* binding */ resizeBilinearGrad),
/* harmony export */   "resizeBilinearGradConfig": () => (/* binding */ resizeBilinearGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function resizeBilinearGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images,
    dy
  } = inputs;
  const {
    alignCorners
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, images], 'resizeBilinearGrad');
  const imagesStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(images.shape);
  const [batch, xHeight, xWidth, depth] = images.shape;
  const [, yHeight, yWidth] = dy.shape;
  const output = new Float32Array(batch * xHeight * xWidth * depth);
  // In the backwards pass, we want to find the pixels that were generated
  // for each pixel in the input image the forward pass and add the
  // corresponding coefficient from dy to the gradient (with some
  // interpolation).
  const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
  const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
  const heightScale = effectiveXSize[0] / effectiveYSize[0];
  const widthScale = effectiveXSize[1] / effectiveYSize[1];
  // Reference implementation
  // tslint:disable-next-line:max-line-length
  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275
  const dyValues = backend.data.get(dy.dataId).values;
  let offset = 0;
  for (let b = 0; b < batch; b++) {
    const bOffset = b * imagesStrides[0];
    for (let r = 0; r < yHeight; r++) {
      const dxR = r * heightScale;
      const topDxRIndex = Math.floor(dxR);
      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);
      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];
      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];
      const dxRLerp = dxR - topDxRIndex;
      const inverseDxRLerp = 1.0 - dxRLerp;
      for (let c = 0; c < yWidth; c++) {
        const dxC = c * widthScale;
        const leftDxCIndex = Math.floor(dxC);
        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);
        const dxCLerp = dxC - leftDxCIndex;
        const inverseDxCLerp = 1.0 - dxCLerp;
        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];
        const topRightRCOffset = topDxROffset + rightDxCIndex * imagesStrides[2];
        const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * imagesStrides[2];
        const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * imagesStrides[2];
        const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;
        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;
        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;
        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;
        for (let d = 0; d < depth; d++) {
          const dyVal = dyValues[offset++];
          output[topLeftRCOffset + d] += dyVal * inverseDxRLerpTimesInverseDxCLerp;
          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;
          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;
          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;
        }
      }
    }
  }
  return backend.makeTensorInfo([batch, xWidth, xHeight, depth], 'float32', output);
}
const resizeBilinearGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinearGrad,
  backendName: 'cpu',
  kernelFunc: resizeBilinearGrad
};

/***/ }),

/***/ 74240:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeNearestNeighbor.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeNearestNeighbor": () => (/* binding */ resizeNearestNeighbor),
/* harmony export */   "resizeNearestNeighborConfig": () => (/* binding */ resizeNearestNeighborConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function resizeNearestNeighbor(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images
  } = inputs;
  const {
    alignCorners,
    halfPixelCenters,
    size
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(images, 'resizeNearestNeighbor');
  const imagesStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(images.shape);
  const [newHeight, newWidth] = size;
  const [batch, oldHeight, oldWidth, numChannels] = images.shape;
  const xValues = backend.data.get(images.dataId).values;
  const output = new Float32Array(batch * newHeight * newWidth * numChannels);
  const effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
  const effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];
  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];
  let outputOffset = 0;
  for (let b = 0; b < batch; b++) {
    const batchOffset = b * imagesStrides[0];
    for (let r = 0; r < newHeight; r++) {
      const sourceFracRow = halfPixelCenters ? effectiveRowSizeRatio * (r + 0.5) : effectiveRowSizeRatio * r;
      let sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
      if (halfPixelCenters) {
        sourceNearestRow = Math.max(0, sourceNearestRow);
      }
      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];
      for (let c = 0; c < newWidth; c++) {
        const sourceFracCol = halfPixelCenters ? effectiveColSizeRatio * (c + 0.5) : effectiveColSizeRatio * c;
        let sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));
        if (halfPixelCenters) {
          sourceNearestCol = Math.max(0, sourceNearestCol);
        }
        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];
        for (let d = 0; d < numChannels; d++) {
          // Begin shader.
          // Compute the fractional index of the source.
          const newVal = xValues[colOffset + d];
          output[outputOffset++] = newVal;
        }
      }
    }
  }
  return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], images.dtype, output);
}
const resizeNearestNeighborConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighbor,
  backendName: 'cpu',
  kernelFunc: resizeNearestNeighbor
};

/***/ }),

/***/ 37141:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeNearestNeighborGrad.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeNearestNeighborGrad": () => (/* binding */ resizeNearestNeighborGrad),
/* harmony export */   "resizeNearestNeighborGradConfig": () => (/* binding */ resizeNearestNeighborGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function resizeNearestNeighborGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images,
    dy
  } = inputs;
  const {
    alignCorners
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, images], 'resizeNearestNeighborGrad');
  const imagesStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(images.shape);
  const dyStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(dy.shape);
  const [batch, xHeight, xWidth, depth] = images.shape;
  const [, yHeight, yWidth] = dy.shape;
  const output = new Float32Array(batch * xHeight * xWidth * depth);
  const dyValues = backend.data.get(dy.dataId).values;
  // In the backwards pass, we want to find the pixels that were generated
  // for each pixel in the input image the forward pass
  const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
  const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
  const heightScale = effectiveXSize[0] / effectiveYSize[0];
  const widthScale = effectiveXSize[1] / effectiveYSize[1];
  const invHeightScale = 1 / heightScale;
  const invWidthScale = 1 / widthScale;
  // This defines the size of the window of values around a particular
  // index in dy that we want to search for contributions to dx.
  const winHeight = Math.ceil(invHeightScale) * 2 + 2;
  const winWidth = Math.ceil(invWidthScale) * 2 + 2;
  // Loop over the output space.
  for (let b = 0; b < batch; b++) {
    const batchOffset = b * imagesStrides[0];
    for (let r = 0; r < xHeight; r++) {
      const rowOffset = batchOffset + r * imagesStrides[1];
      // Compute bounds for where in dy we will look
      const startRLerp = Math.floor(r * invHeightScale);
      const startDyR = Math.floor(startRLerp - winHeight / 2);
      for (let c = 0; c < xWidth; c++) {
        const colOffset = rowOffset + c * imagesStrides[2];
        // Compute bounds for where in dy we will look
        const startCLerp = Math.floor(c * invWidthScale);
        const startDyC = Math.floor(startCLerp - winWidth / 2);
        for (let d = 0; d < depth; d++) {
          let accum = 0;
          // loop over dy
          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {
            const dyR = dyRIndex + startDyR;
            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= yHeight) {
              continue;
            }
            const dyROffset = batchOffset + dyR * dyStrides[1];
            const sourceFracRow = dyR * heightScale;
            const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));
            if (r !== sourceNearestRow) {
              continue;
            }
            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {
              const dyC = dyCIndex + startDyC;
              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= yWidth) {
                continue;
              }
              const dyCOffset = dyROffset + dyC * dyStrides[2];
              const sourceFracCol = dyC * widthScale;
              const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));
              if (c === sourceNearestCol) {
                accum += dyValues[dyCOffset + d];
              }
            }
          }
          output[colOffset + d] = accum;
        }
      }
    }
  }
  return backend.makeTensorInfo(images.shape, images.dtype, output);
}
const resizeNearestNeighborGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighborGrad,
  backendName: 'cpu',
  kernelFunc: resizeNearestNeighborGrad
};

/***/ }),

/***/ 74454:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reverse.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse": () => (/* binding */ reverse),
/* harmony export */   "reverseConfig": () => (/* binding */ reverseConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ 98750);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function reverse(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    dims
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'reverse');
  const xRank = x.shape.length;
  const $dims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(dims, x.shape);
  if (xRank === 0) {
    return (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
      inputs: {
        x
      },
      backend
    });
  }
  const outBuf = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(x.shape, x.dtype);
  const xBuf = backend.bufferSync(x);
  for (let i = 0; i < outBuf.size; i++) {
    const outLoc = outBuf.indexToLoc(i);
    const inLoc = outLoc.slice();
    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);
    outBuf.set(xBuf.get(...inLoc), ...outLoc);
  }
  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
}
const reverseConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reverse,
  backendName: 'cpu',
  kernelFunc: reverse
};

/***/ }),

/***/ 75375:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RotateWithOffset.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateWithOffsetConfig": () => (/* binding */ rotateWithOffsetConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const rotateWithOffsetConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RotateWithOffset,
  backendName: 'cpu',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const {
      radians,
      fillValue,
      center
    } = attrs;
    const cpuBackend = backend;
    const output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(image.dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(image.shape));
    const [batch, imageHeight, imageWidth, numChannels] = image.shape;
    const [centerX, centerY] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getImageCenter(center, imageHeight, imageWidth);
    const fullOpacityValue = 255;
    const sinFactor = Math.sin(radians);
    const cosFactor = Math.cos(radians);
    const imageVals = cpuBackend.data.get(image.dataId).values;
    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {
      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;
      for (let row = 0; row < imageHeight; row++) {
        const rowOffset = row * (imageWidth * numChannels);
        for (let col = 0; col < imageWidth; col++) {
          const colOffset = col * numChannels;
          for (let channel = 0; channel < numChannels; channel++) {
            const coords = [batch, row, col, channel];
            const x = coords[2];
            const y = coords[1];
            // coordX/coordY are the result of rotating and translating x/y.
            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;
            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;
            coordX = Math.round(coordX + centerX);
            coordY = Math.round(coordY + centerY);
            let outputValue = fillValue;
            if (typeof fillValue !== 'number') {
              if (channel === 3) {
                outputValue = fullOpacityValue;
              } else {
                outputValue = fillValue[channel];
              }
            }
            // If the coordinate position falls within the image boundaries...
            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {
              // set the output to the image value at the coordinate position.
              const rotatedRowOffset = coordY * (imageWidth * numChannels);
              const rotatedColOffset = coordX * numChannels;
              const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;
              outputValue = imageVals[imageIdx];
            }
            const outIdx = batchOffset + rowOffset + colOffset + channel;
            output[outIdx] = outputValue;
          }
        }
      }
    }
    const dataId = cpuBackend.write(output, image.shape, image.dtype);
    return {
      dataId,
      shape: image.shape,
      dtype: image.dtype
    };
  }
};

/***/ }),

/***/ 85902:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Round.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "roundConfig": () => (/* binding */ roundConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const round = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Round, xi => {
  // The algorithm is based on banker's rounding.
  const base = Math.floor(xi);
  if (xi - base < 0.5) {
    return Math.floor(xi);
  } else if (xi - base > 0.5) {
    return Math.ceil(xi);
  } else {
    if (base % 2.0 === 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
});
const roundConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Round,
  backendName: 'cpu',
  kernelFunc: round
};

/***/ }),

/***/ 39800:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rsqrt": () => (/* binding */ rsqrt),
/* harmony export */   "rsqrtConfig": () => (/* binding */ rsqrtConfig),
/* harmony export */   "rsqrtImpl": () => (/* binding */ rsqrtImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const rsqrtImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => 1 / Math.sqrt(xi));
const rsqrt = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rsqrt, rsqrtImpl);
const rsqrtConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rsqrt,
  backendName: 'cpu',
  kernelFunc: rsqrt
};

/***/ }),

/***/ 37002:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ScatterNd.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scatterNd": () => (/* binding */ scatterNd),
/* harmony export */   "scatterNdConfig": () => (/* binding */ scatterNdConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Scatter_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Scatter_impl */ 78633);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function scatterNd(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    indices,
    updates
  } = inputs;
  const {
    shape
  } = attrs;
  const {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(updates, indices, shape);
  const sumDupeIndices = true;
  const indicesBuf = backend.bufferSync(indices);
  const updatesBuf = backend.bufferSync(updates);
  const outBuf = (0,_Scatter_impl__WEBPACK_IMPORTED_MODULE_1__.scatterImpl)(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);
  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);
}
const scatterNdConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ScatterNd,
  backendName: 'cpu',
  kernelFunc: scatterNd
};

/***/ }),

/***/ 78633:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Scatter_impl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scatterImpl": () => (/* binding */ scatterImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {
  const flattenShape = [outputSize / sliceSize, sliceSize];
  const indicesData = indices.values;
  const updatesData = updates.values;
  if (outputSize === 0) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(shape, updates.dtype);
  }
  const outBuf = defaultValue instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer ? defaultValue : (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(flattenShape, updates.dtype);
  if (typeof defaultValue === 'string') {
    outBuf.values.fill(defaultValue);
  } else if (typeof defaultValue === 'number') {
    outBuf.values.fill(defaultValue);
  } else if (typeof defaultValue === 'boolean') {
    outBuf.values.fill(+defaultValue);
  }
  for (let i = 0; i < numUpdates; i++) {
    const index = [];
    let flattenIndex = 0;
    for (let j = 0; j < sliceRank; j++) {
      const dim = indicesData[i * sliceRank + j];
      index.push(dim);
      flattenIndex += dim * strides[j];
    }
    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {
      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);
    }
    for (let k = 0; k < sliceSize; k++) {
      if (sumDupeIndices) {
        outBuf.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];
      } else {
        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];
      }
    }
  }
  return outBuf;
}

/***/ }),

/***/ 49321:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SearchSorted.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "searchSorted": () => (/* binding */ searchSorted),
/* harmony export */   "searchSortedConfig": () => (/* binding */ searchSortedConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _SearchSorted_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SearchSorted_impl */ 37769);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function searchSorted(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    sortedSequence,
    values
  } = inputs;
  const {
    side
  } = attrs;
  const $sortedSequence = backend.data.get(sortedSequence.dataId).values;
  const $values = backend.data.get(values.dataId).values;
  const output = (0,_SearchSorted_impl__WEBPACK_IMPORTED_MODULE_1__.searchSortedImpl)($sortedSequence, $values, sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);
  return backend.makeTensorInfo(values.shape, 'int32', output);
}
const searchSortedConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SearchSorted,
  backendName: 'cpu',
  kernelFunc: searchSorted
};

/***/ }),

/***/ 37769:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SearchSorted_impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "searchSortedImpl": () => (/* binding */ searchSortedImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function lowerBound(array, value) {
  let left = 0;
  let right = array.length;
  let mid = 0;
  while (left < right) {
    mid = Math.floor((left + right) / 2);
    if (array[mid] < value) {
      left = mid + 1;
    } else {
      right = mid;
    }
  }
  return right;
}
function upperBound(array, value) {
  let left = 0;
  let right = array.length;
  let mid = 0;
  while (left < right) {
    mid = Math.floor((left + right) / 2);
    if (array[mid] <= value) {
      left = mid + 1;
    } else {
      right = mid;
    }
  }
  return right;
}
function searchSortedImpl(sortedInputs, values, batchSize, numInputs, numValues, side) {
  const output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType('int32', batchSize * numValues);
  for (let b = 0; b < batchSize; ++b) {
    const sortedInputsSlice = sortedInputs.slice(b * numInputs, (b + 1) * numInputs);
    const outputOffset = b * numValues;
    for (let i = 0; i < numValues; ++i) {
      output[outputOffset + i] = side === 'left' ? lowerBound(sortedInputsSlice, values[i + outputOffset]) : upperBound(sortedInputsSlice, values[i + outputOffset]);
    }
  }
  return output;
}

/***/ }),

/***/ 72823:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Select.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "select": () => (/* binding */ select),
/* harmony export */   "selectConfig": () => (/* binding */ selectConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function select(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    condition,
    t,
    e
  } = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([condition, t, e], 'select');
  const conditionRank = condition.shape.length;
  const values = backend.data.get(condition.dataId).values;
  const tValues = backend.data.get(t.dataId).values;
  const eValues = backend.data.get(e.dataId).values;
  const resultDtype = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(t.dtype, e.dtype);
  const newValues = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape), resultDtype);
  let index = 0;
  const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape.slice(1));
  for (let i = 0; i < values.length; i++) {
    for (let j = 0; j < offset; j++) {
      if (values[i] === 1) {
        newValues[index++] = tValues[i];
      } else {
        newValues[index++] = eValues[i];
      }
    }
  }
  return backend.makeTensorInfo(t.shape, resultDtype, newValues);
}
const selectConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Select,
  backendName: 'cpu',
  kernelFunc: select
};

/***/ }),

/***/ 27647:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Selu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selu": () => (/* binding */ selu),
/* harmony export */   "seluConfig": () => (/* binding */ seluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const scaleAlpha = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.SELU_SCALEALPHA;
const scale = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.SELU_SCALE;
const selu = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Selu, xi => {
  if (xi >= 0) {
    return scale * xi;
  } else {
    return scaleAlpha * (Math.exp(xi) - 1);
  }
});
const seluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Selu,
  backendName: 'cpu',
  kernelFunc: selu
};

/***/ }),

/***/ 2167:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sigmoid.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sigmoid": () => (/* binding */ sigmoid),
/* harmony export */   "sigmoidConfig": () => (/* binding */ sigmoidConfig),
/* harmony export */   "sigmoidImpl": () => (/* binding */ sigmoidImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const sigmoidImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => 1 / (1 + Math.exp(-xi)));
const sigmoid = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sigmoid, xi => 1 / (1 + Math.exp(-xi)));
const sigmoidConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sigmoid,
  backendName: 'cpu',
  kernelFunc: sigmoid
};

/***/ }),

/***/ 73207:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sign.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sign": () => (/* binding */ sign),
/* harmony export */   "signConfig": () => (/* binding */ signConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const sign = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sign, xi => {
  if (xi < 0) {
    return -1;
  } else if (xi > 0) {
    return 1;
  } else {
    return 0;
  }
});
const signConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sign,
  backendName: 'cpu',
  kernelFunc: sign
};

/***/ }),

/***/ 52490:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sin.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sin": () => (/* binding */ sin),
/* harmony export */   "sinConfig": () => (/* binding */ sinConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const sin = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sin, xi => Math.sin(xi));
const sinConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sin,
  backendName: 'cpu',
  kernelFunc: sin
};

/***/ }),

/***/ 37581:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sinh.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinh": () => (/* binding */ sinh),
/* harmony export */   "sinhConfig": () => (/* binding */ sinhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const sinh = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sinh, xi => Math.sinh(xi));
const sinhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sinh,
  backendName: 'cpu',
  kernelFunc: sinh
};

/***/ }),

/***/ 73343:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice": () => (/* binding */ slice),
/* harmony export */   "sliceConfig": () => (/* binding */ sliceConfig),
/* harmony export */   "sliceImpl": () => (/* binding */ sliceImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sliceImpl(vals, begin, size, shape, dtype) {
  const isContinous = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.isSliceContinous(shape, begin, size);
  const length = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(size);
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(shape);
  if (isContinous) {
    const flatOffset = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.computeFlatOffset(begin, xStrides);
    if (dtype === 'string') {
      return vals.slice(flatOffset, flatOffset + length);
    }
    return vals.subarray(flatOffset, flatOffset + length);
  }
  const decodedData = dtype === 'string' ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(vals) : vals;
  const inBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(shape, dtype, decodedData);
  const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(size, dtype);
  for (let i = 0; i < outBuf.size; ++i) {
    const outLoc = outBuf.indexToLoc(i);
    const inLoc = outLoc.map((idx, j) => idx + begin[j]);
    outBuf.set(inBuf.get(...inLoc), ...outLoc);
  }
  if (dtype === 'string') {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromStringArrayToUint8(outBuf.values);
  }
  return outBuf.values;
}
function slice(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    begin,
    size
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'slice');
  const [$begin, $size] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.parseSliceParams(x, begin, size);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.assertParamsValid(x, $begin, $size);
  const vals = backend.data.get(x.dataId).values;
  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);
  return backend.makeTensorInfo($size, x.dtype, outVals);
}
const sliceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Slice,
  backendName: 'cpu',
  kernelFunc: slice
};

/***/ }),

/***/ 60365:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Softmax.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softmax": () => (/* binding */ softmax),
/* harmony export */   "softmaxConfig": () => (/* binding */ softmaxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Exp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exp */ 48392);
/* harmony import */ var _Max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Max */ 8839);
/* harmony import */ var _RealDiv__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RealDiv */ 24);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sub */ 41004);
/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Sum */ 88698);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







function softmax(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    logits
  } = inputs;
  const {
    dim
  } = attrs;
  const logitsRank = logits.shape.length;
  let $dim = dim;
  if ($dim === -1) {
    $dim = logitsRank - 1;
  }
  if ($dim !== logitsRank - 1) {
    throw Error('Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${logitsRank} and dim was ${$dim}`);
  }
  const axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam([$dim], logits.shape);
  const maxLogit = (0,_Max__WEBPACK_IMPORTED_MODULE_1__.max)({
    inputs: {
      x: logits
    },
    backend,
    attrs: {
      reductionIndices: axes,
      keepDims: false
    }
  });
  const expandedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(maxLogit.shape, axes);
  const maxLogitReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: maxLogit
    },
    backend,
    attrs: {
      shape: expandedShape
    }
  });
  const a = (0,_Sub__WEBPACK_IMPORTED_MODULE_3__.sub)({
    inputs: {
      a: logits,
      b: maxLogitReshaped
    },
    backend
  });
  const b = (0,_Exp__WEBPACK_IMPORTED_MODULE_4__.exp)({
    inputs: {
      x: a
    },
    backend
  });
  const sumExp = (0,_Sum__WEBPACK_IMPORTED_MODULE_5__.sum)({
    inputs: {
      x: b
    },
    backend,
    attrs: {
      axis: axes,
      keepDims: false
    }
  });
  const sumReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: sumExp
    },
    backend,
    attrs: {
      shape: expandedShape
    }
  });
  const result = (0,_RealDiv__WEBPACK_IMPORTED_MODULE_6__.div)({
    inputs: {
      a: b,
      b: sumReshaped
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(maxLogit);
  backend.disposeIntermediateTensorInfo(maxLogitReshaped);
  backend.disposeIntermediateTensorInfo(a);
  backend.disposeIntermediateTensorInfo(b);
  backend.disposeIntermediateTensorInfo(sumExp);
  backend.disposeIntermediateTensorInfo(sumReshaped);
  return result;
}
const softmaxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softmax,
  backendName: 'cpu',
  kernelFunc: softmax
};

/***/ }),

/***/ 1394:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Softplus.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softplus": () => (/* binding */ softplus),
/* harmony export */   "softplusConfig": () => (/* binding */ softplusConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX
// epsilon is the difference between 1.0 and the next representable float.
// For a single precision 32 bit float this should be 2^-23, see:
// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm
const epsilon = 1.1920928955078125e-7;
const threshold = Math.log(epsilon) + 2.0;
const softplus = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softplus, xi => {
  // Value above which exp(x) may overflow, but softplus(x) == x
  // is within machine epsilon.
  const tooLarge = xi > -threshold;
  // Value below which exp(x) may underflow, but softplus(x) == exp(x)
  // is within machine epsilon.
  const tooSmall = xi < threshold;
  const expX = Math.exp(xi);
  let result;
  if (tooSmall) {
    result = expX;
  } else if (tooLarge) {
    result = xi;
  } else {
    result = Math.log(1.0 + expX);
  }
  return result;
});
const softplusConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softplus,
  backendName: 'cpu',
  kernelFunc: softplus
};

/***/ }),

/***/ 27549:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SpaceToBatchND.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "spaceToBatchND": () => (/* binding */ spaceToBatchND),
/* harmony export */   "spaceToBatchNDConfig": () => (/* binding */ spaceToBatchNDConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _PadV2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PadV2 */ 37122);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function spaceToBatchND(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockShape,
    paddings
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([x], 'spaceToBatchND');
  const prod = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(blockShape);
  const completePaddings = [[0, 0]];
  completePaddings.push(...paddings);
  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {
    completePaddings.push([0, 0]);
  }
  const paddedX = _PadV2__WEBPACK_IMPORTED_MODULE_2__.padV2Config.kernelFunc({
    inputs: {
      x
    },
    backend,
    attrs: {
      paddings: completePaddings,
      constantValue: 0
    }
  });
  const reshapedPaddedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshaped(paddedX.shape, blockShape, prod, false);
  const permutedReshapedPaddedPermutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);
  const flattenShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);
  const reshapeInputs = {
    x: paddedX
  };
  const reshapeAttrs = {
    shape: reshapedPaddedShape
  };
  const paddedXReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
    inputs: reshapeInputs,
    backend,
    attrs: reshapeAttrs
  });
  const transposeInputs = {
    x: paddedXReshaped
  };
  const transposeAttrs = {
    perm: permutedReshapedPaddedPermutation
  };
  const paddedXT = (0,_Transpose__WEBPACK_IMPORTED_MODULE_4__.transpose)({
    inputs: transposeInputs,
    backend,
    attrs: transposeAttrs
  });
  const resultReshapeInputs = {
    x: paddedXT
  };
  const resultReshapeAttrs = {
    shape: flattenShape
  };
  const result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
    inputs: resultReshapeInputs,
    backend,
    attrs: resultReshapeAttrs
  });
  backend.disposeIntermediateTensorInfo(paddedX);
  backend.disposeIntermediateTensorInfo(paddedXReshaped);
  backend.disposeIntermediateTensorInfo(paddedXT);
  return result;
}
const spaceToBatchNDConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SpaceToBatchND,
  backendName: 'cpu',
  kernelFunc: spaceToBatchND
};

/***/ }),

/***/ 79787:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseFillEmptyRows": () => (/* binding */ sparseFillEmptyRows),
/* harmony export */   "sparseFillEmptyRowsConfig": () => (/* binding */ sparseFillEmptyRowsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _SparseFillEmptyRows_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SparseFillEmptyRows_impl */ 15243);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseFillEmptyRows(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    indices,
    values,
    denseShape,
    defaultValue
  } = inputs;
  if (denseShape.shape.length !== 1) {
    throw new Error(`Dense shape must be a vector, saw:
        ${denseShape.shape}`);
  }
  if (indices.shape.length !== 2) {
    throw new Error(`Indices must be a matrix, saw:
        ${indices.shape}`);
  }
  if (values.shape.length !== 1) {
    throw new Error(`Values must be a vector, saw:
        ${values.shape}`);
  }
  if (defaultValue.shape.length !== 0) {
    throw new Error(`Default value must be a scalar, saw:
        ${defaultValue.shape}`);
  }
  const $indices = backend.data.get(indices.dataId).values;
  const $values = backend.data.get(values.dataId).values;
  const $denseShape = backend.data.get(denseShape.dataId).values;
  const $defaultValue = backend.data.get(defaultValue.dataId).values[0];
  const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = (0,_SparseFillEmptyRows_impl__WEBPACK_IMPORTED_MODULE_1__.sparseFillEmptyRowsImpl)($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);
  return [backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices), backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues), backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map(value => Number(value)))), backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap))];
}
const sparseFillEmptyRowsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseFillEmptyRows,
  backendName: 'cpu',
  kernelFunc: sparseFillEmptyRows
};

/***/ }),

/***/ 15243:
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseFillEmptyRowsImpl": () => (/* binding */ sparseFillEmptyRowsImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {
  const indicesCount = indicesShape[0];
  const denseRows = denseShape[0];
  const emptyRowIndicator = new Array(denseRows);
  const reverseIndexMap = new Array(indicesCount);
  const rank = indicesShape[1];
  if (denseRows === 0) {
    if (indicesCount !== 0) {
      throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));
    }
    const outputIndices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(indicesDType, 0);
    const outputValues = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(valuesDType, 0);
    return [outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap];
  }
  let rowsAreOrdered = true;
  let lastIndicesRow = 0;
  const csrOffset = new Array(denseRows).fill(0);
  for (let i = 0; i < indicesCount; ++i) {
    // indices is a 2d tensor with shape of [N, rank]
    const row = indices[i * rank];
    if (row < 0) {
      throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));
    }
    if (row >= denseRows) {
      throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));
    }
    ++csrOffset[row];
    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;
    lastIndicesRow = row;
  }
  let allRowsFull = true;
  for (let row = 0; row < denseRows; ++row) {
    // csrOffset here describes the number of elements in this dense row
    const rowEmpty = csrOffset[row] === 0;
    emptyRowIndicator[row] = rowEmpty;
    allRowsFull = allRowsFull && !rowEmpty;
    // In filled version, each row has at least one element.
    csrOffset[row] = Math.max(csrOffset[row], 1);
    // Update csrOffset to represent the number of elements up to and
    // including denseRows + 1:
    //  csrOffset[0] == #{elements of row 0}
    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}
    //  ..
    //  csrOffset[i] == starting index for elements in row i + 1.
    if (row > 0) {
      csrOffset[row] += csrOffset[row - 1];
    }
  }
  if (allRowsFull && rowsAreOrdered) {
    const outputIndices = indices;
    const outputValues = values;
    for (let i = 0; i < indicesCount; ++i) {
      reverseIndexMap[i] = i;
    }
    return [outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];
  } else {
    const fullIndicesCount = csrOffset[denseRows - 1];
    const outputIndices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(indicesDType, fullIndicesCount * rank);
    const outputValues = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(valuesDType, fullIndicesCount);
    const filledCount = new Array(denseRows).fill(0);
    // Fill in values for rows that are not missing
    for (let i = 0; i < indicesCount; ++i) {
      // indices is a 2d tensor with shape of [N, rank]
      const row = indices[i * rank];
      const offset = filledCount[row];
      const outputI = (row === 0 ? 0 : csrOffset[row - 1]) + offset;
      filledCount[row]++; // Increment the filled count for this row.
      for (let j = 0; j < rank; ++j) {
        // indices and outputIndices are 2d tensors with shape of [N, rank]
        outputIndices[outputI * rank + j] = indices[i * rank + j];
      }
      outputValues[outputI] = values[i];
      // We'll need this reverse index map to backprop correctly.
      reverseIndexMap[i] = outputI;
    }
    // Fill in values for rows that are missing
    for (let row = 0; row < denseRows; ++row) {
      const rowCount = filledCount[row];
      if (rowCount === 0) {
        // We haven't filled this row
        const startingIndex = row === 0 ? 0 : csrOffset[row - 1];
        // Remaining index values were set to zero already.
        // Just need to set the row index in the right location.
        // outputIndices is a 2d tensor with shape of [N, rank]
        outputIndices[startingIndex * rank + 0] = row;
        for (let col = 1; col < rank; ++col) {
          outputIndices[startingIndex * rank + col] = 0;
        }
        outputValues[startingIndex] = defaultValue;
      }
    }
    return [outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];
  }
}

/***/ }),

/***/ 42901:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseReshape": () => (/* binding */ sparseReshape),
/* harmony export */   "sparseReshapeConfig": () => (/* binding */ sparseReshapeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _SparseReshape_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SparseReshape_impl */ 64641);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseReshape(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    inputIndices,
    inputShape,
    newShape
  } = inputs;
  if (inputIndices.shape.length !== 2) {
    throw new Error(`Input indices should be a matrix but received shape
        ${inputIndices.shape}`);
  }
  if (inputShape.shape.length !== 1) {
    throw new Error(`Input shape should be a vector but received shape
        ${inputShape.shape}`);
  }
  if (newShape.shape.length !== 1) {
    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);
  }
  const $inputShape = Array.from(backend.data.get(inputShape.dataId).values);
  const $inputIndices = backend.data.get(inputIndices.dataId).values;
  const targetShape = Array.from(backend.data.get(newShape.dataId).values);
  const [newIndices, indicesShape, outputShape] = (0,_SparseReshape_impl__WEBPACK_IMPORTED_MODULE_1__.sparseReshapeImpl)($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);
  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];
}
const sparseReshapeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseReshape,
  backendName: 'cpu',
  kernelFunc: sparseReshape
};

/***/ }),

/***/ 64641:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseReshapeImpl": () => (/* binding */ sparseReshapeImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {
  const denseSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(inputShape);
  const nnz = inputIndicesShape[0];
  const outputRank = targetShape.length;
  // Compute the output shape. Determine product of specified dimensions, and
  // find the index of the unspecified one.
  const outputShape = [];
  let product = 1;
  let unknownIndex = -1;
  for (let d = 0; d < outputRank; ++d) {
    const size = targetShape[d];
    if (size === -1) {
      if (unknownIndex !== -1) {
        throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));
      }
      unknownIndex = d;
      outputShape.push(1);
    } else {
      if (size < 0) {
        throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(d, size));
      }
      product *= size;
      outputShape.push(size);
    }
  }
  if (unknownIndex !== -1) {
    if (product <= 0) {
      throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
    }
    const missing = Math.trunc(denseSize / product);
    if (product * missing !== denseSize) {
      throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));
    }
    outputShape[unknownIndex] = missing;
  }
  const outputSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outputShape);
  if (outputSize !== denseSize) {
    throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));
  }
  const inputRank = inputShape.length;
  const inputStrides = [];
  if (inputRank > 0) {
    inputStrides[inputRank - 1] = 1;
    for (let d = inputRank - 2; d >= 0; --d) {
      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];
    }
  }
  const outputStrides = [];
  if (outputRank > 0) {
    outputStrides[outputRank - 1] = 1;
    for (let d = outputRank - 2; d >= 0; --d) {
      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];
    }
  }
  const newIndices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(inputDType, nnz * outputRank);
  for (let i = 0; i < nnz; ++i) {
    let id = 0;
    for (let j = 0; j < inputRank; ++j) {
      // inputIndices is a 2d tensor with shape of [nnz, inputRank]
      id += inputIndices[i * inputRank + j] * inputStrides[j];
    }
    for (let j = 0; j < outputRank; ++j) {
      // newIndices is a 2d tensor with shape of [nnz, outputRank]
      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);
      id %= outputStrides[j];
    }
  }
  return [newIndices, [nnz, outputRank], outputShape];
}

/***/ }),

/***/ 33010:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentMean.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseSegmentMean": () => (/* binding */ sparseSegmentMean),
/* harmony export */   "sparseSegmentMeanConfig": () => (/* binding */ sparseSegmentMeanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _SparseSegmentReduction_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SparseSegmentReduction_impl */ 96601);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseSegmentMean(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    data,
    indices,
    segmentIds
  } = inputs;
  if (data.shape.length < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }
  if (indices.shape.length !== 1) {
    throw new Error(`Indices should be a vector but received shape
          ${indices.shape}`);
  }
  if (segmentIds.shape.length !== 1) {
    throw new Error(`Segment ids should be a vector but received shape
          ${segmentIds.shape}`);
  }
  if (indices.shape[0] !== segmentIds.shape[0]) {
    throw new Error(`segmentIds and indices should have same size.`);
  }
  const $data = backend.data.get(data.dataId).values;
  const $indices = backend.data.get(indices.dataId).values;
  const $segmentIds = backend.data.get(segmentIds.dataId).values;
  const [outputData, outputDataShape] = (0,_SparseSegmentReduction_impl__WEBPACK_IMPORTED_MODULE_1__.sparseSegmentReductionImpl)($data, data.shape, data.dtype, $indices, $segmentIds, true);
  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}
const sparseSegmentMeanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseSegmentMean,
  backendName: 'cpu',
  kernelFunc: sparseSegmentMean
};

/***/ }),

/***/ 96601:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseSegmentReductionImpl": () => (/* binding */ sparseSegmentReductionImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {
  const numIndices = indices.length;
  // Flatten the array to two dimensions
  const inputFlat = [inputShape[0], input.length / inputShape[0]];
  const numCol = inputFlat[1];
  // Note that the current implementation assumes that segmentIds values are
  // sorted.
  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;
  const outputRows = lastSegmentIdPlusOne;
  if (outputRows < 0) {
    throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  }
  const outputShape = inputShape.slice();
  outputShape[0] = outputRows;
  const outputLength = outputShape.reduce((product, value) => product * value, 1);
  // Output array is initialized with the value 0 by default.
  const output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(inputDType, outputLength);
  // Note that we do not initialize the output buffer with a default value, so
  // we need to explicitly set missing indices to the default value.
  if (numIndices === 0) {
    if (outputRows > 0) {
      output.fill(defaultValue);
    }
    return [output, outputShape];
  }
  if (outputRows <= 0) {
    throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  }
  let start = 0,
    end = 1;
  // Index from which the output is not initialized.
  let uninitializedIndex = 0;
  let outIndex = segmentIds[start];
  while (true) {
    // We initialize nextIndex to 0 to avoid may be uninitialized warning
    let nextIndex = 0;
    if (end < numIndices) {
      nextIndex = segmentIds[end];
      if (outIndex === nextIndex) {
        ++end;
        continue;
      }
      // We have a new segment here.  Verify that the segment ids are growing.
      if (outIndex >= nextIndex) {
        throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
      }
    }
    if (outIndex < 0 || outIndex >= outputRows) {
      throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(outIndex, outputRows));
    }
    // If there is a gap between two indices, we need to set that gap to the
    // default value.
    if (outIndex > uninitializedIndex) {
      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);
    }
    for (let i = start; i < end; ++i) {
      const index = indices[i];
      if (index < 0 || index >= inputFlat[0]) {
        throw new Error(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i, indices[i], inputFlat[0]));
      }
      for (let j = 0; j < numCol; j++) {
        output[outIndex * numCol + j] += input[index * numCol + j];
      }
    }
    if (isMean) {
      for (let j = 0; j < numCol; j++) {
        output[outIndex * numCol + j] /= end - start;
      }
    }
    start = end;
    ++end;
    uninitializedIndex = outIndex + 1;
    outIndex = nextIndex;
    if (end > numIndices) {
      break;
    }
  }
  // Fill the gap at the end with the default value.
  if (uninitializedIndex < outputRows) {
    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);
  }
  return [output, outputShape];
}

/***/ }),

/***/ 89903:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentSum.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseSegmentSum": () => (/* binding */ sparseSegmentSum),
/* harmony export */   "sparseSegmentSumConfig": () => (/* binding */ sparseSegmentSumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _SparseSegmentReduction_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SparseSegmentReduction_impl */ 96601);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseSegmentSum(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    data,
    indices,
    segmentIds
  } = inputs;
  if (data.shape.length < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }
  if (indices.shape.length !== 1) {
    throw new Error(`Indices should be a vector but received shape
         ${indices.shape}`);
  }
  if (segmentIds.shape.length !== 1) {
    throw new Error(`Segment ids should be a vector but received shape
         ${segmentIds.shape}`);
  }
  if (indices.shape[0] !== segmentIds.shape[0]) {
    throw new Error(`segmentIds and indices should have same size.`);
  }
  const $data = backend.data.get(data.dataId).values;
  const $indices = backend.data.get(indices.dataId).values;
  const $segmentIds = backend.data.get(segmentIds.dataId).values;
  const [outputData, outputDataShape] = (0,_SparseSegmentReduction_impl__WEBPACK_IMPORTED_MODULE_1__.sparseSegmentReductionImpl)($data, data.shape, data.dtype, $indices, $segmentIds);
  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}
const sparseSegmentSumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseSegmentSum,
  backendName: 'cpu',
  kernelFunc: sparseSegmentSum
};

/***/ }),

/***/ 4128:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseToDense.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseToDense": () => (/* binding */ sparseToDense),
/* harmony export */   "sparseToDenseConfig": () => (/* binding */ sparseToDenseConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Scatter_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Scatter_impl */ 78633);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseToDense(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    sparseIndices,
    sparseValues,
    defaultValue
  } = inputs;
  const {
    outputShape
  } = attrs;
  const {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);
  const sumDupeIndices = false;
  const indicesBuf = backend.bufferSync(sparseIndices);
  let outBuf;
  switch (sparseValues.dtype) {
    case 'bool':
      {
        const updatesBuf = backend.bufferSync(sparseValues);
        const $defaultValue = Boolean(backend.data.get(defaultValue.dataId).values[0]);
        outBuf = (0,_Scatter_impl__WEBPACK_IMPORTED_MODULE_1__.scatterImpl)(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);
        break;
      }
    case 'float32':
      {
        const updatesBuf = backend.bufferSync(sparseValues);
        const $defaultValue = backend.data.get(defaultValue.dataId).values[0];
        outBuf = (0,_Scatter_impl__WEBPACK_IMPORTED_MODULE_1__.scatterImpl)(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);
        break;
      }
    case 'int32':
      {
        const updatesBuf = backend.bufferSync(sparseValues);
        const $defaultValue = backend.data.get(defaultValue.dataId).values[0];
        outBuf = (0,_Scatter_impl__WEBPACK_IMPORTED_MODULE_1__.scatterImpl)(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);
        break;
      }
    case 'string':
      {
        const updatesBuf = backend.bufferSync(sparseValues);
        const $defaultValue = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.decodeString(backend.data.get(defaultValue.dataId).values[0]);
        outBuf = (0,_Scatter_impl__WEBPACK_IMPORTED_MODULE_1__.scatterImpl)(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);
        break;
      }
    default:
      throw new Error(`Unsupported type ${sparseValues.dtype}`);
  }
  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);
}
const sparseToDenseConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseToDense,
  backendName: 'cpu',
  kernelFunc: sparseToDense
};

/***/ }),

/***/ 75671:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SplitV.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitV": () => (/* binding */ splitV),
/* harmony export */   "splitVConfig": () => (/* binding */ splitVConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Slice */ 73343);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function splitV(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    numOrSizeSplits,
    axis
  } = attrs;
  const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape)[0];
  const splitSizes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);
  const begin = new Array(x.shape.length).fill(0);
  const size = x.shape.slice();
  return splitSizes.map(s => {
    const sliceSize = [...size];
    sliceSize[$axis] = s;
    const sliceT = (0,_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({
      inputs: {
        x
      },
      backend,
      attrs: {
        begin,
        size: sliceSize
      }
    });
    begin[$axis] += s;
    return sliceT;
  });
}
const splitVConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SplitV,
  backendName: 'cpu',
  kernelFunc: splitV
};

/***/ }),

/***/ 78421:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sqrt.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrt": () => (/* binding */ sqrt),
/* harmony export */   "sqrtConfig": () => (/* binding */ sqrtConfig),
/* harmony export */   "sqrtImpl": () => (/* binding */ sqrtImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const sqrtImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(xi => Math.sqrt(xi));
const sqrt = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sqrt, xi => Math.sqrt(xi));
const sqrtConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sqrt,
  backendName: 'cpu',
  kernelFunc: sqrt
};

/***/ }),

/***/ 7299:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Square.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squareConfig": () => (/* binding */ squareConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const squareConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Square,
  backendName: 'cpu',
  kernelFunc: ({
    inputs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const cpuBackend = backend;
    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'square');
    const values = cpuBackend.data.get(x.dataId).values;
    const newValues = new Float32Array(values.length);
    for (let i = 0; i < values.length; ++i) {
      const value = values[i];
      newValues[i] = value * value;
    }
    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);
    return {
      dataId,
      shape: x.shape,
      dtype: x.dtype
    };
  }
};

/***/ }),

/***/ 71854:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squaredDifference": () => (/* binding */ squaredDifference),
/* harmony export */   "squaredDifferenceConfig": () => (/* binding */ squaredDifferenceConfig),
/* harmony export */   "squaredDifferenceImpl": () => (/* binding */ squaredDifferenceImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const squaredDifferenceImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((a, b) => {
  const diff = a - b;
  return diff * diff;
});
const squaredDifference = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference, squaredDifferenceImpl);
const squaredDifferenceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference,
  backendName: 'cpu',
  kernelFunc: squaredDifference
};

/***/ }),

/***/ 60941:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StaticRegexReplace.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "staticRegexReplaceConfig": () => (/* binding */ staticRegexReplaceConfig),
/* harmony export */   "staticRegexReplaceImpl": () => (/* binding */ staticRegexReplaceImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_impl */ 32421);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const staticRegexReplaceImpl = (0,_utils_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)((x, attrs) => {
  const {
    pattern,
    replaceGlobal,
    rewrite
  } = attrs;
  // TODO(mattSoulanille): Don't create a regex each time.
  return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);
});
const staticRegexReplace = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFuncFromImpl)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StaticRegexReplace, staticRegexReplaceImpl);
const staticRegexReplaceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StaticRegexReplace,
  backendName: 'cpu',
  kernelFunc: staticRegexReplace
};

/***/ }),

/***/ 1200:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Step.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "step": () => (/* binding */ step),
/* harmony export */   "stepConfig": () => (/* binding */ stepConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const step = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Step, (xi, attrs) => {
  const stepAttrs = attrs;
  if (isNaN(xi)) {
    return NaN;
  } else {
    return xi > 0 ? 1 : stepAttrs.alpha;
  }
});
const stepConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Step,
  backendName: 'cpu',
  kernelFunc: step
};

/***/ }),

/***/ 26478:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stridedSlice": () => (/* binding */ stridedSlice),
/* harmony export */   "stridedSliceConfig": () => (/* binding */ stridedSliceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Slice */ 73343);
/* harmony import */ var _StridedSlice_impl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StridedSlice_impl */ 11899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function stridedSlice(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    begin,
    end,
    strides,
    beginMask,
    endMask,
    ellipsisMask,
    newAxisMask,
    shrinkAxisMask
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'stridedSlice');
  const {
    finalShapeSparse,
    finalShape,
    isIdentity,
    sliceDim0,
    isSimpleSlice,
    begin: $begin,
    end: $end,
    strides: $strides
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
  let result;
  // ref:
  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc
  if (isIdentity) {
    // Optimization #1, slice is a no-op plus reshape
    result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x
      },
      backend,
      attrs: {
        shape: finalShape
      }
    });
  } else if (sliceDim0 || isSimpleSlice) {
    // Optimization #2, slice is memory contiguous (only occurs in dim 0)
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);
    const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.computeOutShape($begin, $end, $strides);
    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).
    const sliced = (0,_Slice__WEBPACK_IMPORTED_MODULE_3__.slice)({
      inputs: {
        x
      },
      backend,
      attrs: {
        begin: $begin,
        size
      }
    });
    result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: sliced
      },
      backend,
      attrs: {
        shape: finalShape
      }
    });
    backend.disposeIntermediateTensorInfo(sliced);
  } else {
    const xBuf = backend.bufferSync(x);
    const outBuf = (0,_StridedSlice_impl__WEBPACK_IMPORTED_MODULE_4__.stridedSliceImpl)(finalShapeSparse, xBuf, $strides, $begin);
    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);
  }
  return result;
}
const stridedSliceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StridedSlice,
  backendName: 'cpu',
  kernelFunc: stridedSlice
};

/***/ }),

/***/ 11899:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stridedSliceImpl": () => (/* binding */ stridedSliceImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function stridedSliceImpl(outShape, xBuf, strides, begin) {
  const outBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(outShape, xBuf.dtype);
  for (let i = 0; i < outBuf.size; i++) {
    const loc = outBuf.indexToLoc(i);
    const newLoc = new Array(loc.length);
    for (let j = 0; j < newLoc.length; j++) {
      newLoc[j] = loc[j] * strides[j] + begin[j];
    }
    outBuf.set(xBuf.get(...newLoc), ...loc);
  }
  return outBuf;
}

/***/ }),

/***/ 62510:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringNGrams": () => (/* binding */ stringNGrams),
/* harmony export */   "stringNGramsConfig": () => (/* binding */ stringNGramsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _StringNGrams_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StringNGrams_impl */ 17683);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function stringNGrams(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    separator,
    nGramWidths,
    leftPad,
    rightPad,
    padWidth,
    preserveShortSequences
  } = attrs;
  const {
    data,
    dataSplits
  } = inputs;
  const $data = backend.data.get(data.dataId).values;
  const $dataSplits = backend.data.get(dataSplits.dataId).values;
  const [nGrams, nGramsSplits] = (0,_StringNGrams_impl__WEBPACK_IMPORTED_MODULE_1__.stringNGramsImpl)($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);
  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];
}
const stringNGramsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringNGrams,
  backendName: 'cpu',
  kernelFunc: stringNGrams
};

/***/ }),

/***/ 17683:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringNGramsImpl": () => (/* binding */ stringNGramsImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * The StringNGramsOp class creates ngrams from ragged string data.
 * The constructor contains all attributes related to the operation such as
 * padding widths and strings, and the compute function can be used to
 * compute the ngrams for different ragged tensor inputs.
 */
class StringNGramsOp {
  constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
    this.separator = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.encodeString(separator);
    this.nGramWidths = nGramWidths;
    this.leftPad = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.encodeString(leftPad);
    this.rightPad = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.encodeString(rightPad);
    this.padWidth = padWidth;
    this.preserveShort = preserveShortSequences;
  }
  getPadWidth(nGramWidth) {
    // Ngrams can be padded with either a fixed pad width or a dynamic pad
    // width depending on the 'padWidth' arg, but in no case should the padding
    // ever be wider than 'nGramWidth' - 1.
    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);
  }
  getNumNGrams(length, nGramWidth) {
    const padWidth = this.getPadWidth(nGramWidth);
    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);
  }
  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {
    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {
      const padWidth = this.getPadWidth(nGramWidth);
      const leftPadding = Math.max(0, padWidth - nGramIndex);
      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));
      const numTokens = nGramWidth - (leftPadding + rightPadding);
      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);
      // Calculate the total expected size of the nGram so we can reserve the
      // correct amount of space in the string.
      let nGramSize = 0;
      // Size of the left padding.
      nGramSize += leftPadding * this.leftPad.length;
      // Size of the tokens.
      for (let n = 0; n < numTokens; ++n) {
        nGramSize += data[dataStartIndex + n].length;
      }
      // Size of the right padding.
      nGramSize += rightPadding * this.rightPad.length;
      // Size of the separators.
      const numSeparators = leftPadding + rightPadding + numTokens - 1;
      nGramSize += numSeparators * this.separator.length;
      // Build the nGram.
      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);
      const nGram = output[outputStartIndex + nGramIndex];
      let nextNGramIndex = 0;
      const appendToNGram = str => str.forEach(value => nGram[nextNGramIndex++] = value);
      for (let n = 0; n < leftPadding; ++n) {
        appendToNGram(this.leftPad);
        appendToNGram(this.separator);
      }
      // Only output first numTokens - 1 pairs of data and separator
      for (let n = 0; n < numTokens - 1; ++n) {
        appendToNGram(data[dataStartIndex + n]);
        appendToNGram(this.separator);
      }
      // Handle case when there are no tokens or no right padding as these
      // can result in consecutive separators.
      if (numTokens > 0) {
        // If we have tokens, then output last and then pair each separator
        // with the right padding that follows, to ensure nGram ends either with
        // the token or with the right pad.
        appendToNGram(data[dataStartIndex + numTokens - 1]);
        for (let n = 0; n < rightPadding; ++n) {
          appendToNGram(this.separator);
          appendToNGram(this.rightPad);
        }
      } else {
        // If we don't have tokens, then the last item inserted into the nGram
        // has been the separator from the left padding loop above. Hence,
        // output right pad and separator and make sure to finish with a
        // padding, not a separator.
        for (let n = 0; n < rightPadding - 1; ++n) {
          appendToNGram(this.rightPad);
          appendToNGram(this.separator);
        }
        appendToNGram(this.rightPad);
      }
    }
  }
  // Data and splits together form the definition of the ragged tensor,
  // where data is 1 dimensional and contains the values of the tensor
  // and splits denotes the indices at which each row starts.
  compute(data, splits) {
    // Validate that the splits are valid indices into data, only if there are
    // splits specified.
    const inputDataSize = data.length;
    const splitsSize = splits.length;
    if (splitsSize > 0) {
      let prevSplit = splits[0];
      if (prevSplit !== 0) {
        throw new Error(`First split value must be 0, got ${prevSplit}`);
      }
      for (let i = 1; i < splitsSize; ++i) {
        let validSplits = splits[i] >= prevSplit;
        validSplits = validSplits && splits[i] <= inputDataSize;
        if (!validSplits) {
          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);
        }
        prevSplit = splits[i];
      }
      if (prevSplit !== inputDataSize) {
        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);
      }
    }
    const numBatchItems = splitsSize - 1;
    const nGramsSplits = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType('int32', splitsSize);
    // If there is no data or size, return an empty ragged tensor.
    if (inputDataSize === 0 || splitsSize === 0) {
      const empty = new Array(inputDataSize);
      for (let i = 0; i <= numBatchItems; ++i) {
        nGramsSplits[i] = 0;
      }
      return [empty, nGramsSplits];
    }
    nGramsSplits[0] = 0;
    for (let i = 1; i <= numBatchItems; ++i) {
      const length = splits[i] - splits[i - 1];
      let numNGrams = 0;
      this.nGramWidths.forEach(nGramWidth => {
        numNGrams += this.getNumNGrams(length, nGramWidth);
      });
      if (this.preserveShort && length > 0 && numNGrams === 0) {
        numNGrams = 1;
      }
      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;
    }
    const nGrams = new Array(nGramsSplits[numBatchItems]);
    for (let i = 0; i < numBatchItems; ++i) {
      const splitIndex = splits[i];
      let outputStartIdx = nGramsSplits[i];
      this.nGramWidths.forEach(nGramWidth => {
        const length = splits[i + 1] - splits[i];
        const numNGrams = this.getNumNGrams(length, nGramWidth);
        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);
        outputStartIdx += numNGrams;
      });
      // If we're preserving short sequences, check to see if no sequence was
      // generated by comparing the current output start idx to the original
      // one (nGramSplitsdata). If no ngrams were generated, then they will
      // be equal (since we increment outputStartIdx by numNGrams every
      // time we create a set of ngrams.)
      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {
        const dataLength = splits[i + 1] - splits[i];
        // One legitimate reason to not have any ngrams when this.preserveShort
        // is true is if the sequence itself is empty. In that case, move on.
        if (dataLength === 0) {
          continue;
        }
        // We don't have to worry about dynamic padding sizes here: if padding
        // was dynamic, every sequence would have had sufficient padding to
        // generate at least one nGram.
        const nGramWidth = dataLength + 2 * this.padWidth;
        const numNGrams = 1;
        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);
      }
    }
    return [nGrams, nGramsSplits];
  }
}
function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {
  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);
}

/***/ }),

/***/ 88981:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringSplit": () => (/* binding */ stringSplit),
/* harmony export */   "stringSplitConfig": () => (/* binding */ stringSplitConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _StringSplit_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StringSplit_impl */ 78939);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function stringSplit(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    skipEmpty
  } = attrs;
  const {
    input,
    delimiter
  } = inputs;
  if (input.dtype !== 'string') {
    throw new Error('Input must be of datatype string');
  }
  if (input.shape.length !== 1) {
    throw new Error(`Input must be a vector, got shape: ${input.shape}`);
  }
  if (delimiter.shape.length !== 0) {
    throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);
  }
  const $input = backend.data.get(input.dataId).values;
  const $delimiter = backend.data.get(delimiter.dataId).values[0];
  const [indices, values, shape] = (0,_StringSplit_impl__WEBPACK_IMPORTED_MODULE_1__.stringSplitImpl)($input, $delimiter, skipEmpty);
  const outputSize = values.length;
  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];
}
const stringSplitConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringSplit,
  backendName: 'cpu',
  kernelFunc: stringSplit
};

/***/ }),

/***/ 78939:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringSplitImpl": () => (/* binding */ stringSplitImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function split(str, delimiters, skipEmpty, result) {
  if (!str.length) {
    return;
  }
  // When the delimiter is empty, the input is split into individual characters.
  if (delimiters.length === 0) {
    for (let i = 0; i < str.length; ++i) {
      result.push(str.subarray(i, i + 1));
    }
    return;
  }
  // When there is one delimiter, the input is split only at that delimiter.
  if (delimiters.length === 1) {
    const delimiter = delimiters[0];
    let f = str.indexOf(delimiter);
    while (f !== -1) {
      const token = str.subarray(0, f);
      if (!skipEmpty || token.length !== 0) {
        result.push(token);
      }
      str = str.subarray(f + 1);
      f = str.indexOf(delimiter);
    }
    if (!skipEmpty || str.length !== 0) {
      result.push(str);
    }
    return;
  }
  // When there are multiple delimiters, the input is split at every instance
  // one of the delimiters appears.
  let tokenStart = 0;
  for (let i = 0; i < str.length + 1; i++) {
    if (i === str.length || delimiters.indexOf(str[i]) !== -1) {
      const token = str.subarray(tokenStart, i);
      if (!skipEmpty || token.length !== 0) {
        result.push(token);
      }
      tokenStart = i + 1;
    }
  }
}
function stringSplitImpl(input, delimiter, skipEmpty) {
  const batchSize = input.length;
  // Empty delimiter means split the input character by character.
  const tokens = [];
  let outputSize = 0;
  let maxNumEntries = 0;
  const numIndices = new Array(batchSize);
  for (let i = 0; i < batchSize; ++i) {
    const prevTokensLength = tokens.length;
    split(input[i], delimiter, skipEmpty, tokens);
    const nEntries = tokens.length - prevTokensLength;
    numIndices[i] = nEntries;
    outputSize += nEntries;
    maxNumEntries = Math.max(maxNumEntries, nEntries);
  }
  const indices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType('int32', outputSize * 2);
  const values = new Array(outputSize);
  const shape = [batchSize, maxNumEntries];
  let c = 0;
  for (let i = 0; i < batchSize; ++i) {
    for (let j = 0; j < numIndices[i]; ++j) {
      // indices is a 2d tensor with shape of [outputSize, 2]
      indices[c * 2] = i;
      indices[c * 2 + 1] = j;
      values[c] = tokens[c];
      ++c;
    }
  }
  return [indices, values, shape];
}

/***/ }),

/***/ 71950:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringToHashBucketFast": () => (/* binding */ stringToHashBucketFast),
/* harmony export */   "stringToHashBucketFastConfig": () => (/* binding */ stringToHashBucketFastConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _StringToHashBucketFast_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StringToHashBucketFast_impl */ 70028);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function stringToHashBucketFast(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    numBuckets
  } = attrs;
  const {
    input
  } = inputs;
  if (input.dtype !== 'string') {
    throw new Error('Input must be of datatype string');
  }
  if (numBuckets <= 0) {
    throw new Error(`Number of buckets must be at least 1`);
  }
  const $input = backend.data.get(input.dataId).values;
  const output = (0,_StringToHashBucketFast_impl__WEBPACK_IMPORTED_MODULE_1__.stringToHashBucketFastImpl)($input, numBuckets);
  return backend.makeTensorInfo(input.shape, 'int32', output);
}
const stringToHashBucketFastConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringToHashBucketFast,
  backendName: 'cpu',
  kernelFunc: stringToHashBucketFast
};

/***/ }),

/***/ 70028:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringToHashBucketFastImpl": () => (/* binding */ stringToHashBucketFastImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function stringToHashBucketFastImpl(input, numBuckets) {
  const output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType('int32', input.length);
  for (let i = 0; i < input.length; ++i) {
    output[i] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();
  }
  return output;
}

/***/ }),

/***/ 41004:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sub": () => (/* binding */ sub),
/* harmony export */   "subComplexImpl": () => (/* binding */ subComplexImpl),
/* harmony export */   "subConfig": () => (/* binding */ subConfig),
/* harmony export */   "subImpl": () => (/* binding */ subImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/binary_impl */ 65914);
/* harmony import */ var _utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/binary_utils */ 12247);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const subImpl = (0,_utils_binary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleBinaryKernelImpl)((aValue, bValue) => aValue - bValue);
const subComplexImpl = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.createComplexBinaryKernelImpl)((aReal, aImag, bReal, bImag) => {
  return {
    real: aReal - bReal,
    imag: aImag - bImag
  };
});
const sub = (0,_utils_binary_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sub, subImpl, subComplexImpl);
const subConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sub,
  backendName: 'cpu',
  kernelFunc: sub
};

/***/ }),

/***/ 88698:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sum.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "sumConfig": () => (/* binding */ sumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _utils_zeros_impl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/zeros_impl */ 87771);
/* harmony import */ var _Cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Cast */ 44177);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Identity */ 98750);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Transpose */ 81899);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







function sum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'sum');
  let $x;
  if (x.dtype === 'bool') {
    $x = (0,_Cast__WEBPACK_IMPORTED_MODULE_2__.cast)({
      inputs: {
        x
      },
      backend,
      attrs: {
        dtype: 'int32'
      }
    });
  } else {
    $x = (0,_Identity__WEBPACK_IMPORTED_MODULE_3__.identity)({
      inputs: {
        x
      },
      backend
    });
  }
  const xRank = $x.shape.length;
  const axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, $x.shape);
  const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  let reductionAxes = axes;
  let permutedX = $x;
  if (permutation != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_4__.transpose)({
      inputs: {
        x: $x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
    reductionAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(reductionAxes.length, xRank);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);
  const resultDtype = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.upcastType(permutedX.dtype, 'int32');
  let result = (0,_utils_zeros_impl__WEBPACK_IMPORTED_MODULE_5__.zeros)(backend, outShape, resultDtype);
  const reduceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const vals = backend.data.get(result.dataId).values;
  const aVals = backend.data.get(permutedX.dataId).values;
  for (let i = 0; i < vals.length; ++i) {
    const offset = i * reduceSize;
    let sum = 0;
    for (let j = 0; j < reduceSize; ++j) {
      sum += aVals[offset + j];
    }
    vals[i] = sum;
  }
  if (keepDims) {
    const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(result.shape, axes);
    const oldResult = result;
    result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_6__.reshape)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
    backend.disposeIntermediateTensorInfo(oldResult);
  }
  backend.disposeIntermediateTensorInfo($x);
  if (permutation != null) {
    backend.disposeIntermediateTensorInfo(permutedX);
  }
  return result;
}
const sumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sum,
  backendName: 'cpu',
  kernelFunc: sum
};

/***/ }),

/***/ 71222:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tan.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tan": () => (/* binding */ tan),
/* harmony export */   "tanConfig": () => (/* binding */ tanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const tan = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tan, xi => Math.tan(xi));
const tanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tan,
  backendName: 'cpu',
  kernelFunc: tan
};

/***/ }),

/***/ 27909:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tanh.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanh": () => (/* binding */ tanh),
/* harmony export */   "tanhConfig": () => (/* binding */ tanhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/unary_utils */ 93138);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const tanh = (0,_utils_unary_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tanh, xi => Math.tanh(xi));
const tanhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tanh,
  backendName: 'cpu',
  kernelFunc: tanh
};

/***/ }),

/***/ 79423:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TensorScatterUpdate.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensorScatterUpdate": () => (/* binding */ tensorScatterUpdate),
/* harmony export */   "tensorScatterUpdateConfig": () => (/* binding */ tensorScatterUpdateConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Scatter_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Scatter_impl */ 78633);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function tensorScatterUpdate(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    tensor,
    indices,
    updates
  } = inputs;
  const {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(updates, indices, tensor.shape);
  const sumDupeIndices = false;
  const indicesBuf = backend.bufferSync(indices);
  const updatesBuf = backend.bufferSync(updates);
  const tensorBuf = backend.bufferSync(tensor);
  const outBuf = (0,_Scatter_impl__WEBPACK_IMPORTED_MODULE_1__.scatterImpl)(indicesBuf, updatesBuf, tensor.shape, outputSize, sliceSize, numUpdates, sliceRank, strides, tensorBuf, sumDupeIndices);
  return backend.makeTensorInfo(tensor.shape, outBuf.dtype, outBuf.values);
}
const tensorScatterUpdateConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorScatterUpdate,
  backendName: 'cpu',
  kernelFunc: tensorScatterUpdate
};

/***/ }),

/***/ 41719:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tile": () => (/* binding */ tile),
/* harmony export */   "tileConfig": () => (/* binding */ tileConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Tile_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Tile_impl */ 9432);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function tile(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    reps
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'tile');
  const outBuf = (0,_Tile_impl__WEBPACK_IMPORTED_MODULE_2__.tileImpl)(backend.bufferSync(x), reps);
  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
}
const tileConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tile,
  backendName: 'cpu',
  kernelFunc: tile
};

/***/ }),

/***/ 9432:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tileImpl": () => (/* binding */ tileImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * An implementation of the tile kernel shared between webgl and cpu for string
 * tensors only.
 */
function tileImpl(xBuf, reps) {
  const newShape = new Array(xBuf.rank);
  for (let i = 0; i < newShape.length; i++) {
    newShape[i] = xBuf.shape[i] * reps[i];
  }
  const result = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(newShape, xBuf.dtype);
  for (let i = 0; i < result.values.length; ++i) {
    const newLoc = result.indexToLoc(i);
    const originalLoc = new Array(xBuf.rank);
    for (let j = 0; j < originalLoc.length; j++) {
      originalLoc[j] = newLoc[j] % xBuf.shape[j];
    }
    const originalIndex = xBuf.locToIndex(originalLoc);
    result.values[i] = xBuf.values[originalIndex];
  }
  return result;
}

/***/ }),

/***/ 1255:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "topK": () => (/* binding */ topK),
/* harmony export */   "topKConfig": () => (/* binding */ topKConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _TopK_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TopK_impl */ 97130);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function topK(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    k,
    sorted
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'topk');
  const xVals = backend.data.get(x.dataId).values;
  const [allTopKVals, allTopKIndices] = (0,_TopK_impl__WEBPACK_IMPORTED_MODULE_2__.topKImpl)(xVals, x.shape, x.dtype, k, sorted);
  return [backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values), backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)];
}
const topKConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TopK,
  backendName: 'cpu',
  kernelFunc: topK
};

/***/ }),

/***/ 97130:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "topKImpl": () => (/* binding */ topKImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/** An implementation of the TopK kernel shared between webgl and cpu. */

const comparePair = (a, b) => {
  const valueDiff = b.value - a.value;
  return valueDiff === 0 ? a.index - b.index : valueDiff;
};
/**
 * Partitions array where all elements smaller than the (k+1) smallest element
 * are found to the left of it, and all larger to the right of it.
 * Based on the Floyd-Rivest Algorithm, ref:
 * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm
 * @param array: Array to partition
 * @param left: Left index for the interval
 * @param right: Right index for the interval
 * @param k: Desired index value, where array[k] is the (k+1)th smallest element
 *           when left = 0
 */
function select(array, k, left = 0, right = array.length - 1) {
  while (right > left) {
    // Use select recursively to sample a smaller set of size s
    // the arbitrary constants 600 and 0.5 are used in the original
    // version to minimize execution time.
    if (right - left > 600) {
      const n = right - left + 1;
      const i = k - left + 1;
      const z = Math.log(n);
      const s = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);
      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));
      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));
      select(array, k, newLeft, newRight);
    }
    // partition the elements between left and right around t
    const t = array[k];
    let i = left;
    let j = right;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.swap(array, left, k);
    if (comparePair(array[right], t) > 0) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.swap(array, left, right);
    }
    while (i < j) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.swap(array, i, j);
      i++;
      j--;
      while (comparePair(array[i], t) < 0) {
        i = i + 1;
      }
      while (comparePair(array[j], t) > 0) {
        j = j - 1;
      }
    }
    if (comparePair(array[left], t) === 0) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.swap(array, left, j);
    } else {
      j = j + 1;
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.swap(array, j, right);
    }
    // Adjust left and right towards the boundaries of the subset
    // containing the (k - left + 1)th smallest element.
    if (j <= k) {
      left = j + 1;
    }
    if (k <= j) {
      right = j - 1;
    }
  }
}
function topKImpl(x, xShape, xDtype, k, sorted) {
  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
  const lastDim = xShape[xShape.length - 1];
  const [batch, size] = [x.length / lastDim, lastDim];
  const allTopKVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(xDtype, batch * k);
  const allTopKIndices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('int32', batch * k);
  for (let b = 0; b < batch; b++) {
    const offset = b * size;
    const vals = x.subarray(offset, offset + size);
    let valAndInd = new Array(vals.length);
    vals.forEach((value, index) => valAndInd[index] = {
      value,
      index
    });
    if (k < valAndInd.length) {
      select(valAndInd, k);
      valAndInd = valAndInd.slice(0, k);
    }
    if (sorted) {
      valAndInd.sort(comparePair);
    }
    const outOffset = b * k;
    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);
    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);
    for (let i = 0; i < k; i++) {
      topKVals[i] = valAndInd[i].value;
      topKIndices[i] = valAndInd[i].index;
    }
  }
  // Reshape back to the original input shape, except that the last
  // dimension is k.
  const outputShape = xShape.slice();
  outputShape[outputShape.length - 1] = k;
  return [(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(outputShape, xDtype, allTopKVals), (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(outputShape, 'int32', allTopKIndices)];
}

/***/ }),

/***/ 26261:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transform.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transform": () => (/* binding */ transform),
/* harmony export */   "transformConfig": () => (/* binding */ transformConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function transform(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    image,
    transforms
  } = inputs;
  const {
    interpolation,
    fillMode,
    fillValue,
    outputShape
  } = attrs;
  const [batch, imageHeight, imageWidth, numChannels] = image.shape;
  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];
  const outShape = [batch, outHeight, outWidth, numChannels];
  const inStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(image.shape);
  const batchInStride = inStrides[0];
  const rowInStride = inStrides[1];
  const colInStride = inStrides[2];
  const outStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(outShape);
  const batchOutStride = outStrides[0];
  const rowOutStride = outStrides[1];
  const colOutStride = outStrides[2];
  const outVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(image.dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape));
  outVals.fill(fillValue);
  const imageVals = backend.data.get(image.dataId).values;
  const transformVals = backend.data.get(transforms.dataId).values;
  // Ref TF implementation:
  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h
  for (let b = 0; b < batch; ++b) {
    const transform = transforms.shape[0] === 1 ? transformVals : transformVals.subarray(b * 8, b * 8 + 8);
    for (let outY = 0; outY < outHeight; ++outY) {
      for (let outX = 0; outX < outWidth; ++outX) {
        for (let channel = 0; channel < numChannels; ++channel) {
          let val;
          const projection = transform[6] * outX + transform[7] * outY + 1;
          if (projection === 0) {
            // Return the fill value for infinite coordinates,
            // which are outside the input image
            continue;
          }
          const inX = (transform[0] * outX + transform[1] * outY + transform[2]) / projection;
          const inY = (transform[3] * outX + transform[4] * outY + transform[5]) / projection;
          const x = mapCoord(inX, imageWidth, fillMode);
          const y = mapCoord(inY, imageHeight, fillMode);
          switch (interpolation) {
            case 'nearest':
              val = nearestInterpolation(imageVals, imageHeight, imageWidth, batchInStride, rowInStride, colInStride, b, y, x, channel, fillValue);
              break;
            case 'bilinear':
              val = bilinearInterpolation(imageVals, imageHeight, imageWidth, batchInStride, rowInStride, colInStride, b, y, x, channel, fillValue);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or ` + `'bilinear', but got ${interpolation}`);
          }
          const ind = b * batchOutStride + outY * rowOutStride + outX * colOutStride + channel;
          outVals[ind] = val;
        }
      }
    }
    return backend.makeTensorInfo(outShape, image.dtype, outVals);
  }
  const dataId = backend.write(outVals, outShape, image.dtype);
  return {
    dataId,
    shape: image.shape,
    dtype: image.dtype
  };
}
const transformConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transform,
  backendName: 'cpu',
  kernelFunc: transform
};
function mapCoord(outCoord, len, mode) {
  switch (mode) {
    case 'reflect':
      return mapCoordReflect(outCoord, len);
    case 'wrap':
      return mapCoordWrap(outCoord, len);
    case 'nearest':
      return mapCoordNearest(outCoord, len);
    case 'constant':
    default:
      return mapCoordConstant(outCoord, len);
  }
}
function mapCoordReflect(outCoord, len) {
  // Reflect [abcd] to [dcba|abcd|dcba].
  let inCoord = outCoord;
  if (inCoord < 0) {
    if (len <= 1) {
      inCoord = 0;
    } else {
      const sz2 = 2 * len;
      if (inCoord < sz2) {
        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;
      }
      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;
    }
  } else if (inCoord > len - 1) {
    if (len <= 1) {
      inCoord = 0;
    } else {
      const sz2 = 2 * len;
      inCoord -= sz2 * Math.trunc(inCoord / sz2);
      if (inCoord >= len) {
        inCoord = sz2 - inCoord - 1;
      }
    }
  }
  // clamp is necessary because when outCoord = 3.5 and len = 4,
  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.clamp(0, inCoord, len - 1);
}
function mapCoordWrap(outCoord, len) {
  // Wrap [abcd] to [abcd|abcd|abcd].
  let inCoord = outCoord;
  if (inCoord < 0) {
    if (len <= 1) {
      inCoord = 0;
    } else {
      const sz = len - 1;
      inCoord += len * (Math.trunc(-inCoord / sz) + 1);
    }
  } else if (inCoord > len - 1) {
    if (len <= 1) {
      inCoord = 0;
    } else {
      const sz = len - 1;
      inCoord -= len * Math.trunc(inCoord / sz);
    }
  }
  // clamp is necessary because when outCoord = -0.5 and len = 4,
  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.clamp(0, inCoord, len - 1);
}
function mapCoordConstant(outCoord, len) {
  return outCoord;
}
function mapCoordNearest(outCoord, len) {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.clamp(0, outCoord, len - 1);
}
function readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
  const ind = batch * batchStride + y * rowStride + x * colStride + channel;
  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {
    return imageVals[ind];
  } else {
    return fillValue;
  }
}
function nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
  const $y = Math.round(y);
  const $x = Math.round(x);
  return readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, $y, $x, channel, fillValue);
}
function bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {
  const yFloor = Math.floor(y);
  const xFloor = Math.floor(x);
  const yCeil = yFloor + 1;
  const xCeil = xFloor + 1;
  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)
  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)
  const valueYFloor = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xCeil, channel, fillValue);
  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)
  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)
  const valueYCeil = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xCeil, channel, fillValue);
  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)
  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)
  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;
}

/***/ }),

/***/ 81899:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transpose": () => (/* binding */ transpose),
/* harmony export */   "transposeConfig": () => (/* binding */ transposeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ 30905);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function transpose(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    x
  } = inputs;
  const {
    perm
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'transpose');
  const xRank = x.shape.length;
  const newShape = new Array(xRank);
  for (let i = 0; i < newShape.length; i++) {
    newShape[i] = x.shape[perm[i]];
  }
  const values = backend.data.get(x.dataId).values;
  const result = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(values, x.shape, x.dtype, perm, newShape);
  const dataId = backend.write(result, newShape, x.dtype);
  return {
    dataId,
    shape: newShape,
    dtype: x.dtype
  };
}
const transposeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transpose,
  backendName: 'cpu',
  kernelFunc: transpose
};

/***/ }),

/***/ 30905:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transposeImpl": () => (/* binding */ transposeImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function transposeImpl(xVals, xShape, dtype, perm, newShape) {
  const xRank = xShape.length;
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(xShape);
  const xStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(xShape);
  const newStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(newShape);
  const result = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(newShape));
  for (let i = 0; i < xSize; ++i) {
    const loc = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, xRank, xStrides);
    // Permute location.
    const newLoc = new Array(loc.length);
    for (let i = 0; i < newLoc.length; i++) {
      newLoc[i] = loc[perm[i]];
    }
    const newIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(newLoc, xRank, newStrides);
    result[newIndex] = xVals[i];
  }
  return result;
}

/***/ }),

/***/ 80893:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unique": () => (/* binding */ unique),
/* harmony export */   "uniqueConfig": () => (/* binding */ uniqueConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Unique_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Unique_impl */ 30262);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function unique(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    axis
  } = attrs;
  const {
    x
  } = inputs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'unique');
  const values = backend.data.get(x.dataId).values;
  const {
    outputValues,
    outputShape,
    indices
  } = (0,_Unique_impl__WEBPACK_IMPORTED_MODULE_2__.uniqueImpl)(values, axis, x.shape, x.dtype);
  return [backend.makeTensorInfo(outputShape, x.dtype, outputValues), backend.makeTensorInfo([indices.length], 'int32', indices)];
}
const uniqueConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unique,
  backendName: 'cpu',
  kernelFunc: unique
};

/***/ }),

/***/ 30262:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uniqueImpl": () => (/* binding */ uniqueImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function uniqueImpl(values, axis, shape, dtype) {
  // Normalize and validate axis.
  const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, shape)[0];
  // Calculate the new shape that is suitable for extracting data along the
  // given axis.
  //
  // The rank is 3.
  // The size of the 1st dimension is the size of all the axes < the given axis.
  // The size of the 2nd dimension is the same as the size of the given axis.
  // The size of the 3rd dimension is the size of all the axes > the given axis.
  //
  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the
  // newShape would be: [2*3, 5, 4].
  //
  // Note that this is not the final output shape. This will be the shape for an
  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract
  // values along the given axis. To demonstrate how it works, consider the
  // following example:
  //
  // Input: a 3D tensor, with shape [1, 2, 3]
  // [
  //   [
  //      [1,2,3],
  //      [4,5,6]
  //   ]
  // ]
  // Axis: 2 (the last axis).
  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].
  //
  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from
  // 1*2. The re-shaped data would look like:
  //
  // [
  //   [
  //     [1], [2], [3]
  //   ],
  //   [
  //     [4], [5], [6]
  //   ]
  // ]
  //
  // Then, we can construct a 3-level nested loop by the following dimension
  // order to extract the values along the axis (dimension1):
  // i: dimension1       // 0,1,2 (newShape[1])
  //   m: dimension0     // 0,1   (newShape[0])
  //     n: dimension2   // 0     (newShape[2])
  //
  //                       m, i, n
  //                      ---------
  // Iteration 0: data at [0, 0, 0] => "1"
  // Iteration 1: data at [1, 0, 0] => "4"
  // We got [1,4].
  // Iteration 2: data at [0, 1, 0] => "2"
  // Iteration 3: data at [1, 1, 0] => "5"
  // We got [2,5].
  // Iteration 4: data at [0, 2, 0] => "3"
  // Iteration 5: data at [1, 2, 0] => "6"
  // We got [3,6].
  const newShape = [1, shape[0], 1];
  for (let i = 0; i < $axis; i++) {
    newShape[0] *= shape[i];
  }
  newShape[1] = shape[$axis];
  for (let i = $axis + 1; i < shape.length; i++) {
    newShape[2] *= shape[i];
  }
  // A map from unique elements (their string representations) to their values
  // in "indices" (below).
  const uniqueElements = new Map();
  // The indices of each unique element in the original tensor along the given
  // axis. It is 1D and has the same size as the given axis.
  const indices = new Int32Array(shape[$axis]);
  // Create a buffer so we can easily extract value at a given location.
  const inputBuffer = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(newShape, dtype, values);
  // The indices along the given axis that have unique elements. This is a
  // de-duped version of "indices" above.
  const uniqueIndices = [];
  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;
  for (let i = 0; i < shape[$axis]; i++) {
    // Extract values along the axis.
    let element;
    if (is1DTensor) {
      // Fast path for 1D tensor input.
      element = values[i].toString();
    } else {
      const axisValues = [];
      for (let m = 0; m < newShape[0]; m++) {
        for (let n = 0; n < newShape[2]; n++) {
          axisValues.push(inputBuffer.get(m, i, n));
        }
      }
      element = axisValues.join(',');
    }
    // Dedup and update various indices.
    const existingIndex = uniqueElements.get(element);
    if (existingIndex != null) {
      indices[i] = existingIndex;
    } else {
      const uniqueIndex = uniqueElements.size;
      uniqueElements.set(element, uniqueIndex);
      indices[i] = uniqueIndex;
      uniqueIndices.push(i);
    }
  }
  // Now we know where each of the unique elements are located along the axis
  // (uniqueIndices). Extract them from input buffer and store them in the
  // output buffer.
  const outputTmpShape = newShape.slice();
  outputTmpShape[1] = uniqueElements.size;
  const outputBuffer = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer(outputTmpShape, dtype);
  uniqueIndices.forEach((uniqueElementIndex, i) => {
    for (let m = 0; m < newShape[0]; m++) {
      for (let n = 0; n < newShape[2]; n++) {
        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);
      }
    }
  });
  // The output shape can be calculated from the input shape with the size of
  // the given axis replaced by the number of unique elements along that axis.
  const outputShape = shape.slice();
  outputShape[$axis] = outputTmpShape[1];
  return {
    outputValues: outputBuffer.values,
    outputShape,
    indices
  };
}

/***/ }),

/***/ 28236:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unpack.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unpack": () => (/* binding */ unpack),
/* harmony export */   "unpackConfig": () => (/* binding */ unpackConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 19422);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Slice */ 73343);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function unpack(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    value
  } = inputs;
  let {
    axis
  } = attrs;
  if (axis < 0) {
    axis += value.shape.length;
  }
  const valueRank = value.shape.length;
  const num = value.shape[axis];
  const outShape = new Array(valueRank - 1);
  let outIndex = 0;
  for (let i = 0; i < valueRank; i++) {
    if (i !== axis) {
      outShape[outIndex++] = value.shape[i];
    }
  }
  const begin = new Array(valueRank).fill(0);
  const size = value.shape.slice();
  size[axis] = 1;
  const res = new Array(num);
  for (let i = 0; i < res.length; i++) {
    begin[axis] = i;
    const tempRes = (0,_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({
      inputs: {
        x: value
      },
      backend,
      attrs: {
        begin,
        size
      }
    });
    res[i] = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: tempRes
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    backend.disposeIntermediateTensorInfo(tempRes);
  }
  return res;
}
const unpackConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unpack,
  backendName: 'cpu',
  kernelFunc: unpack
};

/***/ }),

/***/ 32588:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/UnsortedSegmentSum.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsortedSegmentSum": () => (/* binding */ unsortedSegmentSum),
/* harmony export */   "unsortedSegmentSumConfig": () => (/* binding */ unsortedSegmentSumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _Cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Cast */ 44177);
/* harmony import */ var _Equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equal */ 51085);
/* harmony import */ var _ExpandDims__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ExpandDims */ 50624);
/* harmony import */ var _Multiply__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Multiply */ 20306);
/* harmony import */ var _Pack__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Pack */ 2671);
/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Sum */ 88698);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








function unsortedSegmentSum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    segmentIds
  } = inputs;
  const {
    numSegments
  } = attrs;
  (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'unsortedSegmentSum');
  const xRank = x.shape.length;
  const segmentIdsRank = segmentIds.shape.length;
  const res = [];
  const intermediates = [];
  // Reshape the segment id's so that they can be broadcast with
  // x. The new shape should be [segmentIds.shape, 1, ..., 1]
  const numIters = xRank - segmentIdsRank;
  let $segmentIds = segmentIds;
  for (let i = 0; i < numIters; ++i) {
    const expanded = (0,_ExpandDims__WEBPACK_IMPORTED_MODULE_2__.expandDims)({
      inputs: {
        input: $segmentIds
      },
      backend,
      attrs: {
        dim: i + 1
      }
    });
    $segmentIds = expanded;
    intermediates.push(expanded);
  }
  for (let i = 0; i < numSegments; ++i) {
    const scalarValue = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(i, 'int32');
    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);
    const mask = (0,_Equal__WEBPACK_IMPORTED_MODULE_3__.equal)({
      inputs: {
        a: segmentId,
        b: $segmentIds
      },
      backend
    });
    const maskCasted = (0,_Cast__WEBPACK_IMPORTED_MODULE_4__.cast)({
      inputs: {
        x: mask
      },
      backend,
      attrs: {
        dtype: 'float32'
      }
    });
    const mul = (0,_Multiply__WEBPACK_IMPORTED_MODULE_5__.multiply)({
      inputs: {
        a: maskCasted,
        b: x
      },
      backend
    });
    const sumTensorInfo = (0,_Sum__WEBPACK_IMPORTED_MODULE_6__.sum)({
      inputs: {
        x: mul
      },
      backend,
      attrs: {
        axis: 0,
        keepDims: false
      }
    });
    res.push(sumTensorInfo);
    intermediates.push(segmentId);
    intermediates.push(mask);
    intermediates.push(maskCasted);
    intermediates.push(mul);
    intermediates.push(sumTensorInfo);
  }
  const result = (0,_Pack__WEBPACK_IMPORTED_MODULE_7__.pack)({
    inputs: res,
    backend,
    attrs: {
      axis: 0
    }
  });
  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}
const unsortedSegmentSumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.UnsortedSegmentSum,
  backendName: 'cpu',
  kernelFunc: unsortedSegmentSum
};

/***/ }),

/***/ 60839:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ZerosLike.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zerosLike": () => (/* binding */ zerosLike),
/* harmony export */   "zerosLikeConfig": () => (/* binding */ zerosLikeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ 50311);
/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Fill */ 37448);
/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ 469);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ 22749);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function zerosLike(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  if (x.dtype === 'string') {
    throw new Error('zerosLike is not supported for string tensors');
  } else if (x.dtype === 'complex64') {
    const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({
      inputs: {
        input: x
      },
      backend
    });
    const r = zerosLike({
      inputs: {
        x: realPart
      },
      backend
    });
    const imagPart = (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({
      inputs: {
        input: x
      },
      backend
    });
    const i = zerosLike({
      inputs: {
        x: imagPart
      },
      backend
    });
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({
      inputs: {
        real: r,
        imag: i
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(r);
    backend.disposeIntermediateTensorInfo(imagPart);
    backend.disposeIntermediateTensorInfo(i);
    return result;
  } else {
    return (0,_Fill__WEBPACK_IMPORTED_MODULE_4__.fill)({
      backend,
      attrs: {
        shape: x.shape,
        value: 0,
        dtype: x.dtype
      }
    });
  }
}
const zerosLikeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ZerosLike,
  backendName: 'cpu',
  kernelFunc: zerosLike
};

/***/ }),

/***/ 37133:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/_FusedMatMul.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_fusedMatMul": () => (/* binding */ _fusedMatMul),
/* harmony export */   "_fusedMatMulConfig": () => (/* binding */ _fusedMatMulConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_fused_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/fused_utils */ 5274);
/* harmony import */ var _Add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Add */ 5939);
/* harmony import */ var _BatchMatMul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BatchMatMul */ 1841);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function _fusedMatMul(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    a,
    b,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    transposeA,
    transposeB,
    activation,
    leakyreluAlpha
  } = attrs;
  let current;
  let addRes;
  let activationRes;
  const intermediates = [];
  const matMulRes = (0,_BatchMatMul__WEBPACK_IMPORTED_MODULE_1__.batchMatMul)({
    inputs: {
      a,
      b
    },
    attrs: {
      transposeA,
      transposeB
    },
    backend
  });
  current = matMulRes;
  if (bias) {
    addRes = (0,_Add__WEBPACK_IMPORTED_MODULE_2__.add)({
      inputs: {
        a: current,
        b: bias
      },
      backend
    });
    intermediates.push(current);
    current = addRes;
  }
  if (activation) {
    activationRes = (0,_utils_fused_utils__WEBPACK_IMPORTED_MODULE_3__.applyActivation)(backend, current, activation, preluActivationWeights, leakyreluAlpha);
    intermediates.push(current);
    current = activationRes;
  }
  for (const i of intermediates) {
    backend.disposeIntermediateTensorInfo(i);
  }
  return current;
}
const _fusedMatMulConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__._FusedMatMul,
  backendName: 'cpu',
  kernelFunc: _fusedMatMul
};

/***/ }),

/***/ 69930:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/register_all_kernels.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernels_FusedMatMul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernels/_FusedMatMul */ 37133);
/* harmony import */ var _kernels_Abs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kernels/Abs */ 5537);
/* harmony import */ var _kernels_Acos__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernels/Acos */ 60397);
/* harmony import */ var _kernels_Acosh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./kernels/Acosh */ 26037);
/* harmony import */ var _kernels_Add__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./kernels/Add */ 5939);
/* harmony import */ var _kernels_AddN__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./kernels/AddN */ 64383);
/* harmony import */ var _kernels_All__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./kernels/All */ 83647);
/* harmony import */ var _kernels_Any__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./kernels/Any */ 73814);
/* harmony import */ var _kernels_ArgMax__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./kernels/ArgMax */ 3532);
/* harmony import */ var _kernels_ArgMin__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./kernels/ArgMin */ 90246);
/* harmony import */ var _kernels_Asin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./kernels/Asin */ 27101);
/* harmony import */ var _kernels_Asinh__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./kernels/Asinh */ 1517);
/* harmony import */ var _kernels_Atan__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kernels/Atan */ 51685);
/* harmony import */ var _kernels_Atan2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./kernels/Atan2 */ 7825);
/* harmony import */ var _kernels_Atanh__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./kernels/Atanh */ 45035);
/* harmony import */ var _kernels_AvgPool__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./kernels/AvgPool */ 25068);
/* harmony import */ var _kernels_AvgPool3D__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./kernels/AvgPool3D */ 18849);
/* harmony import */ var _kernels_AvgPool3DGrad__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./kernels/AvgPool3DGrad */ 35456);
/* harmony import */ var _kernels_AvgPoolGrad__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./kernels/AvgPoolGrad */ 68241);
/* harmony import */ var _kernels_BatchMatMul__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./kernels/BatchMatMul */ 1841);
/* harmony import */ var _kernels_BatchNorm__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./kernels/BatchNorm */ 36837);
/* harmony import */ var _kernels_BatchToSpaceND__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./kernels/BatchToSpaceND */ 29071);
/* harmony import */ var _kernels_Bincount__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./kernels/Bincount */ 15199);
/* harmony import */ var _kernels_BitwiseAnd__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./kernels/BitwiseAnd */ 99797);
/* harmony import */ var _kernels_BroadcastArgs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./kernels/BroadcastArgs */ 39344);
/* harmony import */ var _kernels_Cast__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./kernels/Cast */ 44177);
/* harmony import */ var _kernels_Ceil__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./kernels/Ceil */ 13085);
/* harmony import */ var _kernels_ClipByValue__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./kernels/ClipByValue */ 1028);
/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./kernels/Complex */ 50311);
/* harmony import */ var _kernels_ComplexAbs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./kernels/ComplexAbs */ 30960);
/* harmony import */ var _kernels_Concat__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./kernels/Concat */ 41621);
/* harmony import */ var _kernels_Conv2D__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./kernels/Conv2D */ 65732);
/* harmony import */ var _kernels_Conv2DBackpropFilter__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./kernels/Conv2DBackpropFilter */ 33603);
/* harmony import */ var _kernels_Conv2DBackpropInput__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./kernels/Conv2DBackpropInput */ 56718);
/* harmony import */ var _kernels_Conv3D__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./kernels/Conv3D */ 99705);
/* harmony import */ var _kernels_Conv3DBackpropFilterV2__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./kernels/Conv3DBackpropFilterV2 */ 28160);
/* harmony import */ var _kernels_Conv3DBackpropInputV2__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./kernels/Conv3DBackpropInputV2 */ 55727);
/* harmony import */ var _kernels_Cos__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./kernels/Cos */ 90295);
/* harmony import */ var _kernels_Cosh__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./kernels/Cosh */ 1313);
/* harmony import */ var _kernels_CropAndResize__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./kernels/CropAndResize */ 10450);
/* harmony import */ var _kernels_Cumprod__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./kernels/Cumprod */ 30914);
/* harmony import */ var _kernels_Cumsum__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./kernels/Cumsum */ 12488);
/* harmony import */ var _kernels_DenseBincount__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./kernels/DenseBincount */ 62972);
/* harmony import */ var _kernels_DepthToSpace__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./kernels/DepthToSpace */ 19733);
/* harmony import */ var _kernels_DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNative */ 45382);
/* harmony import */ var _kernels_DepthwiseConv2dNativeBackpropFilter__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNativeBackpropFilter */ 80257);
/* harmony import */ var _kernels_DepthwiseConv2dNativeBackpropInput__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNativeBackpropInput */ 82071);
/* harmony import */ var _kernels_Diag__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./kernels/Diag */ 85344);
/* harmony import */ var _kernels_Dilation2D__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./kernels/Dilation2D */ 60084);
/* harmony import */ var _kernels_Dilation2DBackpropFilter__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./kernels/Dilation2DBackpropFilter */ 71158);
/* harmony import */ var _kernels_Dilation2DBackpropInput__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./kernels/Dilation2DBackpropInput */ 24771);
/* harmony import */ var _kernels_Einsum__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./kernels/Einsum */ 50835);
/* harmony import */ var _kernels_Elu__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./kernels/Elu */ 28787);
/* harmony import */ var _kernels_EluGrad__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./kernels/EluGrad */ 43936);
/* harmony import */ var _kernels_Equal__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./kernels/Equal */ 51085);
/* harmony import */ var _kernels_Erf__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./kernels/Erf */ 45562);
/* harmony import */ var _kernels_Exp__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./kernels/Exp */ 48392);
/* harmony import */ var _kernels_ExpandDims__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./kernels/ExpandDims */ 50624);
/* harmony import */ var _kernels_Expm1__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./kernels/Expm1 */ 52599);
/* harmony import */ var _kernels_FFT__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./kernels/FFT */ 29228);
/* harmony import */ var _kernels_Fill__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./kernels/Fill */ 37448);
/* harmony import */ var _kernels_FlipLeftRight__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./kernels/FlipLeftRight */ 25350);
/* harmony import */ var _kernels_Floor__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./kernels/Floor */ 12325);
/* harmony import */ var _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./kernels/FloorDiv */ 80586);
/* harmony import */ var _kernels_FusedConv2D__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./kernels/FusedConv2D */ 38103);
/* harmony import */ var _kernels_FusedDepthwiseConv2D__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./kernels/FusedDepthwiseConv2D */ 37941);
/* harmony import */ var _kernels_GatherNd__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./kernels/GatherNd */ 4127);
/* harmony import */ var _kernels_GatherV2__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./kernels/GatherV2 */ 7039);
/* harmony import */ var _kernels_Greater__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./kernels/Greater */ 68465);
/* harmony import */ var _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./kernels/GreaterEqual */ 3020);
/* harmony import */ var _kernels_Identity__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./kernels/Identity */ 98750);
/* harmony import */ var _kernels_IFFT__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./kernels/IFFT */ 15645);
/* harmony import */ var _kernels_Imag__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./kernels/Imag */ 469);
/* harmony import */ var _kernels_IsFinite__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./kernels/IsFinite */ 77453);
/* harmony import */ var _kernels_IsInf__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./kernels/IsInf */ 78573);
/* harmony import */ var _kernels_IsNaN__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./kernels/IsNaN */ 94512);
/* harmony import */ var _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./kernels/LeakyRelu */ 53173);
/* harmony import */ var _kernels_Less__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./kernels/Less */ 45540);
/* harmony import */ var _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./kernels/LessEqual */ 2085);
/* harmony import */ var _kernels_LinSpace__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./kernels/LinSpace */ 13004);
/* harmony import */ var _kernels_Log__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./kernels/Log */ 1950);
/* harmony import */ var _kernels_Log1p__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./kernels/Log1p */ 85889);
/* harmony import */ var _kernels_LogicalAnd__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./kernels/LogicalAnd */ 17001);
/* harmony import */ var _kernels_LogicalNot__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./kernels/LogicalNot */ 98426);
/* harmony import */ var _kernels_LogicalOr__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./kernels/LogicalOr */ 62157);
/* harmony import */ var _kernels_LRN__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./kernels/LRN */ 76281);
/* harmony import */ var _kernels_LRNGrad__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./kernels/LRNGrad */ 83106);
/* harmony import */ var _kernels_Max__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./kernels/Max */ 8839);
/* harmony import */ var _kernels_Maximum__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./kernels/Maximum */ 77717);
/* harmony import */ var _kernels_MaxPool__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./kernels/MaxPool */ 92499);
/* harmony import */ var _kernels_MaxPool3D__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./kernels/MaxPool3D */ 43431);
/* harmony import */ var _kernels_MaxPool3DGrad__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./kernels/MaxPool3DGrad */ 33153);
/* harmony import */ var _kernels_MaxPoolGrad__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./kernels/MaxPoolGrad */ 50084);
/* harmony import */ var _kernels_MaxPoolWithArgmax__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./kernels/MaxPoolWithArgmax */ 33513);
/* harmony import */ var _kernels_Mean__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./kernels/Mean */ 94982);
/* harmony import */ var _kernels_Min__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./kernels/Min */ 54564);
/* harmony import */ var _kernels_Minimum__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./kernels/Minimum */ 43094);
/* harmony import */ var _kernels_MirrorPad__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./kernels/MirrorPad */ 76134);
/* harmony import */ var _kernels_Mod__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./kernels/Mod */ 18787);
/* harmony import */ var _kernels_Multinomial__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./kernels/Multinomial */ 29850);
/* harmony import */ var _kernels_Multiply__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./kernels/Multiply */ 20306);
/* harmony import */ var _kernels_Neg__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./kernels/Neg */ 58668);
/* harmony import */ var _kernels_NonMaxSuppressionV3__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV3 */ 90978);
/* harmony import */ var _kernels_NonMaxSuppressionV4__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV4 */ 49552);
/* harmony import */ var _kernels_NonMaxSuppressionV5__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV5 */ 48457);
/* harmony import */ var _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./kernels/NotEqual */ 76325);
/* harmony import */ var _kernels_OneHot__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./kernels/OneHot */ 57047);
/* harmony import */ var _kernels_OnesLike__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./kernels/OnesLike */ 60600);
/* harmony import */ var _kernels_Pack__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./kernels/Pack */ 2671);
/* harmony import */ var _kernels_PadV2__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./kernels/PadV2 */ 37122);
/* harmony import */ var _kernels_Pow__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./kernels/Pow */ 38422);
/* harmony import */ var _kernels_Prelu__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./kernels/Prelu */ 22042);
/* harmony import */ var _kernels_Prod__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./kernels/Prod */ 82848);
/* harmony import */ var _kernels_RaggedGather__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./kernels/RaggedGather */ 62332);
/* harmony import */ var _kernels_RaggedRange__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./kernels/RaggedRange */ 3349);
/* harmony import */ var _kernels_RaggedTensorToTensor__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./kernels/RaggedTensorToTensor */ 54181);
/* harmony import */ var _kernels_Range__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./kernels/Range */ 79383);
/* harmony import */ var _kernels_Real__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./kernels/Real */ 22749);
/* harmony import */ var _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./kernels/RealDiv */ 24);
/* harmony import */ var _kernels_Reciprocal__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./kernels/Reciprocal */ 77385);
/* harmony import */ var _kernels_Relu__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./kernels/Relu */ 22279);
/* harmony import */ var _kernels_Relu6__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./kernels/Relu6 */ 59805);
/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./kernels/Reshape */ 19422);
/* harmony import */ var _kernels_ResizeBilinear__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./kernels/ResizeBilinear */ 4611);
/* harmony import */ var _kernels_ResizeBilinearGrad__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./kernels/ResizeBilinearGrad */ 62284);
/* harmony import */ var _kernels_ResizeNearestNeighbor__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./kernels/ResizeNearestNeighbor */ 74240);
/* harmony import */ var _kernels_ResizeNearestNeighborGrad__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./kernels/ResizeNearestNeighborGrad */ 37141);
/* harmony import */ var _kernels_Reverse__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./kernels/Reverse */ 74454);
/* harmony import */ var _kernels_RotateWithOffset__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./kernels/RotateWithOffset */ 75375);
/* harmony import */ var _kernels_Round__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./kernels/Round */ 85902);
/* harmony import */ var _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./kernels/Rsqrt */ 39800);
/* harmony import */ var _kernels_ScatterNd__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./kernels/ScatterNd */ 37002);
/* harmony import */ var _kernels_SearchSorted__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./kernels/SearchSorted */ 49321);
/* harmony import */ var _kernels_Select__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./kernels/Select */ 72823);
/* harmony import */ var _kernels_Selu__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./kernels/Selu */ 27647);
/* harmony import */ var _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./kernels/Sigmoid */ 2167);
/* harmony import */ var _kernels_Sign__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./kernels/Sign */ 73207);
/* harmony import */ var _kernels_Sin__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./kernels/Sin */ 52490);
/* harmony import */ var _kernels_Sinh__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./kernels/Sinh */ 37581);
/* harmony import */ var _kernels_Slice__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./kernels/Slice */ 73343);
/* harmony import */ var _kernels_Softmax__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./kernels/Softmax */ 60365);
/* harmony import */ var _kernels_Softplus__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./kernels/Softplus */ 1394);
/* harmony import */ var _kernels_SpaceToBatchND__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./kernels/SpaceToBatchND */ 27549);
/* harmony import */ var _kernels_SparseFillEmptyRows__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./kernels/SparseFillEmptyRows */ 79787);
/* harmony import */ var _kernels_SparseReshape__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./kernels/SparseReshape */ 42901);
/* harmony import */ var _kernels_SparseSegmentMean__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./kernels/SparseSegmentMean */ 33010);
/* harmony import */ var _kernels_SparseSegmentSum__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./kernels/SparseSegmentSum */ 89903);
/* harmony import */ var _kernels_SparseToDense__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./kernels/SparseToDense */ 4128);
/* harmony import */ var _kernels_SplitV__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./kernels/SplitV */ 75671);
/* harmony import */ var _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./kernels/Sqrt */ 78421);
/* harmony import */ var _kernels_Square__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./kernels/Square */ 7299);
/* harmony import */ var _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./kernels/SquaredDifference */ 71854);
/* harmony import */ var _kernels_StaticRegexReplace__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./kernels/StaticRegexReplace */ 60941);
/* harmony import */ var _kernels_Step__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./kernels/Step */ 1200);
/* harmony import */ var _kernels_StridedSlice__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./kernels/StridedSlice */ 26478);
/* harmony import */ var _kernels_StringNGrams__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./kernels/StringNGrams */ 62510);
/* harmony import */ var _kernels_StringSplit__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./kernels/StringSplit */ 88981);
/* harmony import */ var _kernels_StringToHashBucketFast__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./kernels/StringToHashBucketFast */ 71950);
/* harmony import */ var _kernels_Sub__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./kernels/Sub */ 41004);
/* harmony import */ var _kernels_Sum__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./kernels/Sum */ 88698);
/* harmony import */ var _kernels_Tan__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./kernels/Tan */ 71222);
/* harmony import */ var _kernels_Tanh__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./kernels/Tanh */ 27909);
/* harmony import */ var _kernels_TensorScatterUpdate__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./kernels/TensorScatterUpdate */ 79423);
/* harmony import */ var _kernels_Tile__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./kernels/Tile */ 41719);
/* harmony import */ var _kernels_TopK__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./kernels/TopK */ 1255);
/* harmony import */ var _kernels_Transform__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./kernels/Transform */ 26261);
/* harmony import */ var _kernels_Transpose__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./kernels/Transpose */ 81899);
/* harmony import */ var _kernels_Unique__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./kernels/Unique */ 80893);
/* harmony import */ var _kernels_Unpack__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./kernels/Unpack */ 28236);
/* harmony import */ var _kernels_UnsortedSegmentSum__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./kernels/UnsortedSegmentSum */ 32588);
/* harmony import */ var _kernels_ZerosLike__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./kernels/ZerosLike */ 60839);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// We explicitly import the modular kernels so they get registered in the
// global registry when we compile the library. A modular build would replace
// the contents of this file and import only the kernels that are needed.












































































































































































// List all kernel configs here
const kernelConfigs = [_kernels_FusedMatMul__WEBPACK_IMPORTED_MODULE_1__._fusedMatMulConfig, _kernels_Abs__WEBPACK_IMPORTED_MODULE_2__.absConfig, _kernels_Acos__WEBPACK_IMPORTED_MODULE_3__.acosConfig, _kernels_Acosh__WEBPACK_IMPORTED_MODULE_4__.acoshConfig, _kernels_Add__WEBPACK_IMPORTED_MODULE_5__.addConfig, _kernels_AddN__WEBPACK_IMPORTED_MODULE_6__.addNConfig, _kernels_All__WEBPACK_IMPORTED_MODULE_7__.allConfig, _kernels_Any__WEBPACK_IMPORTED_MODULE_8__.anyConfig, _kernels_ArgMax__WEBPACK_IMPORTED_MODULE_9__.argMaxConfig, _kernels_ArgMin__WEBPACK_IMPORTED_MODULE_10__.argMinConfig, _kernels_Asin__WEBPACK_IMPORTED_MODULE_11__.asinConfig, _kernels_Asinh__WEBPACK_IMPORTED_MODULE_12__.asinhConfig, _kernels_Atan__WEBPACK_IMPORTED_MODULE_13__.atanConfig, _kernels_Atan2__WEBPACK_IMPORTED_MODULE_14__.atan2Config, _kernels_Atanh__WEBPACK_IMPORTED_MODULE_15__.atanhConfig, _kernels_AvgPool__WEBPACK_IMPORTED_MODULE_16__.avgPoolConfig, _kernels_AvgPool3D__WEBPACK_IMPORTED_MODULE_17__.avgPool3DConfig, _kernels_AvgPool3DGrad__WEBPACK_IMPORTED_MODULE_18__.avgPool3DGradConfig, _kernels_AvgPoolGrad__WEBPACK_IMPORTED_MODULE_19__.avgPoolGradConfig, _kernels_BatchMatMul__WEBPACK_IMPORTED_MODULE_20__.batchMatMulConfig, _kernels_BatchNorm__WEBPACK_IMPORTED_MODULE_21__.batchNormConfig, _kernels_BatchToSpaceND__WEBPACK_IMPORTED_MODULE_22__.batchToSpaceNDConfig, _kernels_Bincount__WEBPACK_IMPORTED_MODULE_23__.bincountConfig, _kernels_BitwiseAnd__WEBPACK_IMPORTED_MODULE_24__.bitwiseAndConfig, _kernels_BroadcastArgs__WEBPACK_IMPORTED_MODULE_25__.broadcastArgsConfig, _kernels_Cast__WEBPACK_IMPORTED_MODULE_26__.castConfig, _kernels_Ceil__WEBPACK_IMPORTED_MODULE_27__.ceilConfig, _kernels_ClipByValue__WEBPACK_IMPORTED_MODULE_28__.clipByValueConfig, _kernels_Complex__WEBPACK_IMPORTED_MODULE_29__.complexConfig, _kernels_ComplexAbs__WEBPACK_IMPORTED_MODULE_30__.complexAbsConfig, _kernels_Concat__WEBPACK_IMPORTED_MODULE_31__.concatConfig, _kernels_Conv2D__WEBPACK_IMPORTED_MODULE_32__.conv2DConfig, _kernels_Conv2DBackpropFilter__WEBPACK_IMPORTED_MODULE_33__.conv2DBackpropFilterConfig, _kernels_Conv2DBackpropInput__WEBPACK_IMPORTED_MODULE_34__.conv2DBackpropInputConfig, _kernels_Conv3D__WEBPACK_IMPORTED_MODULE_35__.conv3DConfig, _kernels_Conv3DBackpropFilterV2__WEBPACK_IMPORTED_MODULE_36__.conv3DBackpropFilterV2Config, _kernels_Conv3DBackpropInputV2__WEBPACK_IMPORTED_MODULE_37__.conv3DBackpropInputV2Config, _kernels_Cos__WEBPACK_IMPORTED_MODULE_38__.cosConfig, _kernels_Cosh__WEBPACK_IMPORTED_MODULE_39__.coshConfig, _kernels_CropAndResize__WEBPACK_IMPORTED_MODULE_40__.cropAndResizeConfig, _kernels_Cumprod__WEBPACK_IMPORTED_MODULE_41__.cumprodConfig, _kernels_Cumsum__WEBPACK_IMPORTED_MODULE_42__.cumsumConfig, _kernels_DenseBincount__WEBPACK_IMPORTED_MODULE_43__.denseBincountConfig, _kernels_DepthToSpace__WEBPACK_IMPORTED_MODULE_44__.depthToSpaceConfig, _kernels_DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_45__.depthwiseConv2dNativeConfig, _kernels_DepthwiseConv2dNativeBackpropFilter__WEBPACK_IMPORTED_MODULE_46__.depthwiseConv2dNativeBackpropFilterConfig, _kernels_DepthwiseConv2dNativeBackpropInput__WEBPACK_IMPORTED_MODULE_47__.depthwiseConv2dNativeBackpropInputConfig, _kernels_Diag__WEBPACK_IMPORTED_MODULE_48__.diagConfig, _kernels_Dilation2D__WEBPACK_IMPORTED_MODULE_49__.dilation2DConfig, _kernels_Dilation2DBackpropFilter__WEBPACK_IMPORTED_MODULE_50__.dilation2DBackpropFilterConfig, _kernels_Dilation2DBackpropInput__WEBPACK_IMPORTED_MODULE_51__.dilation2DBackpropInputConfig, _kernels_Einsum__WEBPACK_IMPORTED_MODULE_52__.einsumConfig, _kernels_Elu__WEBPACK_IMPORTED_MODULE_53__.eluConfig, _kernels_EluGrad__WEBPACK_IMPORTED_MODULE_54__.eluGradConfig, _kernels_Equal__WEBPACK_IMPORTED_MODULE_55__.equalConfig, _kernels_Erf__WEBPACK_IMPORTED_MODULE_56__.erfConfig, _kernels_Exp__WEBPACK_IMPORTED_MODULE_57__.expConfig, _kernels_ExpandDims__WEBPACK_IMPORTED_MODULE_58__.expandDimsConfig, _kernels_Expm1__WEBPACK_IMPORTED_MODULE_59__.expm1Config, _kernels_FFT__WEBPACK_IMPORTED_MODULE_60__.fftConfig, _kernels_Fill__WEBPACK_IMPORTED_MODULE_61__.fillConfig, _kernels_FlipLeftRight__WEBPACK_IMPORTED_MODULE_62__.flipLeftRightConfig, _kernels_Floor__WEBPACK_IMPORTED_MODULE_63__.floorConfig, _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_64__.floorDivConfig, _kernels_FusedConv2D__WEBPACK_IMPORTED_MODULE_65__.fusedConv2DConfig, _kernels_FusedDepthwiseConv2D__WEBPACK_IMPORTED_MODULE_66__.fusedDepthwiseConv2DConfig, _kernels_GatherNd__WEBPACK_IMPORTED_MODULE_67__.gatherNdConfig, _kernels_GatherV2__WEBPACK_IMPORTED_MODULE_68__.gatherV2Config, _kernels_Greater__WEBPACK_IMPORTED_MODULE_69__.greaterConfig, _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_70__.greaterEqualConfig, _kernels_Identity__WEBPACK_IMPORTED_MODULE_71__.identityConfig, _kernels_IFFT__WEBPACK_IMPORTED_MODULE_72__.ifftConfig, _kernels_Imag__WEBPACK_IMPORTED_MODULE_73__.imagConfig, _kernels_IsFinite__WEBPACK_IMPORTED_MODULE_74__.isFiniteConfig, _kernels_IsInf__WEBPACK_IMPORTED_MODULE_75__.isInfConfig, _kernels_IsNaN__WEBPACK_IMPORTED_MODULE_76__.isNaNConfig, _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_77__.leakyReluConfig, _kernels_Less__WEBPACK_IMPORTED_MODULE_78__.lessConfig, _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_79__.lessEqualConfig, _kernels_LinSpace__WEBPACK_IMPORTED_MODULE_80__.linSpaceConfig, _kernels_Log__WEBPACK_IMPORTED_MODULE_81__.logConfig, _kernels_Log1p__WEBPACK_IMPORTED_MODULE_82__.log1pConfig, _kernels_LogicalAnd__WEBPACK_IMPORTED_MODULE_83__.logicalAndConfig, _kernels_LogicalNot__WEBPACK_IMPORTED_MODULE_84__.logicalNotConfig, _kernels_LogicalOr__WEBPACK_IMPORTED_MODULE_85__.logicalOrConfig, _kernels_LRN__WEBPACK_IMPORTED_MODULE_86__.LRNConfig, _kernels_LRNGrad__WEBPACK_IMPORTED_MODULE_87__.LRNGradConfig, _kernels_Max__WEBPACK_IMPORTED_MODULE_88__.maxConfig, _kernels_Maximum__WEBPACK_IMPORTED_MODULE_89__.maximumConfig, _kernels_MaxPool__WEBPACK_IMPORTED_MODULE_90__.maxPoolConfig, _kernels_MaxPool3D__WEBPACK_IMPORTED_MODULE_91__.maxPool3DConfig, _kernels_MaxPool3DGrad__WEBPACK_IMPORTED_MODULE_92__.maxPool3DGradConfig, _kernels_MaxPoolGrad__WEBPACK_IMPORTED_MODULE_93__.maxPoolGradConfig, _kernels_MaxPoolWithArgmax__WEBPACK_IMPORTED_MODULE_94__.maxPoolWithArgmaxConfig, _kernels_Mean__WEBPACK_IMPORTED_MODULE_95__.meanConfig, _kernels_Min__WEBPACK_IMPORTED_MODULE_96__.minConfig, _kernels_Minimum__WEBPACK_IMPORTED_MODULE_97__.minimumConfig, _kernels_MirrorPad__WEBPACK_IMPORTED_MODULE_98__.mirrorPadConfig, _kernels_Mod__WEBPACK_IMPORTED_MODULE_99__.modConfig, _kernels_Multinomial__WEBPACK_IMPORTED_MODULE_100__.multinomialConfig, _kernels_Multiply__WEBPACK_IMPORTED_MODULE_101__.multiplyConfig, _kernels_Neg__WEBPACK_IMPORTED_MODULE_102__.negConfig, _kernels_NonMaxSuppressionV3__WEBPACK_IMPORTED_MODULE_103__.nonMaxSuppressionV3Config, _kernels_NonMaxSuppressionV4__WEBPACK_IMPORTED_MODULE_104__.nonMaxSuppressionV4Config, _kernels_NonMaxSuppressionV5__WEBPACK_IMPORTED_MODULE_105__.nonMaxSuppressionV5Config, _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_106__.notEqualConfig, _kernels_OneHot__WEBPACK_IMPORTED_MODULE_107__.oneHotConfig, _kernels_OnesLike__WEBPACK_IMPORTED_MODULE_108__.onesLikeConfig, _kernels_Pack__WEBPACK_IMPORTED_MODULE_109__.packConfig, _kernels_PadV2__WEBPACK_IMPORTED_MODULE_110__.padV2Config, _kernels_Pow__WEBPACK_IMPORTED_MODULE_111__.powConfig, _kernels_Prelu__WEBPACK_IMPORTED_MODULE_112__.preluConfig, _kernels_Prod__WEBPACK_IMPORTED_MODULE_113__.prodConfig, _kernels_RaggedGather__WEBPACK_IMPORTED_MODULE_114__.raggedGatherConfig, _kernels_RaggedRange__WEBPACK_IMPORTED_MODULE_115__.raggedRangeConfig, _kernels_RaggedTensorToTensor__WEBPACK_IMPORTED_MODULE_116__.raggedTensorToTensorConfig, _kernels_Range__WEBPACK_IMPORTED_MODULE_117__.rangeConfig, _kernels_Real__WEBPACK_IMPORTED_MODULE_118__.realConfig, _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_119__.realDivConfig, _kernels_Reciprocal__WEBPACK_IMPORTED_MODULE_120__.reciprocalConfig, _kernels_Relu__WEBPACK_IMPORTED_MODULE_121__.reluConfig, _kernels_Relu6__WEBPACK_IMPORTED_MODULE_122__.relu6Config, _kernels_Reshape__WEBPACK_IMPORTED_MODULE_123__.reshapeConfig, _kernels_ResizeBilinear__WEBPACK_IMPORTED_MODULE_124__.resizeBilinearConfig, _kernels_ResizeBilinearGrad__WEBPACK_IMPORTED_MODULE_125__.resizeBilinearGradConfig, _kernels_ResizeNearestNeighbor__WEBPACK_IMPORTED_MODULE_126__.resizeNearestNeighborConfig, _kernels_ResizeNearestNeighborGrad__WEBPACK_IMPORTED_MODULE_127__.resizeNearestNeighborGradConfig, _kernels_Reverse__WEBPACK_IMPORTED_MODULE_128__.reverseConfig, _kernels_RotateWithOffset__WEBPACK_IMPORTED_MODULE_129__.rotateWithOffsetConfig, _kernels_Round__WEBPACK_IMPORTED_MODULE_130__.roundConfig, _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_131__.rsqrtConfig, _kernels_ScatterNd__WEBPACK_IMPORTED_MODULE_132__.scatterNdConfig, _kernels_SearchSorted__WEBPACK_IMPORTED_MODULE_133__.searchSortedConfig, _kernels_Select__WEBPACK_IMPORTED_MODULE_134__.selectConfig, _kernels_Selu__WEBPACK_IMPORTED_MODULE_135__.seluConfig, _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_136__.sigmoidConfig, _kernels_Sign__WEBPACK_IMPORTED_MODULE_137__.signConfig, _kernels_Sin__WEBPACK_IMPORTED_MODULE_138__.sinConfig, _kernels_Sinh__WEBPACK_IMPORTED_MODULE_139__.sinhConfig, _kernels_Slice__WEBPACK_IMPORTED_MODULE_140__.sliceConfig, _kernels_Softmax__WEBPACK_IMPORTED_MODULE_141__.softmaxConfig, _kernels_Softplus__WEBPACK_IMPORTED_MODULE_142__.softplusConfig, _kernels_SpaceToBatchND__WEBPACK_IMPORTED_MODULE_143__.spaceToBatchNDConfig, _kernels_SparseFillEmptyRows__WEBPACK_IMPORTED_MODULE_144__.sparseFillEmptyRowsConfig, _kernels_SparseReshape__WEBPACK_IMPORTED_MODULE_145__.sparseReshapeConfig, _kernels_SparseSegmentMean__WEBPACK_IMPORTED_MODULE_146__.sparseSegmentMeanConfig, _kernels_SparseSegmentSum__WEBPACK_IMPORTED_MODULE_147__.sparseSegmentSumConfig, _kernels_SparseToDense__WEBPACK_IMPORTED_MODULE_148__.sparseToDenseConfig, _kernels_SplitV__WEBPACK_IMPORTED_MODULE_149__.splitVConfig, _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_150__.sqrtConfig, _kernels_Square__WEBPACK_IMPORTED_MODULE_151__.squareConfig, _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_152__.squaredDifferenceConfig, _kernels_StaticRegexReplace__WEBPACK_IMPORTED_MODULE_153__.staticRegexReplaceConfig, _kernels_Step__WEBPACK_IMPORTED_MODULE_154__.stepConfig, _kernels_StridedSlice__WEBPACK_IMPORTED_MODULE_155__.stridedSliceConfig, _kernels_StringNGrams__WEBPACK_IMPORTED_MODULE_156__.stringNGramsConfig, _kernels_StringSplit__WEBPACK_IMPORTED_MODULE_157__.stringSplitConfig, _kernels_StringToHashBucketFast__WEBPACK_IMPORTED_MODULE_158__.stringToHashBucketFastConfig, _kernels_Sub__WEBPACK_IMPORTED_MODULE_159__.subConfig, _kernels_Sum__WEBPACK_IMPORTED_MODULE_160__.sumConfig, _kernels_Tan__WEBPACK_IMPORTED_MODULE_161__.tanConfig, _kernels_Tanh__WEBPACK_IMPORTED_MODULE_162__.tanhConfig, _kernels_TensorScatterUpdate__WEBPACK_IMPORTED_MODULE_163__.tensorScatterUpdateConfig, _kernels_Tile__WEBPACK_IMPORTED_MODULE_164__.tileConfig, _kernels_TopK__WEBPACK_IMPORTED_MODULE_165__.topKConfig, _kernels_Transform__WEBPACK_IMPORTED_MODULE_166__.transformConfig, _kernels_Transpose__WEBPACK_IMPORTED_MODULE_167__.transposeConfig, _kernels_Unique__WEBPACK_IMPORTED_MODULE_168__.uniqueConfig, _kernels_Unpack__WEBPACK_IMPORTED_MODULE_169__.unpackConfig, _kernels_UnsortedSegmentSum__WEBPACK_IMPORTED_MODULE_170__.unsortedSegmentSumConfig, _kernels_ZerosLike__WEBPACK_IMPORTED_MODULE_171__.zerosLikeConfig];
for (const kernelConfig of kernelConfigs) {
  (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerKernel)(kernelConfig);
}

/***/ }),

/***/ 12582:
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addImpl": () => (/* reexport safe */ _kernels_Add__WEBPACK_IMPORTED_MODULE_1__.addImpl),
/* harmony export */   "bincountImpl": () => (/* reexport safe */ _kernels_Bincount_impl__WEBPACK_IMPORTED_MODULE_2__.bincountImpl),
/* harmony export */   "bincountReduceImpl": () => (/* reexport safe */ _kernels_Bincount_impl__WEBPACK_IMPORTED_MODULE_2__.bincountReduceImpl),
/* harmony export */   "bitwiseAndImpl": () => (/* reexport safe */ _kernels_BitwiseAnd__WEBPACK_IMPORTED_MODULE_3__.bitwiseAndImpl),
/* harmony export */   "castImpl": () => (/* reexport safe */ _kernels_Cast__WEBPACK_IMPORTED_MODULE_4__.castImpl),
/* harmony export */   "ceilImpl": () => (/* reexport safe */ _kernels_Ceil__WEBPACK_IMPORTED_MODULE_5__.ceilImpl),
/* harmony export */   "concatImpl": () => (/* reexport safe */ _kernels_Concat_impl__WEBPACK_IMPORTED_MODULE_6__.concatImpl),
/* harmony export */   "equalImpl": () => (/* reexport safe */ _kernels_Equal__WEBPACK_IMPORTED_MODULE_7__.equalImpl),
/* harmony export */   "expImpl": () => (/* reexport safe */ _kernels_Exp__WEBPACK_IMPORTED_MODULE_8__.expImpl),
/* harmony export */   "expm1Impl": () => (/* reexport safe */ _kernels_Expm1__WEBPACK_IMPORTED_MODULE_9__.expm1Impl),
/* harmony export */   "floorDivImpl": () => (/* reexport safe */ _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_11__.floorDivImpl),
/* harmony export */   "floorImpl": () => (/* reexport safe */ _kernels_Floor__WEBPACK_IMPORTED_MODULE_10__.floorImpl),
/* harmony export */   "gatherNdImpl": () => (/* reexport safe */ _kernels_GatherNd_Impl__WEBPACK_IMPORTED_MODULE_12__.gatherNdImpl),
/* harmony export */   "gatherV2Impl": () => (/* reexport safe */ _kernels_GatherV2_impl__WEBPACK_IMPORTED_MODULE_13__.gatherV2Impl),
/* harmony export */   "greaterEqualImpl": () => (/* reexport safe */ _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_15__.greaterEqualImpl),
/* harmony export */   "greaterImpl": () => (/* reexport safe */ _kernels_Greater__WEBPACK_IMPORTED_MODULE_14__.greaterImpl),
/* harmony export */   "lessEqualImpl": () => (/* reexport safe */ _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_17__.lessEqualImpl),
/* harmony export */   "lessImpl": () => (/* reexport safe */ _kernels_Less__WEBPACK_IMPORTED_MODULE_16__.lessImpl),
/* harmony export */   "linSpaceImpl": () => (/* reexport safe */ _kernels_LinSpace_impl__WEBPACK_IMPORTED_MODULE_18__.linSpaceImpl),
/* harmony export */   "logImpl": () => (/* reexport safe */ _kernels_Log__WEBPACK_IMPORTED_MODULE_19__.logImpl),
/* harmony export */   "maxImpl": () => (/* reexport safe */ _kernels_Max_impl__WEBPACK_IMPORTED_MODULE_20__.maxImpl),
/* harmony export */   "maximumImpl": () => (/* reexport safe */ _kernels_Maximum__WEBPACK_IMPORTED_MODULE_21__.maximumImpl),
/* harmony export */   "minimumImpl": () => (/* reexport safe */ _kernels_Minimum__WEBPACK_IMPORTED_MODULE_22__.minimumImpl),
/* harmony export */   "multiplyImpl": () => (/* reexport safe */ _kernels_Multiply__WEBPACK_IMPORTED_MODULE_23__.multiplyImpl),
/* harmony export */   "negImpl": () => (/* reexport safe */ _kernels_Neg__WEBPACK_IMPORTED_MODULE_24__.negImpl),
/* harmony export */   "notEqualImpl": () => (/* reexport safe */ _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_25__.notEqualImpl),
/* harmony export */   "prodImpl": () => (/* reexport safe */ _kernels_Prod__WEBPACK_IMPORTED_MODULE_26__.prodImpl),
/* harmony export */   "raggedGatherImpl": () => (/* reexport safe */ _kernels_RaggedGather_impl__WEBPACK_IMPORTED_MODULE_27__.raggedGatherImpl),
/* harmony export */   "raggedRangeImpl": () => (/* reexport safe */ _kernels_RaggedRange_impl__WEBPACK_IMPORTED_MODULE_28__.raggedRangeImpl),
/* harmony export */   "raggedTensorToTensorImpl": () => (/* reexport safe */ _kernels_RaggedTensorToTensor_impl__WEBPACK_IMPORTED_MODULE_29__.raggedTensorToTensorImpl),
/* harmony export */   "rangeImpl": () => (/* reexport safe */ _kernels_Range_impl__WEBPACK_IMPORTED_MODULE_30__.rangeImpl),
/* harmony export */   "rsqrtImpl": () => (/* reexport safe */ _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_31__.rsqrtImpl),
/* harmony export */   "scatterImpl": () => (/* reexport safe */ _kernels_Scatter_impl__WEBPACK_IMPORTED_MODULE_32__.scatterImpl),
/* harmony export */   "sigmoidImpl": () => (/* reexport safe */ _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_33__.sigmoidImpl),
/* harmony export */   "simpleAbsImpl": () => (/* reexport safe */ _kernels_Abs__WEBPACK_IMPORTED_MODULE_0__.simpleAbsImpl),
/* harmony export */   "sliceImpl": () => (/* reexport safe */ _kernels_Slice__WEBPACK_IMPORTED_MODULE_34__.sliceImpl),
/* harmony export */   "sparseFillEmptyRowsImpl": () => (/* reexport safe */ _kernels_SparseFillEmptyRows_impl__WEBPACK_IMPORTED_MODULE_35__.sparseFillEmptyRowsImpl),
/* harmony export */   "sparseReshapeImpl": () => (/* reexport safe */ _kernels_SparseReshape_impl__WEBPACK_IMPORTED_MODULE_36__.sparseReshapeImpl),
/* harmony export */   "sparseSegmentReductionImpl": () => (/* reexport safe */ _kernels_SparseSegmentReduction_impl__WEBPACK_IMPORTED_MODULE_37__.sparseSegmentReductionImpl),
/* harmony export */   "sqrtImpl": () => (/* reexport safe */ _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_38__.sqrtImpl),
/* harmony export */   "squaredDifferenceImpl": () => (/* reexport safe */ _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_39__.squaredDifferenceImpl),
/* harmony export */   "staticRegexReplaceImpl": () => (/* reexport safe */ _kernels_StaticRegexReplace__WEBPACK_IMPORTED_MODULE_40__.staticRegexReplaceImpl),
/* harmony export */   "stridedSliceImpl": () => (/* reexport safe */ _kernels_StridedSlice_impl__WEBPACK_IMPORTED_MODULE_41__.stridedSliceImpl),
/* harmony export */   "stringNGramsImpl": () => (/* reexport safe */ _kernels_StringNGrams_impl__WEBPACK_IMPORTED_MODULE_42__.stringNGramsImpl),
/* harmony export */   "stringSplitImpl": () => (/* reexport safe */ _kernels_StringSplit_impl__WEBPACK_IMPORTED_MODULE_43__.stringSplitImpl),
/* harmony export */   "stringToHashBucketFastImpl": () => (/* reexport safe */ _kernels_StringToHashBucketFast_impl__WEBPACK_IMPORTED_MODULE_44__.stringToHashBucketFastImpl),
/* harmony export */   "subImpl": () => (/* reexport safe */ _kernels_Sub__WEBPACK_IMPORTED_MODULE_45__.subImpl),
/* harmony export */   "tileImpl": () => (/* reexport safe */ _kernels_Tile_impl__WEBPACK_IMPORTED_MODULE_46__.tileImpl),
/* harmony export */   "topKImpl": () => (/* reexport safe */ _kernels_TopK_impl__WEBPACK_IMPORTED_MODULE_47__.topKImpl),
/* harmony export */   "transposeImpl": () => (/* reexport safe */ _kernels_Transpose_impl__WEBPACK_IMPORTED_MODULE_48__.transposeImpl),
/* harmony export */   "uniqueImpl": () => (/* reexport safe */ _kernels_Unique_impl__WEBPACK_IMPORTED_MODULE_49__.uniqueImpl)
/* harmony export */ });
/* harmony import */ var _kernels_Abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kernels/Abs */ 5537);
/* harmony import */ var _kernels_Add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernels/Add */ 5939);
/* harmony import */ var _kernels_Bincount_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kernels/Bincount_impl */ 84194);
/* harmony import */ var _kernels_BitwiseAnd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernels/BitwiseAnd */ 99797);
/* harmony import */ var _kernels_Cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./kernels/Cast */ 44177);
/* harmony import */ var _kernels_Ceil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./kernels/Ceil */ 13085);
/* harmony import */ var _kernels_Concat_impl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./kernels/Concat_impl */ 44113);
/* harmony import */ var _kernels_Equal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./kernels/Equal */ 51085);
/* harmony import */ var _kernels_Exp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./kernels/Exp */ 48392);
/* harmony import */ var _kernels_Expm1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./kernels/Expm1 */ 52599);
/* harmony import */ var _kernels_Floor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./kernels/Floor */ 12325);
/* harmony import */ var _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./kernels/FloorDiv */ 80586);
/* harmony import */ var _kernels_GatherNd_Impl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./kernels/GatherNd_Impl */ 42086);
/* harmony import */ var _kernels_GatherV2_impl__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kernels/GatherV2_impl */ 11422);
/* harmony import */ var _kernels_Greater__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./kernels/Greater */ 68465);
/* harmony import */ var _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./kernels/GreaterEqual */ 3020);
/* harmony import */ var _kernels_Less__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./kernels/Less */ 45540);
/* harmony import */ var _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./kernels/LessEqual */ 2085);
/* harmony import */ var _kernels_LinSpace_impl__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./kernels/LinSpace_impl */ 7888);
/* harmony import */ var _kernels_Log__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./kernels/Log */ 1950);
/* harmony import */ var _kernels_Max_impl__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./kernels/Max_impl */ 67276);
/* harmony import */ var _kernels_Maximum__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./kernels/Maximum */ 77717);
/* harmony import */ var _kernels_Minimum__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./kernels/Minimum */ 43094);
/* harmony import */ var _kernels_Multiply__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./kernels/Multiply */ 20306);
/* harmony import */ var _kernels_Neg__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./kernels/Neg */ 58668);
/* harmony import */ var _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./kernels/NotEqual */ 76325);
/* harmony import */ var _kernels_Prod__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./kernels/Prod */ 82848);
/* harmony import */ var _kernels_RaggedGather_impl__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./kernels/RaggedGather_impl */ 35196);
/* harmony import */ var _kernels_RaggedRange_impl__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./kernels/RaggedRange_impl */ 80608);
/* harmony import */ var _kernels_RaggedTensorToTensor_impl__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./kernels/RaggedTensorToTensor_impl */ 18058);
/* harmony import */ var _kernels_Range_impl__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./kernels/Range_impl */ 17599);
/* harmony import */ var _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./kernels/Rsqrt */ 39800);
/* harmony import */ var _kernels_Scatter_impl__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./kernels/Scatter_impl */ 78633);
/* harmony import */ var _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./kernels/Sigmoid */ 2167);
/* harmony import */ var _kernels_Slice__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./kernels/Slice */ 73343);
/* harmony import */ var _kernels_SparseFillEmptyRows_impl__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./kernels/SparseFillEmptyRows_impl */ 15243);
/* harmony import */ var _kernels_SparseReshape_impl__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./kernels/SparseReshape_impl */ 64641);
/* harmony import */ var _kernels_SparseSegmentReduction_impl__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./kernels/SparseSegmentReduction_impl */ 96601);
/* harmony import */ var _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./kernels/Sqrt */ 78421);
/* harmony import */ var _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./kernels/SquaredDifference */ 71854);
/* harmony import */ var _kernels_StaticRegexReplace__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./kernels/StaticRegexReplace */ 60941);
/* harmony import */ var _kernels_StridedSlice_impl__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./kernels/StridedSlice_impl */ 11899);
/* harmony import */ var _kernels_StringNGrams_impl__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./kernels/StringNGrams_impl */ 17683);
/* harmony import */ var _kernels_StringSplit_impl__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./kernels/StringSplit_impl */ 78939);
/* harmony import */ var _kernels_StringToHashBucketFast_impl__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./kernels/StringToHashBucketFast_impl */ 70028);
/* harmony import */ var _kernels_Sub__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./kernels/Sub */ 41004);
/* harmony import */ var _kernels_Tile_impl__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./kernels/Tile_impl */ 9432);
/* harmony import */ var _kernels_TopK_impl__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./kernels/TopK_impl */ 97130);
/* harmony import */ var _kernels_Transpose_impl__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./kernels/Transpose_impl */ 30905);
/* harmony import */ var _kernels_Unique_impl__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./kernels/Unique_impl */ 30262);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Shared functionality among backends.



















































/***/ }),

/***/ 65914:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSimpleBinaryKernelImpl": () => (/* binding */ createSimpleBinaryKernelImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Template that creates implementation for binary ops. Supports broadcast.
 */
function createSimpleBinaryKernelImpl(op) {
  return (aShape, bShape, aVals, bVals, dtype) => {
    const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    const resultRank = newShape.length;
    const resultStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(newShape);
    const resultSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(newShape);
    const result = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType(dtype, resultSize);
    const aRank = aShape.length;
    const bRank = bShape.length;
    const aStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(aShape);
    const bStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(bShape);
    const aBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(aShape, newShape);
    const bBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(bShape, newShape);
    if (aBroadcastDims.length + bBroadcastDims.length === 0) {
      for (let i = 0; i < result.length; ++i) {
        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);
      }
    } else {
      for (let i = 0; i < result.length; ++i) {
        const loc = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, resultRank, resultStrides);
        const aLoc = loc.slice(-aRank);
        aBroadcastDims.forEach(d => aLoc[d] = 0);
        const aIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(aLoc, aRank, aStrides);
        const bLoc = loc.slice(-bRank);
        bBroadcastDims.forEach(d => bLoc[d] = 0);
        const bIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(bLoc, bRank, bStrides);
        result[i] = op(aVals[aIndex], bVals[bIndex]);
      }
    }
    return [result, newShape];
  };
}

/***/ }),

/***/ 12247:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "binaryKernelFunc": () => (/* binding */ binaryKernelFunc),
/* harmony export */   "createComplexBinaryKernelImpl": () => (/* binding */ createComplexBinaryKernelImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _kernels_Cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernels/Cast */ 44177);
/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernels/Complex */ 50311);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Template that creates a `KernelFunc` for binary ops.
 * @param name Kernel name.
 * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.
 * @param binaryKernelComplexImpl Optional. If exists, represents a
 *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype
 *     is `complex64`.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */
function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {
  if (complexImpl == null) {
    return ({
      inputs,
      backend
    }) => {
      const {
        a,
        b
      } = inputs;
      const cpuBackend = backend;
      (0,_cpu_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([a, b], name);
      const aVals = cpuBackend.data.get(a.dataId).values;
      const bVals = cpuBackend.data.get(b.dataId).values;
      const decodedAVals = a.dtype === 'string' ?
      // tslint:disable-next-line: no-any
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(aVals) : aVals;
      const decodedBVals = a.dtype === 'string' ?
      // tslint:disable-next-line: no-any
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(bVals) : bVals;
      const $dtype = dtype || a.dtype;
      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);
      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);
    };
  }
  return ({
    inputs,
    backend
  }) => {
    const {
      a,
      b
    } = inputs;
    const cpuBackend = backend;
    if (a.dtype === 'complex64' || b.dtype === 'complex64') {
      const $aComplex = (0,_kernels_Cast__WEBPACK_IMPORTED_MODULE_2__.cast)({
        inputs: {
          x: a
        },
        backend: cpuBackend,
        attrs: {
          dtype: 'complex64'
        }
      });
      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);
      const aReal = $aComplexVals.complexTensorInfos.real;
      const aImag = $aComplexVals.complexTensorInfos.imag;
      const aRealVals = cpuBackend.data.get(aReal.dataId).values;
      const aImagVals = cpuBackend.data.get(aImag.dataId).values;
      const $bComplex = (0,_kernels_Cast__WEBPACK_IMPORTED_MODULE_2__.cast)({
        inputs: {
          x: b
        },
        backend: cpuBackend,
        attrs: {
          dtype: 'complex64'
        }
      });
      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);
      const bReal = $bComplexVals.complexTensorInfos.real;
      const bImag = $bComplexVals.complexTensorInfos.imag;
      const bRealVals = cpuBackend.data.get(bReal.dataId).values;
      const bImagVals = cpuBackend.data.get(bImag.dataId).values;
      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);
      const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);
      const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);
      const result = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({
        inputs: {
          real: resultReal,
          imag: resultImag
        },
        backend: cpuBackend
      });
      cpuBackend.disposeIntermediateTensorInfo($aComplex);
      cpuBackend.disposeIntermediateTensorInfo($bComplex);
      cpuBackend.disposeIntermediateTensorInfo(resultReal);
      cpuBackend.disposeIntermediateTensorInfo(resultImag);
      return result;
    } else {
      const aVals = cpuBackend.data.get(a.dataId).values;
      const bVals = cpuBackend.data.get(b.dataId).values;
      const $dtype = dtype || a.dtype;
      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);
      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);
    }
  };
}
/**
 * Template that creates the complex type implementation for binary ops.
 * Supports broadcast.
 */
function createComplexBinaryKernelImpl(op) {
  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {
    const resultShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    const resultSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(resultShape);
    const resultRank = resultShape.length;
    const resultStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(resultShape);
    const resultRealVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('float32', resultSize);
    const resultImagVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('float32', resultSize);
    const aBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(aShape, resultShape);
    const bBroadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(bShape, resultShape);
    const aVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);
    const bVals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);
    const aRank = aShape.length;
    const aStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(aShape);
    const bRank = bShape.length;
    const bStrides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(bShape);
    if (aBroadcastDims.length + bBroadcastDims.length === 0) {
      for (let i = 0; i < resultRealVals.length; i++) {
        const aIdx = i % aVals.length;
        const bIdx = i % bVals.length;
        const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);
        resultRealVals[i] = result.real;
        resultImagVals[i] = result.imag;
      }
    } else {
      for (let i = 0; i < resultRealVals.length; i++) {
        const loc = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.indexToLoc(i, resultRank, resultStrides);
        const aLoc = loc.slice(-aRank);
        aBroadcastDims.forEach(d => aLoc[d] = 0);
        const aIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(aLoc, aRank, aStrides);
        const bLoc = loc.slice(-bRank);
        bBroadcastDims.forEach(d => bLoc[d] = 0);
        const bIndex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.locToIndex(bLoc, bRank, bStrides);
        const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);
        resultRealVals[i] = opResult.real;
        resultImagVals[i] = opResult.imag;
      }
    }
    return [resultRealVals, resultImagVals, resultShape];
  };
}

/***/ }),

/***/ 94429:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/fft_utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fftBatch": () => (/* binding */ fftBatch),
/* harmony export */   "fftImpl": () => (/* binding */ fftImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernels_Add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernels/Add */ 5939);
/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernels/Complex */ 50311);
/* harmony import */ var _kernels_Concat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../kernels/Concat */ 41621);
/* harmony import */ var _kernels_Identity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernels/Identity */ 98750);
/* harmony import */ var _kernels_Imag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../kernels/Imag */ 469);
/* harmony import */ var _kernels_Multiply__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernels/Multiply */ 20306);
/* harmony import */ var _kernels_Real__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../kernels/Real */ 22749);
/* harmony import */ var _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernels/RealDiv */ 24);
/* harmony import */ var _kernels_Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Slice */ 73343);
/* harmony import */ var _kernels_Sub__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../kernels/Sub */ 41004);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Calculate FFT of inner most elements of batch tensor.
 */
function fftBatch(input, inverse, cpuBackend) {
  const inputShape = input.shape;
  const batch = inputShape[0];
  const innerDim = inputShape[1];
  const inputVals = cpuBackend.data.get(input.dataId);
  const real2D = inputVals.complexTensorInfos.real;
  const imag2D = inputVals.complexTensorInfos.imag;
  // Collects real and imaginary values separately.
  const resultShape = [batch, innerDim];
  const resultSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(resultShape);
  const resultReal = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('float32', resultSize);
  const resultImag = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('float32', resultSize);
  for (let b = 0; b < batch; b++) {
    // TODO: Support slice ops for complex type.
    const r = (0,_kernels_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({
      inputs: {
        x: real2D
      },
      backend: cpuBackend,
      attrs: {
        begin: [b, 0],
        size: [1, innerDim]
      }
    });
    const i = (0,_kernels_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({
      inputs: {
        x: imag2D
      },
      backend: cpuBackend,
      attrs: {
        begin: [b, 0],
        size: [1, innerDim]
      }
    });
    const input = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
      inputs: {
        real: r,
        imag: i
      },
      backend: cpuBackend
    });
    // Run FFT by batch element.
    const {
      real,
      imag
    } = fftImpl(input, inverse, cpuBackend);
    const res = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.mergeRealAndImagArrays(real, imag);
    for (let d = 0; d < innerDim; d++) {
      const c = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getComplexWithIndex(res, d);
      resultReal[b * innerDim + d] = c.real;
      resultImag[b * innerDim + d] = c.imag;
    }
    cpuBackend.disposeIntermediateTensorInfo(r);
    cpuBackend.disposeIntermediateTensorInfo(i);
    cpuBackend.disposeIntermediateTensorInfo(input);
  }
  const $realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);
  const $imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);
  const result = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
    inputs: {
      real: $realInfo,
      imag: $imagInfo
    },
    backend: cpuBackend
  });
  cpuBackend.disposeIntermediateTensorInfo($realInfo);
  cpuBackend.disposeIntermediateTensorInfo($imagInfo);
  return result;
}
function fftImpl(input, inverse, cpuBackend) {
  const inputSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(input.shape);
  const inputVals = cpuBackend.data.get(input.dataId);
  const realVals = cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values;
  const imagVals = cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values;
  if (isExponentOf2(inputSize)) {
    const result = fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);
    const resultShape = [input.shape[0], input.shape[1]];
    if (inverse) {
      const realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);
      const imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);
      const sizeInfo = cpuBackend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(inputSize, 'float32'));
      const sizeInfoCopy = (0,_kernels_Identity__WEBPACK_IMPORTED_MODULE_3__.identity)({
        inputs: {
          x: sizeInfo
        },
        backend: cpuBackend
      });
      const divRealInfo = _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_4__.realDivConfig.kernelFunc({
        inputs: {
          a: realInfo,
          b: sizeInfo
        },
        backend: cpuBackend
      });
      const divImagInfo = _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_4__.realDivConfig.kernelFunc({
        inputs: {
          a: imagInfo,
          b: sizeInfoCopy
        },
        backend: cpuBackend
      });
      const divRealVals = cpuBackend.data.get(divRealInfo.dataId).values;
      const divImagVals = cpuBackend.data.get(divImagInfo.dataId).values;
      cpuBackend.disposeIntermediateTensorInfo(realInfo);
      cpuBackend.disposeIntermediateTensorInfo(imagInfo);
      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);
      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);
      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);
      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);
      return {
        real: divRealVals,
        imag: divImagVals
      };
    }
    return result;
  } else {
    const data = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.mergeRealAndImagArrays(realVals, imagVals);
    const rawOutput = fourierTransformByMatmul(data, inputSize, inverse);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.splitRealAndImagArrays(rawOutput);
  }
}
function isExponentOf2(size) {
  return (size & size - 1) === 0;
}
// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.
function fftRadix2(realVals, imagVals, size, inverse, cpuBackend) {
  if (size === 1) {
    return {
      real: realVals,
      imag: imagVals
    };
  }
  const data = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.mergeRealAndImagArrays(realVals, imagVals);
  const half = size / 2;
  const evenComplex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.complexWithEvenIndex(data);
  const evenRealVals = evenComplex.real;
  const evenImagVals = evenComplex.imag;
  const evenShape = [evenRealVals.length];
  const evenRealInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);
  const evenImagInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);
  const evenTensorInfo = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
    inputs: {
      real: evenRealInfo,
      imag: evenImagInfo
    },
    backend: cpuBackend
  });
  const oddComplex = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.complexWithOddIndex(data);
  const oddRealVals = oddComplex.real;
  const oddImagVals = oddComplex.imag;
  const oddShape = [oddRealVals.length];
  const oddRealInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);
  const oddImagInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);
  const oddTensorInfo = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
    inputs: {
      real: oddRealInfo,
      imag: oddImagInfo
    },
    backend: cpuBackend
  });
  // Recursive call for half part of original input.
  const $evenComplex = fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);
  const $evenRealVals = $evenComplex.real;
  const $evenImagVals = $evenComplex.imag;
  const $evenShape = [$evenRealVals.length];
  const $evenRealInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);
  const $evenImagInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);
  const $evenTensorInfo = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
    inputs: {
      real: $evenRealInfo,
      imag: $evenImagInfo
    },
    backend: cpuBackend
  });
  const $oddComplex = fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);
  const $oddRealVals = $oddComplex.real;
  const $oddImagVals = $oddComplex.imag;
  const $oddShape = [$oddRealVals.length];
  const $oddRealInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);
  const $oddImagInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);
  const $oddTensorInfo = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
    inputs: {
      real: $oddRealInfo,
      imag: $oddImagInfo
    },
    backend: cpuBackend
  });
  const e = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.exponents(size, inverse);
  const eShape = [e.real.length];
  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);
  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);
  const complexInfo = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
    inputs: {
      real: eRealInfo,
      imag: eImagInfo
    },
    backend: cpuBackend
  });
  const exponentInfo = (0,_kernels_Multiply__WEBPACK_IMPORTED_MODULE_5__.multiply)({
    inputs: {
      a: complexInfo,
      b: $oddTensorInfo
    },
    backend: cpuBackend
  });
  const addPart = (0,_kernels_Add__WEBPACK_IMPORTED_MODULE_6__.add)({
    inputs: {
      a: $evenTensorInfo,
      b: exponentInfo
    },
    backend: cpuBackend
  });
  const subPart = (0,_kernels_Sub__WEBPACK_IMPORTED_MODULE_7__.sub)({
    inputs: {
      a: $evenTensorInfo,
      b: exponentInfo
    },
    backend: cpuBackend
  });
  const addPartReal = (0,_kernels_Real__WEBPACK_IMPORTED_MODULE_8__.real)({
    inputs: {
      input: addPart
    },
    backend: cpuBackend
  });
  const subPartReal = (0,_kernels_Real__WEBPACK_IMPORTED_MODULE_8__.real)({
    inputs: {
      input: subPart
    },
    backend: cpuBackend
  });
  const addPartImag = (0,_kernels_Imag__WEBPACK_IMPORTED_MODULE_9__.imag)({
    inputs: {
      input: addPart
    },
    backend: cpuBackend
  });
  const subPartImag = (0,_kernels_Imag__WEBPACK_IMPORTED_MODULE_9__.imag)({
    inputs: {
      input: subPart
    },
    backend: cpuBackend
  });
  const $real = (0,_kernels_Concat__WEBPACK_IMPORTED_MODULE_10__.concat)({
    inputs: [addPartReal, subPartReal],
    backend: cpuBackend,
    attrs: {
      axis: 0
    }
  });
  const $imag = (0,_kernels_Concat__WEBPACK_IMPORTED_MODULE_10__.concat)({
    inputs: [addPartImag, subPartImag],
    backend: cpuBackend,
    attrs: {
      axis: 0
    }
  });
  const $realVals = cpuBackend.data.get($real.dataId).values;
  const $imagVals = cpuBackend.data.get($imag.dataId).values;
  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);
  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);
  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);
  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);
  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);
  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);
  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);
  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);
  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);
  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);
  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);
  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);
  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);
  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);
  cpuBackend.disposeIntermediateTensorInfo(complexInfo);
  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);
  cpuBackend.disposeIntermediateTensorInfo(addPart);
  cpuBackend.disposeIntermediateTensorInfo(subPart);
  cpuBackend.disposeIntermediateTensorInfo(addPartReal);
  cpuBackend.disposeIntermediateTensorInfo(addPartImag);
  cpuBackend.disposeIntermediateTensorInfo(subPartReal);
  cpuBackend.disposeIntermediateTensorInfo(subPartImag);
  cpuBackend.disposeIntermediateTensorInfo($real);
  cpuBackend.disposeIntermediateTensorInfo($imag);
  return {
    real: $realVals,
    imag: $imagVals
  };
}
// Calculate fourier transform by multplying sinusoid matrix.
function fourierTransformByMatmul(data, size, inverse) {
  const ret = new Float32Array(size * 2);
  // TODO: Use matmul instead once it supports complex64 type.
  for (let r = 0; r < size; r++) {
    let real = 0.0;
    let imag = 0.0;
    for (let c = 0; c < size; c++) {
      const e = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.exponent(r * c, size, inverse);
      const term = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getComplexWithIndex(data, c);
      real += term.real * e.real - term.imag * e.imag;
      imag += term.real * e.imag + term.imag * e.real;
    }
    if (inverse) {
      real /= size;
      imag /= size;
    }
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assignToTypedArray(ret, real, imag, r);
  }
  return ret;
}

/***/ }),

/***/ 5274:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/fused_utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyActivation": () => (/* binding */ applyActivation)
/* harmony export */ });
/* harmony import */ var _kernels_Elu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernels/Elu */ 28787);
/* harmony import */ var _kernels_Identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernels/Identity */ 98750);
/* harmony import */ var _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernels/LeakyRelu */ 53173);
/* harmony import */ var _kernels_Prelu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernels/Prelu */ 22042);
/* harmony import */ var _kernels_Relu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Relu */ 22279);
/* harmony import */ var _kernels_Relu6__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernels/Relu6 */ 59805);
/* harmony import */ var _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernels/Sigmoid */ 2167);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







function applyActivation(backend, x, activation, preluActivationWeights, leakyreluAlpha) {
  if (activation === 'linear') {
    return (0,_kernels_Identity__WEBPACK_IMPORTED_MODULE_0__.identity)({
      inputs: {
        x
      },
      backend
    });
  } else if (activation === 'relu') {
    return (0,_kernels_Relu__WEBPACK_IMPORTED_MODULE_1__.relu)({
      inputs: {
        x
      },
      backend
    });
  } else if (activation === 'elu') {
    return (0,_kernels_Elu__WEBPACK_IMPORTED_MODULE_2__.elu)({
      inputs: {
        x
      },
      backend
    });
  } else if (activation === 'relu6') {
    return (0,_kernels_Relu6__WEBPACK_IMPORTED_MODULE_3__.relu6)({
      inputs: {
        x
      },
      backend
    });
  } else if (activation === 'prelu') {
    return (0,_kernels_Prelu__WEBPACK_IMPORTED_MODULE_4__.prelu)({
      inputs: {
        x,
        alpha: preluActivationWeights
      },
      backend
    });
  } else if (activation === 'leakyrelu') {
    return (0,_kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_5__.leakyRelu)({
      inputs: {
        x
      },
      backend,
      attrs: {
        alpha: leakyreluAlpha
      }
    });
  } else if (activation === 'sigmoid') {
    return (0,_kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_6__.sigmoid)({
      inputs: {
        x
      },
      backend
    });
  }
  throw new Error(`Activation ${activation} has not been implemented for the CPU backend.`);
}

/***/ }),

/***/ 15062:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/pool_utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3dPositions": () => (/* binding */ maxPool3dPositions),
/* harmony export */   "maxPoolPositions": () => (/* binding */ maxPoolPositions),
/* harmony export */   "pool": () => (/* binding */ pool),
/* harmony export */   "pool3d": () => (/* binding */ pool3d)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function pool(xValues, xShape, dtype, strides, convInfo, poolType) {
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padTop = convInfo.padInfo.top;
  const padLeft = convInfo.padInfo.left;
  const initialValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
  const output = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(convInfo.outShape, dtype);
  const outputVals = output.values;
  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];
  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];
  const outputColStrides = convInfo.outShape[3];
  for (let b = 0; b < convInfo.batchSize; ++b) {
    const outputBatchOffset = b * outputBatchStrides;
    const inputBatchOffset = b * strides[0];
    for (let d = 0; d < convInfo.inChannels; ++d) {
      for (let yR = 0; yR < convInfo.outHeight; ++yR) {
        const xRCorner = yR * strideHeight - padTop;
        const xRMin = Math.max(0, xRCorner);
        const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;
        for (let yC = 0; yC < convInfo.outWidth; ++yC) {
          const xCCorner = yC * strideWidth - padLeft;
          const xCMin = Math.max(0, xCCorner);
          const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
          let minMaxValue = initialValue;
          let avgValue = 0;
          let count = 0;
          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {
            const xROffset = inputBatchOffset + xR * strides[1];
            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {
              const xCOffset = xROffset + xC * strides[2];
              const pixel = xValues[xCOffset + d];
              if (poolType === 'max' && pixel > minMaxValue) {
                minMaxValue = pixel;
              } else if (poolType === 'avg') {
                avgValue += pixel;
                count++;
              }
            }
            if (isNaN(minMaxValue)) {
              break;
            }
          }
          const outputOffset = outputRowOffset + yC * outputColStrides + d;
          outputVals[outputOffset] = poolType === 'avg' ? avgValue / count : minMaxValue;
        }
      }
    }
  }
  return output;
}
function maxPoolPositions(xValues, xShape, dtype, convInfo, flattenPositions = false, includeBatchInIndex = false) {
  const maxPositions = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(convInfo.outShape, 'int32');
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padTop = convInfo.padInfo.top;
  const padLeft = convInfo.padInfo.left;
  const xBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(xShape, dtype, xValues);
  for (let b = 0; b < convInfo.batchSize; ++b) {
    for (let d = 0; d < convInfo.inChannels; ++d) {
      for (let yR = 0; yR < convInfo.outHeight; ++yR) {
        const xRCorner = yR * strideHeight - padTop;
        let xRMin = xRCorner;
        while (xRMin < 0) {
          xRMin += dilationHeight;
        }
        // const xRMin = Math.max(0, xRCorner);
        const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);
        for (let yC = 0; yC < convInfo.outWidth; ++yC) {
          const xCCorner = yC * strideWidth - padLeft;
          let xCMin = xCCorner;
          while (xCMin < 0) {
            xCMin += dilationWidth;
          }
          const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);
          let maxValue = Number.NEGATIVE_INFINITY;
          let maxPosition = -1;
          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {
            const wR = xR - xRCorner;
            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {
              const wC = xC - xCCorner;
              // For some reason, disable-next-line is not working
              // TODO(mattsoulanille): Remove this when switching to TS5.
              /* tslint:disable: no-unnecessary-type-assertion */
              const pixel = xBuf.get(b, xR, xC, d);
              if (pixel > maxValue) {
                maxValue = pixel;
                if (flattenPositions) {
                  maxPosition = includeBatchInIndex ? ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) * convInfo.inChannels + d : (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;
                } else {
                  maxPosition = wR * effectiveFilterWidth + wC;
                }
              }
            }
          }
          maxPositions.set(maxPosition, b, yR, yC, d);
        }
      }
    }
  }
  return maxPositions;
}
function pool3d(xValues, xShape, dtype, strides, convInfo, poolType) {
  const strideDepth = convInfo.strideDepth;
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const dilationDepth = convInfo.dilationDepth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterDepth = convInfo.effectiveFilterDepth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padFront = convInfo.padInfo.front;
  const padTop = convInfo.padInfo.top;
  const padLeft = convInfo.padInfo.left;
  const initialValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
  const output = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(convInfo.outShape, dtype);
  const outputVals = output.values;
  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];
  const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];
  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];
  const outputColStrides = convInfo.outShape[4];
  for (let batch = 0; batch < convInfo.batchSize; ++batch) {
    const outputBatchOffset = batch * outputBatchStrides;
    const inputBatchOffset = batch * strides[0];
    for (let channel = 0; channel < convInfo.inChannels; ++channel) {
      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {
        const xDepthCorner = yDepth * strideDepth - padFront;
        let xDepthMin = xDepthCorner;
        while (xDepthMin < 0) {
          xDepthMin += dilationDepth;
        }
        const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
        const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;
        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {
          const xRowCorner = yRow * strideHeight - padTop;
          let xRowMin = xRowCorner;
          while (xRowMin < 0) {
            xRowMin += dilationHeight;
          }
          const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;
          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {
            const xColCorner = yCol * strideWidth - padLeft;
            let xColMin = xColCorner;
            while (xColMin < 0) {
              xColMin += dilationWidth;
            }
            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
            // Shader code begins
            const outputColOffset = outputRowOffset + yCol * outputColStrides;
            let minMaxValue = initialValue;
            let avgValue = 0;
            let count = 0;
            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {
              const xDepthOffset = inputBatchOffset + xDepth * strides[1];
              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {
                const xRowOffset = xDepthOffset + xRow * strides[2];
                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {
                  const xColOffset = xRowOffset + xCol * strides[3];
                  const pixel = xValues[xColOffset + channel];
                  if (poolType === 'max' && pixel > minMaxValue) {
                    minMaxValue = pixel;
                  } else if (poolType === 'avg') {
                    avgValue += pixel;
                    count++;
                  }
                  if (isNaN(minMaxValue)) {
                    break;
                  }
                }
                if (isNaN(minMaxValue)) {
                  break;
                }
              }
              if (isNaN(minMaxValue)) {
                break;
              }
            }
            const outputOffset = outputColOffset + channel;
            outputVals[outputOffset] = poolType === 'avg' ? avgValue / Math.max(count, 1) : minMaxValue;
          }
        }
      }
    }
  }
  return output;
}
function maxPool3dPositions(xBuf, convInfo) {
  const maxPositions = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(convInfo.outShape, 'int32');
  const strideDepth = convInfo.strideDepth;
  const strideHeight = convInfo.strideHeight;
  const strideWidth = convInfo.strideWidth;
  const dilationDepth = convInfo.dilationDepth;
  const dilationHeight = convInfo.dilationHeight;
  const dilationWidth = convInfo.dilationWidth;
  const effectiveFilterDepth = convInfo.effectiveFilterDepth;
  const effectiveFilterHeight = convInfo.effectiveFilterHeight;
  const effectiveFilterWidth = convInfo.effectiveFilterWidth;
  const padFront = convInfo.padInfo.front;
  const padTop = convInfo.padInfo.top;
  const padLeft = convInfo.padInfo.left;
  for (let batch = 0; batch < convInfo.batchSize; ++batch) {
    for (let channel = 0; channel < convInfo.inChannels; ++channel) {
      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {
        const xDepthCorner = yDepth * strideDepth - padFront;
        let xDepthMin = xDepthCorner;
        while (xDepthMin < 0) {
          xDepthMin += dilationDepth;
        }
        const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);
        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {
          const xRowCorner = yRow * strideHeight - padTop;
          let xRowMin = xRowCorner;
          while (xRowMin < 0) {
            xRowMin += dilationHeight;
          }
          const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);
          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {
            const xColCorner = yCol * strideWidth - padLeft;
            let xColMin = xColCorner;
            while (xColMin < 0) {
              xColMin += dilationWidth;
            }
            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);
            // Shader code begins
            let maxValue = Number.NEGATIVE_INFINITY;
            let maxPosition = -1;
            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {
              const wDepth = xDepth - xDepthCorner;
              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {
                const wRow = xRow - xRowCorner;
                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {
                  const wCol = xCol - xColCorner;
                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);
                  if (pixel >= maxValue) {
                    maxValue = pixel;
                    maxPosition = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterHeight + wCol;
                  }
                }
              }
            }
            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);
          }
        }
      }
    }
  }
  return maxPositions;
}

/***/ }),

/***/ 32421:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSimpleUnaryImpl": () => (/* binding */ createSimpleUnaryImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Template that creates implementation for unary op.
 */
function createSimpleUnaryImpl(op) {
  return (values, dtype, attrs) => {
    const newValues = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(dtype, values.length);
    for (let i = 0; i < values.length; ++i) {
      newValues[i] = op(values[i], attrs);
    }
    return newValues;
  };
}

/***/ }),

/***/ 93138:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unaryKernelFunc": () => (/* binding */ unaryKernelFunc),
/* harmony export */   "unaryKernelFuncFromImpl": () => (/* binding */ unaryKernelFuncFromImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cpu_util */ 27950);
/* harmony import */ var _unary_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unary_impl */ 32421);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Template that creates a `KernelFunc` for unary ops.
 * @param name Kernel name.
 * @param op A `SimpleUnaryOperation` for the kernel.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */
function unaryKernelFunc(name, op, dtype) {
  const impl = (0,_unary_impl__WEBPACK_IMPORTED_MODULE_1__.createSimpleUnaryImpl)(op);
  return unaryKernelFuncFromImpl(name, impl, dtype);
}
/**
 * Template that creates a `KernelFunc` for unary ops from the given
 * `SimpleUnaryImpl`..
 * @param name Kernel name.
 * @param unaryImpl A `SimpleUnaryImpl` that implements the op.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the input. This is mainly used in certain
 *     kernels that return bool type, such as isFinite, isInf, etc.
 */
function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {
  return ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    (0,_cpu_util__WEBPACK_IMPORTED_MODULE_2__.assertNotComplex)(x, name);
    const cpuBackend = backend;
    const values = cpuBackend.data.get(x.dataId).values;
    let decoded;
    if (x.dtype === 'string') {
      if (!Array.isArray(values)) {
        throw new Error('String tensor\'s value was not an instance of Array');
      }
      decoded = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(values);
    } else {
      decoded = values;
    }
    const $dtype = dtype || x.dtype;
    const newValues = unaryImpl(decoded, $dtype, attrs);
    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);
  };
}

/***/ }),

/***/ 87771:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zeros": () => (/* binding */ zeros)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Complex */ 50311);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Generates a tensorInfo with all zeros value.
 * @param backend cpu backend.
 * @param shape Shape for the zeros tensor.
 * @param dtype Optional. If set, the result has this dtype.
 */
function zeros(backend, shape, dtype = 'float32') {
  if (dtype === 'complex64') {
    const real = zeros(backend, shape, 'float32');
    const imag = zeros(backend, shape, 'float32');
    return (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_1__.complex)({
      inputs: {
        real,
        imag
      },
      backend
    });
  }
  const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.makeZerosTypedArray(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape), dtype);
  return backend.makeTensorInfo(shape, dtype, values);
}

/***/ }),

/***/ 81715:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-cpu/dist/version.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '4.5.0';


/***/ }),

/***/ 1011:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddNProgram": () => (/* binding */ AddNProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNProgram {
  constructor(outputShape, shapes) {
    this.outputShape = [];
    this.outputShape = outputShape;
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const snippets = [];
    // Get target elements from every input tensor.
    this.variableNames.forEach(variable => {
      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);
    });
    // Calculate the sum of all elements.
    const operation = this.variableNames.map(variable => {
      return `v${variable}`;
    }).join(' + ');
    this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        float result = ${operation};
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 97939:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddNPackedProgram": () => (/* binding */ AddNPackedProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AddNPackedProgram {
  constructor(outputShape, shapes) {
    this.outputShape = [];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const snippets = [];
    // Get target elements from every input tensor.
    this.variableNames.forEach(variable => {
      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);
    });
    // Calculate the sum of all elements.
    const operation = this.variableNames.map(variable => {
      return `v${variable}`;
    }).join(' + ');
    this.userCode = `
      void main() {
        ${snippets.join('\n        ')}

        vec4 result = ${operation};
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 70495:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArgMinMaxProgram": () => (/* binding */ ArgMinMaxProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ArgMinMaxProgram {
  constructor(reduceInfo, op, firstPass) {
    this.variableNames = ['A'];
    const {
      windowSize,
      batchSize,
      outSize
    } = reduceInfo;
    if (!firstPass) {
      this.variableNames.push('bestIndicesA');
    }
    this.outputShape = [batchSize, outSize];
    const compOp = op === 'max' ? '>' : '<';
    const indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${windowSize}; i++) {
          int inIdx = ${indexSnippet};
          float candidate = getA(batch, inIdx);
          if (candidate ${compOp} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}

/***/ }),

/***/ 33436:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArgMinMaxPackedProgram": () => (/* binding */ ArgMinMaxPackedProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



class ArgMinMaxPackedProgram {
  constructor(shape, windowSize, op, firstPass) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);
    const inSize = shape[shape.length - 1];
    const outSize = Math.ceil(inSize / windowSize);
    this.outputShape = shape.slice(0, -1);
    if (outSize > 1) {
      this.outputShape.push(outSize);
    }
    if (!firstPass) {
      this.variableNames.push('bestIndicesA');
    }
    const outShape = this.outputShape;
    const rank = outShape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);
    const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('coords', rank);
    let sourceLocSetup;
    let sourceRank;
    if (outSize === 1) {
      sourceRank = rank + 1;
      const sourceLocDType = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(sourceRank);
      sourceLocSetup = `
        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 1]};
        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);
        ++${coords[rank - 2]};
        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 1]};
        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);
        --${coords[rank - 2]};`;
    } else {
      sourceRank = rank;
      sourceLocSetup = `
        ${dtype} sourceLocR = coords;
        ++${coords[rank - 1]};
        ${dtype} sourceLocG = coords;
        ++${coords[rank - 2]};
        ${dtype} sourceLocA = coords;
        --${coords[rank - 1]};
        ${dtype} sourceLocB = coords;
        --${coords[rank - 2]};`;
    }
    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);
    const inChannel = '.' + channels[sourceRank - 1]; // e.g. ".b" for rank 3.
    const intChannels = channels.map(x => 'int ' + x);
    const srcRCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocR', sourceRank - 1).concat('inIdx.r');
    const srcGCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocG', sourceRank - 1).concat('inIdx.g');
    const srcBCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocB', sourceRank - 1).concat('inIdx.b');
    const srcACoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('sourceLocA', sourceRank - 1).concat('inIdx.a');
    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';
    const fetchCandidateIdx = firstPass ? '' : `
          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),
                             getBestIndicesAChannel(${srcGCoords.join()}),
                             getBestIndicesAChannel(${srcBCoords.join()}),
                             getBestIndicesAChannel(${srcACoords.join()})));`;
    const fetchValue = `vec4(
            getAChannel(${srcRCoords.join()}),
            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,
            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;
    const getBestIndicesAChannelSnippet = firstPass ? '' : `
      float getBestIndicesAChannel(${intChannels.join()}) {
        return getChannel(getBestIndicesA(${channels.join()}),
                                          vec2(${channels.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${intChannels.join()}) {
        return getChannel(getA(${channels.join()}),
                               vec2(${channels.slice(-2).join()}));
      }
      ${getBestIndicesAChannelSnippet}
      void main() {
        ${dtype} coords = getOutputCoords();
        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};
        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};
        ${sourceLocSetup}
        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},
          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${fetchValue};

        for (int i = 0; i < ${windowSize}; i++) {
          inIdx = srcIdx;
          ${fetchCandidateIdx}
          vec4 candidate = ${fetchValue};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}

/***/ }),

/***/ 34367:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AvgPool2DBackpropProgram": () => (/* binding */ AvgPool2DBackpropProgram),
/* harmony export */   "AvgPool3DBackpropProgram": () => (/* binding */ AvgPool3DBackpropProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AvgPool2DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const avgMultiplier = 1 / (filterHeight * filterWidth);
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth};
            wC+= ${dilationWidth}) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class AvgPool3DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy'];
    this.outputShape = convInfo.inShape;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float avgMultiplier = float(${avgMultiplier});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}

/***/ }),

/***/ 48488:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EPSILON_FLOAT16": () => (/* binding */ EPSILON_FLOAT16),
/* harmony export */   "EPSILON_FLOAT32": () => (/* binding */ EPSILON_FLOAT32),
/* harmony export */   "MathBackendWebGL": () => (/* binding */ MathBackendWebGL),
/* harmony export */   "getBinaryCache": () => (/* binding */ getBinaryCache)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _flags_webgl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flags_webgl */ 85997);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./canvas_util */ 80186);
/* harmony import */ var _decode_matrix_gpu__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./decode_matrix_gpu */ 51753);
/* harmony import */ var _decode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./decode_matrix_packed_gpu */ 18608);
/* harmony import */ var _encode_float_gpu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./encode_float_gpu */ 96179);
/* harmony import */ var _encode_float_packed_gpu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./encode_float_packed_gpu */ 45322);
/* harmony import */ var _encode_matrix_gpu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./encode_matrix_gpu */ 29735);
/* harmony import */ var _encode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./encode_matrix_packed_gpu */ 41898);
/* harmony import */ var _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gpgpu_context */ 29859);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kernel_utils/shared */ 73505);
/* harmony import */ var _pack_gpu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./pack_gpu */ 91539);
/* harmony import */ var _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./reshape_packed_gpu */ 78043);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tex_util */ 86215);
/* harmony import */ var _texture_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./texture_manager */ 23396);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./unaryop_gpu */ 176);
/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./unaryop_packed_gpu */ 81992);
/* harmony import */ var _unpack_gpu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./unpack_gpu */ 96593);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./webgl_util */ 45181);

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Import webgl flags.























const whereImpl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.kernel_impls.whereImpl;
const EPSILON_FLOAT32 = 1e-7;
const EPSILON_FLOAT16 = 1e-4;
const binaryCaches = {};
function getBinaryCache(webGLVersion) {
  if (webGLVersion in binaryCaches) {
    return binaryCaches[webGLVersion];
  }
  binaryCaches[webGLVersion] = {};
  return binaryCaches[webGLVersion];
}
// Empirically determined constant used to determine size threshold for handing
// off execution to the CPU.
const CPU_HANDOFF_SIZE_THRESHOLD = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');
// Empirically determined constant used to decide the number of MB on GPU
// before we warn about high memory use. The MB are this constant * screen area
// * dpi / 1024 / 1024.
const BEFORE_PAGING_CONSTANT = 600;
function numMBBeforeWarning() {
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().global.screen == null) {
    return 1024; // 1 GB.
  }

  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().global.screen.height * (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;
}
class MathBackendWebGL extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.KernelBackend {
  nextDataId() {
    return MathBackendWebGL.nextDataId++;
  }
  constructor(gpuResource) {
    super();
    // Maps data ids that have a pending read operation, to list of subscribers.
    this.pendingRead = new WeakMap();
    // List of data ids that are scheduled for disposal, but are waiting on a
    // pending read operation.
    this.pendingDisposal = new WeakSet();
    // Used to count the number of 'shallow' sliced tensors that point to the
    // same data id.
    this.dataRefCount = new WeakMap();
    this.numBytesInGPU = 0;
    // Accumulated time spent (including blocking) in uploading data to webgl.
    this.uploadWaitMs = 0;
    // Accumulated time spent (including blocking in downloading data from webgl.
    this.downloadWaitMs = 0;
    // record the last manual GL Flush time.
    this.lastGlFlushTime = 0;
    this.warnedAboutMemory = false;
    this.pendingDeletes = 0;
    this.disposed = false;
    if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('HAS_WEBGL')) {
      throw new Error('WebGL is not supported on this device');
    }
    let newGPGPU;
    if (gpuResource != null) {
      if (gpuResource instanceof _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext) {
        newGPGPU = gpuResource;
      } else {
        const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_4__.getWebGLContext)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_VERSION'), gpuResource);
        newGPGPU = new _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext(gl);
      }
      this.binaryCache = {};
      this.gpgpuCreatedLocally = false;
    } else {
      const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_4__.getWebGLContext)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_VERSION'));
      newGPGPU = new _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext(gl);
      this.binaryCache = getBinaryCache((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_VERSION'));
      this.gpgpuCreatedLocally = true;
    }
    this.gpgpu = newGPGPU;
    this.canvas = this.gpgpu.gl.canvas;
    this.textureManager = new _texture_manager__WEBPACK_IMPORTED_MODULE_5__.TextureManager(this.gpgpu);
    this.numMBBeforeWarning = numMBBeforeWarning();
    this.texData = new _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.DataStorage(this, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)());
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  // Writes a new entry to the data store with a WebGL texture, and registers it
  // to the texture manager.
  writeTexture(texture, shape, dtype, texHeight, texWidth, channels) {
    // Temporarily create an tensor info to make the texture compatible with
    // the runWebGLProgram's input.
    const input = this.makeTensorInfo(shape, dtype);
    const inData = this.texData.get(input.dataId);
    // Even though the input texture could be unpacked or dense packed, it is
    // always considered as unpacked for EncodeMatrixProgram.
    inData.isPacked = false;
    // Bind texture to the input tensor.
    inData.texture = {
      texture,
      texShape: [texHeight, texWidth]
    };
    inData.texShape = [texHeight, texWidth];
    const shapeAs3D = _webgl_util__WEBPACK_IMPORTED_MODULE_6__.getShapeAs3D(shape);
    const program = new _encode_matrix_gpu__WEBPACK_IMPORTED_MODULE_7__.EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);
    const output = this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);
    output.shape = shape;
    // Unbind the texture from the input tensor to avoid the texture being
    // released.
    inData.texture = null;
    this.disposeIntermediateTensorInfo(input);
    return output.dataId;
  }
  write(values, shape, dtype) {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('DEBUG')) {
      this.checkNumericalProblems(values);
    }
    if (dtype === 'complex64' && values != null) {
      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
    }
    const dataId = {
      id: this.nextDataId()
    };
    this.texData.set(dataId, {
      shape,
      dtype,
      values,
      usage: _tex_util__WEBPACK_IMPORTED_MODULE_8__.TextureUsage.UPLOAD,
      refCount: 1
    });
    return dataId;
  }
  /** Return refCount of a `TensorData`. */
  refCount(dataId) {
    if (this.texData.has(dataId)) {
      const tensorData = this.texData.get(dataId);
      return tensorData.refCount;
    }
    return 0;
  }
  /** Increase refCount of a `TextureData`. */
  incRef(dataId) {
    const texData = this.texData.get(dataId);
    texData.refCount++;
  }
  /** Decrease refCount of a `TextureData`. */
  decRef(dataId) {
    if (this.texData.has(dataId)) {
      const texData = this.texData.get(dataId);
      texData.refCount--;
    }
  }
  move(dataId, values, shape, dtype, refCount) {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('DEBUG')) {
      this.checkNumericalProblems(values);
    }
    if (dtype === 'complex64') {
      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);
    }
    this.texData.set(dataId, {
      shape,
      dtype,
      values,
      usage: _tex_util__WEBPACK_IMPORTED_MODULE_8__.TextureUsage.UPLOAD,
      refCount
    });
  }
  disposeIntermediateTensorInfo(tensorInfo) {
    this.disposeData(tensorInfo.dataId);
  }
  readSync(dataId) {
    const texData = this.texData.get(dataId);
    const {
      values,
      dtype,
      complexTensorInfos,
      slice,
      shape,
      isPacked
    } = texData;
    // The presence of `slice` indicates this tensor is a shallow slice of a
    // different tensor, and is using that original tensor's texture. Run
    // `clone` in order to copy that texture and read from it.
    if (slice != null) {
      let program;
      if (isPacked) {
        program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_9__.UnaryOpPackedProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.CLONE);
      } else {
        program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.UnaryOpProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.CLONE);
      }
      const res = this.runWebGLProgram(program, [{
        dataId,
        shape,
        dtype
      }], dtype);
      const data = this.readSync(res.dataId);
      this.disposeIntermediateTensorInfo(res);
      return data;
    }
    if (values != null) {
      return this.convertAndCacheOnCPU(dataId);
    }
    if (dtype === 'string') {
      return values;
    }
    const shouldTimeProgram = this.activeTimers != null;
    let start;
    if (shouldTimeProgram) {
      start = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.now();
    }
    let result;
    if (dtype === 'complex64') {
      const realValues = this.readSync(complexTensorInfos.real.dataId);
      const imagValues = this.readSync(complexTensorInfos.imag.dataId);
      result = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.backend_util.mergeRealAndImagArrays(realValues, imagValues);
    } else {
      result = this.getValuesFromTexture(dataId);
    }
    if (shouldTimeProgram) {
      this.downloadWaitMs += _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.now() - start;
    }
    return this.convertAndCacheOnCPU(dataId, result);
  }
  read(dataId) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this.pendingRead.has(dataId)) {
        const subscribers = _this.pendingRead.get(dataId);
        return new Promise(resolve => subscribers.push(resolve));
      }
      const texData = _this.texData.get(dataId);
      const {
        values,
        shape,
        slice,
        dtype,
        complexTensorInfos,
        isPacked
      } = texData;
      // The presence of `slice` indicates this tensor is a shallow slice of a
      // different tensor, and is using that original tensor's texture. Run
      // `clone` in order to copy that texture and read from it.
      if (slice != null) {
        let program;
        if (isPacked) {
          program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_9__.UnaryOpPackedProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.CLONE);
        } else {
          program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.UnaryOpProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.CLONE);
        }
        const res = _this.runWebGLProgram(program, [{
          dataId,
          shape,
          dtype
        }], dtype);
        const data = _this.read(res.dataId);
        _this.disposeIntermediateTensorInfo(res);
        return data;
      }
      if (values != null) {
        return _this.convertAndCacheOnCPU(dataId);
      }
      if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('DEBUG')) {
        // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.
        // For performance reason, only check it for debugging. In production,
        // it doesn't handle this use case anyway, so behavior is not changed.
        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_VERSION') === 2) {
          throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);
        }
      }
      let buffer = null;
      let tmpDownloadTarget;
      if (dtype !== 'complex64' && (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().get('WEBGL_BUFFER_SUPPORTED')) {
        // Possibly copy the texture into a buffer before inserting a fence.
        tmpDownloadTarget = _this.decode(dataId);
        const tmpData = _this.texData.get(tmpDownloadTarget.dataId);
        buffer = _this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ..._tex_util__WEBPACK_IMPORTED_MODULE_8__.getDenseTexShape(shape));
      }
      _this.pendingRead.set(dataId, []);
      if (dtype !== 'complex64') {
        // Create a fence and wait for it to resolve.
        yield _this.gpgpu.createAndWaitForFence();
      }
      // Download the values from the GPU.
      let vals;
      if (dtype === 'complex64') {
        const ps = yield Promise.all([_this.read(complexTensorInfos.real.dataId), _this.read(complexTensorInfos.imag.dataId)]);
        const realValues = ps[0];
        const imagValues = ps[1];
        vals = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.backend_util.mergeRealAndImagArrays(realValues, imagValues);
      } else if (buffer == null) {
        vals = _this.getValuesFromTexture(dataId);
      } else {
        const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.sizeFromShape(shape);
        vals = _this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);
      }
      if (tmpDownloadTarget != null) {
        _this.disposeIntermediateTensorInfo(tmpDownloadTarget);
      }
      if (buffer != null) {
        const gl = _this.gpgpu.gl;
        _webgl_util__WEBPACK_IMPORTED_MODULE_6__.callAndCheck(gl, () => gl.deleteBuffer(buffer));
      }
      const dTypeVals = _this.convertAndCacheOnCPU(dataId, vals);
      const subscribers = _this.pendingRead.get(dataId);
      _this.pendingRead.delete(dataId);
      // Notify all pending reads.
      subscribers.forEach(resolve => resolve(dTypeVals));
      if (_this.pendingDisposal.has(dataId)) {
        _this.pendingDisposal.delete(dataId);
        if (_this.disposeData(dataId)) {
          (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)().removeDataId(dataId, _this);
        }
        _this.pendingDeletes--;
      }
      return dTypeVals;
    })();
  }
  /**
   * Read tensor to a new texture that is densely packed for ease of use.
   * @param dataId The source tensor.
   * @param options
   *     customTexShape: Optional. If set, will use the user defined texture
   *     shape to create the texture.
   */
  readToGPU(dataId, options = {}) {
    const texData = this.texData.get(dataId);
    const {
      values,
      shape,
      slice,
      dtype,
      isPacked,
      texture
    } = texData;
    if (dtype === 'complex64') {
      throw new Error('Does not support reading texture for complex64 dtype.');
    }
    // The presence of `slice` indicates this tensor is a shallow slice of a
    // different tensor, and is using that original tensor's texture. Run
    // `clone` in order to copy that texture and read from it.
    if (slice != null) {
      let program;
      if (isPacked) {
        program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_9__.UnaryOpPackedProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.CLONE);
      } else {
        program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.UnaryOpProgram(shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.CLONE);
      }
      const res = this.runWebGLProgram(program, [{
        dataId,
        shape,
        dtype
      }], dtype);
      const gpuResouorce = this.readToGPU(res, options);
      this.disposeIntermediateTensorInfo(res);
      return gpuResouorce;
    }
    if (texture == null) {
      if (values != null) {
        throw new Error('Data is not on GPU but on CPU.');
      } else {
        throw new Error('There is no data on GPU or CPU.');
      }
    }
    // Decode the texture so that it is stored densely (using four channels).
    const tmpTarget = this.decode(dataId, options.customTexShape);
    // Make engine track this tensor, so that we can dispose it later.
    const tensorRef = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)().makeTensorFromTensorInfo(tmpTarget);
    const tmpData = this.texData.get(tmpTarget.dataId);
    return Object.assign({
      tensorRef
    }, tmpData.texture);
  }
  bufferSync(t) {
    const data = this.readSync(t.dataId);
    if (t.dtype === 'string') {
      try {
        // Decode the bytes into string.
        const strings = data.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.decodeString(d));
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.buffer)(t.shape, t.dtype, strings);
      } catch (_a) {
        throw new Error('Failed to decode encoded string bytes into utf-8');
      }
    }
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.buffer)(t.shape, t.dtype, data);
  }
  checkNumericalProblems(values) {
    if (values == null) {
      return;
    }
    for (let i = 0; i < values.length; i++) {
      const num = values[i];
      if (!_webgl_util__WEBPACK_IMPORTED_MODULE_6__.canBeRepresented(num)) {
        if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {
          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);
        }
        throw Error(`The value ${num} cannot be represented on this device.`);
      }
    }
  }
  getValuesFromTexture(dataId) {
    const {
      shape,
      dtype,
      isPacked
    } = this.texData.get(dataId);
    const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.sizeFromShape(shape);
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {
      const tmpTarget = this.decode(dataId);
      const tmpData = this.texData.get(tmpTarget.dataId);
      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture.texture, ..._tex_util__WEBPACK_IMPORTED_MODULE_8__.getDenseTexShape(shape)).subarray(0, size);
      this.disposeIntermediateTensorInfo(tmpTarget);
      return vals;
    }
    const shouldUsePackedProgram = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_PACK') && isPacked === true;
    const outputShape = shouldUsePackedProgram ? _webgl_util__WEBPACK_IMPORTED_MODULE_6__.getShapeAs3D(shape) : shape;
    const program = shouldUsePackedProgram ? new _encode_float_packed_gpu__WEBPACK_IMPORTED_MODULE_11__.EncodeFloatPackedProgram(outputShape) : new _encode_float_gpu__WEBPACK_IMPORTED_MODULE_12__.EncodeFloatProgram(outputShape);
    const output = this.runWebGLProgram(program, [{
      shape: outputShape,
      dtype,
      dataId
    }], 'float32');
    const tmpData = this.texData.get(output.dataId);
    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);
    this.disposeIntermediateTensorInfo(output);
    return vals;
  }
  timerAvailable() {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;
  }
  time(f) {
    var _this2 = this;
    const oldActiveTimers = this.activeTimers;
    const newActiveTimers = [];
    let outerMostTime = false;
    if (this.programTimersStack == null) {
      this.programTimersStack = newActiveTimers;
      outerMostTime = true;
    } else {
      this.activeTimers.push(newActiveTimers);
    }
    this.activeTimers = newActiveTimers;
    f();
    // needing to split these up because util.flatten only accepts certain types
    const flattenedActiveTimerQueries = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);
    const flattenedActiveTimerNames = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);
    this.activeTimers = oldActiveTimers;
    if (outerMostTime) {
      this.programTimersStack = null;
    }
    const res = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null // will be filled by the engine
    };

    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
        const kernelMs = yield Promise.all(flattenedActiveTimerQueries);
        res['kernelMs'] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.sum(kernelMs);
        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({
          name: flattenedActiveTimerNames[i],
          ms: d
        })).map(d => `${d.name}: ${d.ms}`).join(', ');
      } else {
        res['kernelMs'] = {
          error: 'WebGL query timers are not supported in this environment.'
        };
      }
      _this2.uploadWaitMs = 0;
      _this2.downloadWaitMs = 0;
      return res;
    })();
  }
  memory() {
    return {
      unreliable: false,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }
  startTimer() {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      return this.gpgpu.beginQuery();
    }
    return {
      startMs: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.now(),
      endMs: null
    };
  }
  endTimer(query) {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
      this.gpgpu.endQuery();
      return query;
    }
    query.endMs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.now();
    return query;
  }
  getQueryTime(query) {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {
        return _this3.gpgpu.waitForQueryAndGetTime(query);
      }
      const timerQuery = query;
      return timerQuery.endMs - timerQuery.startMs;
    })();
  }
  /**
   * Decrease the RefCount on the dataId and dispose the memory if the dataId
   * has 0 refCount. If there are pending read on the data, the disposal would
   * added to the pending delete queue. Return true if the dataId is removed
   * from backend or the backend does not contain the dataId, false if the
   * dataId is not removed. Memory may or may not be released even when dataId
   * is removed, which also depends on dataRefCount, see `releaseGPU`.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(dataId, force = false) {
    if (this.pendingDisposal.has(dataId)) {
      return false;
    }
    // No-op if already disposed.
    if (!this.texData.has(dataId)) {
      return true;
    }
    // if force flag is set, change refCount to 0, this would ensure disposal
    // when added to the pendingDisposal queue. Memory may or may not be
    // released, which also depends on dataRefCount, see `releaseGPU`.
    if (force) {
      this.texData.get(dataId).refCount = 0;
    } else {
      this.texData.get(dataId).refCount--;
    }
    if (!force && this.texData.get(dataId).refCount > 0) {
      return false;
    }
    if (this.pendingRead.has(dataId)) {
      this.pendingDisposal.add(dataId);
      this.pendingDeletes++;
      return false;
    }
    this.releaseGPUData(dataId);
    const {
      complexTensorInfos
    } = this.texData.get(dataId);
    if (complexTensorInfos != null) {
      this.disposeData(complexTensorInfos.real.dataId, force);
      this.disposeData(complexTensorInfos.imag.dataId, force);
    }
    this.texData.delete(dataId);
    return true;
  }
  releaseGPUData(dataId) {
    const {
      texture,
      dtype,
      texShape,
      usage,
      isPacked,
      slice
    } = this.texData.get(dataId);
    const key = slice && slice.origDataId || dataId;
    const refCount = this.dataRefCount.get(key);
    if (refCount > 1) {
      this.dataRefCount.set(key, refCount - 1);
    } else {
      this.dataRefCount.delete(key);
      if (texture != null) {
        this.numBytesInGPU -= this.computeBytes(texShape, dtype);
        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);
      }
    }
    const texData = this.texData.get(dataId);
    texData.texture = null;
    texData.texShape = null;
    texData.isPacked = false;
    texData.slice = null;
  }
  getTexture(dataId) {
    this.uploadToGPU(dataId);
    return this.texData.get(dataId).texture.texture;
  }
  /**
   * Returns internal information for the specific data bucket. Used in unit
   * tests.
   */
  getDataInfo(dataId) {
    return this.texData.get(dataId);
  }
  /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */
  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.sizeFromShape(input.shape) < sizeThreshold);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(condition) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');
    const condVals = condition.dataSync();
    return whereImpl(condition.shape, condVals);
  }
  packedUnaryOp(x, op, dtype) {
    const program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_9__.UnaryOpPackedProgram(x.shape, op);
    const outInfo = this.compileAndRun(program, [x], dtype);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)().makeTensorFromTensorInfo(outInfo);
  }
  // TODO(msoulanille) remove this once the backend has been modularized
  // a copy is needed here to break a circular dependency.
  // Also remove the op from unary_op.
  abs(x) {
    // TODO: handle cases when x is complex.
    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {
      const outValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_13__.simpleAbsImplCPU)(this.texData.get(x.dataId).values);
      return this.makeOutput(x.shape, x.dtype, outValues);
    }
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
      return this.packedUnaryOp(x, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.ABS, x.dtype);
    }
    const program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.UnaryOpProgram(x.shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_10__.ABS);
    const outInfo = this.compileAndRun(program, [x]);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)().makeTensorFromTensorInfo(outInfo);
  }
  makeTensorInfo(shape, dtype, values) {
    let dataId;
    if (dtype === 'string' && values != null && values.length > 0 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.isString(values[0])) {
      const encodedValues = values.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.encodeString(d));
      dataId = this.write(encodedValues, shape, dtype);
    } else {
      dataId = this.write(values, shape, dtype);
    }
    this.texData.get(dataId).usage = null;
    return {
      dataId,
      shape,
      dtype
    };
  }
  makeOutput(shape, dtype, values) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);
  }
  unpackTensor(input) {
    const program = new _unpack_gpu__WEBPACK_IMPORTED_MODULE_14__.UnpackProgram(input.shape);
    return this.runWebGLProgram(program, [input], input.dtype);
  }
  packTensor(input) {
    const program = new _pack_gpu__WEBPACK_IMPORTED_MODULE_15__.PackProgram(input.shape);
    const preventEagerUnpackingOutput = true;
    return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);
  }
  packedReshape(input, afterShape) {
    const input3DShape = [_webgl_util__WEBPACK_IMPORTED_MODULE_6__.getBatchDim(input.shape), ..._webgl_util__WEBPACK_IMPORTED_MODULE_6__.getRowsCols(input.shape)];
    const input3D = {
      dtype: input.dtype,
      shape: input3DShape,
      dataId: input.dataId
    };
    const afterShapeAs3D = [_webgl_util__WEBPACK_IMPORTED_MODULE_6__.getBatchDim(afterShape), ..._webgl_util__WEBPACK_IMPORTED_MODULE_6__.getRowsCols(afterShape)];
    const program = new _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_16__.ReshapePackedProgram(afterShapeAs3D, input3DShape);
    const preventEagerUnpackingOfOutput = true;
    const customValues = [input3DShape];
    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);
    return {
      dataId: output.dataId,
      shape: afterShape,
      dtype: output.dtype
    };
  }
  decode(dataId, customTexShape) {
    const texData = this.texData.get(dataId);
    const {
      isPacked,
      shape,
      dtype
    } = texData;
    if (customTexShape != null) {
      const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.sizeFromShape(shape);
      const texSize = customTexShape[0] * customTexShape[1] * 4;
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.assert(size <= texSize, () => 'customTexShape is too small. ' + 'Row * Column * 4 should be equal or larger than the ' + 'size of the tensor data.');
    }
    const shapeAs3D = _webgl_util__WEBPACK_IMPORTED_MODULE_6__.getShapeAs3D(shape);
    let program;
    if (isPacked) {
      program = new _decode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_17__.DecodeMatrixPackedProgram(shapeAs3D);
    } else {
      program = new _decode_matrix_gpu__WEBPACK_IMPORTED_MODULE_18__.DecodeMatrixProgram(shapeAs3D);
    }
    const preventEagerUnpackingOfOutput = true;
    const customValues = [customTexShape != null ? customTexShape : _tex_util__WEBPACK_IMPORTED_MODULE_8__.getDenseTexShape(shapeAs3D)];
    const out = this.runWebGLProgram(program, [{
      shape: shapeAs3D,
      dtype,
      dataId
    }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);
    return {
      dtype,
      shape,
      dataId: out.dataId
    };
  }
  runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {
    const output = this.makeTensorInfo(program.outputShape, outputDtype);
    const outData = this.texData.get(output.dataId);
    if (program.packedOutput) {
      outData.isPacked = true;
    }
    if (program.outPackingScheme === _tex_util__WEBPACK_IMPORTED_MODULE_8__.PackingScheme.DENSE) {
      const texelShape = customTexShape != null ? customTexShape : _tex_util__WEBPACK_IMPORTED_MODULE_8__.getDenseTexShape(program.outputShape);
      // For a densely packed output, we explicitly set texShape
      // so it doesn't get assigned later according to our typical packing
      // scheme wherein a single texel can only contain values from adjacent
      // rows/cols.
      outData.texShape = texelShape.map(d => d * 2);
    }
    if (program.outTexUsage != null) {
      outData.usage = program.outTexUsage;
    }
    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.sizeFromShape(output.shape) === 0) {
      // Short-circuit the computation since the result is empty (has 0 in its
      // shape).
      outData.values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.getTypedArrayFromDType(output.dtype, 0);
      return output;
    }
    const dataToDispose = [];
    const inputsData = inputs.map(input => {
      if (input.dtype === 'complex64') {
        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);
      }
      let texData = this.texData.get(input.dataId);
      if (texData.texture == null) {
        if (!program.packedInputs && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.sizeFromShape(input.shape) <= (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {
          // Upload small tensors that live on the CPU as uniforms, not as
          // textures. Do this only when the environment supports 32bit floats
          // due to problems when comparing 16bit floats with 32bit floats.
          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it
          // possible for packed shaders to sample from uniforms.
          return {
            shape: input.shape,
            texData: null,
            isUniform: true,
            uniformValues: texData.values
          };
        }
        // This ensures that if a packed program's inputs have not yet been
        // uploaded to the GPU, they get uploaded as packed right off the bat.
        if (program.packedInputs) {
          texData.isPacked = true;
          texData.shape = input.shape;
        }
      }
      this.uploadToGPU(input.dataId);
      if (!!texData.isPacked !== !!program.packedInputs) {
        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);
        dataToDispose.push(input);
        texData = this.texData.get(input.dataId);
      } else if (texData.isPacked && !_webgl_util__WEBPACK_IMPORTED_MODULE_6__.isReshapeFree(texData.shape, input.shape)) {
        // This is a special case where a texture exists for a tensor
        // but the shapes are incompatible (due to packing constraints) because
        // the tensor did not have a chance to go through the packed reshape
        // shader. This only happens when we reshape the *same* tensor to form
        // *distinct* inputs to an op, e.g. dotting a vector with itself. This
        // case will disappear once packed uploading is the default.
        const savedInput = input;
        const targetShape = input.shape;
        input.shape = texData.shape;
        input = this.packedReshape(input, targetShape);
        dataToDispose.push(input);
        texData = this.texData.get(input.dataId);
        savedInput.shape = targetShape;
      }
      return {
        shape: input.shape,
        texData,
        isUniform: false
      };
    });
    this.uploadToGPU(output.dataId);
    const outputData = {
      shape: output.shape,
      texData: outData,
      isUniform: false
    };
    const key = _gpgpu_math__WEBPACK_IMPORTED_MODULE_19__.makeShaderKey(program, inputsData, outputData);
    const binary = this.getAndSaveBinary(key, () => {
      return _gpgpu_math__WEBPACK_IMPORTED_MODULE_19__.compileProgram(this.gpgpu, program, inputsData, outputData);
    });
    const shouldTimeProgram = this.activeTimers != null;
    let query;
    if (shouldTimeProgram) {
      query = this.startTimer();
    }
    if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().get('ENGINE_COMPILE_ONLY')) {
      _gpgpu_math__WEBPACK_IMPORTED_MODULE_19__.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);
    }
    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));
    if (shouldTimeProgram) {
      query = this.endTimer(query);
      this.activeTimers.push({
        name: program.constructor.name,
        query: this.getQueryTime(query)
      });
    }
    const glFlushThreshold = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().get('WEBGL_FLUSH_THRESHOLD');
    // Manually GL flush requested
    if (glFlushThreshold > 0) {
      const time = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.now();
      if (time - this.lastGlFlushTime > glFlushThreshold) {
        this.gpgpu.gl.flush();
        this.lastGlFlushTime = time;
      }
    }
    if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {
      const unpacked = this.unpackTensor(output);
      this.disposeIntermediateTensorInfo(output);
      return unpacked;
    }
    return output;
  }
  compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {
    outputDtype = outputDtype || inputs[0].dtype;
    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);
    return outInfo;
  }
  getAndSaveBinary(key, getBinary) {
    if (!(key in this.binaryCache)) {
      this.binaryCache[key] = getBinary();
    }
    return this.binaryCache[key];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    if (this.disposed) {
      return;
    }
    // Avoid disposing the compiled webgl programs during unit testing because
    // it slows down test execution.
    if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('IS_TEST')) {
      const allKeys = Object.keys(this.binaryCache);
      allKeys.forEach(key => {
        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);
        delete this.binaryCache[key];
      });
    }
    this.textureManager.dispose();
    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {
      this.canvas.remove();
    } else {
      this.canvas = null;
    }
    if (this.gpgpuCreatedLocally) {
      this.gpgpu.program = null;
      this.gpgpu.dispose();
    }
    this.disposed = true;
  }
  floatPrecision() {
    if (this.floatPrecisionValue == null) {
      this.floatPrecisionValue = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
        if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().get('WEBGL_RENDER_FLOAT32_ENABLED')) {
          // Momentarily switching DEBUG flag to false so we don't throw an
          // error trying to upload a small value.
          const debugFlag = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('DEBUG');
          (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().set('DEBUG', false);
          const underflowCheckValue = this.abs((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.scalar)(1e-8)).dataSync()[0];
          (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().set('DEBUG', debugFlag);
          if (underflowCheckValue > 0) {
            return 32;
          }
        }
        return 16;
      });
    }
    return this.floatPrecisionValue;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
  }
  uploadToGPU(dataId) {
    const texData = this.texData.get(dataId);
    const {
      shape,
      dtype,
      values,
      texture,
      usage,
      isPacked
    } = texData;
    if (texture != null) {
      // Array is already on GPU. No-op.
      return;
    }
    const shouldTimeProgram = this.activeTimers != null;
    let start;
    if (shouldTimeProgram) {
      start = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.now();
    }
    let texShape = texData.texShape;
    if (texShape == null) {
      // This texShape may not be the final texture shape. For packed or dense
      // textures, the texShape will be changed when textures are created.
      texShape = _webgl_util__WEBPACK_IMPORTED_MODULE_6__.getTextureShapeFromLogicalShape(shape, isPacked);
      texData.texShape = texShape;
    }
    if (values != null) {
      const shapeAs3D = _webgl_util__WEBPACK_IMPORTED_MODULE_6__.getShapeAs3D(shape);
      let program;
      let width = texShape[1],
        height = texShape[0];
      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;
      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we
      // need to make sure the upload uses the same packed size
      if (isPacked || !isByteArray) {
        [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_8__.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);
      }
      if (isPacked) {
        program = new _encode_matrix_packed_gpu__WEBPACK_IMPORTED_MODULE_20__.EncodeMatrixPackedProgram(shapeAs3D, isByteArray);
      } else {
        program = new _encode_matrix_gpu__WEBPACK_IMPORTED_MODULE_7__.EncodeMatrixProgram(shapeAs3D, isByteArray);
      }
      // TexShape for float array needs to be the original shape, which byte
      // array needs to be packed size. This allow the data upload shape to be
      // matched with texture creation logic.
      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;
      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);
      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);
      if (isByteArray) {
        tempDenseInputTexData.usage = _tex_util__WEBPACK_IMPORTED_MODULE_8__.TextureUsage.PIXELS;
      } else {
        tempDenseInputTexData.usage = _tex_util__WEBPACK_IMPORTED_MODULE_8__.TextureUsage.UPLOAD;
      }
      tempDenseInputTexData.texShape = tempDenseInputTexShape;
      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);
      const customValues = [[height, width]];
      // We want the output to remain packed regardless of the value of
      // WEBGL_PACK.
      const preventEagerUnpacking = true;
      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);
      // Have the original texture assume the identity of the encoded output.
      const outputTexData = this.texData.get(encodedOutputTarget.dataId);
      texData.texShape = outputTexData.texShape;
      texData.isPacked = outputTexData.isPacked;
      texData.usage = outputTexData.usage;
      if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.env)().get('ENGINE_COMPILE_ONLY')) {
        texData.texture = outputTexData.texture;
        // Once uploaded, don't store the values on cpu.
        texData.values = null;
        this.texData.delete(encodedOutputTarget.dataId);
      } else {
        this.disposeData(encodedOutputTarget.dataId);
      }
      this.disposeIntermediateTensorInfo(tempDenseInputHandle);
      if (shouldTimeProgram) {
        this.uploadWaitMs += _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.now() - start;
      }
    } else {
      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);
      texData.texture = newTexture;
    }
  }
  convertAndCacheOnCPU(dataId, float32Values) {
    const texData = this.texData.get(dataId);
    const {
      dtype
    } = texData;
    if (float32Values != null) {
      texData.values = float32ToTypedArray(float32Values, dtype);
    }
    return texData.values;
  }
  acquireTexture(texShape, texType, dtype, isPacked) {
    this.numBytesInGPU += this.computeBytes(texShape, dtype);
    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true;
      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(texShape, texType, isPacked);
  }
  computeBytes(shape, dtype) {
    return shape[0] * shape[1] * _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.util.bytesPerElement(dtype);
  }
  checkCompileCompletion() {
    for (const [, binary] of Object.entries(this.binaryCache)) {
      this.checkCompletion_(binary);
    }
  }
  checkCompileCompletionAsync() {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const ps = [];
      if (_this4.gpgpu.parallelCompilationExtension) {
        for (const [, binary] of Object.entries(_this4.binaryCache)) {
          ps.push(_this4.checkCompletionAsync_(binary));
        }
        return Promise.all(ps);
      } else {
        for (const [, binary] of Object.entries(_this4.binaryCache)) {
          const p = new Promise(resolve => {
            try {
              _this4.checkCompletion_(binary);
              resolve(true);
            } catch (error) {
              throw error;
            }
          });
          ps.push(p);
        }
        return Promise.all(ps);
      }
    })();
  }
  checkCompletionAsync_(binary) {
    var _this5 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this5.gpgpu.gl.getProgramParameter(binary.webGLProgram, _this5.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {
        return _this5.checkCompletion_(binary);
      } else {
        yield (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.nextFrame)();
        return _this5.checkCompletionAsync_(binary);
      }
    })();
  }
  checkCompletion_(binary) {
    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {
      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));
      if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {
        _webgl_util__WEBPACK_IMPORTED_MODULE_6__.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));
        throw new Error('Failed to compile fragment shader.');
      }
      throw new Error('Failed to link vertex and fragment shaders.');
    }
    return true;
  }
  getUniformLocations() {
    for (const binary of Object.values(this.binaryCache)) {
      // TODO: Iterating through all binaries to build VAOs is supposed to be in
      // a seperate function, like 'setVaos'. However, to avoid breaking changes
      // for the users using parallel compile feature now, buildVao is silently
      // added here.
      this.gpgpu.buildVao(binary.webGLProgram);
      const {
        variablesLocations,
        customUniformLocations,
        infLoc,
        nanLoc,
        outShapeLocation,
        outShapeStridesLocation,
        outTexShapeLocation
      } = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_19__.getUniformLocations)(this.gpgpu, binary.program, binary.webGLProgram);
      binary.variablesLocations = variablesLocations;
      binary.customUniformLocations = customUniformLocations;
      binary.infLoc = infLoc;
      binary.nanLoc = nanLoc;
      binary.outShapeLocation = outShapeLocation;
      binary.outShapeStridesLocation = outShapeStridesLocation;
      binary.outTexShapeLocation = outTexShapeLocation;
    }
  }
  /**
   * Create a TF.js tensor out of an existing WebGL texture. A new texture will
   * be created.
   */
  createTensorFromGPUData(values, shape, dtype) {
    values.channels = values.channels || 'RGBA';
    const {
      texture,
      height,
      width,
      channels
    } = values;
    const backend = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)().backend;
    // Have to throw an error, otherwise WebGL just warns and returns wrong
    // values.
    if (!backend.gpgpu.gl.isTexture(texture)) {
      throw new Error(`The texture is invalid. Also, please make sure the texture and ` + `the TFJS WebGL backend are using the same canvas. If you want to ` + `use your own custom canvas, you have to create and use the custom ` + `TFJS WebGL backend created from the canvas through ` + `'new tf.MathBackendWebGL(customCanvas)'.`);
    }
    const dataId = backend.writeTexture(texture, shape, dtype, height, width, channels);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_2__.engine)().makeTensorFromDataId(dataId, shape, dtype, backend);
  }
}
MathBackendWebGL.nextDataId = 0;
function float32ToTypedArray(a, dtype) {
  if (dtype === 'float32' || dtype === 'complex64') {
    return a;
  } else if (dtype === 'int32' || dtype === 'bool') {
    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);
    for (let i = 0; i < result.length; ++i) {
      result[i] = Math.round(a[i]);
    }
    return result;
  } else {
    throw new Error(`Unknown dtype ${dtype}`);
  }
}

/***/ }),

/***/ 52734:
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GPGPUContext": () => (/* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext),
/* harmony export */   "MathBackendWebGL": () => (/* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.MathBackendWebGL),
/* harmony export */   "forceHalfFloat": () => (/* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.forceHalfFloat),
/* harmony export */   "gpgpu_util": () => (/* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.gpgpu_util),
/* harmony export */   "setWebGLContext": () => (/* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.setWebGLContext),
/* harmony export */   "version_webgl": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_1__.version),
/* harmony export */   "webgl": () => (/* binding */ webgl),
/* harmony export */   "webgl_util": () => (/* reexport safe */ _webgl__WEBPACK_IMPORTED_MODULE_3__.webgl_util)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_webgl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backend_webgl */ 48488);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version */ 53892);
/* harmony import */ var _webgl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webgl */ 68586);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// base.ts is the webgl backend without auto kernel registration.



if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.device_util.isBrowser()) {
  (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerBackend)('webgl', () => new _backend_webgl__WEBPACK_IMPORTED_MODULE_2__.MathBackendWebGL(), 2 /* priority */);
}
// Export webgl utilities

// Export forceHalfFlost under webgl namespace for the union bundle.

const webgl = {
  forceHalfFloat: _webgl__WEBPACK_IMPORTED_MODULE_3__.forceHalfFloat
};

/***/ }),

/***/ 63362:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BatchNormProgram": () => (/* binding */ BatchNormProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class BatchNormProgram {
  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
    this.outputShape = [];
    this.variableNames = ['x', 'mean', 'variance'];
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, meanShape);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);
    let offsetSnippet = '0.0';
    if (offsetShape != null) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);
      this.variableNames.push('offset');
      offsetSnippet = 'getOffsetAtOutCoords()';
    }
    let scaleSnippet = '1.0';
    if (scaleShape != null) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);
      this.variableNames.push('scale');
      scaleSnippet = 'getScaleAtOutCoords()';
    }
    this.outputShape = xShape;
    this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${offsetSnippet};
        float scale = ${scaleSnippet};
        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}

/***/ }),

/***/ 23630:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BatchNormPackedProgram": () => (/* binding */ BatchNormPackedProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class BatchNormPackedProgram {
  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {
    this.packedInputs = true;
    this.packedOutput = true;
    this.variableNames = ['x', 'mean', 'variance'];
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, meanShape);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, varianceShape);
    let offsetSnippet = 'vec4(0.0)';
    if (offsetShape != null) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, offsetShape);
      this.variableNames.push('offset');
      offsetSnippet = 'getOffsetAtOutCoords()';
    }
    let scaleSnippet = 'vec4(1.0)';
    if (scaleShape != null) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(xShape, scaleShape);
      this.variableNames.push('scale');
      scaleSnippet = 'getScaleAtOutCoords()';
    }
    this.outputShape = xShape;
    this.userCode = `
      void main() {
        vec4 offset = ${offsetSnippet};
        vec4 scale = ${scaleSnippet};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}

/***/ }),

/***/ 33167:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BinaryOpComplexProgram": () => (/* binding */ BinaryOpComplexProgram),
/* harmony export */   "COMPLEX_MULTIPLY": () => (/* binding */ COMPLEX_MULTIPLY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// (Ar + Ai)(Br + Bi) =
// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr
// Yr = ArBr - AB
// Yi = ArBi + AiBr
const COMPLEX_MULTIPLY = {
  REAL: 'return areal * breal - aimag * bimag;',
  IMAG: 'return areal * bimag + aimag * breal;'
};
class BinaryOpComplexProgram {
  constructor(op, aShape, bShape) {
    this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];
    this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${op}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}

/***/ }),

/***/ 43510:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BinaryOpProgram": () => (/* binding */ BinaryOpProgram),
/* harmony export */   "CHECK_NAN_SNIPPET": () => (/* binding */ CHECK_NAN_SNIPPET),
/* harmony export */   "SQUARED_DIFFERENCE": () => (/* binding */ SQUARED_DIFFERENCE)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const CHECK_NAN_SNIPPET = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
class BinaryOpProgram {
  constructor(op, aShape, bShape) {
    this.variableNames = ['A', 'B'];
    this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_1__.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      float binaryOperation(float a, float b) {
        ${op}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}

/***/ }),

/***/ 41316:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BinaryOpPackedProgram": () => (/* binding */ BinaryOpPackedProgram),
/* harmony export */   "CHECK_NAN_SNIPPET_PACKED": () => (/* binding */ CHECK_NAN_SNIPPET_PACKED),
/* harmony export */   "ELU_DER": () => (/* binding */ ELU_DER),
/* harmony export */   "NOT_EQUAL": () => (/* binding */ NOT_EQUAL)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const CHECK_NAN_SNIPPET_PACKED = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
const ELU_DER = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
const NOT_EQUAL = `
  return vec4(notEqual(a, b));
`;
class BinaryOpPackedProgram {
  constructor(op, aShape, bShape, checkOutOfBounds = false) {
    this.variableNames = ['A', 'B'];
    this.supportsBroadcasting = true;
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(aShape, bShape);
    const rank = this.outputShape.length;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_1__.useShapeUniforms)(rank);
    let checkOutOfBoundsString = '';
    if (checkOutOfBounds) {
      if (rank === 0 || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(this.outputShape) === 1) {
        checkOutOfBoundsString = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      } else {
        const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_2__.getCoordsDataType)(rank);
        checkOutOfBoundsString = `
          ${dtype} coords = getOutputCoords();
        `;
        if (rank === 1) {
          if (this.enableShapeUniforms) {
            checkOutOfBoundsString += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
          } else {
            checkOutOfBoundsString += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
          }
        } else {
          const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_3__.getChannels)('coords', rank);
          if (this.enableShapeUniforms) {
            checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
          } else {
            checkOutOfBoundsString += `
            bool nextRowOutOfBounds =
              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};
            bool nextColOutOfBounds =
              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
          }
        }
      }
    }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${op}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${checkOutOfBoundsString}

        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 80186:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clearWebGLContext": () => (/* binding */ clearWebGLContext),
/* harmony export */   "getWebGLContext": () => (/* binding */ getWebGLContext),
/* harmony export */   "setWebGLContext": () => (/* binding */ setWebGLContext)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const contexts = {};
const WEBGL_ATTRIBUTES = {
  alpha: false,
  antialias: false,
  premultipliedAlpha: false,
  preserveDrawingBuffer: false,
  depth: false,
  stencil: false,
  failIfMajorPerformanceCaveat: true
};
function clearWebGLContext(webGLVersion) {
  delete contexts[webGLVersion];
}
function setWebGLContext(webGLVersion, gl) {
  contexts[webGLVersion] = gl;
}
function getWebGLContext(webGLVersion, customCanvas) {
  if (!(webGLVersion in contexts) || customCanvas != null) {
    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);
    if (newCtx !== null) {
      contexts[webGLVersion] = newCtx;
    } else {
      console.log('Could not get context for WebGL version', webGLVersion);
      return null;
    }
  }
  const gl = contexts[webGLVersion];
  if (gl == null || gl.isContextLost()) {
    delete contexts[webGLVersion];
    return getWebGLContext(webGLVersion);
  }
  gl.disable(gl.DEPTH_TEST);
  gl.disable(gl.STENCIL_TEST);
  gl.disable(gl.BLEND);
  gl.disable(gl.DITHER);
  gl.disable(gl.POLYGON_OFFSET_FILL);
  gl.disable(gl.SAMPLE_COVERAGE);
  gl.enable(gl.SCISSOR_TEST);
  gl.enable(gl.CULL_FACE);
  gl.cullFace(gl.BACK);
  return contexts[webGLVersion];
}
function createCanvas(webGLVersion) {
  // Use canvas element for Safari, since its offscreen canvas does not support
  // fencing.
  if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {
    return new OffscreenCanvas(300, 150);
  } else if (typeof document !== 'undefined') {
    return document.createElement('canvas');
  } else {
    throw new Error('Cannot create a canvas in this context');
  }
}
function getWebGLRenderingContext(webGLVersion, customCanvas) {
  if (webGLVersion !== 1 && webGLVersion !== 2) {
    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');
  }
  const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;
  canvas.addEventListener('webglcontextlost', ev => {
    ev.preventDefault();
    delete contexts[webGLVersion];
  }, false);
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('SOFTWARE_WEBGL_ENABLED')) {
    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;
  }
  if (webGLVersion === 1) {
    return canvas.getContext('webgl', WEBGL_ATTRIBUTES) || canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES);
  }
  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);
}

/***/ }),

/***/ 81560:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClipProgram": () => (/* binding */ ClipProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipProgram {
  constructor(aShape) {
    this.variableNames = ['A'];
    this.customUniforms = [{
      name: 'minVal',
      type: 'float'
    }, {
      name: 'maxVal',
      type: 'float'
    }];
    this.outputShape = aShape;
    this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}

/***/ }),

/***/ 14756:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClipPackedProgram": () => (/* binding */ ClipPackedProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ClipPackedProgram {
  constructor(aShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'minVal',
      type: 'float'
    }, {
      name: 'maxVal',
      type: 'float'
    }];
    this.outputShape = aShape;
    this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}

/***/ }),

/***/ 21710:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComplexAbsProgram": () => (/* binding */ ComplexAbsProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ComplexAbsProgram {
  constructor(shape) {
    this.variableNames = ['real', 'imag'];
    this.outputShape = shape;
    this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}

/***/ }),

/***/ 3534:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConcatProgram": () => (/* binding */ ConcatProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class ConcatProgram {
  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
  constructor(shapes) {
    this.outputShape = [];
    this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(shapes, 1 /* axis */);
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const offsets = new Array(shapes.length - 1);
    offsets[0] = shapes[0][1];
    for (let i = 1; i < offsets.length; i++) {
      offsets[i] = offsets[i - 1] + shapes[i][1];
    }
    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];
    for (let i = 1; i < offsets.length; i++) {
      const shift = offsets[i - 1];
      snippets.push(`else if (yC < ${offsets[i]}) ` + `setOutput(getT${i}(yR, yC-${shift}));`);
    }
    const lastIndex = offsets.length;
    const lastShift = offsets[offsets.length - 1];
    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${snippets.join('\n        ')}
      }
    `;
  }
}

/***/ }),

/***/ 40452:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConcatPackedProgram": () => (/* binding */ ConcatPackedProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



class ConcatPackedProgram {
  constructor(shapes, axis) {
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    this.outputShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(shapes, axis);
    const shape = this.outputShape;
    const rank = shape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);
    const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_2__.getChannels)('coords', rank);
    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);
    this.variableNames = shapes.map((_, i) => `T${i}`);
    const offsets = new Array(shapes.length - 1);
    offsets[0] = shapes[0][axis];
    for (let i = 1; i < offsets.length; i++) {
      offsets[i] = offsets[i - 1] + shapes[i][axis];
    }
    const channel = channels[axis];
    const lastChannels = channels.slice(-2);
    const allChannels = channels.join();
    let getValueSnippet = `if (${channel} < ${offsets[0]}) {
        return getChannel(
            getT0(${allChannels}), vec2(${lastChannels.join()}));
        }`;
    for (let i = 1; i < offsets.length; i++) {
      const shift = offsets[i - 1];
      // Note: the >= comparison below may seem unnecessary given the check
      // above but is needed to workaround branch execution issues on some
      // devices. It makes all the conditions exclusive without relying on
      // execution order.
      getValueSnippet += `
        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {
          return getChannel(
            getT${i}(${shiftedChannels(channels, channel, shift)}),
            vec2(${shiftedChannels(lastChannels, channel, shift)}));
        }`;
    }
    const lastIndex = offsets.length;
    const shift = offsets[offsets.length - 1];
    getValueSnippet += `
        return getChannel(
          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),
          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;
    this.userCode = `
      float getValue(${channels.map(x => 'int ' + x)}) {
        ${getValueSnippet}
      }

      void main() {
        ${dtype} coords = getOutputCoords();
        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);

        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;
        if (${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.g = getValue(${coords});
        }

        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]}) {
          result.a = getValue(${coords});
        }

        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;
        if (${coords[rank - 2]} < ${shape[rank - 2]} &&
            ${coords[rank - 1]} < ${shape[rank - 1]}) {
          result.b = getValue(${coords});
        }
        setOutput(result);
      }
    `;
  }
}
/**
 * Return an expression for coordinates into a vector where a given channel
 * will be offset by [shift].
 *
 * @param channels the channels to consider
 * @param channel the channel we want shifted
 * @param shift  the amount to subtract from the channel.
 *
 * @returns a string of the form 'x, y-[shift], z' where any one channel can
 * have the shift applied.
 */
function shiftedChannels(channels, channel, shift) {
  const channelIdx = channels.indexOf(channel);
  const res = channels.map((c, idx) => {
    if (idx === channelIdx) {
      return `${c} - ${shift}`;
    } else {
      return c;
    }
  });
  return res.join();
}

/***/ }),

/***/ 52624:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Conv2DDerFilterProgram": () => (/* binding */ Conv2DDerFilterProgram),
/* harmony export */   "Conv2DDerInputProgram": () => (/* binding */ Conv2DDerInputProgram),
/* harmony export */   "Conv3DDerFilterProgram": () => (/* binding */ Conv3DDerFilterProgram),
/* harmony export */   "Conv3DDerInputProgram": () => (/* binding */ Conv3DDerInputProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              ${isChannelsLast ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Conv2DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    const rowDim = isChannelsLast ? 1 : 2;
    const colDim = isChannelsLast ? 2 : 3;
    const channelDim = isChannelsLast ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${channelDim}];

        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {

              if (${isChannelsLast}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Conv3DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {
            int xF = wF + yF * ${strideDepth} - ${padFront};

            if (xF < 0 || xF >= ${convInfo.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
              int xR = wR + yR * ${strideHeight} - ${padTop};

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
                int xC = wC + yC * ${strideWidth} - ${padLeft};

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class Conv3DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padFront = filterDepth - 1 - convInfo.padInfo.front;
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;

          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${filterDepth} - 1 - wF;

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${filterHeight} - 1 - wR;

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${filterWidth} - 1 - wC;

              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}

/***/ }),

/***/ 31975:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepthwiseConv2DDerFilterProgram": () => (/* binding */ DepthwiseConv2DDerFilterProgram),
/* harmony export */   "DepthwiseConv2DDerInputProgram": () => (/* binding */ DepthwiseConv2DDerInputProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthwiseConv2DDerFilterProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'dy'];
    this.outputShape = convInfo.filterShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${channelMul} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${convInfo.batchSize}; b++) {
          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {
            int xR = wR + yR * ${strideHeight} - ${padTop};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {
              int xC = wC + yC * ${strideWidth} - ${padLeft};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class DepthwiseConv2DDerInputProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.outputShape = convInfo.inShape;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${filterWidth} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${channelMul}; dm++) {
              int d2 = d1 * ${channelMul} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}

/***/ }),

/***/ 12119:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_packed_gpu.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Conv2DDerInputPackedProgram": () => (/* binding */ Conv2DDerInputPackedProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class Conv2DDerInputPackedProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'W'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'strides',
      type: 'vec2'
    }];
    this.outputShape = convInfo.inShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const padTop = filterHeight - 1 - convInfo.padInfo.top;
    const padLeft = filterWidth - 1 - convInfo.padInfo.left;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${filterHeight} - 1 - wR;

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int wCPerm = ${filterWidth} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${convInfo.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${convInfo.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 57007:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Conv2DProgram": () => (/* binding */ Conv2DProgram),
/* harmony export */   "Conv3DProgram": () => (/* binding */ Conv3DProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Conv2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
    const inputDepthVec4Remainder = convInfo.inChannels % 4;
    const isChannelsLast = convInfo.dataFormat === 'channelsLast';
    const rowDim = isChannelsLast ? 1 : 2;
    const colDim = isChannelsLast ? 2 : 3;
    const channelDim = isChannelsLast ? 3 : 1;
    let activationSnippet = '',
      applyActivationSnippet = '';
    if (activation) {
      if (hasPreluActivationWeights) {
        activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyreluAlpha) {
        activationSnippet = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
      }
      applyActivationSnippet = `result = activation(result);`;
    }
    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
    if (addBias) {
      this.variableNames.push('bias');
    }
    if (hasPreluActivationWeights) {
      this.variableNames.push('preluActivationWeights');
    }
    if (hasLeakyreluAlpha) {
      this.variableNames.push('leakyreluAlpha');
    }
    this.userCode = `
      ${activationSnippet}

      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${channelDim}];

        ivec2 xRCCorner =
            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * ${dilationHeight};

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * ${dilationWidth};

            if (xC < 0 || xC >= ${convInfo.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${isChannelsLast}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${inputDepthVec4Remainder === 1}) {

              if (${isChannelsLast}) {
                dotProd +=
                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              } else {
                dotProd +=
                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *
                    getW(wR, wC, ${inputDepthNearestVec4}, d2);
              }

            } else if (${inputDepthVec4Remainder === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)
              );

              if (${isChannelsLast}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${inputDepthVec4Remainder === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${inputDepthNearestVec4}, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),
                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)
              );

              if (${isChannelsLast}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${inputDepthNearestVec4}, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),
                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }
}
class Conv3DProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const filterDepth = convInfo.filterDepth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;
    const inputDepthVec4Remainder = convInfo.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${filterDepth}; wF++) {
          int xF = xFCorner + wF * ${dilationDepth};

          if (xF < 0 || xF >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${filterHeight}; wR++) {
            int xR = xRCorner + wR * ${dilationHeight};

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidth}; wC++) {
              int xC = xCCorner + wC * ${dilationWidth};

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${inputDepthVec4Remainder === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);
              } else if (${inputDepthVec4Remainder === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${inputDepthVec4Remainder === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),
                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),
                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}

/***/ }),

/***/ 18688:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepthwiseConv2DProgram": () => (/* binding */ DepthwiseConv2DProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class DepthwiseConv2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {
    this.variableNames = ['x', 'W'];
    this.customUniforms = [{
      name: 'pads',
      type: 'ivec2'
    }, {
      name: 'strides',
      type: 'ivec2'
    }, {
      name: 'dilations',
      type: 'ivec2'
    }, {
      name: 'inDims',
      type: 'ivec2'
    }];
    this.outputShape = convInfo.outShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    let activationSnippet = '',
      applyActivationSnippet = '';
    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyReluAlpha) {
        activationSnippet = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `
          float activation(float x) {
            ${activation}
          }
        `;
      }
      applyActivationSnippet = `result = activation(result);`;
    }
    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
    if (addBias) {
      this.variableNames.push('bias');
    }
    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }
    if (hasLeakyReluAlpha) {
      this.variableNames.push('leakyreluAlpha');
    }
    this.userCode = `
      ${activationSnippet}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${filterHeight}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidth}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 386:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Conv2DPackedProgram": () => (/* binding */ Conv2DPackedProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class Conv2DPackedProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {
    this.variableNames = ['x', 'W'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'pads',
      type: 'ivec2'
    }, {
      name: 'strides',
      type: 'ivec2'
    }, {
      name: 'dilations',
      type: 'ivec2'
    }, {
      name: 'inDims',
      type: 'ivec2'
    }];
    this.outputShape = convInfo.outShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_1__.useShapeUniforms)(this.outputShape.length);
    const padLeft = convInfo.padInfo.left;
    const strideWidth = convInfo.strideWidth;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const texelsAcross = filterWidth;
    let mainLoop = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let c = 0; c < filterWidth; c++) {
      mainLoop += `
           vec4 xTexelC${c * 2};
           int xTexelC${c * 2}Ready;
           vec4 xTexelC${c * 2 + 1};
           int xTexelC${c * 2 + 1}Ready;
           vec4 xC${c};`;
    }
    /**
     * This vectorized implementation works by gathering the values needed for
     * each output channel's dot product into vec4's and then multiplying them
     * all together (this happens in the final double for-loop below). Most of
     * the main loop consists of constructing these vec4's with the minimum
     * number of texture2D calls, which means making use of all four returned
     * values from a texture2D call at once.
     */
    mainLoop += `
     for (int r = 0; r < ${filterHeight}; r++) {
      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {
       `;
    for (let c = 0; c < filterWidth; c++) {
      mainLoop += `
           xTexelC${c * 2} = vec4(0.0);
           xTexelC${c * 2}Ready = 0;
           xTexelC${c * 2 + 1} = vec4(0.0);
           xTexelC${c * 2 + 1}Ready = 0;
           xC${c} = vec4(0.0);`;
    }
    mainLoop += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {
      const colIndex = texelC * 2;
      mainLoop += `
           xC = xCCorner + ${colIndex * dilationWidth};
           `;
      if (strideWidth === 1) {
        if (colIndex < filterWidth) {
          // If padding is odd, the outer texels have to be composed.
          if (padLeft % 2 === 1) {
            // TODO: Ensure vec4 previous does not result in redundant sample,
            // and avoid setting xTexelRC's that exceed the boundary in the
            // first place rather than resetting them to vec4(0)).
            // To compute xCOffset:
            // - If padding is odd, we must add 1 to ensure we ask for an
            // even-numbered row.
            // - We subtract 2 to access the previous texel.
            mainLoop += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {
                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${colIndex}.zw = vec2(0.0);
                   }
                   xTexelC${colIndex}Ready = 1;
                 }
               `;
            // This texel has been read in previous iteration if the dilation
            // is 1.
            if (dilationWidth === 1 && colIndex > 0) {
              mainLoop += `
                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);
                 `;
            } else {
              mainLoop += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);
                   } else {
                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);
                   }
                   `;
            }
          } else {
            // Padding is even, so xRC corresponds to a single texel.
            mainLoop += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {
                   xTexelC${colIndex} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${colIndex}.zw = vec2(0.0);
                   }
                   xTexelC${colIndex}Ready = 1;
                 }

                 xC${colIndex} = xTexelC${colIndex};
                 `;
          }
          if (colIndex + 1 < filterWidth) {
            // If dilation is even, the second entry should match the first
            // (either both are composed or both are single samples). But if
            // dilation is odd, then the second entry should be the opposite
            // of the first (if the first is composed, the second is a single
            // sample, and vice versa.)
            const nextTexelOffset = padLeft % 2 === 0 ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.nearestLargerEven(dilationWidth) : dilationWidth;
            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {
              mainLoop += `
                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${colIndex + 1}.zw = vec2(0.0);
                     }
                     xTexelC${colIndex + 1}Ready = 1;
                   }
                   `;
              // If dilation > 1 then the xRC's will not be able to share any
              // values, so each xRC will require two unique calls to getX.
              if (dilationWidth > 1) {
                mainLoop += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);
                     } else {
                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);
                     }
                     `;
              } else {
                mainLoop += `
                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);
                     `;
              }
            } else {
              // If dilation is 1 and padding is odd, we have already read the
              // texel when constructing the previous x value. Here we can
              // simply skip the texture read.
              if (nextTexelOffset === 1) {
                mainLoop += `
                     xC${colIndex + 1} = xTexelC${colIndex};
                     `;
              } else {
                mainLoop += `
                     xCOffset = xC + ${nextTexelOffset};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${colIndex + 1}.zw = vec2(0.0);
                       }
                       xTexelC${colIndex + 1}Ready = 1;
                     }

                     xC${colIndex + 1} = xTexelC${colIndex + 1};
                     `;
              }
            }
          }
        }
      } else {
        // stride === 2
        if (colIndex < filterWidth) {
          // Depending on whether padLeft is even or odd, we want either the
          // xy or zw channels from X texels for xC${colIndex}. If padLeft is
          // even, xC${colIndex +1} is simply the zw channels of texels we've
          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will
          // need to come from the xy channels of a new texel, hence the `
          // vec4
          // final` initialized below.
          if (padLeft % 2 === 1) {
            mainLoop += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {
                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${colIndex}.zw = vec2(0.0);
                   }
                   xTexelC${colIndex}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${colIndex + 1}.zw = vec2(0.0);
                   }
                   xTexelC${colIndex + 1}Ready = 1;
                 }

                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
               `;
            if (colIndex + 1 < filterWidth) {
              mainLoop += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);
                 `;
            }
          } else {
            mainLoop += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {
                   xTexelC${colIndex} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${colIndex}.zw = vec2(0.0);
                   }
                   xTexelC${colIndex}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${colIndex + 1}.zw = vec2(0.);
                   }
                   xTexelC${colIndex + 1}Ready = 1;
                 }

                 xC${colIndex} = vec4(
                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);
               `;
            if (colIndex + 1 < filterWidth) {
              mainLoop += `
                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
                 `;
            }
          }
        }
      }
      // localize the dotProd accumulation within the loop, the theory is for
      // GPU with limited cache, accumulate sum across large amount of
      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have
      // 50 variables)
      if (colIndex < filterWidth) {
        mainLoop += `
             wTexel = getW(r, ${colIndex}, d1, d2);
             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${convInfo.inChannels}) {
               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `;
        if (colIndex + 1 < filterWidth) {
          mainLoop += `
               wTexel = getW(r, ${colIndex + 1}, d1, d2);
               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${convInfo.inChannels}) {
                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `;
        }
      }
    }
    mainLoop += `
     }
   `;
    mainLoop += `
     }
   `;
    mainLoop += `
     }
   `;
    let activationSnippet = '',
      applyActivationSnippet = '';
    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${activation}
         }`;
      } else if (hasLeakyReluAlpha) {
        activationSnippet = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${activation}
         }`;
      } else {
        activationSnippet = `vec4 activation(vec4 x) {
           ${activation}
         }`;
      }
      applyActivationSnippet = `result = activation(result);`;
    }
    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
    if (addBias) {
      this.variableNames.push('bias');
    }
    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }
    if (hasLeakyReluAlpha) {
      this.variableNames.push('leakyreluAlpha');
    }
    this.userCode = `
       ${activationSnippet}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${mainLoop}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${addBiasSnippet}
         ${applyActivationSnippet}
         setOutput(result);
       }
     `;
  }
}

/***/ }),

/***/ 3105:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepthwiseConvPacked2DProgram": () => (/* binding */ DepthwiseConvPacked2DProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class DepthwiseConvPacked2DProgram {
  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {
    this.variableNames = ['x', 'W'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'pads',
      type: 'ivec2'
    }, {
      name: 'strides',
      type: 'ivec2'
    }, {
      name: 'dilations',
      type: 'ivec2'
    }, {
      name: 'inDims',
      type: 'ivec2'
    }];
    this.outputShape = convInfo.outShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_1__.useShapeUniforms)(this.outputShape.length);
    const channelMul = convInfo.outChannels / convInfo.inChannels;
    const padLeft = convInfo.padInfo.left;
    const strideWidth = convInfo.strideWidth;
    const dilationWidth = convInfo.dilationWidth;
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const texelsAcross = filterWidth;
    let mainLoop = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let c = 0; c < filterWidth; c++) {
      mainLoop += `
          vec4 xTexelC${c * 2};
          int xTexelC${c * 2}Ready;
          vec4 xTexelC${c * 2 + 1};
          int xTexelC${c * 2 + 1}Ready;
          vec4 xC${c};`;
    }
    /**
     * This vectorized implementation works by gathering the values needed for
     * each output channel's dot product into vec4's and then multiplying them
     * all together (this happens in the final double for-loop below). Most of
     * the main loop consists of constructing these vec4's with the minimum
     * number of texture2D calls, which means making use of all four returned
     * values from a texture2D call at once.
     */
    mainLoop += `
    for (int r = 0; r < ${filterHeight}; r++) {
      `;
    for (let c = 0; c < filterWidth; c++) {
      mainLoop += `
          xTexelC${c * 2} = vec4(0.0);
          xTexelC${c * 2}Ready = 0;
          xTexelC${c * 2 + 1} = vec4(0.0);
          xTexelC${c * 2 + 1}Ready = 0;
          xC${c} = vec4(0.0);`;
    }
    mainLoop += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {
      const colIndex = texelC * 2;
      mainLoop += `
          xC = xCCorner + ${colIndex * dilationWidth};
          `;
      if (strideWidth === 1) {
        if (colIndex < filterWidth) {
          // If padding is odd, the outer texels have to be composed.
          if (padLeft % 2 === 1) {
            // TODO: Ensure vec4 previous does not result in redundant sample,
            // and avoid setting xTexelRC's that exceed the boundary in the
            // first place rather than resetting them to vec4(0)).
            // To compute xCOffset:
            // - If padding is odd, we must add 1 to ensure we ask for an
            // even-numbered row.
            // - We subtract 2 to access the previous texel.
            mainLoop += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }
              `;
            // This texel has been read in previous iteration if the dilation
            // is 1.
            if (dilationWidth === 1 && colIndex > 0) {
              mainLoop += `
                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);
                `;
            } else {
              mainLoop += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);
                  } else {
                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);
                  }
                  `;
            }
          } else {
            // Padding is even, so xRC corresponds to a single texel.
            mainLoop += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                xC${colIndex} = xTexelC${colIndex};
                `;
          }
          if (colIndex + 1 < filterWidth) {
            // If dilation is even, the second entry should match the first
            // (either both are composed or both are single samples). But if
            // dilation is odd, then the second entry should be the opposite
            // of the first (if the first is composed, the second is a single
            // sample, and vice versa.)
            const nextTexelOffset = padLeft % 2 === 0 ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.nearestLargerEven(dilationWidth) : dilationWidth;
            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {
              mainLoop += `
                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${colIndex + 1}.zw = vec2(0.0);
                    }
                    xTexelC${colIndex + 1}Ready = 1;
                  }
                  `;
              // If dilation > 1 then the xRC's will not be able to share any
              // values, so each xRC will require two unique calls to getX.
              if (dilationWidth > 1) {
                mainLoop += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);
                    } else {
                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);
                    }
                    `;
              } else {
                mainLoop += `
                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);
                    `;
              }
            } else {
              // If dilation is 1 and padding is odd, we have already read the
              // texel when constructing the previous x value. Here we can
              // simply skip the texture read.
              if (nextTexelOffset === 1) {
                mainLoop += `
                    xC${colIndex + 1} = xTexelC${colIndex};
                    `;
              } else {
                mainLoop += `
                    xCOffset = xC + ${nextTexelOffset};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${colIndex + 1}.zw = vec2(0.0);
                      }
                      xTexelC${colIndex + 1}Ready = 1;
                    }

                    xC${colIndex + 1} = xTexelC${colIndex + 1};
                    `;
              }
            }
          }
        }
      } else {
        // stride === 2
        if (colIndex < filterWidth) {
          // Depending on whether padLeft is even or odd, we want either the
          // xy or zw channels from X texels for xC${colIndex}. If padLeft is
          // even, xC${colIndex +1} is simply the zw channels of texels we've
          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will
          // need to come from the xy channels of a new texel, hence the `
          // vec4
          // final` initialized below.
          if (padLeft % 2 === 1) {
            mainLoop += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${colIndex + 1}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex + 1}Ready = 1;
                }

                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
              `;
            if (colIndex + 1 < filterWidth) {
              mainLoop += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);
                `;
            }
          } else {
            mainLoop += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {
                  xTexelC${colIndex} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${colIndex}.zw = vec2(0.0);
                  }
                  xTexelC${colIndex}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {
                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${colIndex + 1}.zw = vec2(0.);
                  }
                  xTexelC${colIndex + 1}Ready = 1;
                }

                xC${colIndex} = vec4(
                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);
              `;
            if (colIndex + 1 < filterWidth) {
              mainLoop += `
                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);
                `;
            }
          }
        }
      }
      // localize the dotProd accumulation within the loop, the theory is for
      // GPU with limited cache, accumulate sum across large amount of
      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have
      // 50 variables)
      if (colIndex < filterWidth) {
        mainLoop += `
            wTexel = getW(r, ${colIndex}, d1, q);
            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);
          `;
        if (colIndex + 1 < filterWidth) {
          mainLoop += `
              wTexel = getW(r, ${colIndex + 1}, d1, q);
              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);
            `;
        }
      }
    }
    mainLoop += `
    }
  `;
    mainLoop += `
      }
    `;
    let activationSnippet = '',
      applyActivationSnippet = '';
    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyReluAlpha) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
      }
      applyActivationSnippet = `result = activation(result);`;
    }
    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
    if (addBias) {
      this.variableNames.push('bias');
    }
    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }
    if (hasLeakyReluAlpha) {
      this.variableNames.push('leakyreluAlpha');
    }
    this.userCode = `
      ${activationSnippet}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${channelMul};
        int q = d2 - d1 * ${channelMul};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${mainLoop}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${addBiasSnippet}
        ${applyActivationSnippet}
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 929:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CropAndResizeProgram": () => (/* binding */ CropAndResizeProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CropAndResizeProgram {
  constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {
    this.variableNames = ['Image', 'Boxes', 'BoxInd'];
    this.outputShape = [];
    const [batch, imageHeight, imageWidth, depth] = imageShape;
    const [numBoxes] = boxShape;
    const [cropHeight, cropWidth] = cropSize;
    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];
    const methodId = method === 'bilinear' ? 1 : 0;
    const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];
    const [heightRatio, heightScale, inY] = cropHeight > 1 ? [`${(imageHeight - 1) / (cropHeight - 1)}`, '(y2-y1) * height_ratio', `y1*${inputHeightFloat} + float(y)*(height_scale)`] : ['0.0', '0.0', `0.5 * (y1+y2) * ${inputHeightFloat}`];
    const [widthRatio, widthScale, inX] = cropWidth > 1 ? [`${(imageWidth - 1) / (cropWidth - 1)}`, '(x2-x1) * width_ratio', `x1*${inputWidthFloat} + float(x)*(width_scale)`] : ['0.0', '0.0', `0.5 * (x1+x2) * ${inputWidthFloat}`];
    // Reference implementation
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc
    this.userCode = `
      const float height_ratio = float(${heightRatio});
      const float width_ratio = float(${widthRatio});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${batch}) {
          return;
        }

        float height_scale = ${heightScale};
        float width_scale = ${widthScale};

        float in_y = ${inY};
        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }
        float in_x = ${inX};
        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {
          setOutput(float(${extrapolationValue}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${methodId} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}

/***/ }),

/***/ 95705:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/cum_gpu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CumOpType": () => (/* binding */ CumOpType),
/* harmony export */   "CumProgram": () => (/* binding */ CumProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);

var CumOpType;
(function (CumOpType) {
  CumOpType["Prod"] = "*";
  CumOpType["Sum"] = "+";
})(CumOpType || (CumOpType = {}));
class CumProgram {
  constructor(op, outputShape, exclusive, reverse) {
    this.op = op;
    this.outputShape = outputShape;
    this.variableNames = ['x'];
    this.customUniforms = [{
      name: 'index',
      type: 'float'
    }];
    const rank = this.outputShape.length;
    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';
    const val = exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;
    const length = this.outputShape[this.outputShape.length - 1];
    let condition = '';
    let idxString = '';
    // When exclusive is set, the cum op becomes roll op that copies the
    // value from the previous index based on the direction specified by the
    // reverse flag.
    if (exclusive) {
      condition = reverse ? `end != ${length - 1}` : 'end != 0';
      idxString = reverse ? 'end + 1' : 'end - 1';
    } else {
      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';
      idxString = reverse ? 'end + pow2' : 'end - pow2';
    }
    this.userCode = `
      void main() {
        ${(0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank)} coords = getOutputCoords();
        int end = ${getFinalCoord(rank, 'coords', this.op)};
        float val = ${val};
        int pow2 = int(pow(2.0, index));
        if (${condition}) {
          int idx = ${idxString};
          ${getFinalCoord(rank, 'coords', this.op)} = idx;
          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function getCoords(rank, name, op) {
  if (rank === 1) {
    return `${name}`;
  } else if (rank === 2) {
    return `${name}.x, ${name}.y`;
  } else if (rank === 3) {
    return `${name}.x, ${name}.y, ${name}.z`;
  } else if (rank === 4) {
    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;
  } else {
    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);
  }
}
function getFinalCoord(rank, name, op) {
  if (rank === 1) {
    return `${name}`;
  } else if (rank === 2) {
    return `${name}.y`;
  } else if (rank === 3) {
    return `${name}.z`;
  } else if (rank === 4) {
    return `${name}.w`;
  } else {
    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);
  }
}

/***/ }),

/***/ 51753:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DecodeMatrixProgram": () => (/* binding */ DecodeMatrixProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ 86215);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




class DecodeMatrixProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    this.outPackingScheme = _tex_util__WEBPACK_IMPORTED_MODULE_0__.PackingScheme.DENSE;
    this.customUniforms = [{
      name: 'texShape',
      type: 'ivec2'
    }];
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_2__.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? _shader_compiler_util__WEBPACK_IMPORTED_MODULE_3__.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) : _shader_compiler_util__WEBPACK_IMPORTED_MODULE_3__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${glsl.output} = result;
      }
    `;
  }
}

/***/ }),

/***/ 18608:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DecodeMatrixPackedProgram": () => (/* binding */ DecodeMatrixPackedProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ 86215);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




class DecodeMatrixPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outPackingScheme = _tex_util__WEBPACK_IMPORTED_MODULE_0__.PackingScheme.DENSE;
    this.customUniforms = [{
      name: 'texShape',
      type: 'ivec2'
    }];
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_2__.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? _shader_compiler_util__WEBPACK_IMPORTED_MODULE_3__.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) : _shader_compiler_util__WEBPACK_IMPORTED_MODULE_3__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${glsl.output} = result;
      }
    `;
  }
}

/***/ }),

/***/ 86741:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepthToSpaceProgram": () => (/* binding */ DepthToSpaceProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DepthToSpaceProgram {
  constructor(outputShape, blockSize, dataFormat) {
    this.variableNames = ['x'];
    this.outputShape = [];
    this.outputShape = outputShape;
    this.blockSize = blockSize;
    this.dataFormat = dataFormat;
    this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${blockSize};
      int offset_h = imod(h, ${blockSize});
      int in_w = w / ${blockSize};
      int offset_w = imod(w, ${blockSize});
      int offset_d = (offset_h * ${blockSize} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[1]`;
    } else {
      return `coords[2]`;
    }
  }
  getWidthCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[2]`;
    } else {
      return `coords[3]`;
    }
  }
  getDepthCoordString() {
    if (this.dataFormat === 'NHWC') {
      return `coords[3]`;
    } else {
      return `coords[1]`;
    }
  }
  getOutputDepthSize() {
    if (this.dataFormat === 'NHWC') {
      return this.outputShape[3];
    } else {
      return this.outputShape[1];
    }
  }
  getInputSamplingString() {
    if (this.dataFormat === 'NHWC') {
      return `getX(b, in_h, in_w, in_d)`;
    } else {
      return `getX(b, in_d, in_h, in_w)`;
    }
  }
}

/***/ }),

/***/ 79008:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DiagProgram": () => (/* binding */ DiagProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DiagProgram {
  constructor(size) {
    this.variableNames = ['X'];
    this.outputShape = [size, size];
    this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}

/***/ }),

/***/ 53518:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dilation2DProgram": () => (/* binding */ Dilation2DProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Dilation2DProgram {
  constructor(convInfo) {
    this.variableNames = ['x', 'W'];
    this.outputShape = convInfo.outShape;
    const {
      inHeight,
      inWidth,
      padInfo,
      strideHeight,
      strideWidth,
      filterHeight,
      filterWidth,
      dilationHeight,
      dilationWidth
    } = convInfo;
    const {
      top: padTop,
      left: padLeft
    } = padInfo;
    this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${filterHeight}; h++) {
          int hIn = hBeg + h * ${dilationHeight};

          if (hIn >= 0 && hIn < ${inHeight}) {
            for (int w = 0; w < ${filterWidth}; w++) {
              int wIn = wBeg + w * ${dilationWidth};

              if (wIn >= 0 && wIn < ${inWidth}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 96179:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EncodeFloatProgram": () => (/* binding */ EncodeFloatProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ 86215);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



class EncodeFloatProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.outTexUsage = _tex_util__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.DOWNLOAD;
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.ENCODE_FLOAT_SNIPPET}

      void main() {
        float x = getAAtOutCoords();
        ${glsl.output} = encode_float(x);
      }
    `;
  }
}

/***/ }),

/***/ 45322:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EncodeFloatPackedProgram": () => (/* binding */ EncodeFloatPackedProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tex_util */ 86215);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



class EncodeFloatPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = false;
    this.outTexUsage = _tex_util__WEBPACK_IMPORTED_MODULE_0__.TextureUsage.DOWNLOAD;
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
    this.outputShape = outputShape;
    this.userCode = `
      ${_shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.ENCODE_FLOAT_SNIPPET}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${glsl.output} = encode_float(x);
      }
    `;
  }
}

/***/ }),

/***/ 29735:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EncodeMatrixProgram": () => (/* binding */ EncodeMatrixProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const CHANNEL_CHAR_TO_INDEX_MAP = {
  'R': 0,
  'G': 1,
  'B': 2,
  'A': 3
};
class EncodeMatrixProgram {
  constructor(outputShape, inputIsUnsignedByte = false, usedChannels = 'RGBA') {
    this.variableNames = ['A'];
    this.customUniforms = [{
      name: 'texShape',
      type: 'ivec2'
    }];
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_1__.useShapeUniforms)(this.outputShape.length);
    let output = `result`;
    if (inputIsUnsignedByte) {
      output = `floor(result * 255. + 0.5)`;
    }
    let mainLoop = '';
    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length; usedChannelIndex++) {
      const curChannel = usedChannels[usedChannelIndex];
      mainLoop += `
          if(offset == ${usedChannelIndex}) {
            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getFlatIndexFrom3DOutput() : _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${usedChannels.length});

        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${glsl.texture2D}(A, uv);
          ${mainLoop}
        }
        ${glsl.output} = vec4(${output}, 0., 0., 0.);
      }
    `;
  }
}

/***/ }),

/***/ 41898:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EncodeMatrixPackedProgram": () => (/* binding */ EncodeMatrixPackedProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/*
This is how the shader encodes a tensor with shape = [2, 3, 5]
(indices are [batch, row, col]).

000|001   002|003   004|xxx   020|021   022|023   024|xxx
-------   -------   -------   -------   -------   -------
010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx

100|101   102|103   104|xxx   120|121   122|123   124|xxx
-------   -------   -------   -------   -------   -------
110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx

Single texels contain only values from the same batch, and from adjacent rows
and columns.
 */
class EncodeMatrixPackedProgram {
  constructor(outputShape, inputIsUnsignedByte = false) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'texShape',
      type: 'ivec2'
    }];
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_1__.useShapeUniforms)(this.outputShape.length);
    let mainLoop = '';
    let output = 'result';
    if (inputIsUnsignedByte) {
      output = 'floor(result * 255. + 0.5)';
    }
    for (let row = 0; row <= 1; row++) {
      for (let col = 0; col <= 1; col++) {
        const channel = row * 2 + col;
        mainLoop += `
          localCoords = coords;
          if(localCoords[2] + ${col} < ${this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {
          localCoords[2] += ${col};
          if (localCoords[1] + ${row} < ${this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {
            localCoords[1] += ${row};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${glsl.texture2D}(A, uv);

            if (offset == 0) {
              result[${channel}] = values[0];
            } else if (offset == 1) {
              result[${channel}] = values[1];
            } else if (offset == 2) {
              result[${channel}] = values[2];
            } else {
              result[${channel}] = values[3];
            }
          }
        }
        `;
      }
    }
    this.userCode = `
        ${this.enableShapeUniforms ? _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getFlatIndexFrom3DOutput() : _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getFlatIndexFrom3D(outputShape)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${mainLoop}

          ${glsl.output} = ${output};
        }
    `;
  }
}

/***/ }),

/***/ 39949:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FFTProgram": () => (/* binding */ FFTProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FFTProgram {
  constructor(component, inputShape, inverse) {
    this.variableNames = ['real', 'imag'];
    const innerDim = inputShape[1];
    this.outputShape = inputShape;
    const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;
    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';
    let opString;
    if (component === 'real') {
      opString = 'return real * expR - imag * expI;';
    } else if (component === 'imag') {
      opString = 'return real * expI + imag * expR;';
    } else {
      throw new Error(`FFT component must be either "real" or "imag", got ${component}.`);
    }
    this.userCode = `
      const float exponentMultiplier = ${exponentMultiplierSnippet};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${opString}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${innerDim});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${innerDim}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}

/***/ }),

/***/ 38666:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FillProgram": () => (/* binding */ FillProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FillProgram {
  constructor(shape, value) {
    this.outputShape = [];
    this.customUniforms = [{
      name: 'value',
      type: 'float'
    }];
    this.variableNames = ['x'];
    this.outputShape = shape;
    this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}

/***/ }),

/***/ 85997:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webgl_util */ 45181);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ENV = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)();
/**
 * This file contains WebGL-specific flag registrations.
 */
/**
 * True if WebGL is supported.
 */
ENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);
/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */
ENV.registerFlag('WEBGL_VERSION', () => {
  if ((0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isWebGLVersionEnabled)(2)) {
    return 2;
  } else if ((0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isWebGLVersionEnabled)(1)) {
    return 1;
  }
  return 0;
});
/** Whether to check for numerical representation problems. */
ENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);
ENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);
/** Whether the WebGL backend will sometimes forward ops to the CPU. */
ENV.registerFlag('WEBGL_CPU_FORWARD', () => true);
/** Whether the WebGL backend will always use f16 textures for rendering. */
ENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);
/** Whether to turn all packing related flags on. */
ENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));
/** Whether we will pack the batchnormalization op. */
ENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack the clip op. */
ENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack the depthwise conv op. */
ENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack binary ops. */
ENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack unary ops. */
ENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack array ops. */
ENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack image ops. */
ENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will pack reduce ops. */
ENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));
/** Whether packed WebGL kernels lazily unpack their outputs. */
ENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));
/** Whether we will use the im2col algorithm to speed up convolutions. */
ENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));
/** The maximum texture dimension. */
ENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLMaxTextureSize)(ENV.getNumber('WEBGL_VERSION')));
/** The maximum texture dimension. */
ENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.getMaxTexturesInShader)(ENV.getNumber('WEBGL_VERSION')));
/**
 * The disjoint_query_timer extension version.
 * 0: disabled, 1: EXT_disjoint_timer_query, 2:
 * EXT_disjoint_timer_query_webgl2.
 * In Firefox with WebGL 2.0,
 * EXT_disjoint_timer_query_webgl2 is not available, so we must use the
 * WebGL 1.0 extension.
 */
ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {
  const webGLVersion = ENV.getNumber('WEBGL_VERSION');
  if (webGLVersion === 0) {
    return 0;
  }
  return (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLDisjointQueryTimerVersion)(webGLVersion);
});
/**
 * Whether the timer object from the disjoint_query_timer extension gives
 * timing information that is reliable.
 */
ENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.device_util.isMobile());
/**
 * Whether the device is physically capable of rendering to float32 textures.
 */
ENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isCapableOfRenderingToFloatTexture)(ENV.getNumber('WEBGL_VERSION')));
/**
 * Whether rendering to float32 textures is enabled. If disabled, renders to
 * float16 textures.
 */
ENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {
  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');
});
/**
 * Whether downloading float textures is enabled (16 or 32 bit). If disabled,
 * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.
 */
ENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isDownloadFloatTextureEnabled)(ENV.getNumber('WEBGL_VERSION')));
/** Whether the fence API is available. */
ENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isWebGLFenceEnabled)(ENV.getNumber('WEBGL_VERSION')));
/**
 * Tensors with size <= than this will be uploaded as uniforms, not textures.
 */
ENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {
  // Use uniform uploads only when 32bit floats are supported. In
  // 16bit
  // environments there are problems with comparing a 16bit texture value
  // with a 32bit uniform value.
  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');
  return useUniforms ? 4 : 0;
});
/**
 * If the total number of bytes allocated on the GPU is greater than this
 * number, we will aggressively delete textures upon disposal with
 * gl.deleteMatrixTexture, rather than making them available for reuse.
 *
 * Default value -1 indicates that we will never aggressively delete textures.
 */
ENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {
  return -1;
}, threshold => {
  if (threshold < 0 && threshold !== -1) {
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` + `delete) or at least 0, but got ${threshold}.`);
  }
});
/**
 * Trigger a manual GL command flush if the threshold of time has passed since
 * previous Kernel execution. This can be useful for Andorid device where GL
 * command flush are delayed un til the end of javascript task. This value is
 * measured in millisecond. Typically you want to set this value to close to 1.
 *
 * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that
 * we will not enforce manual flush and depend on system default flush schedule.
 */
ENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.device_util.isMobile() ? 1 : -1;
}, threshold => {
  if (threshold < 0 && threshold !== -1) {
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` + `manual flush) or at least 0, but got ${threshold}.`);
  }
});
/**
 * Threshold for input tensor size that determines whether WebGL backend will
 * delegate computation to CPU.
 *
 * Default value is 128.
 */
ENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);
/** Whether we will use shapes uniforms. */
ENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);
/**
 * Threshold for last dimension of input tensor that determines whether
 * WebGL backend for the Top K op will delegate computation to CPU. If input
 * is smaller than threshold then CPU will be used
 *
 * Default value is 100000.
 */
ENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);
/**
 * Threshold for K that determines whether
 * WebGL backend for the Top K op will delegate computation to CPU. If k
 * is larger than threshold then CPU will be used
 *
 * Default value is 128.
 */
ENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);
/** Whether we will use the experimental conv op. */
ENV.registerFlag('WEBGL_EXP_CONV', () => false);
/**
 * If the device performance is low or if no hardware GPU is available, whether
 * software WebGL will be used.
 */
ENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));
/**
 * For narrow texture (physical height or physical width is 1), if the length of
 * any texture edges exceed the threshold, the texture will be reshaped to be
 * more squarish.
 *
 * This flag is used to help some GPUs that could not provide correct
 * interpolations for long skinny triangles. We found Mali GPU probably has this
 * problem: https://github.com/tensorflow/tfjs/issues/6775.
 */
ENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);
/**
 * If the flag is set to true, the max size of the narrow texture will be auto
 * computed and it will be considerred as a threshold to reshape the narrow
 * texture to be more squarish.
 *
 * This flag is used to help some GPUs that could not provide correct
 * interpolations for long skinny triangles. We found Mali GPU probably has this
 * problem: https://github.com/tensorflow/tfjs/issues/6775.
 */
ENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);
/**
 * Whether to use the customized isnan. It's only useful for webgl2 since webgl1
 * doesn't have the builtin isnan.
 */
ENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);
/** Experimental flag, whether enter compile only phase. */
ENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);

/***/ }),

/***/ 93102:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FlipLeftRightProgram": () => (/* binding */ FlipLeftRightProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FlipLeftRightProgram {
  constructor(imageShape) {
    this.variableNames = ['Image'];
    this.outputShape = [];
    const imageWidth = imageShape[2];
    this.outputShape = imageShape;
    this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${imageWidth} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${imageWidth}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}

/***/ }),

/***/ 69823:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GatherProgram": () => (/* binding */ GatherProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class GatherProgram {
  constructor(aShape, outputShape) {
    this.variableNames = ['A', 'indices'];
    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);
    const sourceCoords = getSourceCoords(aShape, 2);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${sourceCoords}));
      }
    `;
  }
}
// The input and output are always flattened into rank 4 tensors.
function getSourceCoords(aShape, axis) {
  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
  const sourceCoords = [];
  for (let i = 0; i < aShape.length; i++) {
    if (i === 2) {
      sourceCoords.push('index');
    } else {
      sourceCoords.push(`${currentCoords[i]}`);
    }
  }
  return sourceCoords.join();
}

/***/ }),

/***/ 74897:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GatherNDProgram": () => (/* binding */ GatherNDProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);

class GatherNDProgram {
  constructor(sliceDim, strides, shape, paramsShape) {
    this.sliceDim = sliceDim;
    this.strides = strides;
    this.paramsShape = paramsShape;
    this.variableNames = ['x', 'indices'];
    this.outputShape = shape;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(shape.length);
    let mainLoop = `
    int index;`;
    for (let j = 0; j < this.sliceDim; j++) {
      mainLoop += `
          index = round(getIndices(coords[0], ${j}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};
          flattenIndex += index * ${this.strides[j]};`;
    }
    this.userCode = `
         void main() {
          ${dtype} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${mainLoop}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}

/***/ }),

/***/ 9198:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getGlslDifferences": () => (/* binding */ getGlslDifferences)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function getGlslDifferences() {
  let version;
  let attribute;
  let varyingVs;
  let varyingFs;
  let texture2D;
  let output;
  let defineOutput;
  let defineSpecialNaN;
  let defineSpecialInf;
  let defineRound;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {
    version = '#version 300 es';
    attribute = 'in';
    varyingVs = 'out';
    varyingFs = 'in';
    texture2D = 'texture';
    output = 'outputColor';
    defineOutput = 'out vec4 outputColor;';
    // Use custom isnan definition to work across differences between
    // implementations on various platforms. While this should happen in ANGLE
    // we still see differences between android and windows (on chrome) when
    // using isnan directly. Since WebGL2 supports uint type and
    // floatBitsToUinT built-in function, we could implment isnan following
    // IEEE 754 rules.
    // NaN defination in IEEE 754-1985 is :
    //   - sign = either 0 or 1.
    //   - biased exponent = all 1 bits.
    //   - fraction = anything except all 0 bits (since all 0 bits represents
    //   infinity).
    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
    defineSpecialNaN = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL2_ISNAN_CUSTOM') ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : '';
    // In webgl 2 we do not need to specify a custom isinf so there is no
    // need for a special INFINITY constant.
    defineSpecialInf = ``;
    defineRound = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
  } else {
    version = '';
    attribute = 'attribute';
    varyingVs = 'varying';
    varyingFs = 'varying';
    texture2D = 'texture2D';
    output = 'gl_FragColor';
    defineOutput = '';
    // WebGL1 has no built in isnan so we define one here.
    defineSpecialNaN = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `;
    defineSpecialInf = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `;
    defineRound = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `;
  }
  return {
    version,
    attribute,
    varyingVs,
    varyingFs,
    texture2D,
    output,
    defineOutput,
    defineSpecialNaN,
    defineSpecialInf,
    defineRound
  };
}

/***/ }),

/***/ 29859:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GPGPUContext": () => (/* binding */ GPGPUContext),
/* harmony export */   "linearSearchLastTrue": () => (/* binding */ linearSearchLastTrue)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas_util */ 80186);
/* harmony import */ var _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gpgpu_util */ 122);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tex_util */ 86215);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webgl_util */ 45181);

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





class GPGPUContext {
  constructor(gl) {
    this.outputTexture = null;
    this.program = null;
    this.disposed = false;
    this.itemsToPoll = [];
    const glVersion = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_VERSION');
    if (gl != null) {
      this.gl = gl;
      (0,_canvas_util__WEBPACK_IMPORTED_MODULE_2__.setWebGLContext)(glVersion, gl);
    } else {
      this.gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_2__.getWebGLContext)(glVersion);
    }
    gl = this.gl;
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_VERSION') === 2) {
      const gl2 = gl;
      this.createVertexArray = () => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl2, () => gl2.createVertexArray());
      };
      this.bindVertexArray = vao => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl2, () => gl2.bindVertexArray(vao));
      };
      this.deleteVertexArray = vao => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl2, () => gl2.deleteVertexArray(vao));
      };
      this.getVertexArray = () => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));
      };
    } else if (gl != null) {
      const ext = gl.getExtension('OES_vertex_array_object');
      if (ext == null) {
        throw new Error('All WebGL1 implementations are expected to offer' + ' OES_vertex_array_object.');
      }
      this.createVertexArray = () => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => ext.createVertexArrayOES());
      };
      this.bindVertexArray = vao => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => ext.bindVertexArrayOES(vao));
      };
      this.deleteVertexArray = vao => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => ext.deleteVertexArrayOES(vao));
      };
      this.getVertexArray = () => {
        return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));
      };
    }
    // WebGL 2.0 enables texture floats without an extension.
    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';
    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';
    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_VERSION') === 1) {
      const TEXTURE_FLOAT = 'OES_texture_float';
      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';
      this.textureFloatExtension = _webgl_util__WEBPACK_IMPORTED_MODULE_3__.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);
      if (_webgl_util__WEBPACK_IMPORTED_MODULE_3__.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {
        this.textureHalfFloatExtension = _webgl_util__WEBPACK_IMPORTED_MODULE_3__.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);
      } else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('WEBGL_FORCE_F16_TEXTURES')) {
        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
      }
      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
      if (_webgl_util__WEBPACK_IMPORTED_MODULE_3__.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
        this.colorBufferHalfFloatExtension = _webgl_util__WEBPACK_IMPORTED_MODULE_3__.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);
      } else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('WEBGL_FORCE_F16_TEXTURES')) {
        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');
      }
    } else {
      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';
      if (_webgl_util__WEBPACK_IMPORTED_MODULE_3__.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {
        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);
      } else if (_webgl_util__WEBPACK_IMPORTED_MODULE_3__.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {
        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
      } else {
        throw new Error('GL context does not support color renderable floats');
      }
    }
    this.vertexBuffer = _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createVertexBuffer(this.gl);
    this.indexBuffer = _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createIndexBuffer(this.gl);
    this.framebuffer = _webgl_util__WEBPACK_IMPORTED_MODULE_3__.createFramebuffer(this.gl);
    this.textureConfig = _tex_util__WEBPACK_IMPORTED_MODULE_5__.getTextureConfig(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('DEBUG');
  }
  dispose() {
    if (this.disposed) {
      return;
    }
    if (this.program != null) {
      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');
    }
    if (this.outputTexture != null) {
      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');
    }
    const gl = this.gl;
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.finish());
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));
    this.disposed = true;
  }
  createFloat32MatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);
  }
  createFloat16MatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }
  uploadPixelDataToTexture(texture, pixels) {
    this.throwIfDisposed();
    _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.uploadPixelDataToTexture(this.gl, texture, pixels);
  }
  uploadDenseMatrixToTexture(texture, width, height, data) {
    this.throwIfDisposed();
    _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }
  createPackedMatrixTexture(rows, columns) {
    this.throwIfDisposed();
    return _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);
  }
  deleteMatrixTexture(texture) {
    this.throwIfDisposed();
    if (this.outputTexture === texture) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
      this.outputTexture = null;
    }
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {
    return this.downloadMatrixDriver(texture, () => _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {
    return _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(buffer, size) {
    return _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);
  }
  createBufferFromTexture(texture, rows, columns) {
    this.bindTextureToFrameBuffer(texture);
    const result = _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);
    this.unbindTextureToFrameBuffer();
    return result;
  }
  createAndWaitForFence() {
    const fenceContext = this.createFence(this.gl);
    return this.pollFence(fenceContext);
  }
  createFence(gl) {
    let query;
    let isFencePassed;
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('WEBGL_FENCE_API_ENABLED')) {
      const gl2 = gl;
      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);
      gl.flush();
      isFencePassed = () => {
        const status = gl2.clientWaitSync(sync, 0, 0);
        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;
      };
      query = sync;
    } else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {
      query = this.beginQuery();
      this.endQuery();
      isFencePassed = () => this.isQueryAvailable(query, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
    } else {
      // If we have no way to fence, return true immediately. This will fire in
      // WebGL 1.0 when there is no disjoint query timer. In this case, because
      // the fence passes immediately, we'll immediately ask for a download of
      // the texture, which will cause the UI thread to hang.
      isFencePassed = () => true;
    }
    return {
      query,
      isFencePassed
    };
  }
  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {
    return this.downloadMatrixDriver(texture, () => _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));
  }
  createProgram(fragmentShader) {
    this.throwIfDisposed();
    const gl = this.gl;
    if (this.vertexShader == null) {
      this.vertexShader = _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.createVertexShader(gl);
    }
    const program = _webgl_util__WEBPACK_IMPORTED_MODULE_3__.createProgram(gl);
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.linkProgram(gl, program);
    const program2 = Object.assign(program, {
      vao: this.createVertexArray()
    });
    if (this.debug) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.validateProgram(gl, program2);
    }
    return program2;
  }
  buildVao(program) {
    this.setProgram(program);
    this.bindVertexArray(program.vao);
    const gl = this.gl;
    // Bind index buffer, and vertex buffers based on program attrib
    // locations.
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));
    _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__.bindVertexProgramAttributeStreams(gl, program, this.vertexBuffer);
  }
  deleteProgram(program) {
    this.throwIfDisposed();
    if (program === this.program) {
      this.program = null;
    }
    if (program != null) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(this.gl, () => this.gl.deleteProgram(program));
      this.deleteVertexArray(program.vao);
    }
  }
  setProgram(program) {
    this.throwIfDisposed();
    this.program = program;
    if (this.program != null) {
      if (this.debug) {
        _webgl_util__WEBPACK_IMPORTED_MODULE_3__.validateProgram(this.gl, this.program);
      }
    }
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(this.gl, () => this.gl.useProgram(program));
  }
  getUniformLocation(program, uniformName, shouldThrow = true) {
    this.throwIfDisposed();
    if (shouldThrow) {
      return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.getProgramUniformLocationOrThrow(this.gl, program, uniformName);
    } else {
      return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.getProgramUniformLocation(this.gl, program, uniformName);
    }
  }
  getAttributeLocation(program, attribute) {
    this.throwIfDisposed();
    return _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));
  }
  getUniformLocationNoThrow(program, uniformName) {
    this.throwIfDisposed();
    return this.gl.getUniformLocation(program, uniformName);
  }
  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {
    this.throwIfDisposed();
    this.throwIfNoProgram();
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);
  }
  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {
    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);
  }
  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {
    this.throwIfDisposed();
    const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_5__.getPackedMatrixTextureShapeWidthHeight(rows, columns);
    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);
  }
  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);
  }
  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {
    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
  }
  debugValidate() {
    if (this.program != null) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.validateProgram(this.gl, this.program);
    }
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.validateFramebuffer(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed();
    this.throwIfNoProgram();
    const gl = this.gl;
    if (this.debug) {
      const boundVao = this.getVertexArray();
      console.assert(boundVao === this.program.vao, 'VAO changed between setProgram and executeProgram!');
      this.debugValidate();
    }
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed();
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    if (this.disjointQueryTimerExtension == null) {
      this.disjointQueryTimerExtension = _webgl_util__WEBPACK_IMPORTED_MODULE_3__.getExtensionOrThrow(this.gl, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');
    }
    return this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      const query = gl2.createQuery();
      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);
      return query;
    }
    const ext = this.getQueryTimerExtensionWebGL1();
    const query = ext.createQueryEXT();
    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);
    return query;
  }
  endQuery() {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      gl2.endQuery(ext.TIME_ELAPSED_EXT);
      return;
    }
    const ext = this.getQueryTimerExtensionWebGL1();
    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);
  }
  waitForQueryAndGetTime(query) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.repeatedTry(() => _this.disposed ||
      // while testing contexts are created / disposed
      // in rapid succession, so without this check we
      // may poll for the query timer indefinitely
      _this.isQueryAvailable(query, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));
      return _this.getQueryTime(query, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));
    })();
  }
  getQueryTime(query, queryTimerVersion) {
    if (queryTimerVersion === 0) {
      return null;
    }
    if (queryTimerVersion === 2) {
      const gl2 = this.gl;
      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);
      // Return milliseconds.
      return timeElapsedNanos / 1000000;
    } else {
      const ext = this.getQueryTimerExtensionWebGL1();
      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);
      // Return milliseconds.
      return timeElapsedNanos / 1000000;
    }
  }
  isQueryAvailable(query, queryTimerVersion) {
    if (queryTimerVersion === 0) {
      return true;
    }
    if (queryTimerVersion === 2) {
      const gl2 = this.gl;
      const ext = this.getQueryTimerExtensionWebGL2();
      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);
      if (this.disjoint == null) {
        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
      }
      return available && !this.disjoint;
    } else {
      const ext = this.getQueryTimerExtensionWebGL1();
      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);
      if (this.disjoint == null) {
        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);
      }
      return available && !this.disjoint;
    }
  }
  pollFence(fenceContext) {
    return new Promise(resolve => {
      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());
    });
  }
  pollItems() {
    // Find the last query that has finished.
    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));
    for (let i = 0; i <= index; ++i) {
      const {
        resolveFn
      } = this.itemsToPoll[i];
      resolveFn();
    }
    this.itemsToPoll = this.itemsToPoll.slice(index + 1);
  }
  addItemToPoll(isDoneFn, resolveFn) {
    this.itemsToPoll.push({
      isDoneFn,
      resolveFn
    });
    if (this.itemsToPoll.length > 1) {
      // We already have a running loop that polls.
      return;
    }
    // Start a new loop that polls.
    let scheduleFn = undefined;
    if ('setTimeoutCustom' in (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().platform) {
      scheduleFn = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().platform.setTimeoutCustom.bind((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().platform);
    }
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.repeatedTry(() => {
      this.pollItems();
      // End the loop if no more items to poll.
      return this.itemsToPoll.length === 0;
    }, () => 0, null, scheduleFn);
  }
  bindTextureToFrameBuffer(texture) {
    this.throwIfDisposed();
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);
    if (this.debug) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.validateFramebuffer(this.gl);
    }
  }
  unbindTextureToFrameBuffer() {
    if (this.outputTexture != null) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);
      if (this.debug) {
        _webgl_util__WEBPACK_IMPORTED_MODULE_3__.validateFramebuffer(this.gl);
      }
    } else {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
    }
  }
  downloadMatrixDriver(texture, downloadAndDecode) {
    this.bindTextureToFrameBuffer(texture);
    const result = downloadAndDecode();
    this.unbindTextureToFrameBuffer();
    return result;
  }
  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {
    this.throwIfDisposed();
    const gl = this.gl;
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);
    if (this.debug) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_3__.validateFramebuffer(gl);
    }
    this.outputTexture = outputMatrixTextureMaybePacked;
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.viewport(0, 0, width, height));
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(gl, () => gl.scissor(0, 0, width, height));
  }
  setOutputMatrixWriteRegionDriver(x, y, width, height) {
    this.throwIfDisposed();
    _webgl_util__WEBPACK_IMPORTED_MODULE_3__.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));
  }
  throwIfDisposed() {
    if (this.disposed) {
      throw new Error('Attempted to use disposed GPGPUContext.');
    }
  }
  throwIfNoProgram() {
    if (this.program == null) {
      throw new Error('No GPU program is currently set.');
    }
  }
}
/**
 * Finds the index of the last true element using linear search.
 * Note: We can't do binary search because Chrome expects us to explicitly
 * test all fences before download:
 * https://github.com/tensorflow/tfjs/issues/1145
 */
function linearSearchLastTrue(arr) {
  let i = 0;
  for (; i < arr.length; ++i) {
    const isDone = arr[i]();
    if (!isDone) {
      break;
    }
  }
  return i - 1;
}

/***/ }),

/***/ 33464:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compileProgram": () => (/* binding */ compileProgram),
/* harmony export */   "getUniformLocations": () => (/* binding */ getUniformLocations),
/* harmony export */   "makeShaderKey": () => (/* binding */ makeShaderKey),
/* harmony export */   "runProgram": () => (/* binding */ runProgram),
/* harmony export */   "useShapeUniforms": () => (/* binding */ useShapeUniforms)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl_util */ 45181);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function compileProgram(gpgpu, program, inputs, output) {
  const inputInfos = inputs.map((input, i) => {
    const shapeInfo = {
      logicalShape: input.shape,
      texShape: input.isUniform ? null : input.texData.texShape,
      isUniform: input.isUniform,
      isPacked: input.isUniform ? false : input.texData.isPacked,
      flatOffset: null
    };
    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {
      shapeInfo.flatOffset = input.texData.slice.flatOffset;
    }
    return {
      name: program.variableNames[i],
      shapeInfo
    };
  });
  const inShapeInfos = inputInfos.map(x => x.shapeInfo);
  const outShapeInfo = {
    logicalShape: output.shape,
    texShape: output.texData.texShape,
    isUniform: false,
    isPacked: output.texData.isPacked,
    flatOffset: null
  };
  const source = _shader_compiler__WEBPACK_IMPORTED_MODULE_1__.makeShader(inputInfos, outShapeInfo, program);
  const fragmentShader = (0,_webgl_util__WEBPACK_IMPORTED_MODULE_2__.createFragmentShader)(gpgpu.gl, source);
  const webGLProgram = gpgpu.createProgram(fragmentShader);
  if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('ENGINE_COMPILE_ONLY')) {
    gpgpu.buildVao(webGLProgram);
    return Object.assign({
      program,
      fragmentShader,
      source,
      webGLProgram,
      inShapeInfos,
      outShapeInfo
    }, getUniformLocations(gpgpu, program, webGLProgram));
  } else {
    return {
      program,
      fragmentShader,
      source,
      webGLProgram,
      inShapeInfos,
      outShapeInfo,
      variablesLocations: null,
      customUniformLocations: null,
      infLoc: null,
      nanLoc: null,
      outShapeLocation: null,
      outShapeStridesLocation: null,
      outTexShapeLocation: null
    };
  }
}
function getUniformLocations(gpgpu, program, webGLProgram) {
  const variablesLocations = [];
  const customUniformLocations = [];
  let outShapeLocation;
  let outTexShapeLocation;
  let outShapeStridesLocation;
  let infLoc = null;
  let nanLoc = null;
  // Add special uniforms (NAN, INFINITY)
  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 1) {
    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);
  }
  // Add user-defined uniforms
  const shouldThrow = false;
  for (const varName of program.variableNames) {
    const varLocs = {
      name: varName,
      uniform: gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow),
      offset: gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow)
    };
    if (program.enableShapeUniforms) {
      varLocs.shape = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);
      varLocs.texShape = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);
    }
    variablesLocations.push(varLocs);
  }
  if (program.enableShapeUniforms) {
    outShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);
    outShapeStridesLocation = gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);
    outTexShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);
  }
  if (program.customUniforms) {
    for (const d of program.customUniforms) {
      customUniformLocations.push(gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow));
    }
  }
  return {
    variablesLocations,
    customUniformLocations,
    infLoc,
    nanLoc,
    outShapeLocation,
    outShapeStridesLocation,
    outTexShapeLocation
  };
}
function validateBinaryAndProgram(shapeInfos, inputs) {
  if (shapeInfos.length !== inputs.length) {
    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);
  }
  shapeInfos.forEach((s, i) => {
    const shapeA = s.logicalShape;
    const input = inputs[i];
    const shapeB = input.shape;
    if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shapeA, shapeB)) {
      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);
    }
    // The input is uploaded as uniform.
    if (s.isUniform && input.isUniform) {
      return;
    }
    const texShapeA = s.texShape;
    const texShapeB = input.isUniform ? null : input.texData.texShape;
    if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(texShapeA, texShapeB)) {
      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);
    }
  });
}
function runProgram(gpgpu, binary, inputs, output, customUniformValues) {
  if (!binary.program.enableShapeUniforms) {
    validateBinaryAndProgram(binary.inShapeInfos, inputs);
    validateBinaryAndProgram([binary.outShapeInfo], [output]);
  }
  const outTex = output.texData.texture;
  const outTexShape = output.texData.texShape;
  if (output.texData.isPacked) {
    gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);
  } else {
    gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);
  }
  gpgpu.setProgram(binary.webGLProgram);
  gpgpu.bindVertexArray(binary.webGLProgram.vao);
  // Set special uniforms (NAN, INFINITY)
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 1) {
    if (binary.infLoc !== null) {
      gpgpu.gl.uniform1f(binary.infLoc, Infinity);
    }
  }
  if (binary.nanLoc !== null) {
    gpgpu.gl.uniform1f(binary.nanLoc, NaN);
  }
  // Set user-defined inputs
  for (let i = 0; i < inputs.length; ++i) {
    const input = inputs[i];
    const {
      uniform: varLoc,
      offset: varOffsetLoc,
      shape: varShapeLoc,
      texShape: varTexShapeLoc
    } = binary.variablesLocations[i];
    if (varShapeLoc) {
      const {
        uniformShape
      } = _shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);
      switch (uniformShape.length) {
        case 1:
          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));
          break;
        case 2:
          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));
          break;
        case 3:
          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));
          break;
        case 4:
          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));
          break;
        default:
          break;
      }
    }
    if (varTexShapeLoc) {
      gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);
    }
    if (varLoc == null) {
      // The compiler inferred that this variable is not used in this shader.
      continue;
    }
    if (input.isUniform) {
      // Upload the values of the tensor as uniform.
      if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(input.shape) < 2) {
        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);
      } else {
        let vals = input.uniformValues;
        if (!(vals instanceof Float32Array)) {
          vals = new Float32Array(vals);
        }
        gpgpu.gl.uniform1fv(varLoc, vals);
      }
      continue;
    }
    // If the input was sliced, upload the flat offset index.
    if (input.texData.slice != null && varOffsetLoc != null) {
      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);
    }
    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);
  }
  const outShapeLoc = binary.outShapeLocation;
  if (outShapeLoc) {
    switch (output.shape.length) {
      case 1:
        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));
        break;
      case 2:
        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));
        break;
      case 3:
        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));
        break;
      case 4:
        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));
        break;
      default:
        break;
    }
  }
  if (binary.outShapeStridesLocation) {
    const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(output.shape);
    switch (output.shape.length) {
      case 2:
        gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));
        break;
      case 3:
        gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));
        break;
      case 4:
        gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));
        break;
      default:
        break;
    }
  }
  if (binary.outTexShapeLocation) {
    gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);
  }
  if (binary.program.customUniforms && customUniformValues) {
    for (let i = 0; i < binary.program.customUniforms.length; ++i) {
      const d = binary.program.customUniforms[i];
      const customLoc = binary.customUniformLocations[i];
      const customValue = customUniformValues[i];
      if (d.type === 'float') {
        gpgpu.gl.uniform1fv(customLoc, customValue);
      } else if (d.type === 'vec2') {
        gpgpu.gl.uniform2fv(customLoc, customValue);
      } else if (d.type === 'vec3') {
        gpgpu.gl.uniform3fv(customLoc, customValue);
      } else if (d.type === 'vec4') {
        gpgpu.gl.uniform4fv(customLoc, customValue);
      } else if (d.type === 'int') {
        gpgpu.gl.uniform1iv(customLoc, customValue);
      } else if (d.type === 'ivec2') {
        gpgpu.gl.uniform2iv(customLoc, customValue);
      } else if (d.type === 'ivec3') {
        gpgpu.gl.uniform3iv(customLoc, customValue);
      } else if (d.type === 'ivec4') {
        gpgpu.gl.uniform4iv(customLoc, customValue);
      } else {
        throw Error(`uniform type ${d.type} is not supported yet.`);
      }
    }
  }
  gpgpu.executeProgram();
}
function makeShaderKey(program, inputs, output) {
  let keyInputs = '';
  inputs.concat(output).forEach(x => {
    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;
    // TODO: Remove the condition of !x.isUniform.
    if (program.enableShapeUniforms && !x.isUniform) {
      const xTexShape = x.texData.texShape;
      const {
        useSqueezeShape,
        uniformShape,
        keptDims
      } = _shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);
      let rank1 = '',
        rank2 = '',
        rank34 = '';
      if (uniformShape.length === 1 && program.packedInputs) {
        const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];
        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;
      } else if (uniformShape.length === 2 && !program.packedInputs) {
        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;
      } else if (uniformShape.length > 2 && !program.packedInputs) {
        const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(uniformShape);
        rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;
      }
      const xRank = x.shape.length;
      const isLogicalShapTexShapeEqual = uniformShape.length === 2 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(x.shape, xTexShape);
      const isScalar = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape) === 1;
      const broadcastDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getBroadcastDims(x.shape, output.shape);
      const isInOutTexShapeEqual = !program.packedInputs && xRank === output.shape.length && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(xTexShape, output.texData.texShape);
      const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ? '' : `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;
      // These key components are needed due to shader_compiler is embedding
      // them in the shader.
      // |xRank| is used to determine the coords length. See
      // get[Packed]SamplerAtOutputCoords.
      // |isInOutTexShapeEqual| is used to determine whether going to an
      // optimization path in getSamplerAtOutputCoords.
      // |useSqueezeShape| is extracted from squeezeInputInfo of
      // getSampler[2|3|4]D/getPackedSampler3D.
      // |isScalar| is extracted from isInputScalar/isOutputScalar in
      // getPackedSamplerAtOutputCoords.
      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.
      // |isLogicalShapTexShapeEqual| is used in
      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.
      // |rank1| is used in getOutputPacked1DCoords.
      // |rank2| is used in getOutput2DCoords.
      // |rank34| is used in getSampler3D/getSampler4D.
      // |isTexShapeGreaterThanOne| are used in
      // getSampler[Scalar|1D|2D]/getOutput1DCoords.
      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;
    } else {
      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;
      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;
    }
  });
  const keyUserCode = program.userCode;
  let key = program.constructor.name;
  // Fast string concat. See https://jsperf.com/string-concatenation/14.
  key += '_' + keyInputs + '_' + keyUserCode + `${(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION')}`;
  return key;
}
function useShapeUniforms(rank) {
  // TODO: Remove the limitaion of rank <= 4.
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;
}

/***/ }),

/***/ 122:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bindVertexProgramAttributeStreams": () => (/* binding */ bindVertexProgramAttributeStreams),
/* harmony export */   "createBufferFromOutputTexture": () => (/* binding */ createBufferFromOutputTexture),
/* harmony export */   "createFloat16MatrixTexture": () => (/* binding */ createFloat16MatrixTexture),
/* harmony export */   "createFloat16PackedMatrixTexture": () => (/* binding */ createFloat16PackedMatrixTexture),
/* harmony export */   "createFloat32MatrixTexture": () => (/* binding */ createFloat32MatrixTexture),
/* harmony export */   "createIndexBuffer": () => (/* binding */ createIndexBuffer),
/* harmony export */   "createPackedMatrixTexture": () => (/* binding */ createPackedMatrixTexture),
/* harmony export */   "createUnsignedBytesMatrixTexture": () => (/* binding */ createUnsignedBytesMatrixTexture),
/* harmony export */   "createVertexBuffer": () => (/* binding */ createVertexBuffer),
/* harmony export */   "createVertexShader": () => (/* binding */ createVertexShader),
/* harmony export */   "downloadByteEncodedFloatMatrixFromOutputTexture": () => (/* binding */ downloadByteEncodedFloatMatrixFromOutputTexture),
/* harmony export */   "downloadFloat32MatrixFromBuffer": () => (/* binding */ downloadFloat32MatrixFromBuffer),
/* harmony export */   "downloadMatrixFromPackedOutputTexture": () => (/* binding */ downloadMatrixFromPackedOutputTexture),
/* harmony export */   "downloadPackedMatrixFromBuffer": () => (/* binding */ downloadPackedMatrixFromBuffer),
/* harmony export */   "getInternalFormatForFloat16MatrixTexture": () => (/* binding */ getInternalFormatForFloat16MatrixTexture),
/* harmony export */   "getInternalFormatForFloat16PackedMatrixTexture": () => (/* binding */ getInternalFormatForFloat16PackedMatrixTexture),
/* harmony export */   "getInternalFormatForFloat32MatrixTexture": () => (/* binding */ getInternalFormatForFloat32MatrixTexture),
/* harmony export */   "getInternalFormatForPackedMatrixTexture": () => (/* binding */ getInternalFormatForPackedMatrixTexture),
/* harmony export */   "getInternalFormatForUnsignedBytesMatrixTexture": () => (/* binding */ getInternalFormatForUnsignedBytesMatrixTexture),
/* harmony export */   "uploadDenseMatrixToTexture": () => (/* binding */ uploadDenseMatrixToTexture),
/* harmony export */   "uploadPixelDataToTexture": () => (/* binding */ uploadPixelDataToTexture)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tex_util */ 86215);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl_util */ 45181);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function createVertexShader(gl) {
  const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
  const vertexShaderSource = `${glsl.version}
    precision highp float;
    ${glsl.attribute} vec3 clipSpacePos;
    ${glsl.attribute} vec2 uv;
    ${glsl.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return _webgl_util__WEBPACK_IMPORTED_MODULE_2__.createVertexShader(gl, vertexShaderSource);
}
function createVertexBuffer(gl) {
  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]
  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return _webgl_util__WEBPACK_IMPORTED_MODULE_2__.createStaticVertexBuffer(gl, vertexArray);
}
function createIndexBuffer(gl) {
  // OpenGL (and WebGL) have "CCW == front" winding
  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return _webgl_util__WEBPACK_IMPORTED_MODULE_2__.createStaticIndexBuffer(gl, triangleVertexIndices);
}
function createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.validateTextureSize(width, height);
  const texture = _webgl_util__WEBPACK_IMPORTED_MODULE_2__.createTexture(gl);
  const tex2d = gl.TEXTURE_2D;
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 1) {
    _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));
  } else {
    _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texStorage2D(tex2d, 1, internalFormat, width, height));
  }
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
  return {
    texture,
    texShape: [height, width]
  };
}
function getInternalFormatForFloat32MatrixTexture(textureConfig) {
  return textureConfig.internalFormatFloat;
}
function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_3__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);
}
function getInternalFormatForFloat16MatrixTexture(textureConfig) {
  return textureConfig.internalFormatHalfFloat;
}
function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_3__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);
}
function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {
  return textureConfig.downloadTextureFormat;
}
function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_3__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);
}
function getInternalFormatForPackedMatrixTexture(textureConfig) {
  return textureConfig.internalFormatPackedFloat;
}
function createPackedMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_3__.getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);
}
function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {
  return textureConfig.internalFormatPackedHalfFloat;
}
function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {
  const [width, height] = _tex_util__WEBPACK_IMPORTED_MODULE_3__.getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);
}
function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {
  const posOffset = 0; // x is the first buffer element
  const uvOffset = 3 * 4; // uv comes after [x y z]
  const stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));
  const success = _webgl_util__WEBPACK_IMPORTED_MODULE_2__.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);
  return success && _webgl_util__WEBPACK_IMPORTED_MODULE_2__.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);
}
function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
  let dataForUpload, texelDataType, internalFormat;
  if (data instanceof Uint8Array) {
    dataForUpload = new Uint8Array(width * height * 4);
    texelDataType = gl.UNSIGNED_BYTE;
    internalFormat = gl.RGBA;
  } else {
    dataForUpload = new Float32Array(width * height * 4);
    texelDataType = gl.FLOAT;
    internalFormat = textureConfig.internalFormatPackedFloat;
  }
  dataForUpload.set(data);
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {
    _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));
  } else {
    _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));
  }
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}
function uploadPixelDataToTexture(gl, texture, pixels) {
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
  if (pixels.data instanceof Uint8Array) {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));
    } else {
      _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));
    }
  } else {
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {
      _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));
    } else {
      _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));
    }
  }
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}
function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {
  // Create and bind the buffer.
  const buffer = gl2.createBuffer();
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));
  // Initialize the buffer to the size of the texture in bytes.
  const bytesPerFloat = 4;
  const valuesPerTexel = 4;
  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));
  // Enqueue a command on the GPU command queue to copy of texture into the
  // buffer.
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));
  return buffer;
}
function downloadFloat32MatrixFromBuffer(gl, buffer, size) {
  const gl2 = gl;
  const downloadTarget = new Float32Array(size);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
  return downloadTarget;
}
function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {
  const [w, h] = _tex_util__WEBPACK_IMPORTED_MODULE_3__.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);
  const numChannels = 4;
  const downloadTarget = new Uint8Array(_tex_util__WEBPACK_IMPORTED_MODULE_3__.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));
  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754
  // decoding of the 4 bytes that back each 32 bit float.
  return new Float32Array(downloadTarget.buffer);
}
function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {
  const gl2 = gl;
  const downloadTarget = new Float32Array(_tex_util__WEBPACK_IMPORTED_MODULE_3__.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);
  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);
  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);
  return downloadTarget;
}
function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {
  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);
  _webgl_util__WEBPACK_IMPORTED_MODULE_2__.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));
  return packedRGBA;
}

/***/ }),

/***/ 17059:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Im2ColPackedProgram": () => (/* binding */ Im2ColPackedProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class Im2ColPackedProgram {
  constructor(outputShape, convInfo) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'inputShape',
      type: 'ivec4'
    }, {
      name: 'pad',
      type: 'ivec2'
    }, {
      name: 'stride',
      type: 'ivec2'
    }, {
      name: 'dilation',
      type: 'ivec2'
    }, {
      name: 'inChannels',
      type: 'int'
    }, {
      name: 'itemsPerBlockRow',
      type: 'int'
    }, {
      name: 'outWidth',
      type: 'int'
    }];
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    const {
      dataFormat
    } = convInfo;
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
    const isChannelsLast = dataFormat === 'channelsLast';
    const rowDim = isChannelsLast ? 1 : 2;
    const colDim = isChannelsLast ? 2 : 3;
    const boundsCheckingSnippet = this.enableShapeUniforms ? 'if(blockIndex < outShape[2] && pos < outShape[1]) {' : `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;
    let unrolled = ``;
    for (let row = 0; row <= 1; row++) {
      for (let col = 0; col <= 1; col++) {
        unrolled += `
          blockIndex = rc.z + ${col};
          pos = rc.y + ${row};

          ${boundsCheckingSnippet}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${rowDim}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${colDim}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${isChannelsLast}) {
                  innerDims = vec2(d1, ch);
                  result[${row * 2 + col}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${row * 2 + col}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
      }
    }
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${unrolled}

        ${glsl.output} = result;
      }
    `;
  }
}

/***/ }),

/***/ 31527:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GPGPUContext": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.GPGPUContext),
/* harmony export */   "MathBackendWebGL": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.MathBackendWebGL),
/* harmony export */   "forceHalfFloat": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.forceHalfFloat),
/* harmony export */   "gpgpu_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.gpgpu_util),
/* harmony export */   "setWebGLContext": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.setWebGLContext),
/* harmony export */   "version_webgl": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.version_webgl),
/* harmony export */   "webgl": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.webgl),
/* harmony export */   "webgl_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.webgl_util)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ 52734);
/* harmony import */ var _register_all_kernels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./register_all_kernels */ 31839);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// All exports from this package should be in base.



/***/ }),

/***/ 42346:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMinMaxReduce": () => (/* binding */ argMinMaxReduce)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _argminmax_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../argminmax_gpu */ 70495);
/* harmony import */ var _argminmax_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../argminmax_packed_gpu */ 33436);
/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernels/Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function argReduce(backend, x, reduceType, bestIndicesA = null) {
  let batchSize = x.shape[0];
  let inSize = x.shape[1];
  if (bestIndicesA != null) {
    batchSize = bestIndicesA.shape[0];
    inSize = bestIndicesA.shape[1];
  }
  const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOptimalWindowSize(inSize);
  const reduceInfo = {
    windowSize,
    inSize,
    batchSize,
    outSize: Math.ceil(inSize / windowSize)
  };
  const program = new _argminmax_gpu__WEBPACK_IMPORTED_MODULE_1__.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);
  const inputs = [x];
  if (bestIndicesA != null) {
    inputs.push(bestIndicesA);
  }
  const output = backend.runWebGLProgram(program, inputs, 'int32');
  // No need to run another GPGPU program.
  if (output.shape[1] === 1) {
    return output;
  }
  const result = argReduce(backend, x, reduceType, output);
  backend.disposeIntermediateTensorInfo(output);
  return result;
}
function argReducePacked(backend, x, reduceType, bestIndicesA = null) {
  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;
  const inSize = inShape[inShape.length - 1];
  const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOptimalWindowSize(inSize);
  const program = new _argminmax_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);
  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];
  const output = backend.runWebGLProgram(program, inputs, 'int32');
  if (output.shape.length === x.shape.length) {
    const result = argReducePacked(backend, x, reduceType, output);
    backend.disposeIntermediateTensorInfo(output);
    return result;
  }
  return output;
}
function argMinMaxReduce(backend, x, axis, reduceType) {
  const axes = [axis];
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);
  if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {
    const intermediateTensorInfos = [];
    // Eagerly unpack x input since it is passed in to all the shaders which
    // require unpacked inputs.
    const xtexData = backend.texData.get(x.dataId);
    const xIsPacked = xtexData !== null && xtexData.isPacked;
    let xUnPacked = x;
    if (xIsPacked) {
      xUnPacked = backend.unpackTensor(x);
      intermediateTensorInfos.push(xUnPacked);
    }
    const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);
    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
    const a2D = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: xUnPacked
      },
      backend,
      attrs: {
        shape: [-1, inSize]
      }
    });
    intermediateTensorInfos.push(a2D);
    const reduced = argReduce(backend, a2D, reduceType);
    intermediateTensorInfos.push(reduced);
    const reshaped = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
    return reshaped;
  }
  return argReducePacked(backend, x, reduceType);
}

/***/ }),

/***/ 84207:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "int": () => (/* binding */ int)
/* harmony export */ });
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const TO_INT = `return float(int(x));`;
function int(input, backend) {
  const program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_0__.UnaryOpProgram(input.shape, TO_INT);
  const output = backend.runWebGLProgram(program, [input], 'int32');
  return {
    dataId: output.dataId,
    shape: output.shape,
    dtype: output.dtype
  };
}

/***/ }),

/***/ 11400:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CHECK_NAN_SNIPPET_UNARY": () => (/* binding */ CHECK_NAN_SNIPPET_UNARY),
/* harmony export */   "binaryKernelFunc": () => (/* binding */ binaryKernelFunc),
/* harmony export */   "mapActivationToShaderProgram": () => (/* binding */ mapActivationToShaderProgram),
/* harmony export */   "unaryKernelFunc": () => (/* binding */ unaryKernelFunc)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernels/Complex */ 15661);
/* harmony import */ var _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../kernels/LeakyRelu */ 81356);
/* harmony import */ var _kernels_Prelu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernels/Prelu */ 36283);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_packed_gpu */ 81992);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;
/**
 * Template that creates a `KernelFunc` for unary ops.
 * @param opSnippet Op snippet to create `UnaryOpProgram`.
 * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */
function unaryKernelFunc({
  opSnippet,
  packedOpSnippet,
  cpuKernelImpl,
  dtype
}) {
  return ({
    inputs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const webglBackend = backend;
    const $dtype = dtype || x.dtype;
    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {
      const xData = webglBackend.texData.get(x.dataId);
      const outValues = cpuKernelImpl(xData.values, $dtype);
      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);
    }
    const shouldUsePackedProgram = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;
    let program;
    if (shouldUsePackedProgram) {
      program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.UnaryOpPackedProgram(x.shape, packedOpSnippet);
    } else {
      program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.UnaryOpProgram(x.shape, opSnippet);
    }
    return webglBackend.runWebGLProgram(program, [x], $dtype);
  };
}
/**
 * Template that creates a `KernelFunc` for binary ops.
 * @param opSnippet Op snippet to create `BinaryOpProgram`.
 * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.
 * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true
 *     when creating BinaryOpPackedProgram.
 * @param dtype Optional. If set, the result has this dtype. Otherwise, the
 *     result has the same dtype as the first input. This is mainly used in
 *     comparison kernels, such as Equal, Less, Greater, etc.
 */
function binaryKernelFunc({
  opSnippet,
  packedOpSnippet,
  checkOutOfBounds = false,
  supportsComplex = false,
  cpuKernelImpl,
  dtype
}) {
  return ({
    inputs,
    backend
  }) => {
    const {
      a,
      b
    } = inputs;
    const webglBackend = backend;
    if (supportsComplex && a.dtype === 'complex64') {
      const aData = webglBackend.texData.get(a.dataId);
      const bData = webglBackend.texData.get(b.dataId);
      const [real, imag] = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(complexParts => {
        const [aPart, bPart] = complexParts;
        const aHandle = {
          dataId: aPart.dataId,
          dtype: aPart.dtype,
          shape: a.shape
        };
        const bHandle = {
          dataId: bPart.dataId,
          dtype: bPart.dtype,
          shape: b.shape
        };
        const program = new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_3__.BinaryOpProgram(opSnippet, a.shape, b.shape);
        return webglBackend.runWebGLProgram(program, [aHandle, bHandle], (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(aPart.dtype, bPart.dtype));
      });
      const complexOutput = (0,_kernels_Complex__WEBPACK_IMPORTED_MODULE_4__.complex)({
        inputs: {
          real,
          imag
        },
        backend: webglBackend
      });
      webglBackend.disposeIntermediateTensorInfo(real);
      webglBackend.disposeIntermediateTensorInfo(imag);
      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.
      return complexOutput;
    }
    const $dtype = dtype || (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(a.dtype, b.dtype);
    if ((a.dtype === 'string' || b.dtype === 'string' || webglBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {
      const aVals = webglBackend.texData.get(a.dataId).values;
      const bVals = webglBackend.texData.get(b.dataId).values;
      const decodedAVals = a.dtype === 'string' ?
      // tslint:disable-next-line: no-any
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(aVals) : aVals;
      const decodedBVals = a.dtype === 'string' ?
      // tslint:disable-next-line: no-any
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray(bVals) : bVals;
      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);
      const out = webglBackend.makeTensorInfo(outShape, $dtype);
      const outData = webglBackend.texData.get(out.dataId);
      outData.values = outValues;
      return out;
    }
    const shouldUsePackedProgram = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') && packedOpSnippet != null;
    let program;
    if (shouldUsePackedProgram) {
      program = new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_5__.BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);
    } else {
      program = new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_3__.BinaryOpProgram(opSnippet, a.shape, b.shape);
    }
    return webglBackend.runWebGLProgram(program, [a, b], $dtype);
  };
}
function mapActivationToShaderProgram(activation, packed = false) {
  if (activation === 'linear') {
    if (packed) {
      return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.LINEAR;
    }
    return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.LINEAR;
  } else if (activation === 'relu') {
    if (packed) {
      return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.RELU;
    }
    return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.RELU;
  } else if (activation === 'elu') {
    if (packed) {
      return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ELU;
    }
    return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.ELU;
  } else if (activation === 'relu6') {
    if (packed) {
      return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.RELU6;
    }
    return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.RELU6;
  } else if (activation === 'prelu') {
    if (packed) {
      return _kernels_Prelu__WEBPACK_IMPORTED_MODULE_6__.PRELU_PACKED;
    }
    return _kernels_Prelu__WEBPACK_IMPORTED_MODULE_6__.PRELU;
  } else if (activation === 'leakyrelu') {
    if (packed) {
      return _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_7__.LEAKYRELU_PACKED;
    }
    return _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_7__.LEAKYRELU;
  } else if (activation === 'sigmoid') {
    if (packed) {
      return _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.SIGMOID;
    }
    return _unaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.SIGMOID;
  }
  throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);
}

/***/ }),

/***/ 40161:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reduce": () => (/* binding */ reduce)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _mean_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mean_gpu */ 32911);
/* harmony import */ var _reduce_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reduce_gpu */ 84488);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



// Returns an array of configuration objects that describe each stage of the
// reduction.
function getReductionStages(inShape) {
  const stages = [];
  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {
    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];
    const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOptimalWindowSize(outSize);
    stages.push({
      inSize: outSize,
      windowSize,
      outSize: Math.ceil(outSize / windowSize)
    });
  }
  return stages;
}
function reduce(x, dtype, reductionType, backend) {
  const reductionStages = getReductionStages(x.shape);
  let result = x;
  for (let i = 0; i < reductionStages.length; i++) {
    const {
      inSize,
      windowSize,
      outSize
    } = reductionStages[i];
    let program;
    let previousResult;
    if (reductionType === 'mean') {
      program = i === 0 ? new _mean_gpu__WEBPACK_IMPORTED_MODULE_1__.MeanProgram({
        windowSize,
        inSize,
        batchSize: x.shape[0],
        outSize
      }, inSize) : new _mean_gpu__WEBPACK_IMPORTED_MODULE_1__.MeanProgram({
        windowSize,
        inSize,
        batchSize: x.shape[0],
        outSize
      });
    } else {
      program = new _reduce_gpu__WEBPACK_IMPORTED_MODULE_2__.ReduceProgram({
        windowSize,
        inSize,
        batchSize: x.shape[0],
        outSize
      }, reductionType);
    }
    previousResult = result;
    result = backend.runWebGLProgram(program, [result], dtype);
    if (previousResult.dataId !== x.dataId) {
      backend.disposeIntermediateTensorInfo(previousResult);
    }
  }
  return result;
}

/***/ }),

/***/ 42389:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "packedReshape": () => (/* binding */ packedReshape)
/* harmony export */ });
/* harmony import */ var _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reshape_packed_gpu */ 78043);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../webgl_util */ 45181);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function packedReshape(input, afterShape, backend) {
  const input3DShape = [(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getBatchDim)(input.shape), ...(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getRowsCols)(input.shape)];
  const input3D = {
    dtype: input.dtype,
    shape: input3DShape,
    dataId: input.dataId
  };
  const afterShapeAs3D = [(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getBatchDim)(afterShape), ...(0,_webgl_util__WEBPACK_IMPORTED_MODULE_0__.getRowsCols)(afterShape)];
  const program = new _reshape_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ReshapePackedProgram(afterShapeAs3D, input3DShape);
  const preventEagerUnpackingOfOutput = true;
  const customValues = [input3DShape];
  const output = backend.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);
  return {
    dataId: output.dataId,
    shape: afterShape,
    dtype: output.dtype
  };
}

/***/ }),

/***/ 73505:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addImplCPU": () => (/* binding */ addImplCPU),
/* harmony export */   "bincountImplCPU": () => (/* binding */ bincountImplCPU),
/* harmony export */   "bincountReduceImplCPU": () => (/* binding */ bincountReduceImplCPU),
/* harmony export */   "castImplCPU": () => (/* binding */ castImplCPU),
/* harmony export */   "ceilImplCPU": () => (/* binding */ ceilImplCPU),
/* harmony export */   "concatImplCPU": () => (/* binding */ concatImplCPU),
/* harmony export */   "equalImplCPU": () => (/* binding */ equalImplCPU),
/* harmony export */   "expImplCPU": () => (/* binding */ expImplCPU),
/* harmony export */   "expm1ImplCPU": () => (/* binding */ expm1ImplCPU),
/* harmony export */   "floorImplCPU": () => (/* binding */ floorImplCPU),
/* harmony export */   "gatherNdImplCPU": () => (/* binding */ gatherNdImplCPU),
/* harmony export */   "gatherV2ImplCPU": () => (/* binding */ gatherV2ImplCPU),
/* harmony export */   "greaterEqualImplCPU": () => (/* binding */ greaterEqualImplCPU),
/* harmony export */   "greaterImplCPU": () => (/* binding */ greaterImplCPU),
/* harmony export */   "lessEqualImplCPU": () => (/* binding */ lessEqualImplCPU),
/* harmony export */   "lessImplCPU": () => (/* binding */ lessImplCPU),
/* harmony export */   "linSpaceImplCPU": () => (/* binding */ linSpaceImplCPU),
/* harmony export */   "logImplCPU": () => (/* binding */ logImplCPU),
/* harmony export */   "maxImplCPU": () => (/* binding */ maxImplCPU),
/* harmony export */   "maximumImplCPU": () => (/* binding */ maximumImplCPU),
/* harmony export */   "minimumImplCPU": () => (/* binding */ minimumImplCPU),
/* harmony export */   "multiplyImplCPU": () => (/* binding */ multiplyImplCPU),
/* harmony export */   "negImplCPU": () => (/* binding */ negImplCPU),
/* harmony export */   "notEqualImplCPU": () => (/* binding */ notEqualImplCPU),
/* harmony export */   "prodImplCPU": () => (/* binding */ prodImplCPU),
/* harmony export */   "raggedGatherImplCPU": () => (/* binding */ raggedGatherImplCPU),
/* harmony export */   "raggedRangeImplCPU": () => (/* binding */ raggedRangeImplCPU),
/* harmony export */   "raggedTensorToTensorImplCPU": () => (/* binding */ raggedTensorToTensorImplCPU),
/* harmony export */   "rangeImplCPU": () => (/* binding */ rangeImplCPU),
/* harmony export */   "rsqrtImplCPU": () => (/* binding */ rsqrtImplCPU),
/* harmony export */   "scatterImplCPU": () => (/* binding */ scatterImplCPU),
/* harmony export */   "sigmoidImplCPU": () => (/* binding */ sigmoidImplCPU),
/* harmony export */   "simpleAbsImplCPU": () => (/* binding */ simpleAbsImplCPU),
/* harmony export */   "sliceImplCPU": () => (/* binding */ sliceImplCPU),
/* harmony export */   "sparseFillEmptyRowsImplCPU": () => (/* binding */ sparseFillEmptyRowsImplCPU),
/* harmony export */   "sparseReshapeImplCPU": () => (/* binding */ sparseReshapeImplCPU),
/* harmony export */   "sparseSegmentReductionImplCPU": () => (/* binding */ sparseSegmentReductionImplCPU),
/* harmony export */   "sqrtImplCPU": () => (/* binding */ sqrtImplCPU),
/* harmony export */   "staticRegexReplaceImplCPU": () => (/* binding */ staticRegexReplaceImplCPU),
/* harmony export */   "stridedSliceImplCPU": () => (/* binding */ stridedSliceImplCPU),
/* harmony export */   "stringNGramsImplCPU": () => (/* binding */ stringNGramsImplCPU),
/* harmony export */   "stringSplitImplCPU": () => (/* binding */ stringSplitImplCPU),
/* harmony export */   "stringToHashBucketFastImplCPU": () => (/* binding */ stringToHashBucketFastImplCPU),
/* harmony export */   "subImplCPU": () => (/* binding */ subImplCPU),
/* harmony export */   "tileImplCPU": () => (/* binding */ tileImplCPU),
/* harmony export */   "topKImplCPU": () => (/* binding */ topKImplCPU),
/* harmony export */   "transposeImplCPU": () => (/* binding */ transposeImplCPU),
/* harmony export */   "uniqueImplCPU": () => (/* binding */ uniqueImplCPU)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_backend_cpu_dist_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-backend-cpu/dist/shared */ 12582);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Import shared functionality from tfjs-backend-cpu without triggering
// side effects.
// tslint:disable-next-line: no-imports-from-dist

const {
  addImpl: addImplCPU,
  bincountImpl: bincountImplCPU,
  bincountReduceImpl: bincountReduceImplCPU,
  castImpl: castImplCPU,
  ceilImpl: ceilImplCPU,
  concatImpl: concatImplCPU,
  equalImpl: equalImplCPU,
  expImpl: expImplCPU,
  expm1Impl: expm1ImplCPU,
  floorImpl: floorImplCPU,
  gatherNdImpl: gatherNdImplCPU,
  gatherV2Impl: gatherV2ImplCPU,
  greaterImpl: greaterImplCPU,
  greaterEqualImpl: greaterEqualImplCPU,
  lessImpl: lessImplCPU,
  lessEqualImpl: lessEqualImplCPU,
  linSpaceImpl: linSpaceImplCPU,
  logImpl: logImplCPU,
  maxImpl: maxImplCPU,
  maximumImpl: maximumImplCPU,
  minimumImpl: minimumImplCPU,
  multiplyImpl: multiplyImplCPU,
  negImpl: negImplCPU,
  notEqualImpl: notEqualImplCPU,
  prodImpl: prodImplCPU,
  raggedGatherImpl: raggedGatherImplCPU,
  raggedRangeImpl: raggedRangeImplCPU,
  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,
  rangeImpl: rangeImplCPU,
  rsqrtImpl: rsqrtImplCPU,
  scatterImpl: scatterImplCPU,
  sigmoidImpl: sigmoidImplCPU,
  simpleAbsImpl: simpleAbsImplCPU,
  sliceImpl: sliceImplCPU,
  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,
  sparseReshapeImpl: sparseReshapeImplCPU,
  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,
  sqrtImpl: sqrtImplCPU,
  staticRegexReplaceImpl: staticRegexReplaceImplCPU,
  stridedSliceImpl: stridedSliceImplCPU,
  stringNGramsImpl: stringNGramsImplCPU,
  stringSplitImpl: stringSplitImplCPU,
  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,
  subImpl: subImplCPU,
  tileImpl: tileImplCPU,
  topKImpl: topKImplCPU,
  transposeImpl: transposeImplCPU,
  uniqueImpl: uniqueImplCPU
} = _tensorflow_tfjs_backend_cpu_dist_shared__WEBPACK_IMPORTED_MODULE_0__;


/***/ }),

/***/ 32053:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "abs": () => (/* binding */ abs),
/* harmony export */   "absConfig": () => (/* binding */ absConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../unaryop_packed_gpu */ 81992);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const ABS = `return abs(x);`;
function abs(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  // TODO: handle cases when x is complex. Once the cpu implementation
  // can handle complex values, refactor to use unaryKernelFunc.
  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {
    const xData = backend.texData.get(x.dataId);
    const outValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.simpleAbsImplCPU)(xData.values);
    return backend.makeTensorInfo(x.shape, x.dtype, outValues);
  }
  let program;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
    program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.UnaryOpPackedProgram(x.shape, ABS);
  } else {
    program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_3__.UnaryOpProgram(x.shape, ABS);
  }
  return backend.runWebGLProgram(program, [x], x.dtype);
}
const absConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Abs,
  backendName: 'webgl',
  kernelFunc: abs
};

/***/ }),

/***/ 12281:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acos": () => (/* binding */ acos),
/* harmony export */   "acosConfig": () => (/* binding */ acosConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ACOS = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
const acos = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: ACOS
});
const acosConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acos,
  backendName: 'webgl',
  kernelFunc: acos
};

/***/ }),

/***/ 89184:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acosh": () => (/* binding */ acosh),
/* harmony export */   "acoshConfig": () => (/* binding */ acoshConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ACOSH = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
const acosh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: ACOSH
});
const acoshConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acosh,
  backendName: 'webgl',
  kernelFunc: acosh
};

/***/ }),

/***/ 55002:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addConfig": () => (/* binding */ addConfig),
/* harmony export */   "addKernelFunc": () => (/* binding */ addKernelFunc)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ADD = 'return a + b;';
const addKernelFunc = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: ADD,
  packedOpSnippet: ADD,
  supportsComplex: true,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.addImplCPU
});
const addConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Add,
  backendName: 'webgl',
  kernelFunc: addKernelFunc
};

/***/ }),

/***/ 10253:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addN": () => (/* binding */ addN),
/* harmony export */   "addNConfig": () => (/* binding */ addNConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _addn_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../addn_gpu */ 1011);
/* harmony import */ var _addn_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addn_packed_gpu */ 97939);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function addN(args) {
  const {
    inputs,
    backend
  } = args;
  const tensors = inputs;
  if (tensors.length === 1) {
    return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
      inputs: {
        x: tensors[0]
      },
      backend
    });
  }
  // Limit the number of uploaded textures for optimization.
  if (tensors.length > (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {
    const midIndex = Math.floor(tensors.length / 2);
    const leftSide = addN({
      inputs: tensors.slice(0, midIndex),
      backend
    });
    const rightSide = addN({
      inputs: tensors.slice(midIndex),
      backend
    });
    return addN({
      inputs: [leftSide, rightSide],
      backend
    });
  }
  const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(d1, d2));
  const shapes = tensors.map(t => t.shape);
  // We can make sure shapes are identical in op level.
  const usePackedOp = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK');
  const program = usePackedOp ? new _addn_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.AddNPackedProgram(tensors[0].shape, shapes) : new _addn_gpu__WEBPACK_IMPORTED_MODULE_3__.AddNProgram(tensors[0].shape, shapes);
  return backend.runWebGLProgram(program, tensors, dtype);
}
const addNConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AddN,
  backendName: 'webgl',
  kernelFunc: addN
};

/***/ }),

/***/ 74053:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "all": () => (/* binding */ all),
/* harmony export */   "allConfig": () => (/* binding */ allConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ 40161);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function all(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  let permutedX = x;
  if (permutedAxes != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('all', axes, xRank);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(a2D, a2D.dtype, 'all', backend);
  let res;
  if (keepDims) {
    const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  } else {
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
  }
  backend.disposeIntermediateTensorInfo(a2D);
  backend.disposeIntermediateTensorInfo(reduced);
  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo(permutedX);
  }
  return res;
}
const allConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.All,
  backendName: 'webgl',
  kernelFunc: all
};

/***/ }),

/***/ 58879:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "any": () => (/* binding */ any),
/* harmony export */   "anyConfig": () => (/* binding */ anyConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ 40161);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function any(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  let permutedX = x;
  if (permutedAxes != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('any', axes, xRank);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(a2D, a2D.dtype, 'any', backend);
  let res;
  if (keepDims) {
    const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  } else {
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
  }
  backend.disposeIntermediateTensorInfo(a2D);
  backend.disposeIntermediateTensorInfo(reduced);
  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo(permutedX);
  }
  return res;
}
const anyConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Any,
  backendName: 'webgl',
  kernelFunc: any
};

/***/ }),

/***/ 54167:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMax": () => (/* binding */ argMax),
/* harmony export */   "argMaxConfig": () => (/* binding */ argMaxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/arg_min_max */ 42346);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function argMax(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis
  } = attrs;
  let axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);
  let $x = x;
  const intermediateTensorInfos = [];
  if (permutedAxes != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    intermediateTensorInfos.push($x);
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, $x.shape.length);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);
  const out = (0,_kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__.argMinMaxReduce)(backend, $x, axes[0], 'max');
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return out;
}
const argMaxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMax,
  backendName: 'webgl',
  kernelFunc: argMax
};

/***/ }),

/***/ 97662:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMin": () => (/* binding */ argMin),
/* harmony export */   "argMinConfig": () => (/* binding */ argMinConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/arg_min_max */ 42346);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function argMin(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis
  } = attrs;
  let axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, x.shape.length);
  let $x = x;
  const intermediateTensorInfos = [];
  if (permutedAxes != null) {
    $x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    intermediateTensorInfos.push($x);
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, $x.shape.length);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);
  const out = (0,_kernel_utils_arg_min_max__WEBPACK_IMPORTED_MODULE_2__.argMinMaxReduce)(backend, $x, axes[0], 'min');
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return out;
}
const argMinConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMin,
  backendName: 'webgl',
  kernelFunc: argMin
};

/***/ }),

/***/ 78687:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asin": () => (/* binding */ asin),
/* harmony export */   "asinConfig": () => (/* binding */ asinConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ASIN = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
const asin = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: ASIN
});
const asinConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asin,
  backendName: 'webgl',
  kernelFunc: asin
};

/***/ }),

/***/ 95430:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinh": () => (/* binding */ asinh),
/* harmony export */   "asinhConfig": () => (/* binding */ asinhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ASINH = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;
const asinh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: ASINH
});
const asinhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asinh,
  backendName: 'webgl',
  kernelFunc: asinh
};

/***/ }),

/***/ 77319:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan": () => (/* binding */ atan),
/* harmony export */   "atanConfig": () => (/* binding */ atanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ATAN = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  return atan(x);
`;
const atan = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: ATAN
});
const atanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan,
  backendName: 'webgl',
  kernelFunc: atan
};

/***/ }),

/***/ 51226:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan2": () => (/* binding */ atan2),
/* harmony export */   "atan2Config": () => (/* binding */ atan2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const ATAN2 = _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  return atan(a, b);
`;
const ATAN2_PACKED = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.CHECK_NAN_SNIPPET_PACKED + `
  return result;
`;
const atan2 = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__.binaryKernelFunc)({
  opSnippet: ATAN2,
  packedOpSnippet: ATAN2_PACKED
});
const atan2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan2,
  backendName: 'webgl',
  kernelFunc: atan2
};

/***/ }),

/***/ 64834:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanh": () => (/* binding */ atanh),
/* harmony export */   "atanhConfig": () => (/* binding */ atanhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ATANH = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
const atanh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: ATANH
});
const atanhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atanh,
  backendName: 'webgl',
  kernelFunc: atanh
};

/***/ }),

/***/ 95268:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool": () => (/* binding */ avgPool),
/* harmony export */   "avgPoolConfig": () => (/* binding */ avgPoolConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pool_gpu */ 74645);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ 45181);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function avgPool(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'avgPool');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = 1;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
    return (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
      inputs: {
        x
      },
      backend
    });
  }
  const avgPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_3__.Pool2DProgram(convInfo, 'avg', false);
  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');
}
const avgPoolConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool,
  backendName: 'webgl',
  kernelFunc: avgPool
};

/***/ }),

/***/ 50688:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3D": () => (/* binding */ avgPool3D),
/* harmony export */   "avgPool3DConfig": () => (/* binding */ avgPool3DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pool_gpu */ 74645);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function avgPool3D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode,
    dataFormat
  } = attrs;
  const dilations = [1, 1, 1];
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
  const avgPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_1__.Pool3DProgram(convInfo, 'avg', false);
  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');
}
const avgPool3DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3D,
  backendName: 'webgl',
  kernelFunc: avgPool3D
};

/***/ }),

/***/ 59966:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3DGrad": () => (/* binding */ avgPool3DGrad),
/* harmony export */   "avgPool3DGradConfig": () => (/* binding */ avgPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../avg_pool_backprop_gpu */ 34367);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function avgPool3DGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const x = input;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = [1, 1, 1];
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
  const avgPoolBackpropProgram = new _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.AvgPool3DBackpropProgram(convInfo);
  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);
}
const avgPool3DGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3DGrad,
  backendName: 'webgl',
  kernelFunc: avgPool3DGrad
};

/***/ }),

/***/ 39983:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPoolGrad": () => (/* binding */ avgPoolGrad),
/* harmony export */   "avgPoolGradConfig": () => (/* binding */ avgPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../avg_pool_backprop_gpu */ 34367);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ 45181);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function avgPoolGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const x = input;
  (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([dy, input], 'avgPoolGrad');
  const {
    filterSize,
    strides,
    pad
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);
  const avgPoolBackpropProgram = new _avg_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__.AvgPool2DBackpropProgram(convInfo);
  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);
}
const avgPoolGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPoolGrad,
  backendName: 'webgl',
  kernelFunc: avgPoolGrad
};

/***/ }),

/***/ 70022:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchMatMul": () => (/* binding */ batchMatMul),
/* harmony export */   "batchMatMulConfig": () => (/* binding */ batchMatMulConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BatchMatMul_impl */ 32997);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function batchMatMul(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    a,
    b
  } = inputs;
  const {
    transposeA,
    transposeB
  } = attrs;
  return (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__.batchMatMulImpl)({
    a,
    b,
    transposeA,
    transposeB,
    backend
  });
}
const batchMatMulConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchMatMul,
  backendName: 'webgl',
  kernelFunc: batchMatMul
};

/***/ }),

/***/ 32997:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MATMUL_SHARED_DIM_THRESHOLD": () => (/* binding */ MATMUL_SHARED_DIM_THRESHOLD),
/* harmony export */   "batchMatMulImpl": () => (/* binding */ batchMatMulImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mulmat_packed_gpu */ 71650);
/* harmony import */ var _Multiply__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Multiply */ 45706);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Sum */ 52081);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







// Empirically determined minimal shared dimension in matmul before we forward
// to a.mul(b).sum() in order to take advantage of GPU parallelism. See
// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.
const MATMUL_SHARED_DIM_THRESHOLD = 1000;
function batchMatMulImpl({
  a,
  b,
  transposeA,
  transposeB,
  backend,
  bias = null,
  preluActivationWeights = null,
  leakyreluAlpha = 0,
  activation = null
}) {
  const aRank = a.shape.length;
  const bRank = b.shape.length;
  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];
  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];
  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];
  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];
  const outerDimsA = a.shape.slice(0, -2);
  const outerDimsB = b.shape.slice(0, -2);
  const batchDimA = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outerDimsA);
  const batchDimB = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outerDimsB);
  const outShapeOuterDims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));
  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];
  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];
  // The rest of the implementation is designed to operate on rank-3 tensors
  const a3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: a
    },
    backend,
    attrs: {
      shape: a3dShape
    }
  });
  const b3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: b
    },
    backend,
    attrs: {
      shape: b3dShape
    }
  });
  const intermediates = [a3d, b3d];
  const batchDim = Math.max(batchDimA, batchDimB);
  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];
  const hasBias = bias != null;
  const hasPreluActivationWeights = preluActivationWeights != null;
  const hasLeakyreluAlpha = activation === 'leakyrelu';
  const fusedActivation = activation != null ? (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.mapActivationToShaderProgram)(activation, true) : null;
  const containsFusedOps = hasBias || hasPreluActivationWeights || hasLeakyreluAlpha || fusedActivation != null;
  let out;
  // Since the matrices are vectors, it is faster to call mul().sum()
  // because sum() is O(sqrt(N)) due to divide-and-conquer.
  if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {
    let aVec = a3d;
    let bVec = b3d;
    if (transposeA) {
      aVec = (0,_Transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)({
        inputs: {
          x: a3d
        },
        backend,
        attrs: {
          perm: [0, 2, 1]
        }
      });
      intermediates.push(aVec);
    }
    if (transposeB) {
      bVec = (0,_Transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)({
        inputs: {
          x: b3d
        },
        backend,
        attrs: {
          perm: [0, 2, 1]
        }
      });
      intermediates.push(bVec);
    }
    const shouldReshapeA = outerShapeB !== 1;
    const shouldReshapeB = outerShapeB === 1;
    let aVec3d = aVec;
    if (shouldReshapeA) {
      aVec3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
        inputs: {
          x: aVec
        },
        backend,
        attrs: {
          shape: [batchDim, sharedDim, 1]
        }
      });
      intermediates.push(aVec3d);
    }
    const axis = outerShapeB === 1 ? 2 : 1;
    let bVec3d = bVec;
    if (shouldReshapeB) {
      bVec3d = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
        inputs: {
          x: bVec
        },
        backend,
        attrs: {
          shape: [batchDim, 1, sharedDim]
        }
      });
      intermediates.push(bVec3d);
    }
    const product = (0,_Multiply__WEBPACK_IMPORTED_MODULE_4__.multiply)({
      inputs: {
        a: aVec3d,
        b: bVec3d
      },
      backend
    });
    out = (0,_Sum__WEBPACK_IMPORTED_MODULE_5__.sum)({
      inputs: {
        x: product
      },
      backend,
      attrs: {
        axis,
        keepDims: true
      }
    });
    intermediates.push(product);
  } else {
    const dtype = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(a.dtype, b.dtype);
    const program = new _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_6__.MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
    const inputs = [a3d, b3d];
    if (bias != null) {
      inputs.push(bias);
    }
    if (hasPreluActivationWeights) {
      inputs.push(preluActivationWeights);
    }
    if (hasLeakyreluAlpha) {
      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));
      inputs.push($leakyreluAlpha);
      intermediates.push($leakyreluAlpha);
    }
    out = backend.runWebGLProgram(program, inputs, dtype);
  }
  const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  intermediates.push(out);
  for (const i of intermediates) {
    backend.disposeIntermediateTensorInfo(i);
  }
  return outReshaped;
}

/***/ }),

/***/ 33255:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchNorm": () => (/* binding */ batchNorm),
/* harmony export */   "batchNormConfig": () => (/* binding */ batchNormConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _batchnorm_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../batchnorm_gpu */ 63362);
/* harmony import */ var _batchnorm_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../batchnorm_packed_gpu */ 23630);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const batchNorm = ({
  inputs,
  backend,
  attrs
}) => {
  const {
    x,
    mean,
    variance,
    offset,
    scale
  } = inputs;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');
  let {
    varianceEpsilon
  } = attrs;
  if (varianceEpsilon == null) {
    varianceEpsilon = 0.001;
  }
  const finalInputs = [x, mean, variance];
  let offsetShape = null;
  if (offset != null) {
    offsetShape = offset.shape;
    finalInputs.push(offset);
  }
  let scaleShape = null;
  if (scale != null) {
    scaleShape = scale.shape;
    finalInputs.push(scale);
  }
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_NORMALIZATION') ? new _batchnorm_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new _batchnorm_gpu__WEBPACK_IMPORTED_MODULE_2__.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);
  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);
  return output;
};
const batchNormConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedBatchNorm,
  backendName: 'webgl',
  kernelFunc: batchNorm
};

/***/ }),

/***/ 96077:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchToSpaceND": () => (/* binding */ batchToSpaceND),
/* harmony export */   "batchToSpaceNDConfig": () => (/* binding */ batchToSpaceNDConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Slice */ 92461);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const batchToSpaceND = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockShape,
    crops
  } = attrs;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet');
  const prod = blockShape.reduce((a, b) => a * b);
  const reshaped = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshaped(x.shape, blockShape, prod);
  const permuted = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getPermuted(reshaped.length, blockShape.length);
  const reshapedPermuted = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshapedPermuted(x.shape, blockShape, prod);
  const sliceBeginCoords = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSliceBeginCoords(crops, blockShape.length);
  const sliceSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);
  const toDispose = [];
  const reshapedIntermediate = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: reshaped
    }
  });
  const transposedIntermediate = (0,_Transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)({
    inputs: {
      x: reshapedIntermediate
    },
    backend,
    attrs: {
      perm: permuted
    }
  });
  const reshapedIntermediate2 = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: transposedIntermediate
    },
    backend,
    attrs: {
      shape: reshapedPermuted
    }
  });
  const sliced = (0,_Slice__WEBPACK_IMPORTED_MODULE_3__.slice)({
    inputs: {
      x: reshapedIntermediate2
    },
    backend,
    attrs: {
      begin: sliceBeginCoords,
      size: sliceSize
    }
  });
  toDispose.push(reshapedIntermediate);
  toDispose.push(transposedIntermediate);
  toDispose.push(reshapedIntermediate2);
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return sliced;
};
const batchToSpaceNDConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchToSpaceND,
  backendName: 'webgl',
  kernelFunc: batchToSpaceND
};

/***/ }),

/***/ 74444:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bincount": () => (/* binding */ bincount),
/* harmony export */   "bincountConfig": () => (/* binding */ bincountConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function bincount(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    weights
  } = inputs;
  const {
    size
  } = attrs;
  const xVals = backend.readSync(x.dataId);
  const weightsVals = backend.readSync(weights.dataId);
  const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.bincountImplCPU)(xVals, weightsVals, weights.dtype, weights.shape, size);
  return backend.makeTensorInfo([size], weights.dtype, outVals);
}
const bincountConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Bincount,
  backendName: 'webgl',
  kernelFunc: bincount
};

/***/ }),

/***/ 59503:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BroadcastArgs.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastArgs": () => (/* binding */ broadcastArgs),
/* harmony export */   "broadcastArgsConfig": () => (/* binding */ broadcastArgsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function broadcastArgs(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    s0,
    s1
  } = inputs;
  const s0Vals = backend.readSync(s0.dataId);
  const s1Vals = backend.readSync(s1.dataId);
  const broadcastShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));
  return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));
}
const broadcastArgsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BroadcastArgs,
  backendName: 'webgl',
  kernelFunc: broadcastArgs
};

/***/ }),

/***/ 84004:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cast": () => (/* binding */ cast),
/* harmony export */   "castConfig": () => (/* binding */ castConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Complex */ 15661);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 51542);
/* harmony import */ var _NotEqual__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NotEqual */ 42619);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Real */ 50954);
/* harmony import */ var _kernel_utils_int__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_utils/int */ 84207);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








function cast(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    dtype
  } = attrs;
  // Casting to complex64.
  if (dtype === 'complex64') {
    if (x.dtype === 'complex64') {
      return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
        inputs: {
          x
        },
        backend
      });
    }
    // TODO(annxingyuan): Import kernel function once zeros is modularized.
    const zerosTensor = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(x.shape);
    const floatX = cast({
      inputs: {
        x
      },
      backend,
      attrs: {
        dtype: 'float32'
      }
    });
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
      inputs: {
        real: floatX,
        imag: zerosTensor
      },
      backend
    });
    zerosTensor.dispose();
    backend.disposeIntermediateTensorInfo(floatX);
    return result;
  }
  // Casting from complex64
  if (x.dtype === 'complex64') {
    const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_3__.real)({
      inputs: {
        input: x
      },
      backend
    });
    const result = cast({
      inputs: {
        x: realPart
      },
      backend,
      attrs: {
        dtype
      }
    });
    backend.disposeIntermediateTensorInfo(realPart);
    return result;
  }
  if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.hasEncodingLoss(x.dtype, dtype)) {
    // We don't change the underlying data, since we cast to higher
    // precision.
    const result = (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
      inputs: {
        x
      },
      backend
    });
    return {
      dataId: result.dataId,
      shape: result.shape,
      dtype
    };
  }
  if (backend.shouldExecuteOnCPU([x])) {
    const values = backend.texData.get(x.dataId).values;
    const [resultShape, resultType, resultData] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__.castImplCPU)(values, x.shape, x.dtype, dtype);
    return backend.makeTensorInfo(resultShape, resultType, resultData);
  }
  if (dtype === 'int32') {
    return (0,_kernel_utils_int__WEBPACK_IMPORTED_MODULE_5__.int)(x, backend);
  }
  if (dtype === 'bool') {
    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getTypedArrayFromDType('bool', 1));
    const binaryInputs = {
      a: x,
      b: zerosTensorInfo
    };
    const result = (0,_NotEqual__WEBPACK_IMPORTED_MODULE_6__.notEqual)({
      inputs: binaryInputs,
      backend
    });
    backend.disposeIntermediateTensorInfo(zerosTensorInfo);
    return result;
  }
  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
}
const castConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cast,
  backendName: 'webgl',
  kernelFunc: cast
};

/***/ }),

/***/ 5127:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceil": () => (/* binding */ ceil),
/* harmony export */   "ceilConfig": () => (/* binding */ ceilConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const CEIL = `return ceil(x);`;
const ceil = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: CEIL,
  packedOpSnippet: CEIL,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.ceilImplCPU
});
const ceilConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ceil,
  backendName: 'webgl',
  kernelFunc: ceil
};

/***/ }),

/***/ 47454:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clipByValue": () => (/* binding */ clipByValue),
/* harmony export */   "clipByValueConfig": () => (/* binding */ clipByValueConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _clip_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../clip_gpu */ 81560);
/* harmony import */ var _clip_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../clip_packed_gpu */ 14756);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function clipByValue(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    clipValueMin,
    clipValueMax
  } = attrs;
  let program;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_CLIP')) {
    program = new _clip_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ClipPackedProgram(x.shape);
  } else {
    program = new _clip_gpu__WEBPACK_IMPORTED_MODULE_2__.ClipProgram(x.shape);
  }
  const customValues = [[clipValueMin], [clipValueMax]];
  return backend.runWebGLProgram(program, [x], x.dtype, customValues);
}
const clipByValueConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ClipByValue,
  backendName: 'webgl',
  kernelFunc: clipByValue
};

/***/ }),

/***/ 15661:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complex": () => (/* binding */ complex),
/* harmony export */   "complexConfig": () => (/* binding */ complexConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * In WebGL data is stored in GPU textures which can't be efficiently copied, so
 * complex tensors share data with their real and imaginary components. Complex
 * tensors' reference to the components is tracked by refCount on the individual
 * component. The refCounts are increased by the identity call.
 *
 * When a complex tensor is disposed, it will reduce the refCount on the
 * components by calling disposeData on each.
 */
function complex(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    real,
    imag
  } = inputs;
  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');
  const complex = backend.texData.get(complexInfo.dataId);
  const realTensorInfo = (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
    inputs: {
      x: real
    },
    backend
  });
  const imagTensorInfo = (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
    inputs: {
      x: imag
    },
    backend
  });
  complex.complexTensorInfos = {
    real: realTensorInfo,
    imag: imagTensorInfo
  };
  return complexInfo;
}
const complexConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Complex,
  backendName: 'webgl',
  kernelFunc: complex
};

/***/ }),

/***/ 12628:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complexAbs": () => (/* binding */ complexAbs),
/* harmony export */   "complexAbsConfig": () => (/* binding */ complexAbsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _complex_abs_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../complex_abs_gpu */ 21710);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


// Returns a TensorInfo with the complex shape and the dataId of the
// underlying part. We need to do this because a reshaped complex tensor is
// not reflected in its parts.
function makeComplexComponentTensorInfo(complexTensor, complexPart) {
  return {
    dataId: complexPart.dataId,
    dtype: complexPart.dtype,
    shape: complexTensor.shape
  };
}
function complexAbs(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  const xData = backend.texData.get(x.dataId);
  const program = new _complex_abs_gpu__WEBPACK_IMPORTED_MODULE_1__.ComplexAbsProgram(x.shape);
  const programInputs = [makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real), makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)];
  return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);
}
const complexAbsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ComplexAbs,
  backendName: 'webgl',
  kernelFunc: complexAbs
};

/***/ }),

/***/ 63632:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat": () => (/* binding */ concat),
/* harmony export */   "concatConfig": () => (/* binding */ concatConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Concat_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Concat_impl */ 14030);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function concat(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    axis
  } = attrs;
  const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, inputs[0].shape)[0];
  const shapes = inputs.map(t => t.shape);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertParamsConsistent(shapes, $axis);
  const outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs.map(t => t.shape), $axis);
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShape) === 0) {
    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);
  }
  // Keep only non-empty tensors (ignore tensors with 0 in their shape).
  const $inputs = inputs.filter(t => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape) > 0);
  if ($inputs.length === 1) {
    return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
      inputs: {
        x: $inputs[0]
      },
      backend
    });
  }
  return (0,_Concat_impl__WEBPACK_IMPORTED_MODULE_2__.concatImpl)($inputs, $axis, backend);
}
const concatConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Concat,
  backendName: 'webgl',
  kernelFunc: concat
};

/***/ }),

/***/ 14030:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatImpl": () => (/* binding */ concatImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _concat_gpu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../concat_gpu */ 3534);
/* harmony import */ var _concat_packed_gpu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../concat_packed_gpu */ 40452);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../unaryop_packed_gpu */ 81992);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ 15661);
/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ 80807);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ 50954);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










function concatImpl(inputs, axis, backend) {
  const dtype = inputs[0].dtype;
  if (dtype === 'complex64') {
    const reals = inputs.map(t => (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({
      inputs: {
        input: t
      },
      backend
    }));
    const imags = inputs.map(t => (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({
      inputs: {
        input: t
      },
      backend
    }));
    const realConcated = concatImpl(reals, axis, backend);
    const imagConcated = concatImpl(imags, axis, backend);
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({
      inputs: {
        real: realConcated,
        imag: imagConcated
      },
      backend
    });
    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));
    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));
    backend.disposeIntermediateTensorInfo(realConcated);
    backend.disposeIntermediateTensorInfo(imagConcated);
    return result;
  }
  let runOnCpu = backend.shouldExecuteOnCPU(inputs);
  // Run on cpu if dtype is string. For string, the backend represents it
  // as Uint8Array[], where each Uint8Array is a character. Given that the
  // computation is only on the outer array, uploading the whole data onto
  // gpu is wasteful. Also, currently webgl doesn't have a design to
  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we
  // just run the kernel on cpu if dtype is string.
  if (dtype === 'string') {
    runOnCpu = true;
  }
  if (runOnCpu) {
    // Any concat of n-dimensional tensors across any axis can be reduced to
    // a concatenation of two-dimensional tensors across the axis 1 by first
    // partitioning the axes of the original tensors into those less than the
    // axis to be concatenated and the rest. Then reshape the tensors
    // into a two-dimensional tensor by collapsing these two sets of axes and
    // concatenate the resulting matrices across the axis 1, finally reshaping
    // the result to have the proper shape.
    const tensors2D = inputs.map(t => {
      const innerSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape.slice(axis));
      const shape = [-1, innerSize];
      return (0,_Reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)({
        inputs: {
          x: t
        },
        backend,
        attrs: {
          shape
        }
      });
    });
    const inputsValShapes = tensors2D.map(t => {
      return {
        vals: backend.readSync(t.dataId),
        shape: t.shape
      };
    });
    // Concats 2d tensors along axis=1.
    const outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);
    const simplyConcat = tensors2D[0].shape[0] === 1;
    const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_5__.concatImplCPU)(inputsValShapes, outShape, dtype, simplyConcat);
    const finalOutShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs.map(t => t.shape), axis);
    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);
    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));
    return outInfo;
  }
  // Keep only non-empty tensors (ignore tensors with 0 in their shape).
  const $inputs = inputs.filter(t => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(t.shape) > 0);
  const shouldPack = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && $inputs[0].shape.length > 1;
  if ($inputs.length === 1) {
    // Clone tensor.
    const program = shouldPack ? new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_6__.UnaryOpProgram(inputs[0].shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_6__.CLONE) : new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_7__.UnaryOpPackedProgram(inputs[0].shape, _unaryop_gpu__WEBPACK_IMPORTED_MODULE_6__.CLONE);
    return backend.runWebGLProgram(program, inputs, dtype);
  }
  const maxTexturesInShader = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');
  if ($inputs.length > maxTexturesInShader) {
    const reducedInputs = [];
    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {
      const subArray = $inputs.slice(i, i + maxTexturesInShader);
      reducedInputs.push(concatImpl(subArray, axis, backend));
    }
    const result = concatImpl(reducedInputs, axis, backend);
    for (const i of reducedInputs) {
      backend.disposeIntermediateTensorInfo(i);
    }
    return result;
  }
  if (shouldPack) {
    const program = new _concat_packed_gpu__WEBPACK_IMPORTED_MODULE_8__.ConcatPackedProgram($inputs.map(t => t.shape), axis);
    return backend.runWebGLProgram(program, $inputs, dtype);
  }
  const {
    tensors2D,
    outShape
  } = computeTensors2D($inputs, axis, backend);
  const program = new _concat_gpu__WEBPACK_IMPORTED_MODULE_9__.ConcatProgram(tensors2D.map(t => t.shape));
  const result = backend.runWebGLProgram(program, tensors2D, dtype);
  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));
  const reshapedResult = (0,_Reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)({
    inputs: {
      x: result
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(result);
  return reshapedResult;
}
function computeTensors2D(inputs, axis, backend) {
  // Any concat of n-dimensional tensors across any axis can be reduced to
  // a concatenation of two-dimensional tensors across the axis 1 by first
  // partitioning the axes of the original tensors into those less than the
  // axis to be concatenated and the rest. Then reshape the tensors
  // into a two-dimensional tensor by collapsing these two sets of axes and
  // concatenate the resulting matrices across the axis 1, finally reshaping
  // the result to have the proper shape.
  const outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutShape(inputs.map(t => t.shape), axis);
  const tensors2D = inputs.map(x => (0,_Reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)({
    inputs: {
      x
    },
    attrs: {
      shape: [-1, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape.slice(axis))]
    },
    backend
  }));
  return {
    tensors2D,
    outShape
  };
}

/***/ }),

/***/ 9625:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DConfig": () => (/* binding */ conv2DConfig),
/* harmony export */   "conv2d": () => (/* binding */ conv2d)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../conv_gpu */ 57007);
/* harmony import */ var _conv_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv_packed_gpu */ 386);
/* harmony import */ var _Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Conv2D_impl */ 38495);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function conv2d(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode
  } = attrs;
  const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
  let out;
  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
    out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__.conv2dByMatMul)({
      x,
      filter,
      convInfo,
      backend
    });
  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast' && (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_EXP_CONV')) {
    const program = new _conv_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.Conv2DPackedProgram(convInfo);
    const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];
    out = backend.runWebGLProgram(program, [x, filter], 'float32', customValues);
  } else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_CONV_IM2COL')) {
    out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_1__.conv2dWithIm2Row)({
      x,
      filter,
      convInfo,
      backend
    });
  } else {
    const program = new _conv_gpu__WEBPACK_IMPORTED_MODULE_3__.Conv2DProgram(convInfo);
    out = backend.runWebGLProgram(program, [x, filter], 'float32');
  }
  const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: convInfo.outShape
    }
  });
  backend.disposeIntermediateTensorInfo(out);
  return outReshaped;
}
const conv2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2D,
  backendName: 'webgl',
  kernelFunc: conv2d
};

/***/ }),

/***/ 53896:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropFilter": () => (/* binding */ conv2DBackpropFilter),
/* harmony export */   "conv2DBackpropFilterConfig": () => (/* binding */ conv2DBackpropFilterConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu */ 52624);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv2DBackpropFilter(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dimRoundingMode,
    filterShape
  } = attrs;
  const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
  const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv2DDerFilterProgram(convInfo);
  return backend.runWebGLProgram(program, [x, dy], 'float32');
}
const conv2DBackpropFilterConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropFilter,
  backendName: 'webgl',
  kernelFunc: conv2DBackpropFilter
};

/***/ }),

/***/ 29697:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropInput": () => (/* binding */ conv2DBackpropInput),
/* harmony export */   "conv2DBackpropInputConfig": () => (/* binding */ conv2DBackpropInputConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv_backprop_gpu */ 52624);
/* harmony import */ var _conv_backprop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_packed_gpu */ 12119);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function conv2DBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    inputShape,
    strides,
    pad,
    dataFormat,
    dimRoundingMode
  } = attrs;
  const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK') && $dataFormat === 'channelsLast') {
    const customValues = [[convInfo.strideHeight, convInfo.strideWidth]];
    const program = new _conv_backprop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv2DDerInputPackedProgram(convInfo);
    return backend.runWebGLProgram(program, [dy, filter], 'float32', customValues);
  } else {
    const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__.Conv2DDerInputProgram(convInfo);
    return backend.runWebGLProgram(program, [dy, filter], 'float32');
  }
}
const conv2DBackpropInputConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropInput,
  backendName: 'webgl',
  kernelFunc: conv2DBackpropInput
};

/***/ }),

/***/ 38495:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2dByMatMul": () => (/* binding */ conv2dByMatMul),
/* harmony export */   "conv2dWithIm2Row": () => (/* binding */ conv2dWithIm2Row)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _im2col_packed_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../im2col_packed_gpu */ 17059);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../mulmat_packed_gpu */ 71650);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../webgl_util */ 45181);
/* harmony import */ var _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BatchMatMul_impl */ 32997);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Identity */ 51542);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one
// dimension to compute batchMatMul, so bias and activation weights are also
// supposed to fuse the two dimensions into one.
//
// This function computes the target shape for fusing height and width
// dimensions. Returning null means the shape is already compatible.
//
// Even though the bias is not supposed to be a 3-D or a 4-D (including
// batch) tensor and PReLU activiation weights is not supposed to be a 4-D
// tensor, we still need to support them, because we haven't disabled
// them for NHWC format.
// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196
function getShapeForBatchMatMul(shape, isChannelsLast) {
  const length = shape.length;
  if (length >= 3) {
    return isChannelsLast ? [...shape.slice(0, -3) /* batch */, shape[length - 3] * shape[length - 2] /* height * width */, shape[length - 1] /* channel */] : [...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */, shape[length - 2] * shape[length - 1] /* height * width */];
  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {
    return [shape[0], 1];
  } else {
    return null;
  }
}
// For 1x1 kernels that iterate through every point in the input, convolution
// can be expressed as matrix multiplication (without need for memory
// remapping).
function conv2dByMatMul({
  x,
  filter,
  convInfo,
  backend,
  bias = null,
  preluActivationWeights = null,
  leakyreluAlpha = 0,
  activation = null
}) {
  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the
  // result from 2D to 4D.
  const xShape = x.shape;
  const xTexData = backend.texData.get(x.dataId);
  const sharedMatMulDim = convInfo.inChannels;
  const outerShapeX = xShape[0] * xShape[1] * xShape[2];
  const outerShapeFilter = convInfo.outChannels;
  const isChannelsLast = convInfo.dataFormat === 'channelsLast';
  const transposeA = false;
  const transposeB = false;
  let out;
  const intermediates = [];
  if (preluActivationWeights != null) {
    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);
    if (targetShape != null) {
      preluActivationWeights = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
        inputs: {
          x: preluActivationWeights
        },
        backend,
        attrs: {
          shape: targetShape
        }
      });
      intermediates.push(preluActivationWeights);
    }
  }
  if (bias != null) {
    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);
    if (targetShape != null) {
      bias = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
        inputs: {
          x: bias
        },
        backend,
        attrs: {
          shape: targetShape
        }
      });
      intermediates.push(bias);
    }
  }
  // TODO: Once reduction ops are packed, batchMatMul will always be packed
  // and we can remove this condition.
  const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_2__.MATMUL_SHARED_DIM_THRESHOLD;
  // The algorithm in the if condition assumes (1) the output will be packed,
  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already
  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same
  // for xTexData.shape and xShape.
  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked && isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));
  if (canOptimize) {
    // We avoid expensive packed 2x2 reshape by padding col count to next,
    // even number. When col is odd, the result of packed batchMatMul is
    // the same (has the same texture layout and and values in the texture) as
    // it is for next even col. We make the odd-cols tensor to look like
    // even-cols tensor before the operation and, after the batchMatMul,
    // fix the even-cols result to have odd number of cols.
    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);
    const xReshaped = {
      dataId: x.dataId,
      shape: [1, targetShape, convInfo.inChannels],
      dtype: x.dtype
    };
    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.
    // Decrementing col count, after batchMatMul->...->compileProgram leads to
    // invalid col count within the reference in GPGPUBinary.inShapeInfos.
    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos
    // in compileProgram method, but that would affect compilation of all
    // programs - instead, provide a copy here, with even col count, before
    // calling batchMatMul->...->compileProgram and after that, the original
    // xTexData.shape is restored.
    const originalXTexDataShape = xTexData.shape;
    xTexData.shape = xTexData.shape.slice();
    xTexData.shape[xTexData.shape.length - 2]++;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_webgl_util__WEBPACK_IMPORTED_MODULE_3__.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);
    const filterReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
      inputs: {
        x: filter
      },
      backend,
      attrs: {
        shape: [1, convInfo.inChannels, convInfo.outChannels]
      }
    });
    intermediates.push(filterReshaped);
    const pointwiseConv = (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_2__.batchMatMulImpl)({
      a: xReshaped,
      b: filterReshaped,
      backend,
      transposeA,
      transposeB,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');
    // Restore the input shape to original.
    xTexData.shape = originalXTexDataShape;
    // Set the output shape - there is no need for expensive reshape as data
    // layout is already correct.
    pointwiseConvTexData.shape = convInfo.outShape;
    out = (0,_Identity__WEBPACK_IMPORTED_MODULE_4__.identity)({
      inputs: {
        x: pointwiseConv
      },
      backend
    });
    out.shape = convInfo.outShape;
    intermediates.push(pointwiseConv);
  } else {
    const numCols = convInfo.outHeight * convInfo.outWidth;
    const xReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
      inputs: {
        x
      },
      backend,
      attrs: {
        shape: isChannelsLast ? [convInfo.batchSize, numCols, convInfo.inChannels] : [convInfo.batchSize, convInfo.inChannels, numCols]
      }
    });
    const filterReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
      inputs: {
        x: filter
      },
      backend,
      attrs: {
        shape: [1, convInfo.inChannels, convInfo.outChannels]
      }
    });
    const result = (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_2__.batchMatMulImpl)({
      a: isChannelsLast ? xReshaped : filterReshaped,
      b: isChannelsLast ? filterReshaped : xReshaped,
      transposeA: !isChannelsLast,
      transposeB,
      backend,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
    out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        shape: convInfo.outShape
      }
    });
    intermediates.push(xReshaped);
    intermediates.push(filterReshaped);
    intermediates.push(result);
  }
  for (const i of intermediates) {
    backend.disposeIntermediateTensorInfo(i);
  }
  return out;
}
// Implements the im2row algorithm as outlined in "High Performance
// Convolutional Neural Networks for Document Processing" (Suvisoft, 2006)
function conv2dWithIm2Row({
  x,
  filter,
  convInfo,
  backend,
  bias = null,
  preluActivationWeights = null,
  leakyreluAlpha = 0,
  activation = null
}) {
  // Rearranges conv2d input so each block to be convolved over forms the
  // column of a new matrix with shape [filterWidth * filterHeight *
  // inChannels, outHeight * outWidth]. The filter is also rearranged so each
  // output channel forms a row of a new matrix with shape [outChannels,
  // filterWidth * filterHeight * inChannels]. The convolution is then
  // computed by multiplying these matrices and reshaping the result.
  const {
    filterWidth,
    filterHeight,
    inChannels,
    outWidth,
    outHeight,
    dataFormat
  } = convInfo;
  const isChannelsLast = dataFormat === 'channelsLast';
  const sharedDim = filterWidth * filterHeight * inChannels;
  const numCols = outHeight * outWidth;
  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];
  const transposeA = true;
  const transposeB = false;
  const intermediates = [];
  if (preluActivationWeights != null) {
    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);
    if (targetShape != null) {
      preluActivationWeights = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
        inputs: {
          x: preluActivationWeights
        },
        backend,
        attrs: {
          shape: targetShape
        }
      });
      intermediates.push(preluActivationWeights);
    }
  }
  if (bias != null) {
    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);
    if (targetShape != null) {
      bias = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
        inputs: {
          x: bias
        },
        backend,
        attrs: {
          shape: targetShape
        }
      });
      intermediates.push(bias);
    }
  }
  const w2Row = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: filter
    },
    backend,
    attrs: {
      shape: [1, sharedDim, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(filter.shape) / sharedDim]
    }
  });
  intermediates.push(w2Row);
  const im2ColProgram = new _im2col_packed_gpu__WEBPACK_IMPORTED_MODULE_5__.Im2ColPackedProgram(x2ColShape, convInfo);
  const customValues = [x.shape, [convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels], [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]];
  const im2Col = backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);
  const im2ColReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: im2Col
    },
    backend,
    attrs: {
      shape: x2ColShape
    }
  });
  intermediates.push(im2Col);
  intermediates.push(im2ColReshaped);
  const hasBias = bias != null;
  const hasPreluActivationWeights = preluActivationWeights != null;
  const hasLeakyreluAlpha = activation === 'leakyrelu';
  const fusedActivation = activation ? (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_6__.mapActivationToShaderProgram)(activation, true) : null;
  const matmulProgram = new _mulmat_packed_gpu__WEBPACK_IMPORTED_MODULE_7__.MatMulPackedProgram(isChannelsLast ? im2ColReshaped.shape : w2Row.shape, isChannelsLast ? w2Row.shape : im2ColReshaped.shape, isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] : [convInfo.batchSize, convInfo.outChannels, numCols], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
  const inputs = isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];
  if (bias) {
    inputs.push(bias);
  }
  if (hasPreluActivationWeights) {
    inputs.push(preluActivationWeights);
  }
  if (hasLeakyreluAlpha) {
    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));
    inputs.push($leakyreluAlpha);
    intermediates.push($leakyreluAlpha);
  }
  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');
  const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: product
    },
    backend,
    attrs: {
      shape: convInfo.outShape
    }
  });
  intermediates.push(product);
  for (const i of intermediates) {
    backend.disposeIntermediateTensorInfo(i);
  }
  return out;
}

/***/ }),

/***/ 33384:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3D": () => (/* binding */ conv3D),
/* harmony export */   "conv3DConfig": () => (/* binding */ conv3DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_gpu */ 57007);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv3D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);
  const program = new _conv_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv3DProgram(convInfo);
  return backend.runWebGLProgram(program, [x, filter], 'float32');
}
const conv3DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3D,
  backendName: 'webgl',
  kernelFunc: conv3D
};

/***/ }),

/***/ 9338:
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DBackpropFilterV2": () => (/* binding */ conv3DBackpropFilterV2),
/* harmony export */   "conv3DBackpropFilterV2Config": () => (/* binding */ conv3DBackpropFilterV2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu */ 52624);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv3DBackpropFilterV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    pad,
    filterShape
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);
  const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv3DDerFilterProgram(convInfo);
  return backend.runWebGLProgram(program, [x, dy], 'float32');
}
const conv3DBackpropFilterV2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropFilterV2,
  backendName: 'webgl',
  kernelFunc: conv3DBackpropFilterV2
};

/***/ }),

/***/ 94077:
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DBackpropInput": () => (/* binding */ conv3DBackpropInput),
/* harmony export */   "conv3DBackpropInputConfig": () => (/* binding */ conv3DBackpropInputConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu */ 52624);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function conv3DBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    pad,
    strides,
    inputShape
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);
  const program = new _conv_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.Conv3DDerInputProgram(convInfo);
  return backend.runWebGLProgram(program, [dy, filter], 'float32');
}
const conv3DBackpropInputConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropInputV2,
  backendName: 'webgl',
  kernelFunc: conv3DBackpropInput
};

/***/ }),

/***/ 39295:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cos": () => (/* binding */ cos),
/* harmony export */   "cosConfig": () => (/* binding */ cosConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const COS = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `
  return cos(x);
`;
const COS_PACKED = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${_binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.CHECK_NAN_SNIPPET_PACKED}
  return result;
`;
const cos = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: COS,
  packedOpSnippet: COS_PACKED
});
const cosConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cos,
  backendName: 'webgl',
  kernelFunc: cos
};

/***/ }),

/***/ 68402:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosh": () => (/* binding */ cosh),
/* harmony export */   "coshConfig": () => (/* binding */ coshConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const COSH = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
const cosh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: COSH
});
const coshConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cosh,
  backendName: 'webgl',
  kernelFunc: cosh
};

/***/ }),

/***/ 70878:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cropAndResize": () => (/* binding */ cropAndResize),
/* harmony export */   "cropAndResizeConfig": () => (/* binding */ cropAndResizeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _crop_and_resize_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crop_and_resize_gpu */ 929);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const cropAndResize = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    image,
    boxes,
    boxInd
  } = inputs;
  const {
    cropSize,
    method,
    extrapolationValue
  } = attrs;
  const program = new _crop_and_resize_gpu__WEBPACK_IMPORTED_MODULE_1__.CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);
  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');
};
const cropAndResizeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.CropAndResize,
  backendName: 'webgl',
  kernelFunc: cropAndResize
};

/***/ }),

/***/ 45200:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cum_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumImpl": () => (/* binding */ cumImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cum_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cum_gpu */ 95705);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ 51542);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function cumImpl(op, x, backend, axis, exclusive, reverse) {
  const xRank = x.shape.length;
  const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation([axis], xRank);
  let permutedX = x;
  if (permutation != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
  }
  const permutedAxis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(1, xRank)[0];
  if (permutedAxis !== xRank - 1) {
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${x.shape.length - 1} ` + `but got axis=${axis}`);
  }
  const size = permutedX.shape[permutedAxis];
  let result = (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
    inputs: {
      x: permutedX
    },
    backend
  });
  // Use cum parallel algorithm, inspired by:
  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda
  // Note: although the algorithm is called sum, it works for any associtative
  // operator with an identity.
  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {
    const program = new _cum_gpu__WEBPACK_IMPORTED_MODULE_3__.CumProgram(op, permutedX.shape, false, reverse);
    const customValues = [[i]];
    const prevResult = result;
    result = backend.runWebGLProgram(program, [result], result.dtype, customValues);
    backend.disposeIntermediateTensorInfo(prevResult);
  }
  // For exclusive cum, shift the end result in the direction of product or sum
  // and add 1 for product or 0 for sum to the front index.
  if (exclusive) {
    const program = new _cum_gpu__WEBPACK_IMPORTED_MODULE_3__.CumProgram(op, permutedX.shape, exclusive, reverse);
    const prevResult = result;
    result = backend.runWebGLProgram(program, [result], result.dtype);
    backend.disposeIntermediateTensorInfo(prevResult);
  }
  if (permutation != null) {
    const reversePermutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getUndoAxesPermutation(permutation);
    const reverseTransposedResult = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        perm: reversePermutation
      }
    });
    backend.disposeIntermediateTensorInfo(result);
    backend.disposeIntermediateTensorInfo(permutedX);
    return reverseTransposedResult;
  }
  return result;
}

/***/ }),

/***/ 54329:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumprod.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumprod": () => (/* binding */ cumprod),
/* harmony export */   "cumprodConfig": () => (/* binding */ cumprodConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cum_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cum_gpu */ 95705);
/* harmony import */ var _Cum_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Cum_impl */ 45200);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function cumprod(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    exclusive,
    reverse
  } = attrs;
  return (0,_Cum_impl__WEBPACK_IMPORTED_MODULE_1__.cumImpl)(_cum_gpu__WEBPACK_IMPORTED_MODULE_2__.CumOpType.Prod, x, backend, axis, exclusive, reverse);
}
const cumprodConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cumprod,
  backendName: 'webgl',
  kernelFunc: cumprod
};

/***/ }),

/***/ 3619:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumsum": () => (/* binding */ cumsum),
/* harmony export */   "cumsumConfig": () => (/* binding */ cumsumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _cum_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cum_gpu */ 95705);
/* harmony import */ var _Cum_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Cum_impl */ 45200);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function cumsum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    exclusive,
    reverse
  } = attrs;
  return (0,_Cum_impl__WEBPACK_IMPORTED_MODULE_1__.cumImpl)(_cum_gpu__WEBPACK_IMPORTED_MODULE_2__.CumOpType.Sum, x, backend, axis, exclusive, reverse);
}
const cumsumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cumsum,
  backendName: 'webgl',
  kernelFunc: cumsum
};

/***/ }),

/***/ 71185:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "denseBincount": () => (/* binding */ denseBincount),
/* harmony export */   "denseBincountConfig": () => (/* binding */ denseBincountConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function denseBincount(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    weights
  } = inputs;
  const {
    size,
    binaryOutput
  } = attrs;
  if (x.shape.length === 1) {
    const xVals = backend.readSync(x.dataId);
    const weightsVals = backend.readSync(weights.dataId);
    const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.bincountImplCPU)(xVals, weightsVals, weights.dtype, weights.shape, size);
    return backend.makeTensorInfo([size], weights.dtype, outVals);
  } else if (x.shape.length === 2) {
    const xBuf = backend.bufferSync(x);
    const weightsBuf = backend.bufferSync(weights);
    const outBuf = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.bincountReduceImplCPU)(xBuf, weightsBuf, size, binaryOutput);
    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);
}
const denseBincountConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DenseBincount,
  backendName: 'webgl',
  kernelFunc: denseBincount
};

/***/ }),

/***/ 85045:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthToSpace": () => (/* binding */ depthToSpace),
/* harmony export */   "depthToSpaceConfig": () => (/* binding */ depthToSpaceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _depth_to_space_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../depth_to_space_gpu */ 86741);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function depthToSpace(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockSize,
    dataFormat
  } = attrs;
  const batchSize = x.shape[0];
  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];
  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];
  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];
  const outputHeight = inputHeight * blockSize;
  const outputWidth = inputWidth * blockSize;
  const outputDepth = inputDepth / (blockSize * blockSize);
  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];
  const program = new _depth_to_space_gpu__WEBPACK_IMPORTED_MODULE_1__.DepthToSpaceProgram(outputShape, blockSize, dataFormat);
  return backend.runWebGLProgram(program, [x], x.dtype);
}
const depthToSpaceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthToSpace,
  backendName: 'webgl',
  kernelFunc: depthToSpace
};

/***/ }),

/***/ 14201:
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNative": () => (/* binding */ depthwiseConv2dNative),
/* harmony export */   "depthwiseConv2dNativeConfig": () => (/* binding */ depthwiseConv2dNativeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv_gpu_depthwise */ 18688);
/* harmony import */ var _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_packed_gpu_depthwise */ 3105);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function depthwiseConv2dNative(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations,
    dimRoundingMode
  } = attrs;
  let $dilations = dilations;
  if ($dilations == null) {
    $dilations = [1, 1];
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);
  let program;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {
    program = new _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConvPacked2DProgram(convInfo);
  } else {
    program = new _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__.DepthwiseConv2DProgram(convInfo);
  }
  const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];
  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);
}
const depthwiseConv2dNativeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNative,
  backendName: 'webgl',
  kernelFunc: depthwiseConv2dNative
};

/***/ }),

/***/ 29721:
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeBackpropFilter": () => (/* binding */ depthwiseConv2dNativeBackpropFilter),
/* harmony export */   "depthwiseConv2dNativeBackpropFilterConfig": () => (/* binding */ depthwiseConv2dNativeBackpropFilterConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu_depthwise */ 31975);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function depthwiseConv2dNativeBackpropFilter(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    dy
  } = inputs;
  const {
    strides,
    dilations,
    pad,
    dimRoundingMode,
    filterShape
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
  const program = new _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConv2DDerFilterProgram(convInfo);
  return backend.runWebGLProgram(program, [x, dy], 'float32');
}
const depthwiseConv2dNativeBackpropFilterConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropFilter,
  backendName: 'webgl',
  kernelFunc: depthwiseConv2dNativeBackpropFilter
};

/***/ }),

/***/ 75214:
/*!********************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeBackpropInput": () => (/* binding */ depthwiseConv2dNativeBackpropInput),
/* harmony export */   "depthwiseConv2dNativeBackpropInputConfig": () => (/* binding */ depthwiseConv2dNativeBackpropInputConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conv_backprop_gpu_depthwise */ 31975);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function depthwiseConv2dNativeBackpropInput(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    filter
  } = inputs;
  const {
    strides,
    dilations,
    pad,
    dimRoundingMode,
    inputShape
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
  const program = new _conv_backprop_gpu_depthwise__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConv2DDerInputProgram(convInfo);
  return backend.runWebGLProgram(program, [dy, filter], 'float32');
}
const depthwiseConv2dNativeBackpropInputConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropInput,
  backendName: 'webgl',
  kernelFunc: depthwiseConv2dNativeBackpropInput
};

/***/ }),

/***/ 74611:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "diag": () => (/* binding */ diag),
/* harmony export */   "diagConfig": () => (/* binding */ diagConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _diag_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../diag_gpu */ 79008);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function diag(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  const outShape = [...x.shape, ...x.shape];
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const flat = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: [xSize]
    }
  });
  const program = new _diag_gpu__WEBPACK_IMPORTED_MODULE_2__.DiagProgram(xSize);
  const res = backend.runWebGLProgram(program, [flat], flat.dtype);
  const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  backend.disposeIntermediateTensorInfo(flat);
  backend.disposeIntermediateTensorInfo(res);
  return out;
}
const diagConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Diag,
  backendName: 'webgl',
  kernelFunc: diag
};

/***/ }),

/***/ 20149:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dilation2D": () => (/* binding */ dilation2D),
/* harmony export */   "dilation2DConfig": () => (/* binding */ dilation2DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _dilation_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dilation_gpu */ 53518);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function dilation2D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter
  } = inputs;
  const {
    strides,
    pad,
    dilations
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);
  let out;
  const program = new _dilation_gpu__WEBPACK_IMPORTED_MODULE_1__.Dilation2DProgram(convInfo);
  out = backend.runWebGLProgram(program, [x, filter], 'float32');
  const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: convInfo.outShape
    }
  });
  backend.disposeIntermediateTensorInfo(out);
  return outReshaped;
}
const dilation2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2D,
  backendName: 'webgl',
  kernelFunc: dilation2D
};

/***/ }),

/***/ 20994:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Einsum.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "einsum": () => (/* binding */ einsum),
/* harmony export */   "einsumConfig": () => (/* binding */ einsumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Multiply__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Multiply */ 45706);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Sum */ 52081);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function einsum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    equation
  } = attrs;
  const tensors = inputs;
  const {
    allDims,
    summedDims,
    idDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.decodeEinsumEquation(equation, tensors.length);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);
  const {
    path,
    steps
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getEinsumComputePath(summedDims, idDims);
  const nSteps = steps.length;
  let out = null;
  let numDimsRemaining = allDims.length;
  const tensorsToDispose = [];
  for (let i = 0; i < nSteps; ++i) {
    for (const idTerm of steps[i]) {
      const {
        permutationIndices: perm,
        expandDims: dimsToExpand
      } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);
      let x;
      if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.isIdentityPermutation(perm)) {
        x = tensors[idTerm];
      } else {
        x = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
          inputs: {
            x: tensors[idTerm]
          },
          backend,
          attrs: {
            perm
          }
        });
        tensorsToDispose.push(x);
      }
      const targetShape = x.shape.slice();
      for (let k = 0; k < dimsToExpand.length; ++k) {
        targetShape.splice(dimsToExpand[k], 0, 1);
      }
      if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(x.shape, targetShape)) {
        x = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
          inputs: {
            x
          },
          backend,
          attrs: {
            shape: targetShape
          }
        });
        tensorsToDispose.push(x);
      }
      if (out === null) {
        out = x;
      } else {
        // tslint:disable-next-line: no-unnecessary-type-assertion
        out = (0,_Multiply__WEBPACK_IMPORTED_MODULE_3__.multiply)({
          inputs: {
            a: x,
            b: out
          },
          backend
        });
        tensorsToDispose.push(out);
      }
    }
    if (i < nSteps - 1) {
      if (path[i] >= 0) {
        out = (0,_Sum__WEBPACK_IMPORTED_MODULE_4__.sum)({
          inputs: {
            x: out
          },
          backend,
          attrs: {
            axis: path[i] - (allDims.length - numDimsRemaining),
            keepDims: false
          }
        });
        tensorsToDispose.push(out);
      }
      numDimsRemaining--;
    }
  }
  // Clean up intermediate tensors.
  for (const tensorInfo of tensorsToDispose) {
    if (tensorInfo === out) {
      continue;
    }
    backend.disposeIntermediateTensorInfo(tensorInfo);
  }
  return out;
}
const einsumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Einsum,
  backendName: 'webgl',
  kernelFunc: einsum
};

/***/ }),

/***/ 8713:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eluConfig": () => (/* binding */ eluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
const ELU_PACKED = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
const elu = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: ELU,
  packedOpSnippet: ELU_PACKED
});
const eluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Elu,
  backendName: 'webgl',
  kernelFunc: elu
};

/***/ }),

/***/ 83526:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eluGrad": () => (/* binding */ eluGrad),
/* harmony export */   "eluGradConfig": () => (/* binding */ eluGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ELU_DER = `return (b >= 0.0) ? a : a * (b + 1.0);`;
const ELU_DER_PACKED = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
const eluGrad = args => {
  const {
    inputs,
    backend
  } = args;
  const {
    dy,
    y
  } = inputs;
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) : new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.BinaryOpProgram(ELU_DER, dy.shape, y.shape);
  return backend.runWebGLProgram(program, [dy, y], dy.dtype);
};
const eluGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.EluGrad,
  backendName: 'webgl',
  kernelFunc: eluGrad
};

/***/ }),

/***/ 19570:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equal": () => (/* binding */ equal),
/* harmony export */   "equalConfig": () => (/* binding */ equalConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const PACKED_EQUAL = `
  return vec4(equal(a, b));
`;
const EQUAL = `return float(a == b);`;
const equal = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: EQUAL,
  packedOpSnippet: PACKED_EQUAL,
  dtype: 'bool',
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.equalImplCPU
});
const equalConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Equal,
  backendName: 'webgl',
  kernelFunc: equal
};

/***/ }),

/***/ 56282:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "erf": () => (/* binding */ erf),
/* harmony export */   "erfConfig": () => (/* binding */ erfConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ERF = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_P};
  float a1 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A1};
  float a2 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A2};
  float a3 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A3};
  float a4 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A4};
  float a5 = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
const erf = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: ERF
});
const erfConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Erf,
  backendName: 'webgl',
  kernelFunc: erf
};

/***/ }),

/***/ 49698:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EXP": () => (/* binding */ EXP),
/* harmony export */   "exp": () => (/* binding */ exp),
/* harmony export */   "expConfig": () => (/* binding */ expConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const EXP = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `
  return exp(x);
`;
const EXP_PACKED = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const exp = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: EXP,
  packedOpSnippet: EXP_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.expImplCPU,
  dtype: 'float32'
});
const expConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Exp,
  backendName: 'webgl',
  kernelFunc: exp
};

/***/ }),

/***/ 58748:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expandDims": () => (/* binding */ expandDims),
/* harmony export */   "expandDimsConfig": () => (/* binding */ expandDimsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function expandDims(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    dim
  } = attrs;
  const {
    input
  } = inputs;
  const inputRank = input.shape.length;
  const newShape = input.shape.slice();
  let $dim = dim;
  if (dim < 0) {
    // Negative value is counted from the tail of rank.
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);
    $dim = inputRank + dim + 1;
  }
  newShape.splice($dim, 0, 1);
  return (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: input
    },
    backend,
    attrs: {
      shape: newShape
    }
  });
}
const expandDimsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ExpandDims,
  backendName: 'webgl',
  kernelFunc: expandDims
};

/***/ }),

/***/ 85307:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expm1": () => (/* binding */ expm1),
/* harmony export */   "expm1Config": () => (/* binding */ expm1Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const EXPM1 = `return exp(x) - 1.0;`;
const expm1 = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: EXPM1,
  packedOpSnippet: EXPM1,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.expm1ImplCPU
});
const expm1Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Expm1,
  backendName: 'webgl',
  kernelFunc: expm1
};

/***/ }),

/***/ 81213:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fft": () => (/* binding */ fft),
/* harmony export */   "fftConfig": () => (/* binding */ fftConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _FFT_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FFT_impl */ 90475);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function fft(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  return (0,_FFT_impl__WEBPACK_IMPORTED_MODULE_1__.fftImpl)(input, false /* inverse */, backend);
}
const fftConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FFT,
  backendName: 'webgl',
  kernelFunc: fft
};

/***/ }),

/***/ 90475:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fftImpl": () => (/* binding */ fftImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _fft_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../fft_gpu */ 39949);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ 15661);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function fftImpl(x, inverse, backend) {
  const xData = backend.texData.get(x.dataId);
  const inputSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  // Collapse all outer dimensions to a single batch dimension.
  const innerDimensionSize = x.shape[x.shape.length - 1];
  const batch = inputSize / innerDimensionSize;
  const input2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: [batch, innerDimensionSize]
    }
  });
  const xShape = input2D.shape;
  const realProgram = new _fft_gpu__WEBPACK_IMPORTED_MODULE_2__.FFTProgram('real', xShape, inverse);
  const imagProgram = new _fft_gpu__WEBPACK_IMPORTED_MODULE_2__.FFTProgram('imag', xShape, inverse);
  const inputs = [{
    dataId: xData.complexTensorInfos.real.dataId,
    dtype: xData.complexTensorInfos.real.dtype,
    shape: xShape
  }, {
    dataId: xData.complexTensorInfos.imag.dataId,
    dtype: xData.complexTensorInfos.imag.dtype,
    shape: xShape
  }];
  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');
  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');
  const complexOutput = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({
    inputs: {
      real: realPart,
      imag: imagPart
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(realPart);
  backend.disposeIntermediateTensorInfo(imagPart);
  const complexOutputReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: complexOutput
    },
    backend,
    attrs: {
      shape: x.shape
    }
  });
  backend.disposeIntermediateTensorInfo(input2D);
  backend.disposeIntermediateTensorInfo(complexOutput);
  return complexOutputReshaped;
}

/***/ }),

/***/ 35576:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fill": () => (/* binding */ fill),
/* harmony export */   "fillConfig": () => (/* binding */ fillConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _fill_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fill_gpu */ 38666);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function fill(args) {
  const {
    backend,
    attrs
  } = args;
  const {
    shape,
    value
  } = attrs;
  let {
    dtype
  } = attrs;
  dtype = dtype || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.inferDtype(value);
  if (dtype === 'string') {
    // String type should be handled in CPU memory.
    const values = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.getArrayFromDType(dtype, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape));
    values.fill(value);
    return backend.makeTensorInfo(shape, dtype, values);
  } else {
    const program = new _fill_gpu__WEBPACK_IMPORTED_MODULE_1__.FillProgram(shape, value);
    const customValues = [[value]];
    return backend.runWebGLProgram(program, [], dtype, customValues);
  }
}
const fillConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Fill,
  backendName: 'webgl',
  kernelFunc: fill
};

/***/ }),

/***/ 20828:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flipLeftRightConfig": () => (/* binding */ flipLeftRightConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _flip_left_right_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../flip_left_right_gpu */ 93102);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const flipLeftRightConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FlipLeftRight,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const webglBackend = backend;
    const program = new _flip_left_right_gpu__WEBPACK_IMPORTED_MODULE_1__.FlipLeftRightProgram(image.shape);
    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);
    return output;
  }
};

/***/ }),

/***/ 40901:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floor": () => (/* binding */ floor),
/* harmony export */   "floorConfig": () => (/* binding */ floorConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const FLOOR = `return floor(x);`;
const floor = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: FLOOR,
  packedOpSnippet: FLOOR,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.floorImplCPU
});
const floorConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Floor,
  backendName: 'webgl',
  kernelFunc: floor
};

/***/ }),

/***/ 8647:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorDiv": () => (/* binding */ floorDiv),
/* harmony export */   "floorDivConfig": () => (/* binding */ floorDivConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


// We use native integer division to deal with floating point imprecision. Since
// we implement floor division and glsl implements truncated division, we
// correct for this by subtracting 1 from result when the result is negative and
// there is a remainder.
const INT_DIV = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
const INT_DIV_PACKED = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
const floorDiv = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: INT_DIV,
  packedOpSnippet: INT_DIV_PACKED,
  dtype: 'int32'
});
const floorDivConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FloorDiv,
  backendName: 'webgl',
  kernelFunc: floorDiv
};

/***/ }),

/***/ 27770:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromPixelsConfig": () => (/* binding */ fromPixelsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tex_util */ 86215);
/* harmony import */ var _FromPixels_utils_from_pixels_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FromPixels_utils/from_pixels_gpu */ 94712);
/* harmony import */ var _FromPixels_utils_from_pixels_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FromPixels_utils/from_pixels_packed_gpu */ 93650);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const fromPixelsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FromPixels,
  backendName: 'webgl',
  kernelFunc: fromPixels
};
let fromPixels2DContext;
let willReadFrequently = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');
function fromPixels(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  let {
    pixels
  } = inputs;
  const {
    numChannels
  } = attrs;
  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;
  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;
  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];
  const texShape = [height, width];
  const outShape = [height, width, numChannels];
  if (isImage || isVideo) {
    const newWillReadFrequently = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');
    if (fromPixels2DContext == null || newWillReadFrequently !== willReadFrequently) {
      willReadFrequently = newWillReadFrequently;
      fromPixels2DContext = document.createElement('canvas').getContext('2d', {
        willReadFrequently
      });
    }
    fromPixels2DContext.canvas.width = width;
    fromPixels2DContext.canvas.height = height;
    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
    pixels = fromPixels2DContext.canvas;
  }
  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');
  // This is a byte texture with pixels.
  backend.texData.get(tempPixelHandle.dataId).usage = _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.PIXELS;
  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK') ? new _FromPixels_utils_from_pixels_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.FromPixelsPackedProgram(outShape) : new _FromPixels_utils_from_pixels_gpu__WEBPACK_IMPORTED_MODULE_3__.FromPixelsProgram(outShape);
  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');
  backend.disposeData(tempPixelHandle.dataId);
  return res;
}

/***/ }),

/***/ 94712:
/*!******************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FromPixelsProgram": () => (/* binding */ FromPixelsProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../glsl_version */ 9198);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class FromPixelsProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();
    const [height, width] = outputShape;
    this.outputShape = outputShape;
    this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);

        vec4 values = ${glsl.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}

/***/ }),

/***/ 93650:
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FromPixelsPackedProgram": () => (/* binding */ FromPixelsPackedProgram)
/* harmony export */ });
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../glsl_version */ 9198);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class FromPixelsPackedProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_0__.getGlslDifferences)();
    const [height, width] = outputShape;
    this.outputShape = outputShape;
    this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${width}.0, ${height}.0);
            vec4 values = ${glsl.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${glsl.output} = result;
      }
    `;
  }
}

/***/ }),

/***/ 72132:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fusedConv2DConfig": () => (/* binding */ fusedConv2DConfig),
/* harmony export */   "fusedConv2d": () => (/* binding */ fusedConv2d)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../conv_gpu */ 57007);
/* harmony import */ var _conv_packed_gpu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../conv_packed_gpu */ 386);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _Conv2D_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Conv2D_impl */ 38495);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






function fusedConv2d(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    strides,
    pad,
    dataFormat,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  } = attrs;
  const $dataFormat = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.convertConv2DDataFormat(dataFormat);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);
  let out;
  const intermediates = [];
  const hasBias = bias != null;
  const hasPreluActivationWeights = preluActivationWeights != null;
  const hasLeakyreluAlpha = activation === 'leakyrelu';
  const prepareInputs = () => {
    const inputs = [x, filter];
    // If the input is a 1-D tensor, align it with the channels.
    //
    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are
    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or
    // scalar inputs are originally aligned, but the 1-D tensor inputs are
    // supposed to be aligned with the channels (only bias and PReLU activation
    // weights could be a 1-D tensor).
    const alignInputWithDataFormat = (input, dataFormat) => {
      if (dataFormat === 'NCHW' && input.shape.length === 1 && input.shape[0] !== 1) {
        const alignedInput = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
          inputs: {
            x: input
          },
          backend,
          attrs: {
            shape: [input.shape[0], 1, 1]
          }
        });
        intermediates.push(alignedInput);
        return alignedInput;
      }
      return input;
    };
    if (hasBias) {
      inputs.push(alignInputWithDataFormat(bias, dataFormat));
    }
    if (hasPreluActivationWeights) {
      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));
    }
    if (hasLeakyreluAlpha) {
      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));
      inputs.push($leakyreluAlpha);
      intermediates.push($leakyreluAlpha);
    }
    return inputs;
  };
  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {
    out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_2__.conv2dByMatMul)({
      x,
      filter,
      convInfo,
      backend,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast' && (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_EXP_CONV')) {
    const fusedActivation = activation ? (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__.mapActivationToShaderProgram)(activation, true) : null;
    const program = new _conv_packed_gpu__WEBPACK_IMPORTED_MODULE_4__.Conv2DPackedProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
    const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];
    const inputs = prepareInputs();
    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);
  } else if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_CONV_IM2COL')) {
    out = (0,_Conv2D_impl__WEBPACK_IMPORTED_MODULE_2__.conv2dWithIm2Row)({
      x,
      filter,
      convInfo,
      backend,
      bias,
      activation,
      preluActivationWeights,
      leakyreluAlpha
    });
  } else {
    const fusedActivation = activation ? (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__.mapActivationToShaderProgram)(activation, false) : null;
    const program = new _conv_gpu__WEBPACK_IMPORTED_MODULE_5__.Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
    const inputs = prepareInputs();
    out = backend.runWebGLProgram(program, inputs, 'float32');
  }
  const outReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: out
    },
    backend,
    attrs: {
      shape: convInfo.outShape
    }
  });
  intermediates.push(out);
  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return outReshaped;
}
const fusedConv2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedConv2D,
  backendName: 'webgl',
  kernelFunc: fusedConv2d
};

/***/ }),

/***/ 84723:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fusedDepthwiseConv2D": () => (/* binding */ fusedDepthwiseConv2D),
/* harmony export */   "fusedDepthwiseConv2DConfig": () => (/* binding */ fusedDepthwiseConv2DConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../conv_gpu_depthwise */ 18688);
/* harmony import */ var _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv_packed_gpu_depthwise */ 3105);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function fusedDepthwiseConv2D(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    filter,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    strides,
    pad,
    dilations,
    dimRoundingMode,
    activation,
    leakyreluAlpha
  } = attrs;
  const intermediates = [];
  let $dilations = dilations;
  if ($dilations == null) {
    $dilations = [1, 1];
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);
  const shouldPackDepthwiseConv = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;
  const fusedActivation = activation ? (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.mapActivationToShaderProgram)(activation, shouldPackDepthwiseConv) : null;
  const programInputs = [x, filter];
  const hasBias = bias != null;
  const hasPreluActivationWeights = preluActivationWeights != null;
  const hasLeakyreluAlpha = activation === 'leakyrelu';
  if (hasBias) {
    programInputs.push(bias);
  }
  if (hasPreluActivationWeights) {
    programInputs.push(preluActivationWeights);
  }
  if (hasLeakyreluAlpha) {
    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(leakyreluAlpha, 'float32'));
    programInputs.push($leakyreluAlpha);
    intermediates.push($leakyreluAlpha);
  }
  let program;
  if (shouldPackDepthwiseConv) {
    program = new _conv_packed_gpu_depthwise__WEBPACK_IMPORTED_MODULE_2__.DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
  } else {
    program = new _conv_gpu_depthwise__WEBPACK_IMPORTED_MODULE_3__.DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);
  }
  const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];
  const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);
  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}
const fusedDepthwiseConv2DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedDepthwiseConv2D,
  backendName: 'webgl',
  kernelFunc: fusedDepthwiseConv2D
};

/***/ }),

/***/ 99312:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherNd": () => (/* binding */ gatherNd),
/* harmony export */   "gatherNdConfig": () => (/* binding */ gatherNdConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gather_nd_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gather_nd_gpu */ 74897);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function gatherNd(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    params,
    indices
  } = inputs;
  const indicesShape = indices.shape;
  const sliceRank = indicesShape[indicesShape.length - 1];
  const paramsSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(params.shape);
  const [resultShape, numSlices, sliceSize, strides] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.prepareAndValidate(params, indices);
  const flattenIndices = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [numSlices, sliceRank]
    }
  });
  const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: params
    },
    backend,
    attrs: {
      shape: [_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(params.shape) / sliceSize, sliceSize]
    }
  });
  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {
    const indicesData = backend.readSync(indices.dataId);
    const paramsBuf = backend.bufferSync(params);
    const outValue = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.gatherNdImplCPU)(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);
    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);
  }
  const program = new _gather_nd_gpu__WEBPACK_IMPORTED_MODULE_3__.GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], params.shape);
  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);
  const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: resultShape
    }
  });
  backend.disposeIntermediateTensorInfo(flattenIndices);
  backend.disposeIntermediateTensorInfo(flattenX);
  backend.disposeIntermediateTensorInfo(res);
  return reshaped;
}
const gatherNdConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherNd,
  backendName: 'webgl',
  kernelFunc: gatherNd
};

/***/ }),

/***/ 34065:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherV2": () => (/* binding */ gatherV2),
/* harmony export */   "gatherV2Config": () => (/* binding */ gatherV2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gather_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../gather_gpu */ 69823);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function gatherV2(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    indices
  } = inputs;
  const {
    axis,
    batchDims
  } = attrs;
  const parsedAxis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape)[0];
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('DEBUG')) {
    // In debug mode, throw error when any index is out of bound.
    // Otherwise, just fill out of bounds with zeroes.
    const indicesVals = backend.readSync(indices.dataId);
    const axisDim = x.shape[parsedAxis];
    for (let i = 0; i < indicesVals.length; ++i) {
      const index = indicesVals[i];
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);
    }
  }
  const shapeInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);
  const indicesSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(indices.shape);
  const toDispose = [];
  const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x
    },
    backend,
    attrs: {
      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]
    }
  });
  const flattenIndex = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]
    }
  });
  toDispose.push(flattenX);
  toDispose.push(flattenIndex);
  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];
  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {
    const indicesBuf = backend.bufferSync(flattenIndex);
    const xBuf = backend.bufferSync(flattenX);
    const outBuf = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.gatherV2ImplCPU)(xBuf, indicesBuf, flattenOutputShape);
    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);
  }
  const program = new _gather_gpu__WEBPACK_IMPORTED_MODULE_3__.GatherProgram(flattenX.shape, flattenOutputShape);
  const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);
  toDispose.push(res);
  const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: shapeInfo.outputShape
    }
  });
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return reshaped;
}
const gatherV2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherV2,
  backendName: 'webgl',
  kernelFunc: gatherV2
};

/***/ }),

/***/ 28650:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greater": () => (/* binding */ greater),
/* harmony export */   "greaterConfig": () => (/* binding */ greaterConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const GREATER = `return float(a > b);`;
const GREATER_PACKED = `
  return vec4(greaterThan(a, b));
`;
const greater = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: GREATER,
  packedOpSnippet: GREATER_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.greaterImplCPU,
  dtype: 'bool'
});
const greaterConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Greater,
  backendName: 'webgl',
  kernelFunc: greater
};

/***/ }),

/***/ 38339:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greaterEqual": () => (/* binding */ greaterEqual),
/* harmony export */   "greaterEqualConfig": () => (/* binding */ greaterEqualConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const GREATER_EQUAL = `return float(a >= b);`;
const GREATER_EQUAL_PACKED = `
  return vec4(greaterThanEqual(a, b));
`;
const greaterEqual = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: GREATER_EQUAL,
  packedOpSnippet: GREATER_EQUAL_PACKED,
  dtype: 'bool',
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.greaterEqualImplCPU
});
const greaterEqualConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GreaterEqual,
  backendName: 'webgl',
  kernelFunc: greaterEqual
};

/***/ }),

/***/ 67813:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ifft": () => (/* binding */ ifft),
/* harmony export */   "ifftConfig": () => (/* binding */ ifftConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _FFT_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FFT_impl */ 90475);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function ifft(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  return (0,_FFT_impl__WEBPACK_IMPORTED_MODULE_1__.fftImpl)(input, true /* inverse */, backend);
}
const ifftConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IFFT,
  backendName: 'webgl',
  kernelFunc: ifft
};

/***/ }),

/***/ 51542:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "identityConfig": () => (/* binding */ identityConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function identity(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  backend.incRef(x.dataId);
  return {
    dataId: x.dataId,
    shape: x.shape,
    dtype: x.dtype
  };
}
const identityConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Identity,
  backendName: 'webgl',
  kernelFunc: identity
};

/***/ }),

/***/ 80807:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imag": () => (/* binding */ imag),
/* harmony export */   "imagConfig": () => (/* binding */ imagConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function imag(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const inputData = backend.texData.get(input.dataId);
  return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
    inputs: {
      x: inputData.complexTensorInfos.imag
    },
    backend
  });
}
const imagConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Imag,
  backendName: 'webgl',
  kernelFunc: imag
};

/***/ }),

/***/ 46454:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFinite": () => (/* binding */ isFinite),
/* harmony export */   "isFiniteConfig": () => (/* binding */ isFiniteConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;
const isFinite = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: IS_FINITE,
  dtype: 'bool'
});
const isFiniteConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsFinite,
  backendName: 'webgl',
  kernelFunc: isFinite
};

/***/ }),

/***/ 91741:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInf": () => (/* binding */ isInf),
/* harmony export */   "isInfConfig": () => (/* binding */ isInfConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const IS_INF = `return float(isinf(x));`;
const isInf = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: IS_INF,
  dtype: 'bool'
});
const isInfConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsInf,
  backendName: 'webgl',
  kernelFunc: isInf
};

/***/ }),

/***/ 31242:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNaN": () => (/* binding */ isNaN),
/* harmony export */   "isNaNConfig": () => (/* binding */ isNaNConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const IS_NAN = `return float(isnan(x));`;
const isNaN = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: IS_NAN,
  dtype: 'bool'
});
const isNaNConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsNan,
  backendName: 'webgl',
  kernelFunc: isNaN
};

/***/ }),

/***/ 34304:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LRNConfig": () => (/* binding */ LRNConfig),
/* harmony export */   "lrn": () => (/* binding */ lrn)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _lrn_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lrn_gpu */ 68969);
/* harmony import */ var _lrn_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lrn_packed_gpu */ 78069);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const lrn = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    depthRadius,
    bias,
    alpha,
    beta
  } = attrs;
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_NORMALIZATION') ? new _lrn_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) : new _lrn_gpu__WEBPACK_IMPORTED_MODULE_2__.LRNProgram(x.shape, depthRadius, bias, alpha, beta);
  return backend.runWebGLProgram(program, [x], x.dtype);
};
// tslint:disable-next-line: variable-name
const LRNConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRN,
  backendName: 'webgl',
  kernelFunc: lrn
};

/***/ }),

/***/ 5133:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LRNGradConfig": () => (/* binding */ LRNGradConfig),
/* harmony export */   "lrnGrad": () => (/* binding */ lrnGrad)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _lrn_grad_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lrn_grad_gpu */ 82162);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const lrnGrad = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    y,
    dy
  } = inputs;
  const {
    depthRadius,
    bias,
    alpha,
    beta
  } = attrs;
  const program = new _lrn_grad_gpu__WEBPACK_IMPORTED_MODULE_1__.LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);
  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);
};
// tslint:disable-next-line: variable-name
const LRNGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRNGrad,
  backendName: 'webgl',
  kernelFunc: lrnGrad
};

/***/ }),

/***/ 81356:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LEAKYRELU": () => (/* binding */ LEAKYRELU),
/* harmony export */   "LEAKYRELU_PACKED": () => (/* binding */ LEAKYRELU_PACKED),
/* harmony export */   "leakyRelu": () => (/* binding */ leakyRelu),
/* harmony export */   "leakyReluConfig": () => (/* binding */ leakyReluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const LEAKYRELU = `return (a < 0.) ? b * a : a;`;
const LEAKYRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function leakyRelu(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    alpha
  } = attrs;
  const $alpha = backend.makeTensorInfo([], 'float32', _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.createScalarValue(alpha, 'float32'));
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) : new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);
  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');
  backend.disposeIntermediateTensorInfo($alpha);
  return result;
}
const leakyReluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LeakyRelu,
  backendName: 'webgl',
  kernelFunc: leakyRelu
};

/***/ }),

/***/ 47835:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "less": () => (/* binding */ less),
/* harmony export */   "lessConfig": () => (/* binding */ lessConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const LESS = `return float(a < b);`;
const LESS_PACKED = `
  return vec4(lessThan(a, b));
`;
const less = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: LESS,
  packedOpSnippet: LESS_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.lessImplCPU,
  dtype: 'bool'
});
const lessConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Less,
  backendName: 'webgl',
  kernelFunc: less
};

/***/ }),

/***/ 60744:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LESS_EQUAL": () => (/* binding */ LESS_EQUAL),
/* harmony export */   "LESS_EQUAL_PACKED": () => (/* binding */ LESS_EQUAL_PACKED),
/* harmony export */   "lessEqual": () => (/* binding */ lessEqual),
/* harmony export */   "lessEqualConfig": () => (/* binding */ lessEqualConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const LESS_EQUAL = `return float(a <= b);`;
const LESS_EQUAL_PACKED = `
  return vec4(lessThanEqual(a, b));
`;
const lessEqual = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: LESS_EQUAL,
  packedOpSnippet: LESS_EQUAL_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.lessEqualImplCPU,
  dtype: 'bool'
});
const lessEqualConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LessEqual,
  backendName: 'webgl',
  kernelFunc: lessEqual
};

/***/ }),

/***/ 27671:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linSpace": () => (/* binding */ linSpace),
/* harmony export */   "linSpaceConfig": () => (/* binding */ linSpaceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function linSpace(args) {
  const {
    backend,
    attrs
  } = args;
  const {
    start,
    stop,
    num
  } = attrs;
  // TODO: Use CPU implementation due to the precision problem in Safari.
  const outVals = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.linSpaceImplCPU)(start, stop, num);
  return backend.makeTensorInfo([outVals.length], 'float32', outVals);
}
const linSpaceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LinSpace,
  backendName: 'webgl',
  kernelFunc: linSpace
};

/***/ }),

/***/ 41895:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "logConfig": () => (/* binding */ logConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



// Windows chrome return 0 if the input is negative value. We will specifically
// return NaN if the input is 0 to solve compatiblity issue.
const LOG = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `
  return x < 0.0 ? 0./0. : log(x);
`;
const LOG_PACKED = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`;
const log = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: LOG,
  packedOpSnippet: LOG_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.logImplCPU
});
const logConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log,
  backendName: 'webgl',
  kernelFunc: log
};

/***/ }),

/***/ 11067:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log1p": () => (/* binding */ log1p),
/* harmony export */   "log1pConfig": () => (/* binding */ log1pConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const LOG1P = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `
  return log(1.0 + x);
`;
const log1p = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: LOG1P
});
const log1pConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log1p,
  backendName: 'webgl',
  kernelFunc: log1p
};

/***/ }),

/***/ 28214:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalAnd": () => (/* binding */ logicalAnd),
/* harmony export */   "logicalAndConfig": () => (/* binding */ logicalAndConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;
const LOGICAL_AND_PACKED = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
const logicalAnd = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: LOGICAL_AND,
  packedOpSnippet: LOGICAL_AND_PACKED,
  dtype: 'bool'
});
const logicalAndConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalAnd,
  backendName: 'webgl',
  kernelFunc: logicalAnd
};

/***/ }),

/***/ 63719:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalNot": () => (/* binding */ logicalNot),
/* harmony export */   "logicalNotConfig": () => (/* binding */ logicalNotConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const LOGICAL_NOT = `return float(!(x >= 1.0));`;
const logicalNot = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: LOGICAL_NOT
});
const logicalNotConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalNot,
  backendName: 'webgl',
  kernelFunc: logicalNot
};

/***/ }),

/***/ 25157:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalOr": () => (/* binding */ logicalOr),
/* harmony export */   "logicalOrConfig": () => (/* binding */ logicalOrConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;
const LOGICAL_OR_PACKED = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
const logicalOr = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: LOGICAL_OR,
  packedOpSnippet: LOGICAL_OR_PACKED,
  dtype: 'bool'
});
const logicalOrConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalOr,
  backendName: 'webgl',
  kernelFunc: logicalOr
};

/***/ }),

/***/ 43609:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "maxConfig": () => (/* binding */ maxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ 73505);
/* harmony import */ var _Max_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Max_impl */ 88871);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ 57861);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function max(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    reductionIndices,
    keepDims
  } = attrs;
  const xRank = x.shape.length;
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(reductionIndices, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  const maxInputIsTransposed = permutedAxes != null;
  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);
  let maxInput = x;
  if (maxInputIsTransposed) {
    if (shouldExecuteOnCPU) {
      const xTexData = backend.texData.get(maxInput.dataId);
      const values = xTexData.values;
      const newShape = new Array(xRank);
      for (let i = 0; i < newShape.length; i++) {
        newShape[i] = x.shape[permutedAxes[i]];
      }
      const maxInputValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);
      maxInput = backend.makeTensorInfo(newShape, x.dtype);
      const maxInputData = backend.texData.get(maxInput.dataId);
      maxInputData.values = maxInputValues;
    } else {
      maxInput = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(x, permutedAxes, backend);
    }
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('max', axes, xRank);
  const [maxOutShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(maxInput.shape, axes);
  let outShape = maxOutShape;
  if (keepDims) {
    // rather than reshape at the end, set the target shape here.
    outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(maxOutShape, origAxes);
  }
  let out;
  if (shouldExecuteOnCPU) {
    const xTexData = backend.texData.get(maxInput.dataId);
    const values = xTexData.values;
    const outValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.maxImplCPU)(values, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape), outShape, x.dtype);
    out = backend.makeTensorInfo(outShape, x.dtype);
    const outData = backend.texData.get(out.dataId);
    outData.values = outValues;
  } else {
    out = (0,_Max_impl__WEBPACK_IMPORTED_MODULE_3__.maxImpl)(maxInput, reduceShape, outShape, backend);
  }
  if (maxInputIsTransposed) {
    backend.disposeIntermediateTensorInfo(maxInput);
  }
  return out;
}
const maxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Max,
  backendName: 'webgl',
  kernelFunc: max
};

/***/ }),

/***/ 13539:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool": () => (/* binding */ maxPool),
/* harmony export */   "maxPoolConfig": () => (/* binding */ maxPoolConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pool_gpu */ 74645);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ 45181);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function maxPool(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'maxPool');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = 1;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(convInfo.inShape, convInfo.outShape)) {
    return (0,_Identity__WEBPACK_IMPORTED_MODULE_2__.identity)({
      inputs: {
        x
      },
      backend
    });
  }
  const maxPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_3__.Pool2DProgram(convInfo, 'max', false);
  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);
}
const maxPoolConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool,
  backendName: 'webgl',
  kernelFunc: maxPool
};

/***/ }),

/***/ 97524:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3DConfig": () => (/* binding */ maxPool3DConfig),
/* harmony export */   "maxPool3d": () => (/* binding */ maxPool3d)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pool_gpu */ 74645);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function maxPool3d(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    filterSize,
    strides,
    pad,
    dataFormat,
    dimRoundingMode
  } = attrs;
  const dilations = [1, 1, 1];
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);
  const maxPoolProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_1__.Pool3DProgram(convInfo, 'max', false);
  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);
}
const maxPool3DConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3D,
  backendName: 'webgl',
  kernelFunc: maxPool3d
};

/***/ }),

/***/ 90076:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3DGrad": () => (/* binding */ maxPool3DGrad),
/* harmony export */   "maxPool3DGradConfig": () => (/* binding */ maxPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../max_pool_backprop_gpu */ 28641);
/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pool_gpu */ 74645);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function maxPool3DGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input
  } = inputs;
  const x = input;
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const dilations = [1, 1, 1];
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);
  const maxPool3dPositionsProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_1__.Pool3DProgram(convInfo, 'max', true /* get positions */);
  const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);
  const maxPoolBackpropProgram = new _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_2__.MaxPool3DBackpropProgram(convInfo);
  const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);
  backend.disposeIntermediateTensorInfo(maxPool3dPositions);
  return result;
}
const maxPool3DGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3DGrad,
  backendName: 'webgl',
  kernelFunc: maxPool3DGrad
};

/***/ }),

/***/ 85285:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolGrad": () => (/* binding */ maxPoolGrad),
/* harmony export */   "maxPoolGradConfig": () => (/* binding */ maxPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../max_pool_backprop_gpu */ 28641);
/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pool_gpu */ 74645);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ 45181);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function maxPoolGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    dy,
    input,
    output
  } = inputs;
  const x = input;
  (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)([input, output], 'maxPoolGrad');
  const {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  } = attrs;
  const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);
  const getPositions = true;
  const maxPoolPositionsProgram = new _pool_gpu__WEBPACK_IMPORTED_MODULE_2__.Pool2DProgram(convInfo, 'max', getPositions);
  const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);
  const maxPoolBackPropProgram = new _max_pool_backprop_gpu__WEBPACK_IMPORTED_MODULE_3__.MaxPool2DBackpropProgram(convInfo);
  const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);
  backend.disposeIntermediateTensorInfo(maxPoolPositions);
  return result;
}
const maxPoolGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolGrad,
  backendName: 'webgl',
  kernelFunc: maxPoolGrad
};

/***/ }),

/***/ 97043:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolWithArgmaxConfig": () => (/* binding */ maxPoolWithArgmaxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _MaxPoolWithArgmax_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MaxPoolWithArgmax_impl */ 46534);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const maxPoolWithArgmaxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolWithArgmax,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      filterSize,
      strides,
      pad,
      includeBatchInIndex
    } = attrs;
    const webglBackend = backend;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);
    const dilations = [1, 1];
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);
    const [result, indexes] = (0,_MaxPoolWithArgmax_impl__WEBPACK_IMPORTED_MODULE_1__.maxPoolWithArgmaxImpl)(x, includeBatchInIndex, convInfo, webglBackend);
    return [result, indexes];
  }
};

/***/ }),

/***/ 46534:
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolWithArgmaxImpl": () => (/* binding */ maxPoolWithArgmaxImpl)
/* harmony export */ });
/* harmony import */ var _pool_gpu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pool_gpu */ 74645);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {
  let program = new _pool_gpu__WEBPACK_IMPORTED_MODULE_0__.Pool2DProgram(convInfo, 'max', false);
  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');
  program = new _pool_gpu__WEBPACK_IMPORTED_MODULE_0__.Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);
  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');
  return [poolOutput, indexOutput];
}

/***/ }),

/***/ 88871:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxImpl": () => (/* binding */ maxImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/reduce */ 40161);
/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function maxImpl(x, reduceShape, outShape, backend) {
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const batchSize = xSize / inSize;
  const reshapedInput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x
    },
    attrs: {
      shape: [batchSize, inSize]
    },
    backend
  });
  const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__.reduce)(reshapedInput, x.dtype, 'max', backend);
  const reshapedOutput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: reduced
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(reshapedInput);
  backend.disposeIntermediateTensorInfo(reduced);
  return reshapedOutput;
}

/***/ }),

/***/ 76706:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maximum": () => (/* binding */ maximum),
/* harmony export */   "maximumConfig": () => (/* binding */ maximumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const MAXIMUM = _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  return max(a, b);
`;
const MAXIMUM_PACKED = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.CHECK_NAN_SNIPPET_PACKED + `
  return result;
`;
const maximum = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__.binaryKernelFunc)({
  opSnippet: MAXIMUM,
  packedOpSnippet: MAXIMUM_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__.maximumImplCPU
});
const maximumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Maximum,
  backendName: 'webgl',
  kernelFunc: maximum
};

/***/ }),

/***/ 75049:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "meanConfig": () => (/* binding */ meanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Mean_impl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mean_impl */ 72288);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ 73505);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ 57861);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const meanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mean,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      x
    } = inputs;
    const {
      keepDims,
      axis
    } = attrs;
    const webglBackend = backend;
    const xRank = x.shape.length;
    const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
    let axes = origAxes;
    const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
    const meanInputIsTransposed = permutedAxes != null;
    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);
    const intermediates = [];
    let meanInput = x;
    if (meanInputIsTransposed) {
      if (shouldExecuteOnCPU) {
        const xTexData = webglBackend.texData.get(meanInput.dataId);
        const values = xTexData.values;
        const newShape = new Array(xRank);
        for (let i = 0; i < newShape.length; i++) {
          newShape[i] = x.shape[permutedAxes[i]];
        }
        const meanInputValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImplCPU)(values, x.shape, x.dtype, permutedAxes, newShape);
        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);
        const meanInputData = webglBackend.texData.get(meanInput.dataId);
        meanInputData.values = meanInputValues;
      } else {
        meanInput = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(x, permutedAxes, webglBackend);
      }
      intermediates.push(meanInput);
      axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);
    }
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);
    const [meanOutShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(meanInput.shape, axes);
    let outShape = meanOutShape;
    if (keepDims) {
      // rather than reshape at the end, set the target shape here.
      outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(meanOutShape, origAxes);
    }
    const out = (0,_Mean_impl__WEBPACK_IMPORTED_MODULE_3__.meanImpl)(meanInput, reduceShape, outShape, webglBackend);
    for (const i of intermediates) {
      webglBackend.disposeIntermediateTensorInfo(i);
    }
    return out;
  }
};

/***/ }),

/***/ 72288:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "meanImpl": () => (/* binding */ meanImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/reduce */ 40161);
/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernels/Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function meanImpl(x, reduceShape, outShape, backend) {
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const batchSize = xSize / inSize;
  const reshapedInput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x
    },
    attrs: {
      shape: [batchSize, inSize]
    },
    backend
  });
  const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_2__.reduce)(reshapedInput, 'float32', 'mean', backend);
  const reshapedOutput = (0,_kernels_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: reduced
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(reshapedInput);
  backend.disposeIntermediateTensorInfo(reduced);
  return reshapedOutput;
}

/***/ }),

/***/ 48800:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "minConfig": () => (/* binding */ minConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ 40161);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function min(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  let permutedX = x;
  if (permutedAxes != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, x.shape.length);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('min', axes, xRank);
  const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(a2D, a2D.dtype, 'min', backend);
  let res;
  if (keepDims) {
    const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(outShape, origAxes);
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  } else {
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
  }
  backend.disposeIntermediateTensorInfo(a2D);
  backend.disposeIntermediateTensorInfo(reduced);
  if (permutedAxes != null) {
    backend.disposeIntermediateTensorInfo(permutedX);
  }
  return res;
}
const minConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Min,
  backendName: 'webgl',
  kernelFunc: min
};

/***/ }),

/***/ 31347:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minimum": () => (/* binding */ minimum),
/* harmony export */   "minimumConfig": () => (/* binding */ minimumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const MINIMUM = _binaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  return min(a, b);
`;
const MINIMUM_PACKED = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.CHECK_NAN_SNIPPET_PACKED + `
  return result;
`;
const minimum = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_3__.binaryKernelFunc)({
  opSnippet: MINIMUM,
  packedOpSnippet: MINIMUM_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_4__.minimumImplCPU
});
const minimumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Minimum,
  backendName: 'webgl',
  kernelFunc: minimum
};

/***/ }),

/***/ 58863:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mirrorPadConfig": () => (/* binding */ mirrorPadConfig),
/* harmony export */   "mirrorPadKernelFunc": () => (/* binding */ mirrorPadKernelFunc)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _mirror_pad_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mirror_pad_gpu */ 43200);
/* harmony import */ var _mirror_pad_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mirror_pad_packed_gpu */ 16929);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const mirrorPadKernelFunc = ({
  inputs,
  backend,
  attrs
}) => {
  const {
    x
  } = inputs;
  const {
    paddings,
    mode
  } = attrs;
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _mirror_pad_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.MirrorPadPackedProgram(x.shape, paddings, mode) : new _mirror_pad_gpu__WEBPACK_IMPORTED_MODULE_2__.MirrorPadProgram(x.shape, paddings, mode);
  const output = backend.runWebGLProgram(program, [x], x.dtype);
  return output;
};
const mirrorPadConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MirrorPad,
  backendName: 'webgl',
  kernelFunc: mirrorPadKernelFunc
};

/***/ }),

/***/ 31094:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mod": () => (/* binding */ mod),
/* harmony export */   "modConfig": () => (/* binding */ modConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const MOD = `if (b == 0.0) return NAN;
  return mod(a, b);`;
const MOD_PACKED = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_PACKED + `
  return result;
`;
const mod = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)({
  opSnippet: MOD,
  packedOpSnippet: MOD_PACKED
});
const modConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mod,
  backendName: 'webgl',
  kernelFunc: mod
};

/***/ }),

/***/ 66490:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multinomial": () => (/* binding */ multinomial),
/* harmony export */   "multinomialConfig": () => (/* binding */ multinomialConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _multinomial_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../multinomial_gpu */ 49344);
/* harmony import */ var _Softmax__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Softmax */ 33648);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function multinomial(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    logits
  } = inputs;
  const {
    numSamples,
    seed,
    normalized
  } = attrs;
  const probs = normalized ? logits : (0,_Softmax__WEBPACK_IMPORTED_MODULE_1__.softmax)({
    inputs: {
      logits
    },
    backend,
    attrs: {
      dim: logits.shape.length - 1
    }
  });
  const batchSize = probs.shape[0];
  const numOutcomes = probs.shape[1];
  const program = new _multinomial_gpu__WEBPACK_IMPORTED_MODULE_2__.MultinomialProgram(batchSize, numOutcomes, numSamples);
  const customValues = [[seed]];
  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);
  if (!normalized) {
    backend.disposeIntermediateTensorInfo(probs);
  }
  return res;
}
const multinomialConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multinomial,
  backendName: 'webgl',
  kernelFunc: multinomial
};

/***/ }),

/***/ 45706:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiply": () => (/* binding */ multiply),
/* harmony export */   "multiplyConfig": () => (/* binding */ multiplyConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_complex_gpu */ 33167);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Complex */ 15661);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const MUL = 'return a * b;';
function multiply(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    a,
    b
  } = inputs;
  const dtype = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.upcastType(a.dtype, b.dtype);
  if (a.dtype === 'complex64') {
    const aData = backend.texData.get(a.dataId);
    const bData = backend.texData.get(b.dataId);
    const realProgram = new _binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpComplexProgram(_binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);
    const imagProgram = new _binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpComplexProgram(_binaryop_complex_gpu__WEBPACK_IMPORTED_MODULE_1__.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);
    const inputs = [{
      dataId: aData.complexTensorInfos.real.dataId,
      dtype: aData.complexTensorInfos.real.dtype,
      shape: a.shape
    }, {
      dataId: aData.complexTensorInfos.imag.dataId,
      dtype: aData.complexTensorInfos.imag.dtype,
      shape: a.shape
    }, {
      dataId: bData.complexTensorInfos.real.dataId,
      dtype: bData.complexTensorInfos.real.dtype,
      shape: b.shape
    }, {
      dataId: bData.complexTensorInfos.imag.dataId,
      dtype: bData.complexTensorInfos.imag.dtype,
      shape: b.shape
    }];
    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');
    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');
    const complexOutput = (0,_Complex__WEBPACK_IMPORTED_MODULE_2__.complex)({
      inputs: {
        real: realPart,
        imag: imagPart
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(imagPart);
    // TODO(annxingyuan): CPU forwarding for complex inputs.
    return complexOutput;
  }
  if (backend.shouldExecuteOnCPU([a, b])) {
    const aData = backend.texData.get(a.dataId);
    const bData = backend.texData.get(b.dataId);
    const [outValues, outShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__.multiplyImplCPU)(a.shape, b.shape, aData.values, bData.values, dtype);
    const out = backend.makeTensorInfo(outShape, dtype);
    const outData = backend.texData.get(out.dataId);
    outData.values = outValues;
    return out;
  }
  let program;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {
    program = new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_4__.BinaryOpPackedProgram(MUL, a.shape, b.shape);
  } else {
    program = new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_5__.BinaryOpProgram(MUL, a.shape, b.shape);
  }
  return backend.runWebGLProgram(program, [a, b], dtype);
}
const multiplyConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multiply,
  backendName: 'webgl',
  kernelFunc: multiply
};

/***/ }),

/***/ 37072:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "neg": () => (/* binding */ neg),
/* harmony export */   "negConfig": () => (/* binding */ negConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/* harmony import */ var _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../unaryop_packed_gpu */ 81992);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const NEG = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  return -x;
`;
const NEG_PACKED = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
// This doesn't use unaryKernelFunc because negImplCPU is not of type
// SimpleUnaryKernelImplCPU.
function neg(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  if (backend.shouldExecuteOnCPU([x])) {
    const xData = backend.texData.get(x.dataId);
    const [outValues, newShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.negImplCPU)(xData.values, x.shape, x.dtype);
    return backend.makeTensorInfo(newShape, x.dtype, outValues);
  }
  let program;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {
    program = new _unaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_3__.UnaryOpPackedProgram(x.shape, NEG_PACKED);
  } else {
    program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.UnaryOpProgram(x.shape, NEG);
  }
  return backend.runWebGLProgram(program, [x], x.dtype);
}
const negConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Neg,
  backendName: 'webgl',
  kernelFunc: neg
};

/***/ }),

/***/ 38212:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV3": () => (/* binding */ nonMaxSuppressionV3),
/* harmony export */   "nonMaxSuppressionV3Config": () => (/* binding */ nonMaxSuppressionV3Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const nonMaxSuppressionV3Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV3Impl;
function nonMaxSuppressionV3(args) {
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold
  } = attrs;
  const boxesVals = backend.readSync(boxes.dataId);
  const scoresVals = backend.readSync(scores.dataId);
  const {
    selectedIndices
  } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
  return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));
}
const nonMaxSuppressionV3Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV3,
  backendName: 'webgl',
  kernelFunc: nonMaxSuppressionV3
};

/***/ }),

/***/ 46858:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV4": () => (/* binding */ nonMaxSuppressionV4),
/* harmony export */   "nonMaxSuppressionV4Config": () => (/* binding */ nonMaxSuppressionV4Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const nonMaxSuppressionV4Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV4Impl;
function nonMaxSuppressionV4(args) {
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    padToMaxOutputSize
  } = attrs;
  const boxesVals = backend.readSync(boxes.dataId);
  const scoresVals = backend.readSync(scores.dataId);
  const {
    selectedIndices,
    validOutputs
  } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))];
}
const nonMaxSuppressionV4Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV4,
  backendName: 'webgl',
  kernelFunc: nonMaxSuppressionV4
};

/***/ }),

/***/ 41337:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV5": () => (/* binding */ nonMaxSuppressionV5),
/* harmony export */   "nonMaxSuppressionV5Config": () => (/* binding */ nonMaxSuppressionV5Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const nonMaxSuppressionV5Impl = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls.nonMaxSuppressionV5Impl;
function nonMaxSuppressionV5(args) {
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    boxes,
    scores
  } = inputs;
  const {
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  } = attrs;
  const boxesVals = backend.readSync(boxes.dataId);
  const scoresVals = backend.readSync(scores.dataId);
  const maxOutputSizeVal = maxOutputSize;
  const iouThresholdVal = iouThreshold;
  const scoreThresholdVal = scoreThreshold;
  const softNmsSigmaVal = softNmsSigma;
  const {
    selectedIndices,
    selectedScores
  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);
  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];
}
const nonMaxSuppressionV5Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV5,
  backendName: 'webgl',
  kernelFunc: nonMaxSuppressionV5
};

/***/ }),

/***/ 42619:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notEqual": () => (/* binding */ notEqual),
/* harmony export */   "notEqualConfig": () => (/* binding */ notEqualConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const NOT_EQUAL = `return float(a != b);`;
const notEqual = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: NOT_EQUAL,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.notEqualImplCPU,
  dtype: 'bool'
});
const notEqualConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NotEqual,
  backendName: 'webgl',
  kernelFunc: notEqual
};

/***/ }),

/***/ 53949:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "oneHot": () => (/* binding */ oneHot),
/* harmony export */   "oneHotConfig": () => (/* binding */ oneHotConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _onehot_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../onehot_gpu */ 35144);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const oneHot = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    indices
  } = inputs;
  const {
    dtype,
    depth,
    onValue,
    offValue
  } = attrs;
  const indicesSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(indices.shape);
  const program = new _onehot_gpu__WEBPACK_IMPORTED_MODULE_1__.OneHotProgram(indicesSize, depth, onValue, offValue);
  const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [indicesSize]
    }
  });
  const result = backend.runWebGLProgram(program, [reshaped], dtype);
  backend.disposeIntermediateTensorInfo(reshaped);
  const outShape = [...indices.shape, depth];
  const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: result
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  backend.disposeIntermediateTensorInfo(result);
  return out;
};
const oneHotConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OneHot,
  backendName: 'webgl',
  kernelFunc: oneHot
};

/***/ }),

/***/ 55553:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onesLike": () => (/* binding */ onesLike),
/* harmony export */   "onesLikeConfig": () => (/* binding */ onesLikeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Complex */ 15661);
/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Fill */ 35576);
/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ 80807);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ 50954);
/* harmony import */ var _ZerosLike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ZerosLike */ 88697);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






function onesLike(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  if (x.dtype === 'string') {
    throw new Error('onesLike is not supported under string dtype');
  } else if (x.dtype === 'complex64') {
    const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({
      inputs: {
        input: x
      },
      backend
    });
    const r = onesLike({
      inputs: {
        x: realPart
      },
      backend
    });
    const imagPart = (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({
      inputs: {
        input: x
      },
      backend
    });
    const i = (0,_ZerosLike__WEBPACK_IMPORTED_MODULE_3__.zerosLike)({
      inputs: {
        x: imagPart
      },
      backend
    });
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_4__.complex)({
      inputs: {
        real: r,
        imag: i
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(r);
    backend.disposeIntermediateTensorInfo(imagPart);
    backend.disposeIntermediateTensorInfo(i);
    return result;
  } else {
    // TODO(cais, smilkov): Add WebGL shader for onesLike:
    //   https://github.com/tensorflow/tfjs/issues/1293
    return (0,_Fill__WEBPACK_IMPORTED_MODULE_5__.fill)({
      attrs: {
        shape: x.shape,
        dtype: x.dtype,
        value: 1
      },
      backend
    });
  }
}
const onesLikeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OnesLike,
  backendName: 'webgl',
  kernelFunc: onesLike
};

/***/ }),

/***/ 31573:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pack": () => (/* binding */ pack),
/* harmony export */   "packConfig": () => (/* binding */ packConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Concat */ 63632);
/* harmony import */ var _ExpandDims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExpandDims */ 58748);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function pack(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    axis
  } = attrs;
  if (inputs.length === 1) {
    return (0,_ExpandDims__WEBPACK_IMPORTED_MODULE_1__.expandDims)({
      inputs: {
        input: inputs[0]
      },
      backend,
      attrs: {
        dim: axis
      }
    });
  }
  const shape = inputs[0].shape;
  const dtype = inputs[0].dtype;
  inputs.forEach(t => {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');
  });
  const intermediateTensorInfos = [];
  const expandedTensors = inputs.map(t => {
    const expandedT = (0,_ExpandDims__WEBPACK_IMPORTED_MODULE_1__.expandDims)({
      inputs: {
        input: t
      },
      backend,
      attrs: {
        dim: axis
      }
    });
    intermediateTensorInfos.push(expandedT);
    return expandedT;
  });
  const result = (0,_Concat__WEBPACK_IMPORTED_MODULE_2__.concat)({
    inputs: expandedTensors,
    backend,
    attrs: {
      axis
    }
  });
  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}
const packConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pack,
  backendName: 'webgl',
  kernelFunc: pack
};

/***/ }),

/***/ 17119:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padV2": () => (/* binding */ padV2),
/* harmony export */   "padV2Config": () => (/* binding */ padV2Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _pad_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pad_gpu */ 18362);
/* harmony import */ var _pad_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pad_packed_gpu */ 4180);
/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Fill */ 35576);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const padV2 = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    paddings,
    constantValue
  } = attrs;
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape) === 0) {
    // Short-circuit the computation, since x doesn't have value, only
    // the shape is used to compute output shape to pad.
    const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);
    return (0,_Fill__WEBPACK_IMPORTED_MODULE_1__.fill)({
      backend,
      attrs: {
        shape: outputShape,
        value: constantValue,
        dtype: x.dtype
      }
    });
  }
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _pad_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.PadPackedProgram(x.shape, paddings, constantValue) : new _pad_gpu__WEBPACK_IMPORTED_MODULE_3__.PadProgram(x.shape, paddings, constantValue);
  const customValues = [[constantValue]];
  return backend.runWebGLProgram(program, [x], x.dtype, customValues);
};
const padV2Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.PadV2,
  backendName: 'webgl',
  kernelFunc: padV2
};

/***/ }),

/***/ 70229:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pow": () => (/* binding */ pow),
/* harmony export */   "powConfig": () => (/* binding */ powConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const POW = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
const POW_PACKED = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_PACKED + `
  return result;
`;
const pow = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.binaryKernelFunc)({
  opSnippet: POW,
  packedOpSnippet: POW_PACKED
});
const powConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pow,
  backendName: 'webgl',
  kernelFunc: pow
};

/***/ }),

/***/ 36283:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PRELU": () => (/* binding */ PRELU),
/* harmony export */   "PRELU_PACKED": () => (/* binding */ PRELU_PACKED),
/* harmony export */   "prelu": () => (/* binding */ prelu),
/* harmony export */   "preluConfig": () => (/* binding */ preluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_gpu */ 43510);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const PRELU = `return (a < 0.) ? b * a : a;`;
const PRELU_PACKED = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function prelu(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x,
    alpha
  } = inputs;
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) : new _binaryop_gpu__WEBPACK_IMPORTED_MODULE_2__.BinaryOpProgram(PRELU, x.shape, alpha.shape);
  return backend.runWebGLProgram(program, [x, alpha], 'float32');
}
const preluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prelu,
  backendName: 'webgl',
  kernelFunc: prelu
};

/***/ }),

/***/ 62180:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prod": () => (/* binding */ prod),
/* harmony export */   "prodConfig": () => (/* binding */ prodConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_utils/reduce */ 40161);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function prod(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  const xRank = x.shape.length;
  const toDispose = [];
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  let permutedX = x;
  if (permutedAxes != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutedAxes
      }
    });
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);
    toDispose.push(permutedX);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);
  let res;
  if (backend.shouldExecuteOnCPU([permutedX])) {
    const xVals = backend.texData.get(permutedX.dataId).values;
    const {
      outVals,
      outShape,
      outDtype
    } = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.prodImplCPU)(permutedX.shape, permutedX.dtype, xVals, axes);
    res = backend.makeTensorInfo(outShape, outDtype, outVals);
  } else {
    const [outShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(permutedX.shape, axes);
    const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
    const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: permutedX
      },
      backend,
      attrs: {
        shape: [-1, inSize]
      }
    });
    const outputDType = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sumOutType)(x.dtype);
    const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_4__.reduce)(a2D, outputDType, 'prod', backend);
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: reduced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    toDispose.push(a2D);
    toDispose.push(reduced);
  }
  if (keepDims) {
    toDispose.push(res);
    const newShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(res.shape, origAxes);
    res = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
      inputs: {
        x: res
      },
      backend,
      attrs: {
        shape: newShape
      }
    });
  }
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return res;
}
const prodConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prod,
  backendName: 'webgl',
  kernelFunc: prod
};

/***/ }),

/***/ 80760:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedGather.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedGather": () => (/* binding */ raggedGather),
/* harmony export */   "raggedGatherConfig": () => (/* binding */ raggedGatherConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function raggedGather(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    paramsNestedSplits,
    paramsDenseValues,
    indices
  } = inputs;
  const {
    outputRaggedRank
  } = attrs;
  const $paramsNestedSplits = paramsNestedSplits.map(t => backend.readSync(t.dataId));
  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);
  const $paramsDenseValues = backend.readSync(paramsDenseValues.dataId);
  const $indices = backend.readSync(indices.dataId);
  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.raggedGatherImplCPU)($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);
  const outputNestedSplitsTensors = outputNestedSplits.map(splits => backend.makeTensorInfo([splits.length], 'int32', splits));
  const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);
  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);
}
const raggedGatherConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedGather,
  backendName: 'webgl',
  kernelFunc: raggedGather
};

/***/ }),

/***/ 4511:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedRange.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedRange": () => (/* binding */ raggedRange),
/* harmony export */   "raggedRangeConfig": () => (/* binding */ raggedRangeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function raggedRange(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    starts,
    limits,
    deltas
  } = inputs;
  const $starts = backend.readSync(starts.dataId);
  const $limits = backend.readSync(limits.dataId);
  const $deltas = backend.readSync(deltas.dataId);
  const [rtNestedSplitsData, rtDenseValuesData] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.raggedRangeImplCPU)($starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas, deltas.shape);
  const rtNestedSplits = backend.makeTensorInfo([rtNestedSplitsData.length], 'int32', rtNestedSplitsData);
  const rtDenseValues = backend.makeTensorInfo([rtDenseValuesData.length], starts.dtype, rtDenseValuesData);
  return [rtNestedSplits, rtDenseValues];
}
const raggedRangeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedRange,
  backendName: 'webgl',
  kernelFunc: raggedRange
};

/***/ }),

/***/ 50410:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedTensorToTensor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raggedTensorToTensor": () => (/* binding */ raggedTensorToTensor),
/* harmony export */   "raggedTensorToTensorConfig": () => (/* binding */ raggedTensorToTensorConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function raggedTensorToTensor(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    shape,
    values,
    defaultValue,
    rowPartitionTensors
  } = inputs;
  const {
    rowPartitionTypes
  } = attrs;
  const $shape = backend.readSync(shape.dataId);
  const $values = backend.readSync(values.dataId);
  const $defaultValue = backend.readSync(defaultValue.dataId);
  const $rowPartitionValues = rowPartitionTensors.map(t => backend.readSync(t.dataId));
  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);
  const [outputShape, output] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.raggedTensorToTensorImplCPU)($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes);
  return backend.makeTensorInfo(outputShape, values.dtype, output);
}
const raggedTensorToTensorConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedTensorToTensor,
  backendName: 'webgl',
  kernelFunc: raggedTensorToTensor
};

/***/ }),

/***/ 54678:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "rangeConfig": () => (/* binding */ rangeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const range = args => {
  const {
    backend,
    attrs
  } = args;
  const {
    start,
    stop,
    step,
    dtype
  } = attrs;
  const values = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.rangeImplCPU)(start, stop, step, dtype);
  return backend.makeTensorInfo([values.length], dtype, values);
};
const rangeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Range,
  backendName: 'webgl',
  kernelFunc: range
};

/***/ }),

/***/ 50954:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "real": () => (/* binding */ real),
/* harmony export */   "realConfig": () => (/* binding */ realConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function real(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    input
  } = inputs;
  const inputData = backend.texData.get(input.dataId);
  return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
    inputs: {
      x: inputData.complexTensorInfos.real
    },
    backend
  });
}
const realConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Real,
  backendName: 'webgl',
  kernelFunc: real
};

/***/ }),

/***/ 27148:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "realDiv": () => (/* binding */ realDiv),
/* harmony export */   "realDivConfig": () => (/* binding */ realDivConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


// Without the equality check div produces 0.9999 for a = b, which when
// floored can cause errors.
const DIV = `
if (a == b) {
  return 1.0;
};
return a / b;`;
// We do the same as in ./binaryop_gpu, with vec4 and ivec4.
// On Linux, the vectorized implementation produces NaNs when a and b are 0.
const DIV_PACKED = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
const realDiv = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: DIV,
  packedOpSnippet: DIV_PACKED,
  checkOutOfBounds: true
});
const realDivConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RealDiv,
  backendName: 'webgl',
  kernelFunc: realDiv
};

/***/ }),

/***/ 34199:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reciprocal": () => (/* binding */ reciprocal),
/* harmony export */   "reciprocalConfig": () => (/* binding */ reciprocalConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const RECIPROCAL = `return 1.0 / x;`;
const reciprocal = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: RECIPROCAL
});
const reciprocalConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reciprocal,
  backendName: 'webgl',
  kernelFunc: reciprocal
};

/***/ }),

/***/ 94082:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu": () => (/* binding */ relu),
/* harmony export */   "reluConfig": () => (/* binding */ reluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const RELU = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : x;
`;
const RELU_PACKED = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const relu = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: RELU,
  packedOpSnippet: RELU_PACKED
});
const reluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu,
  backendName: 'webgl',
  kernelFunc: relu
};

/***/ }),

/***/ 31983:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu6": () => (/* binding */ relu6),
/* harmony export */   "relu6Config": () => (/* binding */ relu6Config)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const RELU6 = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
const RELU6_PACKED = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const relu6 = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_2__.unaryKernelFunc)({
  opSnippet: RELU6,
  packedOpSnippet: RELU6_PACKED
});
const relu6Config = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu6,
  backendName: 'webgl',
  kernelFunc: relu6
};

/***/ }),

/***/ 96349:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reshape": () => (/* binding */ reshape),
/* harmony export */   "reshapeConfig": () => (/* binding */ reshapeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/reshape */ 42389);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ 45181);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function reshape(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    shape
  } = attrs;
  const webglBackend = backend;
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const $shape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.inferFromImplicitShape(shape, xSize);
  const $xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape($shape);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);
  const xTexData = webglBackend.texData.get(x.dataId);
  if (xTexData.isPacked && !(0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isReshapeFree)(x.shape, $shape) && !(xTexData.texture !== null && (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.isReshapeFree)(xTexData.shape, $shape))) {
    return (0,_kernel_utils_reshape__WEBPACK_IMPORTED_MODULE_2__.packedReshape)(x, $shape, webglBackend);
  }
  webglBackend.incRef(x.dataId);
  return {
    dataId: x.dataId,
    shape: $shape,
    dtype: x.dtype
  };
}
const reshapeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reshape,
  backendName: 'webgl',
  kernelFunc: reshape
};

/***/ }),

/***/ 55657:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeBilinear": () => (/* binding */ resizeBilinear),
/* harmony export */   "resizeBilinearConfig": () => (/* binding */ resizeBilinearConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _resize_bilinear_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../resize_bilinear_gpu */ 56148);
/* harmony import */ var _resize_bilinear_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_bilinear_packed_gpu */ 67490);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function resizeBilinear(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images
  } = inputs;
  const {
    alignCorners,
    halfPixelCenters,
    size
  } = attrs;
  const [newHeight, newWidth] = size;
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new _resize_bilinear_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new _resize_bilinear_gpu__WEBPACK_IMPORTED_MODULE_2__.ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);
  return backend.runWebGLProgram(program, [images], 'float32');
}
const resizeBilinearConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinear,
  backendName: 'webgl',
  kernelFunc: resizeBilinear
};

/***/ }),

/***/ 3667:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeBilinearGrad": () => (/* binding */ resizeBilinearGrad),
/* harmony export */   "resizeBilinearGradConfig": () => (/* binding */ resizeBilinearGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _resize_bilinear_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_bilinear_backprop_gpu */ 74946);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function resizeBilinearGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images,
    dy
  } = inputs;
  const {
    alignCorners
  } = attrs;
  const program = new _resize_bilinear_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);
  return backend.runWebGLProgram(program, [dy], dy.dtype);
}
const resizeBilinearGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinearGrad,
  backendName: 'webgl',
  kernelFunc: resizeBilinearGrad
};

/***/ }),

/***/ 70373:
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeNearestNeighbor": () => (/* binding */ resizeNearestNeighbor),
/* harmony export */   "resizeNearestNeighborConfig": () => (/* binding */ resizeNearestNeighborConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _resize_nearest_neighbor_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../resize_nearest_neighbor_gpu */ 69809);
/* harmony import */ var _resize_nearest_neighbor_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_nearest_neighbor_packed_gpu */ 64563);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function resizeNearestNeighbor(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images
  } = inputs;
  const {
    alignCorners,
    halfPixelCenters,
    size
  } = attrs;
  const [newHeight, newWidth] = size;
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new _resize_nearest_neighbor_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighborPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new _resize_nearest_neighbor_gpu__WEBPACK_IMPORTED_MODULE_2__.ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);
  return backend.runWebGLProgram(program, [images], images.dtype);
}
const resizeNearestNeighborConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighbor,
  backendName: 'webgl',
  kernelFunc: resizeNearestNeighbor
};

/***/ }),

/***/ 56036:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeNearestNeighborGrad": () => (/* binding */ resizeNearestNeighborGrad),
/* harmony export */   "resizeNearestNeighborGradConfig": () => (/* binding */ resizeNearestNeighborGradConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _resize_nearest_neighbor_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../resize_nearest_neighbor_backprop_gpu */ 1315);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function resizeNearestNeighborGrad(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    images,
    dy
  } = inputs;
  const {
    alignCorners
  } = attrs;
  const program = new _resize_nearest_neighbor_backprop_gpu__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);
  return backend.runWebGLProgram(program, [dy], dy.dtype);
}
const resizeNearestNeighborGradConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighborGrad,
  backendName: 'webgl',
  kernelFunc: resizeNearestNeighborGrad
};

/***/ }),

/***/ 2841:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse": () => (/* binding */ reverse),
/* harmony export */   "reverseConfig": () => (/* binding */ reverseConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _reverse_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reverse_gpu */ 17944);
/* harmony import */ var _reverse_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reverse_packed_gpu */ 2138);
/* harmony import */ var _Identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Identity */ 51542);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function reverse(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    dims
  } = attrs;
  const xRank = x.shape.length;
  const $dims = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(dims, x.shape);
  if (xRank === 0) {
    return (0,_Identity__WEBPACK_IMPORTED_MODULE_1__.identity)({
      inputs: {
        x
      },
      backend
    });
  }
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _reverse_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.ReversePackedProgram(x.shape, $dims) : new _reverse_gpu__WEBPACK_IMPORTED_MODULE_3__.ReverseProgram(x.shape, $dims);
  return backend.runWebGLProgram(program, [x], x.dtype);
}
const reverseConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reverse,
  backendName: 'webgl',
  kernelFunc: reverse
};

/***/ }),

/***/ 5635:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateWithOffsetConfig": () => (/* binding */ rotateWithOffsetConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _rotate_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rotate_gpu */ 20559);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const rotateWithOffsetConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RotateWithOffset,
  backendName: 'webgl',
  kernelFunc: ({
    inputs,
    attrs,
    backend
  }) => {
    const {
      image
    } = inputs;
    const {
      radians,
      fillValue,
      center
    } = attrs;
    const webglBackend = backend;
    const program = new _rotate_gpu__WEBPACK_IMPORTED_MODULE_1__.RotateProgram(image.shape, fillValue);
    const [centerX, centerY] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getImageCenter(center, image.shape[1], image.shape[2]);
    const customValues = [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];
    const output = webglBackend.runWebGLProgram(program, [image], image.dtype, customValues);
    return output;
  }
};

/***/ }),

/***/ 75897:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "roundConfig": () => (/* binding */ roundConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ROUND = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
const round = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: ROUND
});
const roundConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Round,
  backendName: 'webgl',
  kernelFunc: round
};

/***/ }),

/***/ 1013:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rsqrt": () => (/* binding */ rsqrt),
/* harmony export */   "rsqrtConfig": () => (/* binding */ rsqrtConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const RSQRT = `return inversesqrt(x);`;
const rsqrt = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: RSQRT,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.rsqrtImplCPU
});
const rsqrtConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rsqrt,
  backendName: 'webgl',
  kernelFunc: rsqrt
};

/***/ }),

/***/ 58510:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scatterNd": () => (/* binding */ scatterNd),
/* harmony export */   "scatterNdConfig": () => (/* binding */ scatterNdConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _scatter_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scatter_gpu */ 5586);
/* harmony import */ var _scatter_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scatter_packed_gpu */ 12185);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function scatterNd(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    indices,
    updates
  } = inputs;
  const {
    shape
  } = attrs;
  const {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(updates, indices, shape);
  const flattenShape = [outputSize / sliceSize, sliceSize];
  if (outputSize === 0) {
    return backend.makeTensorInfo(shape, indices.dtype);
  }
  const flattenIndices = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [numUpdates, sliceRank]
    }
  });
  const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: updates
    },
    backend,
    attrs: {
      shape: [numUpdates, sliceSize]
    }
  });
  const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)
  let program;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK')) {
    program = new _scatter_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.ScatterPackedProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);
  } else {
    program = new _scatter_gpu__WEBPACK_IMPORTED_MODULE_3__.ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);
  }
  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);
  const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape
    }
  });
  backend.disposeIntermediateTensorInfo(flattenIndices);
  backend.disposeIntermediateTensorInfo(flattenX);
  backend.disposeIntermediateTensorInfo(res);
  backend.disposeIntermediateTensorInfo(defaultValue);
  return reshaped;
}
const scatterNdConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ScatterNd,
  backendName: 'webgl',
  kernelFunc: scatterNd
};

/***/ }),

/***/ 75660:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SearchSorted.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "searchSorted": () => (/* binding */ searchSorted),
/* harmony export */   "searchSortedConfig": () => (/* binding */ searchSortedConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _search_sorted_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../search_sorted_gpu */ 42324);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function searchSorted(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    sortedSequence,
    values
  } = inputs;
  const {
    side
  } = attrs;
  const program = new _search_sorted_gpu__WEBPACK_IMPORTED_MODULE_1__.SearchSortedProgram(sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);
  const customValues = [[sortedSequence.shape[1]]];
  return backend.runWebGLProgram(program, [sortedSequence, values], 'int32', customValues);
}
const searchSortedConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SearchSorted,
  backendName: 'webgl',
  kernelFunc: searchSorted
};

/***/ }),

/***/ 25618:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "select": () => (/* binding */ select),
/* harmony export */   "selectConfig": () => (/* binding */ selectConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _select_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../select_gpu */ 34864);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function select(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    condition,
    t,
    e
  } = inputs;
  const program = new _select_gpu__WEBPACK_IMPORTED_MODULE_1__.SelectProgram(condition.shape.length, t.shape, t.shape.length);
  return backend.runWebGLProgram(program, [condition, t, e], (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType)(t.dtype, e.dtype));
}
const selectConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Select,
  backendName: 'webgl',
  kernelFunc: select
};

/***/ }),

/***/ 40001:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selu": () => (/* binding */ selu),
/* harmony export */   "seluConfig": () => (/* binding */ seluConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const SELU = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.SELU_SCALEALPHA};
  float scale = ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
const selu = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SELU
});
const seluConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Selu,
  backendName: 'webgl',
  kernelFunc: selu
};

/***/ }),

/***/ 57479:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sigmoid": () => (/* binding */ sigmoid),
/* harmony export */   "sigmoidConfig": () => (/* binding */ sigmoidConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const SIGMOID = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`;
const SIGMOID_PACKED = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const sigmoid = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SIGMOID,
  packedOpSnippet: SIGMOID_PACKED,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.sigmoidImplCPU
});
const sigmoidConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sigmoid,
  backendName: 'webgl',
  kernelFunc: sigmoid
};

/***/ }),

/***/ 15629:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sign": () => (/* binding */ sign),
/* harmony export */   "signConfig": () => (/* binding */ signConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


// Sign does not propagate NANs.
const SIGN = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
const sign = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SIGN
});
const signConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sign,
  backendName: 'webgl',
  kernelFunc: sign
};

/***/ }),

/***/ 98583:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sin": () => (/* binding */ sin),
/* harmony export */   "sinConfig": () => (/* binding */ sinConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binaryop_packed_gpu */ 41316);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const SIN = _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET_UNARY + `
  return sin(x);
`;
const SIN_PACKED = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${_binaryop_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.CHECK_NAN_SNIPPET_PACKED}
  return result;
`;
const sin = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SIN,
  packedOpSnippet: SIN_PACKED
});
const sinConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sin,
  backendName: 'webgl',
  kernelFunc: sin
};

/***/ }),

/***/ 924:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinh": () => (/* binding */ sinh),
/* harmony export */   "sinhConfig": () => (/* binding */ sinhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const SINH = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
const sinh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SINH
});
const sinhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sinh,
  backendName: 'webgl',
  kernelFunc: sinh
};

/***/ }),

/***/ 92461:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice": () => (/* binding */ slice),
/* harmony export */   "sliceConfig": () => (/* binding */ sliceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _slice_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../slice_gpu */ 43286);
/* harmony import */ var _slice_packed_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../slice_packed_gpu */ 39249);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function shallowSlice(x, begin, size, backend) {
  const xTexData = backend.texData.get(x.dataId);
  const t = backend.makeTensorInfo(size, x.dtype);
  const newTexData = backend.texData.get(t.dataId);
  // Copy texture data from the original tensor.
  Object.assign(newTexData, xTexData);
  newTexData.refCount = 1;
  newTexData.shape = size;
  newTexData.dtype = x.dtype;
  let flatOffset = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.computeFlatOffset(begin, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(x.shape));
  if (xTexData.slice) {
    // We are slicing an already sliced tensor, so we have to accumulate
    // the offset.
    flatOffset += xTexData.slice.flatOffset;
  }
  newTexData.slice = {
    flatOffset,
    // Point to the original dataId, which is used to do ref counting.
    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId
  };
  // Increase the ref count for that data bucket.
  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;
  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);
  return t;
}
function slice(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    begin,
    size
  } = attrs;
  const [$begin, $size] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.parseSliceParams(x, begin, size);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.assertParamsValid(x, $begin, $size);
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape($size) === 0) {
    return backend.makeTensorInfo($size, x.dtype, []);
  }
  // Run on cpu if dtype is string. For string, the backend represents it
  // as Uint8Array[], where each Uint8Array is a character. Given that the
  // computation is only on the outer array, uploading the whole data onto
  // gpu is wasteful. Also, currently webgl doesn't have a design to
  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we
  // just run the kernel on cpu if dtype is string.
  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {
    const xTexData = backend.texData.get(x.dataId);
    const outValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.sliceImplCPU)(xTexData.values, $begin, $size, x.shape, x.dtype);
    return backend.makeTensorInfo($size, x.dtype, outValues);
  }
  const {
    isPacked
  } = backend.texData.get(x.dataId);
  const isContinous = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.isSliceContinous(x.shape, $begin, $size);
  if (isPacked || !isContinous) {
    const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _slice_packed_gpu__WEBPACK_IMPORTED_MODULE_2__.SlicePackedProgram($size) : new _slice_gpu__WEBPACK_IMPORTED_MODULE_3__.SliceProgram($size);
    const customValues = [$begin];
    return backend.runWebGLProgram(program, [x], x.dtype, customValues);
  }
  backend.uploadToGPU(x.dataId);
  return shallowSlice(x, $begin, $size, backend);
}
const sliceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Slice,
  backendName: 'webgl',
  kernelFunc: slice
};

/***/ }),

/***/ 33648:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softmax": () => (/* binding */ softmax),
/* harmony export */   "softmaxConfig": () => (/* binding */ softmaxConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Exp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exp */ 49698);
/* harmony import */ var _Max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Max */ 43609);
/* harmony import */ var _RealDiv__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RealDiv */ 27148);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sub */ 13621);
/* harmony import */ var _Sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Sum */ 52081);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







function softmax(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    logits
  } = inputs;
  const {
    dim
  } = attrs;
  const axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam([dim], logits.shape);
  const maxLogit = (0,_Max__WEBPACK_IMPORTED_MODULE_1__.max)({
    inputs: {
      x: logits
    },
    backend,
    attrs: {
      reductionIndices: axes,
      keepDims: false
    }
  });
  const expandedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(maxLogit.shape, axes);
  const maxLogitsReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: maxLogit
    },
    backend,
    attrs: {
      shape: expandedShape
    }
  });
  const a = (0,_Sub__WEBPACK_IMPORTED_MODULE_3__.sub)({
    inputs: {
      a: logits,
      b: maxLogitsReshaped
    },
    backend
  });
  const b = (0,_Exp__WEBPACK_IMPORTED_MODULE_4__.exp)({
    inputs: {
      x: a
    },
    backend
  });
  const sumExp = (0,_Sum__WEBPACK_IMPORTED_MODULE_5__.sum)({
    inputs: {
      x: b
    },
    backend,
    attrs: {
      axis: axes,
      keepDims: false
    }
  });
  const sumExpReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: sumExp
    },
    backend,
    attrs: {
      shape: expandedShape
    }
  });
  const res = (0,_RealDiv__WEBPACK_IMPORTED_MODULE_6__.realDiv)({
    inputs: {
      a: b,
      b: sumExpReshaped
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(maxLogit);
  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);
  backend.disposeIntermediateTensorInfo(a);
  backend.disposeIntermediateTensorInfo(b);
  backend.disposeIntermediateTensorInfo(sumExp);
  backend.disposeIntermediateTensorInfo(sumExpReshaped);
  return res;
}
const softmaxConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softmax,
  backendName: 'webgl',
  kernelFunc: softmax
};

/***/ }),

/***/ 41149:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softplus": () => (/* binding */ softplus),
/* harmony export */   "softplusConfig": () => (/* binding */ softplusConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const SOFTPLUS = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
const softplus = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SOFTPLUS
});
const softplusConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softplus,
  backendName: 'webgl',
  kernelFunc: softplus
};

/***/ }),

/***/ 31264:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "spaceToBatchND": () => (/* binding */ spaceToBatchND),
/* harmony export */   "spaceToBatchNDConfig": () => (/* binding */ spaceToBatchNDConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _PadV2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PadV2 */ 17119);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const spaceToBatchND = args => {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    blockShape,
    paddings
  } = attrs;
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet');
  const prod = blockShape.reduce((a, b) => a * b);
  const completePaddings = [[0, 0]];
  completePaddings.push(...paddings);
  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {
    completePaddings.push([0, 0]);
  }
  const toDispose = [];
  const paddedX = (0,_PadV2__WEBPACK_IMPORTED_MODULE_1__.padV2)({
    inputs: {
      x
    },
    backend,
    attrs: {
      paddings: completePaddings,
      constantValue: 0
    }
  });
  const reshapedPaddedShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshaped(paddedX.shape, blockShape, prod, false);
  const permutedReshapedPaddedPermutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);
  const flattenShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);
  const reshapedPaddedX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: paddedX
    },
    backend,
    attrs: {
      shape: reshapedPaddedShape
    }
  });
  const paddedXT = (0,_Transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)({
    inputs: {
      x: reshapedPaddedX
    },
    backend,
    attrs: {
      perm: permutedReshapedPaddedPermutation
    }
  });
  const result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: paddedXT
    },
    backend,
    attrs: {
      shape: flattenShape
    }
  });
  toDispose.push(paddedX);
  toDispose.push(reshapedPaddedX);
  toDispose.push(paddedXT);
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
};
const spaceToBatchNDConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SpaceToBatchND,
  backendName: 'webgl',
  kernelFunc: spaceToBatchND
};

/***/ }),

/***/ 34312:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseFillEmptyRows.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseFillEmptyRows": () => (/* binding */ sparseFillEmptyRows),
/* harmony export */   "sparseFillEmptyRowsConfig": () => (/* binding */ sparseFillEmptyRowsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseFillEmptyRows(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    indices,
    values,
    denseShape,
    defaultValue
  } = inputs;
  if (denseShape.shape.length !== 1) {
    throw new Error(`Dense shape must be a vector, saw:
         ${denseShape.shape}`);
  }
  if (indices.shape.length !== 2) {
    throw new Error(`Indices must be a matrix, saw:
         ${indices.shape}`);
  }
  if (values.shape.length !== 1) {
    throw new Error(`Values must be a vector, saw:
         ${values.shape}`);
  }
  if (defaultValue.shape.length !== 0) {
    throw new Error(`Default value must be a scalar, saw:
        ${defaultValue.shape}`);
  }
  const $indices = backend.readSync(indices.dataId);
  const $values = backend.readSync(values.dataId);
  const $denseShape = backend.readSync(denseShape.dataId);
  const $defaultValue = backend.readSync(defaultValue.dataId)[0];
  const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.sparseFillEmptyRowsImplCPU)($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);
  return [backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices), backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues), backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map(value => Number(value)))), backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap))];
}
const sparseFillEmptyRowsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseFillEmptyRows,
  backendName: 'webgl',
  kernelFunc: sparseFillEmptyRows
};

/***/ }),

/***/ 17650:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseReshape.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseReshape": () => (/* binding */ sparseReshape),
/* harmony export */   "sparseReshapeConfig": () => (/* binding */ sparseReshapeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseReshape(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    inputIndices,
    inputShape,
    newShape
  } = inputs;
  if (inputIndices.shape.length !== 2) {
    throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);
  }
  if (inputShape.shape.length !== 1) {
    throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);
  }
  if (newShape.shape.length !== 1) {
    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);
  }
  const $inputShape = Array.from(backend.readSync(inputShape.dataId));
  const $inputIndices = backend.readSync(inputIndices.dataId);
  const targetShape = Array.from(backend.readSync(newShape.dataId));
  const [newIndices, indicesShape, outputShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.sparseReshapeImplCPU)($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);
  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];
}
const sparseReshapeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseReshape,
  backendName: 'webgl',
  kernelFunc: sparseReshape
};

/***/ }),

/***/ 10785:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentMean.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseSegmentMean": () => (/* binding */ sparseSegmentMean),
/* harmony export */   "sparseSegmentMeanConfig": () => (/* binding */ sparseSegmentMeanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseSegmentMean(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    data,
    indices,
    segmentIds
  } = inputs;
  if (data.shape.length < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }
  if (indices.shape.length !== 1) {
    throw new Error(`Indices should be a vector but received shape
              ${indices.shape}`);
  }
  if (segmentIds.shape.length !== 1) {
    throw new Error(`Segment ids should be a vector but received shape
              ${segmentIds.shape}`);
  }
  const $data = backend.readSync(data.dataId);
  const $indices = backend.readSync(indices.dataId);
  const $segmentIds = backend.readSync(segmentIds.dataId);
  const [outputData, outputDataShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.sparseSegmentReductionImplCPU)($data, data.shape, data.dtype, $indices, $segmentIds, true);
  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}
const sparseSegmentMeanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseSegmentMean,
  backendName: 'webgl',
  kernelFunc: sparseSegmentMean
};

/***/ }),

/***/ 39498:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentSum.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseSegmentSum": () => (/* binding */ sparseSegmentSum),
/* harmony export */   "sparseSegmentSumConfig": () => (/* binding */ sparseSegmentSumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sparseSegmentSum(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    data,
    indices,
    segmentIds
  } = inputs;
  if (data.shape.length < 1) {
    throw new Error(`Data should be at least 1 dimensional but received scalar`);
  }
  if (indices.shape.length !== 1) {
    throw new Error(`Indices should be a vector but received shape
             ${indices.shape}`);
  }
  if (segmentIds.shape.length !== 1) {
    throw new Error(`Segment ids should be a vector but received shape
             ${segmentIds.shape}`);
  }
  const $data = backend.readSync(data.dataId);
  const $indices = backend.readSync(indices.dataId);
  const $segmentIds = backend.readSync(segmentIds.dataId);
  const [outputData, outputDataShape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.sparseSegmentReductionImplCPU)($data, data.shape, data.dtype, $indices, $segmentIds);
  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);
}
const sparseSegmentSumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseSegmentSum,
  backendName: 'webgl',
  kernelFunc: sparseSegmentSum
};

/***/ }),

/***/ 73800:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseToDense": () => (/* binding */ sparseToDense),
/* harmony export */   "sparseToDenseConfig": () => (/* binding */ sparseToDenseConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _scatter_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scatter_gpu */ 5586);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function sparseToDense(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    sparseIndices,
    sparseValues,
    defaultValue
  } = inputs;
  const {
    outputShape
  } = attrs;
  const {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);
  const sumDupeIndices = false;
  if (sparseValues.dtype === 'string') {
    const indicesBuf = backend.bufferSync(sparseIndices);
    const updatesBuf = backend.bufferSync(sparseValues);
    const $defaultValue = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.decodeString(backend.readSync(defaultValue.dataId)[0]);
    const outBuf = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.scatterImplCPU)(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);
    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);
  }
  const program = new _scatter_gpu__WEBPACK_IMPORTED_MODULE_2__.ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);
  const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);
  const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: outputShape
    }
  });
  backend.disposeIntermediateTensorInfo(res);
  return reshaped;
}
const sparseToDenseConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseToDense,
  backendName: 'webgl',
  kernelFunc: sparseToDense
};

/***/ }),

/***/ 12684:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitV": () => (/* binding */ splitV),
/* harmony export */   "splitVConfig": () => (/* binding */ splitVConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Slice */ 92461);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function splitV(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    numOrSizeSplits,
    axis
  } = attrs;
  const $axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(axis, x.shape)[0];
  const splitSizes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);
  const xRank = x.shape.length;
  const begin = new Array(xRank).fill(0);
  const size = x.shape.slice();
  return splitSizes.map(s => {
    const sliceSize = [...size];
    sliceSize[$axis] = s;
    const sliceT = (0,_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({
      inputs: {
        x
      },
      backend,
      attrs: {
        begin,
        size: sliceSize
      }
    });
    begin[$axis] += s;
    return sliceT;
  });
}
const splitVConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SplitV,
  backendName: 'webgl',
  kernelFunc: splitV
};

/***/ }),

/***/ 53598:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrt": () => (/* binding */ sqrt),
/* harmony export */   "sqrtConfig": () => (/* binding */ sqrtConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const SQRT = `return sqrt(x);`;
const sqrt = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SQRT,
  packedOpSnippet: SQRT,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.sqrtImplCPU
});
const sqrtConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sqrt,
  backendName: 'webgl',
  kernelFunc: sqrt
};

/***/ }),

/***/ 55:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "square": () => (/* binding */ square),
/* harmony export */   "squareConfig": () => (/* binding */ squareConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const SQUARE = `return x * x;`;
const square = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: SQUARE
});
const squareConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Square,
  backendName: 'webgl',
  kernelFunc: square
};

/***/ }),

/***/ 49172:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squaredDifference": () => (/* binding */ squaredDifference),
/* harmony export */   "squaredDifferenceConfig": () => (/* binding */ squaredDifferenceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';
const squaredDifference = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: SQUARED_DIFFERENCE,
  packedOpSnippet: SQUARED_DIFFERENCE
});
const squaredDifferenceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference,
  backendName: 'webgl',
  kernelFunc: squaredDifference
};

/***/ }),

/***/ 52562:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StaticRegexReplace.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "staticRegexReplace": () => (/* binding */ staticRegexReplace),
/* harmony export */   "staticRegexReplaceConfig": () => (/* binding */ staticRegexReplaceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function staticRegexReplace(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  if (x.dtype !== 'string') {
    throw new Error('Input must be of datatype string');
  }
  const $x = backend.readSync(x.dataId);
  const stringInput = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.fromUint8ToStringArray($x);
  const output = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.staticRegexReplaceImplCPU)(stringInput, 'string', attrs);
  return backend.makeTensorInfo(x.shape, 'string', output);
}
const staticRegexReplaceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StaticRegexReplace,
  backendName: 'webgl',
  kernelFunc: staticRegexReplace
};

/***/ }),

/***/ 54171:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "step": () => (/* binding */ step),
/* harmony export */   "stepConfig": () => (/* binding */ stepConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../unaryop_gpu */ 176);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function step({
  inputs,
  attrs,
  backend
}) {
  const {
    x
  } = inputs;
  const opSnippet = _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.CHECK_NAN_SNIPPET + `
    return x > 0.0 ? 1.0 : float(${attrs.alpha});
  `;
  const program = new _unaryop_gpu__WEBPACK_IMPORTED_MODULE_1__.UnaryOpProgram(x.shape, opSnippet);
  return backend.runWebGLProgram(program, [x], x.dtype);
}
const stepConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Step,
  backendName: 'webgl',
  kernelFunc: step
};

/***/ }),

/***/ 22515:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stridedSlice": () => (/* binding */ stridedSlice),
/* harmony export */   "stridedSliceConfig": () => (/* binding */ stridedSliceConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _strided_slice_gpu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../strided_slice_gpu */ 82285);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Slice */ 92461);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function stridedSlice(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    begin,
    end,
    strides,
    beginMask,
    endMask,
    ellipsisMask,
    newAxisMask,
    shrinkAxisMask
  } = attrs;
  const {
    finalShapeSparse,
    finalShape,
    isIdentity,
    sliceDim0,
    isSimpleSlice,
    begin: $begin,
    end: $end,
    strides: $strides
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
  let result;
  if (isIdentity) {
    // Optimization #1, slice is a no-op plus reshape
    result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
      inputs: {
        x
      },
      backend,
      attrs: {
        shape: finalShape
      }
    });
  } else if (sliceDim0 || isSimpleSlice) {
    // Optimization #2, slice is memory contiguous (only occurs in dim 0)
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);
    const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util.computeOutShape($begin, $end, $strides);
    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).
    const sliced = (0,_Slice__WEBPACK_IMPORTED_MODULE_2__.slice)({
      inputs: {
        x
      },
      backend,
      attrs: {
        begin: $begin,
        size
      }
    });
    result = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
      inputs: {
        x: sliced
      },
      backend,
      attrs: {
        shape: finalShape
      }
    });
    backend.disposeIntermediateTensorInfo(sliced);
  } else {
    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);
    if (shouldExecuteOnCPU) {
      // tslint:disable-next-line: no-unnecessary-type-assertion
      const values = backend.readSync(x.dataId);
      // tslint:disable-next-line: no-unnecessary-type-assertion
      const xBuf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(x.shape, x.dtype, values);
      const resultValues = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__.stridedSliceImplCPU)(finalShapeSparse, xBuf, $strides, $begin);
      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);
    } else {
      const program = new _strided_slice_gpu__WEBPACK_IMPORTED_MODULE_4__.StridedSliceProgram($begin, $strides, finalShapeSparse);
      result = backend.runWebGLProgram(program, [x], x.dtype);
    }
  }
  const resultReshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: result
    },
    backend,
    attrs: {
      shape: finalShape
    }
  });
  backend.disposeIntermediateTensorInfo(result);
  return resultReshaped;
}
const stridedSliceConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StridedSlice,
  backendName: 'webgl',
  kernelFunc: stridedSlice
};

/***/ }),

/***/ 58737:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringNGrams.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringNGrams": () => (/* binding */ stringNGrams),
/* harmony export */   "stringNGramsConfig": () => (/* binding */ stringNGramsConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function stringNGrams(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    separator,
    nGramWidths,
    leftPad,
    rightPad,
    padWidth,
    preserveShortSequences
  } = attrs;
  const {
    data,
    dataSplits
  } = inputs;
  const $data = backend.readSync(data.dataId);
  const $dataSplits = backend.readSync(dataSplits.dataId);
  const [nGrams, nGramsSplits] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.stringNGramsImplCPU)($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);
  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];
}
const stringNGramsConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringNGrams,
  backendName: 'webgl',
  kernelFunc: stringNGrams
};

/***/ }),

/***/ 34487:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringSplit.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringSplit": () => (/* binding */ stringSplit),
/* harmony export */   "stringSplitConfig": () => (/* binding */ stringSplitConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function stringSplit(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    skipEmpty
  } = attrs;
  const {
    input,
    delimiter
  } = inputs;
  if (input.dtype !== 'string') {
    throw new Error('Input must be of datatype string');
  }
  if (input.shape.length !== 1) {
    throw new Error(`Input must be a vector, got shape: ${input.shape}`);
  }
  if (delimiter.shape.length !== 0) {
    throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);
  }
  const $input = backend.readSync(input.dataId);
  const $delimiter = backend.readSync(delimiter.dataId)[0];
  const [indices, values, shape] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.stringSplitImplCPU)($input, $delimiter, skipEmpty);
  const outputSize = values.length;
  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];
}
const stringSplitConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringSplit,
  backendName: 'webgl',
  kernelFunc: stringSplit
};

/***/ }),

/***/ 70157:
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringToHashBucketFast.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringToHashBucketFast": () => (/* binding */ stringToHashBucketFast),
/* harmony export */   "stringToHashBucketFastConfig": () => (/* binding */ stringToHashBucketFastConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function stringToHashBucketFast(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    numBuckets
  } = attrs;
  const {
    input
  } = inputs;
  if (input.dtype !== 'string') {
    throw new Error('Input must be of datatype string');
  }
  if (numBuckets <= 0) {
    throw new Error(`Number of buckets must be at least 1`);
  }
  const $input = backend.readSync(input.dataId);
  const output = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.stringToHashBucketFastImplCPU)($input, numBuckets);
  return backend.makeTensorInfo(input.shape, 'int32', output);
}
const stringToHashBucketFastConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringToHashBucketFast,
  backendName: 'webgl',
  kernelFunc: stringToHashBucketFast
};

/***/ }),

/***/ 13621:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sub": () => (/* binding */ sub),
/* harmony export */   "subConfig": () => (/* binding */ subConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const SUB = 'return a - b;';
const sub = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.binaryKernelFunc)({
  opSnippet: SUB,
  packedOpSnippet: SUB,
  supportsComplex: true,
  cpuKernelImpl: _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.subImplCPU
});
const subConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sub,
  backendName: 'webgl',
  kernelFunc: sub
};

/***/ }),

/***/ 52081:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "sumConfig": () => (/* binding */ sumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Sum_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sum_impl */ 82406);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function sum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    axis,
    keepDims
  } = attrs;
  return (0,_Sum_impl__WEBPACK_IMPORTED_MODULE_1__.sumImpl)(x, axis, keepDims, backend);
}
const sumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sum,
  backendName: 'webgl',
  kernelFunc: sum
};

/***/ }),

/***/ 82406:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sumImpl": () => (/* binding */ sumImpl)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/reduce */ 40161);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ 57861);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function sumImpl(x, axis, keepDims, backend) {
  const reductionIndices = axis;
  const xRank = x.shape.length;
  const origAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.parseAxisParam(reductionIndices, x.shape);
  let axes = origAxes;
  const permutedAxes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation(axes, xRank);
  const sumInputIsTransposed = permutedAxes != null;
  let sumInput = x;
  if (sumInputIsTransposed) {
    sumInput = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImpl)(x, permutedAxes, backend);
    axes = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(axes.length, xRank);
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);
  const [sumOutShape, reduceShape] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.computeOutAndReduceShapes(sumInput.shape, axes);
  let outShape = sumOutShape;
  if (keepDims) {
    // rather than reshape at the end, set the target shape here.
    outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.expandShapeToKeepDim(sumOutShape, origAxes);
  }
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(reduceShape);
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shape);
  const batchSize = xSize / inSize;
  const reshapedInput = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: sumInput
    },
    attrs: {
      shape: [batchSize, inSize]
    },
    backend
  });
  const outType = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sumOutType)(x.dtype);
  const reduced = (0,_kernel_utils_reduce__WEBPACK_IMPORTED_MODULE_3__.reduce)(reshapedInput, outType, 'sum', backend);
  const out = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: reduced
    },
    attrs: {
      shape: outShape
    },
    backend
  });
  backend.disposeIntermediateTensorInfo(reshapedInput);
  backend.disposeIntermediateTensorInfo(reduced);
  if (sumInputIsTransposed) {
    backend.disposeIntermediateTensorInfo(sumInput);
  }
  return out;
}

/***/ }),

/***/ 95221:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tan": () => (/* binding */ tan),
/* harmony export */   "tanConfig": () => (/* binding */ tanConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const TAN = `return tan(x);`;
const tan = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: TAN
});
const tanConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tan,
  backendName: 'webgl',
  kernelFunc: tan
};

/***/ }),

/***/ 32788:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanh": () => (/* binding */ tanh),
/* harmony export */   "tanhConfig": () => (/* binding */ tanhConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/kernel_funcs_utils */ 11400);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const TANH = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
const tanh = (0,_kernel_utils_kernel_funcs_utils__WEBPACK_IMPORTED_MODULE_1__.unaryKernelFunc)({
  opSnippet: TANH
});
const tanhConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tanh,
  backendName: 'webgl',
  kernelFunc: tanh
};

/***/ }),

/***/ 50064:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TensorScatterUpdate.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensorScatterUpdate": () => (/* binding */ tensorScatterUpdate),
/* harmony export */   "tensorScatterUpdateConfig": () => (/* binding */ tensorScatterUpdateConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _scatter_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scatter_gpu */ 5586);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Reshape */ 96349);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function tensorScatterUpdate(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    tensor,
    indices,
    updates
  } = inputs;
  const {} = attrs;
  const {
    sliceRank,
    numUpdates,
    sliceSize,
    strides,
    outputSize
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.calculateShapes(updates, indices, tensor.shape);
  const flattenShape = [outputSize / sliceSize, sliceSize];
  if (outputSize === 0) {
    return backend.makeTensorInfo(tensor.shape, indices.dtype);
  }
  const flattenIndices = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      shape: [numUpdates, sliceRank]
    }
  });
  const flattenX = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: updates
    },
    backend,
    attrs: {
      shape: [numUpdates, sliceSize]
    }
  });
  const flattenTensor = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: tensor
    },
    backend,
    attrs: {
      shape: flattenShape
    }
  });
  const program = new _scatter_gpu__WEBPACK_IMPORTED_MODULE_2__.ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape, false, true);
  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, flattenTensor], flattenTensor.dtype);
  const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)({
    inputs: {
      x: res
    },
    backend,
    attrs: {
      shape: tensor.shape
    }
  });
  backend.disposeIntermediateTensorInfo(flattenIndices);
  backend.disposeIntermediateTensorInfo(flattenX);
  backend.disposeIntermediateTensorInfo(flattenTensor);
  backend.disposeIntermediateTensorInfo(res);
  return reshaped;
}
const tensorScatterUpdateConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorScatterUpdate,
  backendName: 'webgl',
  kernelFunc: tensorScatterUpdate
};

/***/ }),

/***/ 6488:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tile": () => (/* binding */ tile),
/* harmony export */   "tileConfig": () => (/* binding */ tileConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _tile_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tile_gpu */ 67435);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function tile(params) {
  const {
    inputs,
    backend,
    attrs
  } = params;
  const {
    x
  } = inputs;
  const {
    reps
  } = attrs;
  // tile gpu program cannot handle rank > 5 case.
  if (x.dtype === 'string' || x.shape.length > 5) {
    // Even thought string tensor is always on CPU, just to be consistent on how
    // to access tensor data.
    const data = backend.readSync(x.dataId);
    const value = x.dtype === 'string' ? data.map(d => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.decodeString(d)) : data;
    const buf = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer)(x.shape, x.dtype, value);
    const outBuf = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.tileImplCPU)(buf, reps);
    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);
  }
  const program = new _tile_gpu__WEBPACK_IMPORTED_MODULE_2__.TileProgram(x.shape, reps);
  const output = backend.runWebGLProgram(program, [x], x.dtype);
  return output;
}
const tileConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tile,
  backendName: 'webgl',
  kernelFunc: tile
};

/***/ }),

/***/ 81831:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "topK": () => (/* binding */ topK),
/* harmony export */   "topKConfig": () => (/* binding */ topKConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _top_k_gpu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../top_k_gpu */ 23839);
/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Fill */ 35576);
/* harmony import */ var _GatherV2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GatherV2 */ 34065);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Slice */ 92461);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







function disposeIntermediateTensorInfoOrNull(backend, tensorInfo) {
  if (tensorInfo !== null) {
    backend.disposeIntermediateTensorInfo(tensorInfo);
  }
}
function roundUpToPow2(num) {
  let pow2 = 1;
  while (pow2 < num) {
    pow2 *= 2;
  }
  return pow2;
}
// Based on Algorithm 2 of Bitonic Top K, ref:
// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf
function topK(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    k,
    sorted
  } = attrs;
  // Empirically determined constant used to determine last dim threshold for
  // handing off execution to the CPU.
  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');
  // Empirically determined constant used to determine k threshold for handing
  // off execution to the CPU.
  const TOPK_K_CPU_HANDOFF_THRESHOLD = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');
  const xShape = x.shape;
  const lastDim = xShape[xShape.length - 1];
  if (backend.shouldExecuteOnCPU([x]) || lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD || k > TOPK_K_CPU_HANDOFF_THRESHOLD) {
    const xVals = backend.readSync(x.dataId);
    const [allTopKVals, allTopKIndices] = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_1__.topKImplCPU)(xVals, xShape, x.dtype, k, sorted);
    return [backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values), backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)];
  }
  if (k === 0) {
    xShape[xShape.length - 1] = 0;
    return [backend.makeTensorInfo(xShape, x.dtype, []), backend.makeTensorInfo(xShape, 'int32', [])];
  }
  if (lastDim === 1 /* firstPass */) {
    return [x, (0,_Fill__WEBPACK_IMPORTED_MODULE_2__.fill)({
      attrs: {
        shape: xShape,
        dtype: 'int32',
        value: 0
      },
      backend
    })];
  }
  // Eagerly unpack x input since it is passed in to all the shaders which
  // require unpacked inputs.
  const xtexData = backend.texData.get(x.dataId);
  const xIsPacked = xtexData !== null && xtexData.isPacked;
  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;
  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.
  const xSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(xShape);
  const batch = xSize / lastDim;
  const x2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
    inputs: {
      x: xUnPacked
    },
    attrs: {
      shape: [batch, lastDim]
    },
    backend
  });
  if (xIsPacked) {
    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);
  }
  const kPow2 = roundUpToPow2(k);
  const lastDimPow2 = roundUpToPow2(lastDim);
  // Only the indices containing the top K are kept at every step to reduce
  // number of outputs in the GPU algorithms, so once the final set of indices
  // is computed then gather is used to grab the corresponding values
  // from the original input.
  let indices = null;
  // GPU algorithm always takes in an indices input but this input is not used
  // on the first run of a GPU algorithm, therefore if indices is null we simply
  // pass in x2D instead of it but the value will not actually be used
  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];
  const runSwap = (dir, inc, shape) => {
    const inputs = getInputs();
    const program = new _top_k_gpu__WEBPACK_IMPORTED_MODULE_4__.SwapProgram(shape);
    const fistPass = indices === null ? 1 : 0;
    const customValues = [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];
    const prevIndices = indices;
    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);
    disposeIntermediateTensorInfoOrNull(backend, prevIndices);
  };
  // Step 1: local sort
  for (let len = 1; len < kPow2; len *= 2) {
    const dir = len * 2;
    for (let inc = len; inc >= 1; inc /= 2) {
      runSwap(dir, inc, [batch, lastDimPow2]);
    }
  }
  // Step 2: merge
  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {
    const inputs = getInputs();
    const mergeProgram = new _top_k_gpu__WEBPACK_IMPORTED_MODULE_4__.MergeProgram([batch, indicesSize / 2]);
    const firstPass = indices === null ? 1 : 0;
    const customValues = [[lastDim], [firstPass], [kPow2]];
    const prevIndices = indices;
    indices = backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);
    disposeIntermediateTensorInfoOrNull(backend, prevIndices);
    // Step 3: rebuild
    const len = kPow2 / 2;
    const dir = len * 2;
    for (let inc = len; inc >= 1; inc /= 2) {
      runSwap(dir, inc, indices.shape);
    }
  }
  // Keep only the requested top K results instead of kPow2
  let prevIndices = indices;
  indices = (0,_Slice__WEBPACK_IMPORTED_MODULE_5__.slice)({
    inputs: {
      x: indices
    },
    backend,
    attrs: {
      begin: 0,
      size: [batch, k]
    }
  });
  disposeIntermediateTensorInfoOrNull(backend, prevIndices);
  // Gather values on last dimension
  let values = (0,_GatherV2__WEBPACK_IMPORTED_MODULE_6__.gatherV2)({
    inputs: {
      x: x2D,
      indices
    },
    backend,
    attrs: {
      axis: 1,
      batchDims: 1
    }
  });
  disposeIntermediateTensorInfoOrNull(backend, x2D);
  // Reshape back to the original input shape, except that the last
  // dimension is k.
  const newShape = xShape.slice(0, -1);
  newShape.push(k);
  prevIndices = indices;
  indices = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
    inputs: {
      x: indices
    },
    attrs: {
      shape: newShape
    },
    backend
  });
  disposeIntermediateTensorInfoOrNull(backend, prevIndices);
  const prevValues = values;
  values = (0,_Reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({
    inputs: {
      x: values
    },
    attrs: {
      shape: newShape
    },
    backend
  });
  disposeIntermediateTensorInfoOrNull(backend, prevValues);
  return [values, indices];
}
const topKConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TopK,
  backendName: 'webgl',
  kernelFunc: topK
};

/***/ }),

/***/ 83329:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transform.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transform": () => (/* binding */ transform),
/* harmony export */   "transformConfig": () => (/* binding */ transformConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _transform_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transform_gpu */ 4587);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function transform(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    image,
    transforms
  } = inputs;
  const {
    interpolation,
    fillMode,
    fillValue,
    outputShape
  } = attrs;
  const [batch, imageHeight, imageWidth, numChannels] = image.shape;
  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];
  const outShape = [batch, outHeight, outWidth, numChannels];
  const program = new _transform_gpu__WEBPACK_IMPORTED_MODULE_1__.TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);
  return backend.runWebGLProgram(program, [image, transforms], 'float32');
}
const transformConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transform,
  backendName: 'webgl',
  kernelFunc: transform
};

/***/ }),

/***/ 16665:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transpose": () => (/* binding */ transpose),
/* harmony export */   "transposeConfig": () => (/* binding */ transposeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transpose_impl */ 57861);
/* harmony import */ var _Transpose_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose_impl */ 73505);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function transpose(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x
  } = inputs;
  const {
    perm
  } = attrs;
  const webglBackend = backend;
  const xRank = x.shape.length;
  const newShape = new Array(xRank);
  for (let i = 0; i < newShape.length; i++) {
    newShape[i] = x.shape[perm[i]];
  }
  let out;
  if (webglBackend.shouldExecuteOnCPU([x])) {
    const xTexData = webglBackend.texData.get(x.dataId);
    const values = xTexData.values;
    const outValues = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_1__.transposeImplCPU)(values, x.shape, x.dtype, perm, newShape);
    out = webglBackend.makeTensorInfo(newShape, x.dtype);
    const outData = webglBackend.texData.get(out.dataId);
    outData.values = outValues;
  } else {
    out = (0,_Transpose_impl__WEBPACK_IMPORTED_MODULE_2__.transposeImpl)(x, perm, webglBackend);
  }
  return out;
}
const transposeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transpose,
  backendName: 'webgl',
  kernelFunc: transpose
};

/***/ }),

/***/ 57861:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transposeImpl": () => (/* binding */ transposeImpl),
/* harmony export */   "transposeImplCPU": () => (/* reexport safe */ _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__.transposeImplCPU)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _transpose_gpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transpose_gpu */ 33263);
/* harmony import */ var _transpose_packed_gpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transpose_packed_gpu */ 87595);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function transposeImpl(x, perm, backend) {
  const program = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new _transpose_packed_gpu__WEBPACK_IMPORTED_MODULE_1__.TransposePackedProgram(x.shape, perm) : new _transpose_gpu__WEBPACK_IMPORTED_MODULE_2__.TransposeProgram(x.shape, perm);
  return backend.runWebGLProgram(program, [x], x.dtype);
}


/***/ }),

/***/ 3744:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unique": () => (/* binding */ unique),
/* harmony export */   "uniqueConfig": () => (/* binding */ uniqueConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_utils/shared */ 73505);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl_util */ 45181);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function unique(args) {
  const {
    inputs,
    attrs,
    backend
  } = args;
  const {
    axis
  } = attrs;
  const {
    x
  } = inputs;
  (0,_webgl_util__WEBPACK_IMPORTED_MODULE_1__.assertNotComplex)(x, 'unique');
  // For now, always forward calculation to the CPU backend.
  console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');
  const values = backend.readSync(x.dataId);
  const {
    outputValues,
    outputShape,
    indices
  } = (0,_kernel_utils_shared__WEBPACK_IMPORTED_MODULE_2__.uniqueImplCPU)(values, axis, x.shape, x.dtype);
  return [backend.makeTensorInfo(outputShape, x.dtype, outputValues), backend.makeTensorInfo([indices.length], 'int32', indices)];
}
const uniqueConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unique,
  backendName: 'webgl',
  kernelFunc: unique
};

/***/ }),

/***/ 45384:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unpack": () => (/* binding */ unpack),
/* harmony export */   "unpackConfig": () => (/* binding */ unpackConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Slice */ 92461);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function unpack(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    value
  } = inputs;
  let {
    axis
  } = attrs;
  if (axis < 0) {
    axis += value.shape.length;
  }
  const x = value;
  const xRank = x.shape.length;
  const num = value.shape[axis];
  const outShape = new Array(xRank - 1);
  let outIndex = 0;
  for (let i = 0; i < xRank; i++) {
    if (i !== axis) {
      outShape[outIndex++] = x.shape[i];
    }
  }
  const toDispose = [];
  const begin = new Array(xRank).fill(0);
  const size = x.shape.slice();
  size[axis] = 1;
  const res = new Array(num);
  for (let i = 0; i < res.length; i++) {
    begin[axis] = i;
    const sliced = (0,_Slice__WEBPACK_IMPORTED_MODULE_1__.slice)({
      inputs: {
        x
      },
      backend,
      attrs: {
        begin,
        size
      }
    });
    const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
      inputs: {
        x: sliced
      },
      backend,
      attrs: {
        shape: outShape
      }
    });
    res[i] = reshaped;
    toDispose.push(sliced);
  }
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return res;
}
const unpackConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unpack,
  backendName: 'webgl',
  kernelFunc: unpack
};

/***/ }),

/***/ 67159:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsortedSegmentSum": () => (/* binding */ unsortedSegmentSum),
/* harmony export */   "unsortedSegmentSumConfig": () => (/* binding */ unsortedSegmentSumConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _segment_gpu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../segment_gpu */ 1427);
/* harmony import */ var _Range__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Range */ 54678);
/* harmony import */ var _Reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reshape */ 96349);
/* harmony import */ var _Tile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Tile */ 6488);
/* harmony import */ var _Transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transpose */ 16665);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






function unsortedSegmentSum(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    x,
    segmentIds
  } = inputs;
  const {
    numSegments
  } = attrs;
  const xRank = x.shape.length;
  const toDispose = [];
  let axis = 0;
  const permutation = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getAxesPermutation([axis], xRank);
  let permutedX = x;
  if (permutation != null) {
    permutedX = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x
      },
      backend,
      attrs: {
        perm: permutation
      }
    });
    toDispose.push(permutedX);
    axis = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getInnerMostAxes(1, xRank)[0];
  }
  const outShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape([permutedX.shape[axis]]);
  const a2D = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: permutedX
    },
    backend,
    attrs: {
      shape: [-1, inSize]
    }
  });
  toDispose.push(a2D);
  const outputDType = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sumOutType)(x.dtype);
  const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {
    const batchSize = x.shape[0];
    const inSize = x.shape[1];
    const windowSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);
    const segOpInfo = {
      windowSize,
      inSize,
      batchSize,
      numSegments
    };
    const program = new _segment_gpu__WEBPACK_IMPORTED_MODULE_3__.SegmentOpProgram(segOpInfo, segOpType);
    const output = backend.compileAndRun(program, [x, segmentIds], dtype);
    toDispose.push(output);
    // No need to run another GPGPU program.
    if (output.shape[1] === numSegments) {
      return output;
    }
    const rangeInfo = (0,_Range__WEBPACK_IMPORTED_MODULE_4__.range)({
      backend,
      attrs: {
        start: 0,
        stop: numSegments,
        step: 1,
        dtype: 'float32'
      }
    });
    const tileInfo = (0,_Tile__WEBPACK_IMPORTED_MODULE_5__.tile)({
      inputs: {
        x: rangeInfo
      },
      backend,
      attrs: {
        reps: [inSize / windowSize]
      }
    });
    toDispose.push(rangeInfo);
    toDispose.push(tileInfo);
    const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);
    return result;
  };
  const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);
  const reshaped = (0,_Reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)({
    inputs: {
      x: segOpResult
    },
    backend,
    attrs: {
      shape: outShape
    }
  });
  let result = reshaped;
  if (permutation != null) {
    toDispose.push(reshaped);
    const perm = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util.getUndoAxesPermutation(permutation);
    result = (0,_Transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)({
      inputs: {
        x: result
      },
      backend,
      attrs: {
        perm
      }
    });
  }
  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));
  return result;
}
const unsortedSegmentSumConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.UnsortedSegmentSum,
  backendName: 'webgl',
  kernelFunc: unsortedSegmentSum
};

/***/ }),

/***/ 88697:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zerosLike": () => (/* binding */ zerosLike),
/* harmony export */   "zerosLikeConfig": () => (/* binding */ zerosLikeConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _Complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Complex */ 15661);
/* harmony import */ var _Fill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Fill */ 35576);
/* harmony import */ var _Imag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Imag */ 80807);
/* harmony import */ var _Real__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Real */ 50954);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





function zerosLike(args) {
  const {
    inputs,
    backend
  } = args;
  const {
    x
  } = inputs;
  if (x.dtype === 'complex64') {
    const realPart = (0,_Real__WEBPACK_IMPORTED_MODULE_1__.real)({
      inputs: {
        input: x
      },
      backend
    });
    const r = zerosLike({
      inputs: {
        x: realPart
      },
      backend
    });
    const imagPart = (0,_Imag__WEBPACK_IMPORTED_MODULE_2__.imag)({
      inputs: {
        input: x
      },
      backend
    });
    const i = zerosLike({
      inputs: {
        x: imagPart
      },
      backend
    });
    const result = (0,_Complex__WEBPACK_IMPORTED_MODULE_3__.complex)({
      inputs: {
        real: r,
        imag: i
      },
      backend
    });
    backend.disposeIntermediateTensorInfo(realPart);
    backend.disposeIntermediateTensorInfo(r);
    backend.disposeIntermediateTensorInfo(imagPart);
    backend.disposeIntermediateTensorInfo(i);
    return result;
  } else {
    return (0,_Fill__WEBPACK_IMPORTED_MODULE_4__.fill)({
      attrs: {
        shape: x.shape,
        dtype: x.dtype,
        value: x.dtype === 'string' ? '' : 0
      },
      backend
    });
  }
}
const zerosLikeConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ZerosLike,
  backendName: 'webgl',
  kernelFunc: zerosLike
};

/***/ }),

/***/ 50154:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_fusedMatMul": () => (/* binding */ _fusedMatMul),
/* harmony export */   "_fusedMatMulConfig": () => (/* binding */ _fusedMatMulConfig)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BatchMatMul_impl */ 32997);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function _fusedMatMul(args) {
  const {
    inputs,
    backend,
    attrs
  } = args;
  const {
    a,
    b,
    bias,
    preluActivationWeights
  } = inputs;
  const {
    transposeA,
    transposeB,
    activation,
    leakyreluAlpha
  } = attrs;
  return (0,_BatchMatMul_impl__WEBPACK_IMPORTED_MODULE_1__.batchMatMulImpl)({
    a,
    b,
    transposeA,
    transposeB,
    backend,
    bias,
    preluActivationWeights,
    leakyreluAlpha,
    activation
  });
}
const _fusedMatMulConfig = {
  kernelName: _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__._FusedMatMul,
  backendName: 'webgl',
  kernelFunc: _fusedMatMul
};

/***/ }),

/***/ 68969:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LRNProgram": () => (/* binding */ LRNProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNProgram {
  constructor(xShape, radius, bias, alpha, beta) {
    this.variableNames = ['x'];
    this.outputShape = [];
    const rad = radius;
    const maxD = xShape[3] - 1;
    this.outputShape = xShape;
    // optimize pow(bias + alpha * sum, -beta)
    // src: https://github.com/tensorflow/tensorflow/..
    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
    // tensorflow/core/kernels/mkl_lrn_op.cc#L320
    let powOperator;
    const basis = `float(${bias}) + float(${alpha}) * sum`;
    if (beta === 0.5) {
      powOperator = `inversesqrt(${basis})`;
    } else if (beta === 1.0) {
      powOperator = `1.0/(${basis})`;
    } else {
      powOperator = `exp(log(${basis}) * float(-${beta}));`;
    }
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${rad}; j <= ${rad}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${maxD}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${powOperator};
        setOutput(val);
      }
    `;
  }
}

/***/ }),

/***/ 82162:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LRNGradProgram": () => (/* binding */ LRNGradProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNGradProgram {
  constructor(inputShape, depthRadius, bias, alpha, beta) {
    this.variableNames = ['inputImage', 'outputImage', 'dy'];
    this.outputShape = [];
    this.outputShape = inputShape;
    this.depth = inputShape[3];
    this.depthRadius = depthRadius;
    this.bias = bias;
    this.alpha = alpha;
    this.beta = beta;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${depthRadius})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${depthRadius} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${alpha}) * norm + float(${bias});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${alpha})
                * float(${beta})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${beta});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 78069:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LRNPackedProgram": () => (/* binding */ LRNPackedProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LRNPackedProgram {
  constructor(xShape, radius, bias, alpha, beta) {
    this.variableNames = ['x'];
    this.outputShape = [];
    this.packedInputs = true;
    this.packedOutput = true;
    const rad = radius;
    const maxD = xShape[3] - 1;
    this.outputShape = xShape;
    // optimize pow(bias + alpha * sum, -beta)
    // src: https://github.com/tensorflow/tensorflow/..
    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..
    // tensorflow/core/kernels/mkl_lrn_op.cc#L320
    let powOperator;
    const basis = `float(${bias}) + float(${alpha}) * sum`;
    if (beta === 0.5) {
      powOperator = `inversesqrt(${basis})`;
    } else if (beta === 1.0) {
      powOperator = `1.0/(${basis})`;
    } else {
      powOperator = `exp(log(${basis}) * float(-${beta}));`;
    }
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${rad};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${rad}; j <= ${rad}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${powOperator};
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 28641:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MaxPool2DBackpropProgram": () => (/* binding */ MaxPool2DBackpropProgram),
/* harmony export */   "MaxPool3DBackpropProgram": () => (/* binding */ MaxPool3DBackpropProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MaxPool2DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'maxPos'];
    this.outputShape = convInfo.inShape;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${padTop}, ${padLeft});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${effectiveFilterHeight};
          wR += ${dilationHeight}) {
          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {
            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${effectiveFilterWidth} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class MaxPool3DBackpropProgram {
  constructor(convInfo) {
    this.variableNames = ['dy', 'maxPos'];
    this.outputShape = convInfo.inShape;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;
    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;
    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;
    const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
           wD += ${dilationDepth}) {
          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;

          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;

            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;

              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${lastIndex} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                  wR * ${effectiveFilterWidth} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}

/***/ }),

/***/ 32911:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MeanProgram": () => (/* binding */ MeanProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class MeanProgram {
  constructor(reduceInfo, divisor) {
    this.variableNames = ['x'];
    const {
      windowSize,
      batchSize,
      inSize,
      outSize
    } = reduceInfo;
    this.outputShape = [batchSize, outSize];
    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    let updateSnippet = `sumValue += dot(values, ones);`;
    if (divisor != null) {
      const denominator = 1 / divisor;
      updateSnippet = `sumValue += dot(values * ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.isInt(denominator) ? denominator.toPrecision(2) : denominator}, ones);`;
    }
    let checkOutOfBounds = '';
    if (inSize % windowSize > 0) {
      checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return 0.0;
        }
      `;
    }
    this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${updateSnippet}
        }
        setOutput(sumValue);
      }
    `;
  }
}

/***/ }),

/***/ 43200:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MirrorPadProgram": () => (/* binding */ MirrorPadProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class MirrorPadProgram {
  constructor(xShape, paddings, mode) {
    this.variableNames = ['x'];
    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
    const rank = xShape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
    const offset = mode === 'reflect' ? 0 : 1;
    if (rank === 1) {
      this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${offset};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${offset};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${dtype} start = ${dtype}(${start});
      ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outC = getOutputCoords();
        for (int i = 0; i < ${rank}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${offset};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};
          }
        }
        ${dtype} coords = outC - start;
        setOutput(getX(${unpackedCoords}));
      }
    `;
  }
}

/***/ }),

/***/ 16929:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MirrorPadPackedProgram": () => (/* binding */ MirrorPadPackedProgram)
/* harmony export */ });
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Example shader code for
 * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`
 * ```
 *    const int start = int(2);
 *    const int end = int(5);
 *
 *    void main() {
 *       int outputLoc = getOutputCoords();
 *       vec4 result = vec4(0.);
 *
 *       int rc = outputLoc;
 *
 *       int source = rc;
 *       if (source < start) {
 *         source = start * 2 - source - 0;
 *       } else if (source >= end) {
 *         source = (end - 1) * 2 - source + 0;
 *       }
 *       source -= start;
 *
 *       result[0] = getChannel(getX(source), source);
 *       rc += 1;
 *       if(rc < 6) {
 *          int source = rc;
 *          if (source < start) {
 *            source = start * 2 - source - 0;
 *          } else if (source >= end) {
 *            source = (end - 1) * 2 - source + 0;
 *          }
 *          source -= start;
 *
 *         result[1] = getChannel(getX(source), source);
 *       }
 *
 *       setOutput(result);
 *     }
 * ```
 */
class MirrorPadPackedProgram {
  constructor(xShape, paddings, mode) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
    const rank = xShape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('rc', rank);
    const source = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('source', rank);
    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;
    const offset = mode === 'reflect' ? 0 : 1;
    let mainLoop = '';
    if (rank === 1) {
      const padSetup = `
        ${dtype} source = rc;
        if (source < start) {
          source = start * 2 - source - ${offset};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${offset};
        }
        source -= start;
      `;
      mainLoop = `
        ${dtype} rc = outputLoc;
        ${padSetup}
        result[0] = getChannel(getX(${source.join()}), ${innerDims});
        ${coords[rank - 1]} += 1;
        if(${cLimit}) {
          ${padSetup}
          result[1] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
    } else {
      const padSetup = `
        ${dtype} source = rc;
        ${dtype} lt = ${dtype}(lessThan(source, start));
        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));
        ${dtype} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${offset}) +
                gte * ((end - 1) * 2 - source + ${offset});
        source -= start;
      `;
      mainLoop = `
        ${dtype} rc = outputLoc;
        ${padSetup}
        result[0] = getChannel(getX(${source.join()}), ${innerDims});
        ${coords[rank - 1]} += 1;
        if(${cLimit}) {
          ${padSetup}
          result[1] = getChannel(getX(${source.join()}), ${innerDims});
        }
        rc = outputLoc;
        ${coords[rank - 2]} += 1;
        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {
          ${padSetup}
          result[2] = getChannel(getX(${source.join()}), ${innerDims});
          ${coords[rank - 1]} += 1;
          if(${cLimit}) {
            ${padSetup}
            result[3] = getChannel(getX(${source.join()}), ${innerDims});
          }
        }
      `;
    }
    this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 71650:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MatMulPackedProgram": () => (/* binding */ MatMulPackedProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class MatMulPackedProgram {
  constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {
    this.variableNames = ['matrixA', 'matrixB'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    const sharedDim = transposeA ? aShape[1] : aShape[2];
    const sharedDimensionPacked = Math.ceil(sharedDim / 2);
    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';
    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';
    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];
    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];
    let activationSnippet = '',
      applyActivationSnippet = '';
    if (activation) {
      if (hasPreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${activation}
        }`;
      } else if (hasLeakyreluActivation) {
        activationSnippet = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${activation}
        }`;
      } else {
        activationSnippet = `vec4 activation(vec4 x) {
          ${activation}
        }`;
      }
      applyActivationSnippet = `result = activation(result);`;
    }
    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';
    if (addBias) {
      this.variableNames.push('bias');
    }
    if (hasPreluActivation) {
      this.variableNames.push('preluActivationWeights');
    }
    if (hasLeakyreluActivation) {
      this.variableNames.push('leakyreluAlpha');
    }
    let batchASnippet = 'rc.x';
    let batchBSnippet = 'rc.x';
    if (aShape[0] < bShape[0]) {
      batchASnippet = `imod(rc.x, ${aShape[0]})`;
    } else if (bShape[0] < aShape[0]) {
      batchBSnippet = `imod(rc.x, ${bShape[0]})`;
    }
    this.userCode = `
      ${activationSnippet}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${sharedDimensionPacked}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${batchASnippet};
        int batchB = ${batchBSnippet};
        for (int i = 0; i < ${sharedDimensionPacked}; i++) {
          vec4 a = getMatrixA(batchA, ${aSample});
          vec4 b = getMatrixB(batchB, ${bSample});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${aSwizzle[0]} * ${bSwizzle[0]});
          result += (${aSwizzle[1]} * ${bSwizzle[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${addBiasSnippet}

        ${applyActivationSnippet}

        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 49344:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MultinomialProgram": () => (/* binding */ MultinomialProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MultinomialProgram {
  constructor(batchSize, numOutcomes, numSamples) {
    this.variableNames = ['probs'];
    this.customUniforms = [{
      name: 'seed',
      type: 'float'
    }];
    this.outputShape = [batchSize, numSamples];
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${numOutcomes - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${numOutcomes - 1}));
      }
    `;
  }
}

/***/ }),

/***/ 35144:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OneHotProgram": () => (/* binding */ OneHotProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OneHotProgram {
  constructor(numIndices, depth, onValue, offValue) {
    this.variableNames = ['indices'];
    this.outputShape = [numIndices, depth];
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${offValue}), float(${onValue}),
                      float(index == coords.y)));
      }
    `;
  }
}

/***/ }),

/***/ 91539:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PackProgram": () => (/* binding */ PackProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



class PackProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = false;
    this.packedOutput = true;
    // Only input / output 3D tensors.
    this.outputShape = outputShape;
    this.rank = outputShape.length;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    if (this.rank === 0) {
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    } else {
      const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('rc', this.rank);
      const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_2__.getCoordsDataType)(this.rank);
      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);
      const setup = this.getSetup(channels);
      const output = this.getOutput(channels);
      this.userCode = `
        void main() {
          ${dtype} rc = getOutputCoords();

          if(${outOfBoundsCondition}) {
            setOutput(vec4(0));
          } else {
            ${setup}

            setOutput(vec4(${output}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(dims) {
    const coords = [];
    for (let row = 0; row <= 1; row++) {
      for (let col = 0; col <= 1; col++) {
        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;
        for (let d = 2; d < this.rank; d++) {
          coord = `${dims[dims.length - 1 - d]},` + coord;
        }
        coords.push(coord);
      }
    }
    return coords;
  }
  getOutOfBoundsCondition(dims) {
    if (this.rank === 1) {
      return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;
    }
    let cond = '';
    for (let i = this.rank - 2; i < this.rank; i++) {
      cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;
      if (i < this.rank - 1) {
        cond += '||';
      }
    }
    return cond;
  }
  getSetup(dims) {
    if (this.rank === 1) {
      return '';
    }
    const innerDims = dims.slice(-2);
    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1];
    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${innerDims[0]};
      int c = ${innerDims[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${col};
      bool rEdge = rp1 >= ${row};
    `;
  }
  getOutput(dims) {
    const sourceCoords = this.getSourceCoordsArr(dims);
    if (this.rank === 1) {
      const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];
      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;
    }
    return `getA(${sourceCoords[0]}),
            cEdge ? 0. : getA(${sourceCoords[1]}),
            rEdge ? 0. : getA(${sourceCoords[2]}),
            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;
  }
}

/***/ }),

/***/ 88573:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getChannels": () => (/* binding */ getChannels),
/* harmony export */   "getSourceCoords": () => (/* binding */ getSourceCoords),
/* harmony export */   "getVecChannels": () => (/* binding */ getVecChannels)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function getVecChannels(name, rank) {
  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);
}
function getChannels(name, rank) {
  if (rank === 1) {
    return [name];
  }
  return getVecChannels(name, rank);
}
function getSourceCoords(rank, dims) {
  if (rank === 1) {
    return 'rc';
  }
  let coords = '';
  for (let i = 0; i < rank; i++) {
    coords += dims[i];
    if (i < rank - 1) {
      coords += ',';
    }
  }
  return coords;
}

/***/ }),

/***/ 18362:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PadProgram": () => (/* binding */ PadProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class PadProgram {
  constructor(xShape, paddings, constantValue) {
    this.variableNames = ['x'];
    this.customUniforms = [{
      name: 'value',
      type: 'float'
    }];
    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
    const rank = xShape.length;
    const type = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);
    if (rank === 1) {
      this.userCode = `
        int start = ${start};
        int end = ${end};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${type} start = ${type}(${start});
      ${type} end = ${type}(${end});

      void main() {
        ${type} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${type} coords = outC - start;
          setOutput(getX(${unpackedCoords}));
        }
      }
    `;
  }
}

/***/ }),

/***/ 4180:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PadPackedProgram": () => (/* binding */ PadPackedProgram)
/* harmony export */ });
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class PadPackedProgram {
  constructor(xShape, paddings, constantValue) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'value',
      type: 'float'
    }];
    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);
    const rank = xShape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);
    const start = paddings.map(p => p[0]).join(',');
    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');
    const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('rc', rank);
    const source = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('source', rank);
    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;
    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;
    const componentSetup = [`${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;
       if(${cLimit}) {
      `, rank === 1 ? '' : `}
       rc = outputLoc;
       ${coords[rank - 2]} += 1;
       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`, rank === 1 ? '' : `  ${coords[rank - 1]} += 1;
         if(${cLimit}) {`];
    const paddingArea = rank === 1 ? 'rc < start || rc >= end' : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';
    let mainLoop = '';
    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {
      mainLoop += `
        ${componentSetup[i]}
        if (${paddingArea}) {
          result[${i}] = float(value);
        } else {
          ${dtype} source = rc - start;
          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});
        }
      `;
    }
    mainLoop += rank === 1 ? `} ` : `}}`;
    this.userCode = `
      const ${dtype} start = ${dtype}(${start});
      const ${dtype} end = ${dtype}(${end});

      void main() {
        ${dtype} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${mainLoop}
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 74645:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Pool2DProgram": () => (/* binding */ Pool2DProgram),
/* harmony export */   "Pool3DProgram": () => (/* binding */ Pool3DProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pool2DProgram {
  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
    this.variableNames = ['x'];
    if (poolType === 'avg' && computePositions) {
      throw new Error('Cannot compute positions for average pool.');
    }
    const filterWidth = convInfo.filterWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.outputShape = convInfo.outShape;
    const isAvgPool = poolType === 'avg';
    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
    const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;
    let initializationValue = '0.0';
    if (!isAvgPool) {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
    }
    if (computePositions) {
      const compareOp = '>=';
      this.userCode = `
        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
        const ivec2 pads = ivec2(${padTop}, ${padLeft});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${effectiveFilterHeight};
              wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${effectiveFilterWidth};
                wC += ${dilationWidth}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${convInfo.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${compareOp} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${flattenPositions ? includeBatchInIndex ? batchFlattenPositionStr : flattenPositionStr : `wR * ${effectiveFilterWidth} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const compareOp = 'max';
    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
    if (poolType === 'avg') {
      returnValue = `avgValue / max(count, 1.0)`;
    }
    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
    const filterWidthVec4Remainder = filterWidth % 4;
    const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});
      const ivec2 pads = ivec2(${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${convInfo.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
            int xC = xCCorner + wC * ${dilationWidth};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)
            );

            ${updateSnippet}
          }

          int xC = xCCorner + ${filterWidthNearestVec4};
          if (${filterWidthVec4Remainder === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              initializationValue,
              initializationValue
            );

            ${updateSnippet}
          } else if (${filterWidthVec4Remainder === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${dilationWidth}, d),
              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),
              initializationValue
            );

            ${updateSnippet}
          }
        }
        setOutput(${returnValue});
      }
    `;
  }
}
class Pool3DProgram {
  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {
    this.variableNames = ['x'];
    if (poolType === 'avg' && computePositions) {
      throw new Error('Cannot compute positions for average pool.');
    }
    const filterWidth = convInfo.filterWidth;
    const strideDepth = convInfo.strideDepth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const dilationDepth = convInfo.dilationDepth;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const effectiveFilterDepth = convInfo.effectiveFilterDepth;
    const effectiveFilterHeight = convInfo.effectiveFilterHeight;
    const effectiveFilterWidth = convInfo.effectiveFilterWidth;
    const padFront = convInfo.padInfo.front;
    const padTop = convInfo.padInfo.top;
    const padLeft = convInfo.padInfo.left;
    this.outputShape = convInfo.outShape;
    const isAvgPool = poolType === 'avg';
    let initializationValue = '0.0';
    if (!isAvgPool) {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
    }
    if (computePositions) {
      const compareOp = '>=';
      this.userCode = `
        const ivec3 strides =
            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${effectiveFilterDepth};
              wD += ${dilationDepth}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${convInfo.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${effectiveFilterHeight};
                wR += ${dilationHeight}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${convInfo.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${effectiveFilterWidth};
                  wC += ${dilationWidth}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${convInfo.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${compareOp} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${flattenPositions ? includeBatchInIndex ? `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +
                      wR * ${effectiveFilterWidth} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const compareOp = 'max';
    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
    if (poolType === 'avg') {
      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.
      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s
      // value to avoid dividing zero.
      returnValue = `avgValue / max(count, 1.0)`;
    }
    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;
    const filterWidthVec4Remainder = filterWidth % 4;
    const updateSnippet = `
      if (${isAvgPool}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});
      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${convInfo.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${initializationValue});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${effectiveFilterDepth};
            wD += ${dilationDepth}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${convInfo.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${effectiveFilterHeight};
            wR += ${dilationHeight}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${convInfo.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {
              int xC = xCCorner + wC * ${dilationWidth};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)
              );

              ${updateSnippet}
            }

            int xC = xCCorner + ${filterWidthNearestVec4};
            if (${filterWidthVec4Remainder === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                initializationValue,
                initializationValue
              );

              ${updateSnippet}
            } else if (${filterWidthVec4Remainder === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),
                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),
                initializationValue
              );

              ${updateSnippet}
            }
          }
        }
        setOutput(${returnValue});
      }
    `;
  }
}

/***/ }),

/***/ 84488:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReduceProgram": () => (/* binding */ ReduceProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ReduceProgram {
  constructor(reduceInfo, reduceType) {
    this.variableNames = ['x'];
    const {
      windowSize,
      batchSize,
      inSize,
      outSize
    } = reduceInfo;
    this.outputShape = [batchSize, outSize];
    let initializationValue = '0.0';
    let compareOp = ``;
    if (reduceType === 'prod') {
      initializationValue = '1.0';
    } else if (reduceType === 'min') {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '1.0 / 1e-20';
      compareOp = `min`;
    } else if (reduceType === 'max') {
      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.
      initializationValue = '-1.0 / 1e-20';
      compareOp = `max`;
    }
    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';
    if (reduceType === 'sum') {
      returnValue = `sumValue`;
    } else if (reduceType === 'prod') {
      returnValue = `prodValue`;
    } else if (reduceType === 'all') {
      returnValue = `allValue`;
    } else if (reduceType === 'any') {
      returnValue = `anyValue`;
    }
    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    let updateSnippet = `
      if (${reduceType === 'sum'}) {
        sumValue += dot(values, ones);
      } else if (${reduceType === 'prod'}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${compareOp}(values, minMaxValue);
        if (${reduceType === 'min'} || ${reduceType === 'max'}) {
          minMaxValue = ${compareOp}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `;
    let vecType = `vec4`;
    if (reduceType === 'all') {
      initializationValue = '1.0';
      updateSnippet = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `;
      vecType = `bvec4`;
    } else if (reduceType === 'any') {
      initializationValue = '0.0';
      updateSnippet = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `;
      vecType = `bvec4`;
    }
    let checkOutOfBounds = '';
    if (inSize % windowSize > 0) {
      checkOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
    }
    this.userCode = `
      const float initializationValue = ${initializationValue};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${checkOutOfBounds}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${windowSize};

        vec4 minMaxValue = vec4(${initializationValue});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          ${vecType} values = ${vecType}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
  }
}

/***/ }),

/***/ 31839:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _kernels_FusedMatMul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernels/_FusedMatMul */ 50154);
/* harmony import */ var _kernels_Abs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kernels/Abs */ 32053);
/* harmony import */ var _kernels_Acos__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernels/Acos */ 12281);
/* harmony import */ var _kernels_Acosh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./kernels/Acosh */ 89184);
/* harmony import */ var _kernels_Add__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./kernels/Add */ 55002);
/* harmony import */ var _kernels_AddN__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./kernels/AddN */ 10253);
/* harmony import */ var _kernels_All__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./kernels/All */ 74053);
/* harmony import */ var _kernels_Any__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./kernels/Any */ 58879);
/* harmony import */ var _kernels_ArgMax__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./kernels/ArgMax */ 54167);
/* harmony import */ var _kernels_ArgMin__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./kernels/ArgMin */ 97662);
/* harmony import */ var _kernels_Asin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./kernels/Asin */ 78687);
/* harmony import */ var _kernels_Asinh__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./kernels/Asinh */ 95430);
/* harmony import */ var _kernels_Atan__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kernels/Atan */ 77319);
/* harmony import */ var _kernels_Atan2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./kernels/Atan2 */ 51226);
/* harmony import */ var _kernels_Atanh__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./kernels/Atanh */ 64834);
/* harmony import */ var _kernels_AvgPool__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./kernels/AvgPool */ 95268);
/* harmony import */ var _kernels_AvgPool3D__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./kernels/AvgPool3D */ 50688);
/* harmony import */ var _kernels_AvgPool3DGrad__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./kernels/AvgPool3DGrad */ 59966);
/* harmony import */ var _kernels_AvgPoolGrad__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./kernels/AvgPoolGrad */ 39983);
/* harmony import */ var _kernels_BatchMatMul__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./kernels/BatchMatMul */ 70022);
/* harmony import */ var _kernels_BatchNorm__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./kernels/BatchNorm */ 33255);
/* harmony import */ var _kernels_BatchToSpaceND__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./kernels/BatchToSpaceND */ 96077);
/* harmony import */ var _kernels_Bincount__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./kernels/Bincount */ 74444);
/* harmony import */ var _kernels_BroadcastArgs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./kernels/BroadcastArgs */ 59503);
/* harmony import */ var _kernels_Cast__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./kernels/Cast */ 84004);
/* harmony import */ var _kernels_Ceil__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./kernels/Ceil */ 5127);
/* harmony import */ var _kernels_ClipByValue__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./kernels/ClipByValue */ 47454);
/* harmony import */ var _kernels_Complex__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./kernels/Complex */ 15661);
/* harmony import */ var _kernels_ComplexAbs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./kernels/ComplexAbs */ 12628);
/* harmony import */ var _kernels_Concat__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./kernels/Concat */ 63632);
/* harmony import */ var _kernels_Conv2D__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./kernels/Conv2D */ 9625);
/* harmony import */ var _kernels_Conv2DBackpropFilter__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./kernels/Conv2DBackpropFilter */ 53896);
/* harmony import */ var _kernels_Conv2DBackpropInput__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./kernels/Conv2DBackpropInput */ 29697);
/* harmony import */ var _kernels_Conv3D__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./kernels/Conv3D */ 33384);
/* harmony import */ var _kernels_Conv3DBackpropFilterV2__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./kernels/Conv3DBackpropFilterV2 */ 9338);
/* harmony import */ var _kernels_Conv3DBackpropInputV2__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./kernels/Conv3DBackpropInputV2 */ 94077);
/* harmony import */ var _kernels_Cos__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./kernels/Cos */ 39295);
/* harmony import */ var _kernels_Cosh__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./kernels/Cosh */ 68402);
/* harmony import */ var _kernels_CropAndResize__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./kernels/CropAndResize */ 70878);
/* harmony import */ var _kernels_Cumprod__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./kernels/Cumprod */ 54329);
/* harmony import */ var _kernels_Cumsum__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./kernels/Cumsum */ 3619);
/* harmony import */ var _kernels_DenseBincount__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./kernels/DenseBincount */ 71185);
/* harmony import */ var _kernels_DepthToSpace__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./kernels/DepthToSpace */ 85045);
/* harmony import */ var _kernels_DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNative */ 14201);
/* harmony import */ var _kernels_DepthwiseConv2dNativeBackpropFilter__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNativeBackpropFilter */ 29721);
/* harmony import */ var _kernels_DepthwiseConv2dNativeBackpropInput__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./kernels/DepthwiseConv2dNativeBackpropInput */ 75214);
/* harmony import */ var _kernels_Diag__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./kernels/Diag */ 74611);
/* harmony import */ var _kernels_Dilation2D__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./kernels/Dilation2D */ 20149);
/* harmony import */ var _kernels_Einsum__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./kernels/Einsum */ 20994);
/* harmony import */ var _kernels_Elu__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./kernels/Elu */ 8713);
/* harmony import */ var _kernels_EluGrad__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./kernels/EluGrad */ 83526);
/* harmony import */ var _kernels_Equal__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./kernels/Equal */ 19570);
/* harmony import */ var _kernels_Erf__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./kernels/Erf */ 56282);
/* harmony import */ var _kernels_Exp__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./kernels/Exp */ 49698);
/* harmony import */ var _kernels_ExpandDims__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./kernels/ExpandDims */ 58748);
/* harmony import */ var _kernels_Expm1__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./kernels/Expm1 */ 85307);
/* harmony import */ var _kernels_FFT__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./kernels/FFT */ 81213);
/* harmony import */ var _kernels_Fill__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./kernels/Fill */ 35576);
/* harmony import */ var _kernels_FlipLeftRight__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./kernels/FlipLeftRight */ 20828);
/* harmony import */ var _kernels_Floor__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./kernels/Floor */ 40901);
/* harmony import */ var _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./kernels/FloorDiv */ 8647);
/* harmony import */ var _kernels_FromPixels__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./kernels/FromPixels */ 27770);
/* harmony import */ var _kernels_FusedConv2D__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./kernels/FusedConv2D */ 72132);
/* harmony import */ var _kernels_FusedDepthwiseConv2D__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./kernels/FusedDepthwiseConv2D */ 84723);
/* harmony import */ var _kernels_GatherNd__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./kernels/GatherNd */ 99312);
/* harmony import */ var _kernels_GatherV2__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./kernels/GatherV2 */ 34065);
/* harmony import */ var _kernels_Greater__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./kernels/Greater */ 28650);
/* harmony import */ var _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./kernels/GreaterEqual */ 38339);
/* harmony import */ var _kernels_Identity__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./kernels/Identity */ 51542);
/* harmony import */ var _kernels_IFFT__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./kernels/IFFT */ 67813);
/* harmony import */ var _kernels_Imag__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./kernels/Imag */ 80807);
/* harmony import */ var _kernels_IsFinite__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./kernels/IsFinite */ 46454);
/* harmony import */ var _kernels_IsInf__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./kernels/IsInf */ 91741);
/* harmony import */ var _kernels_IsNaN__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./kernels/IsNaN */ 31242);
/* harmony import */ var _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./kernels/LeakyRelu */ 81356);
/* harmony import */ var _kernels_Less__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./kernels/Less */ 47835);
/* harmony import */ var _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./kernels/LessEqual */ 60744);
/* harmony import */ var _kernels_LinSpace__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./kernels/LinSpace */ 27671);
/* harmony import */ var _kernels_Log__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./kernels/Log */ 41895);
/* harmony import */ var _kernels_Log1p__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./kernels/Log1p */ 11067);
/* harmony import */ var _kernels_LogicalAnd__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./kernels/LogicalAnd */ 28214);
/* harmony import */ var _kernels_LogicalNot__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./kernels/LogicalNot */ 63719);
/* harmony import */ var _kernels_LogicalOr__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./kernels/LogicalOr */ 25157);
/* harmony import */ var _kernels_LRN__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./kernels/LRN */ 34304);
/* harmony import */ var _kernels_LRNGrad__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./kernels/LRNGrad */ 5133);
/* harmony import */ var _kernels_Max__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./kernels/Max */ 43609);
/* harmony import */ var _kernels_Maximum__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./kernels/Maximum */ 76706);
/* harmony import */ var _kernels_MaxPool__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./kernels/MaxPool */ 13539);
/* harmony import */ var _kernels_MaxPool3D__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./kernels/MaxPool3D */ 97524);
/* harmony import */ var _kernels_MaxPool3DGrad__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./kernels/MaxPool3DGrad */ 90076);
/* harmony import */ var _kernels_MaxPoolGrad__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./kernels/MaxPoolGrad */ 85285);
/* harmony import */ var _kernels_MaxPoolWithArgmax__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./kernels/MaxPoolWithArgmax */ 97043);
/* harmony import */ var _kernels_Mean__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./kernels/Mean */ 75049);
/* harmony import */ var _kernels_Min__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./kernels/Min */ 48800);
/* harmony import */ var _kernels_Minimum__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./kernels/Minimum */ 31347);
/* harmony import */ var _kernels_MirrorPad__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./kernels/MirrorPad */ 58863);
/* harmony import */ var _kernels_Mod__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./kernels/Mod */ 31094);
/* harmony import */ var _kernels_Multinomial__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./kernels/Multinomial */ 66490);
/* harmony import */ var _kernels_Multiply__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./kernels/Multiply */ 45706);
/* harmony import */ var _kernels_Neg__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./kernels/Neg */ 37072);
/* harmony import */ var _kernels_NonMaxSuppressionV3__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV3 */ 38212);
/* harmony import */ var _kernels_NonMaxSuppressionV4__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV4 */ 46858);
/* harmony import */ var _kernels_NonMaxSuppressionV5__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./kernels/NonMaxSuppressionV5 */ 41337);
/* harmony import */ var _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./kernels/NotEqual */ 42619);
/* harmony import */ var _kernels_OneHot__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./kernels/OneHot */ 53949);
/* harmony import */ var _kernels_OnesLike__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./kernels/OnesLike */ 55553);
/* harmony import */ var _kernels_Pack__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./kernels/Pack */ 31573);
/* harmony import */ var _kernels_PadV2__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./kernels/PadV2 */ 17119);
/* harmony import */ var _kernels_Pow__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./kernels/Pow */ 70229);
/* harmony import */ var _kernels_Prelu__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./kernels/Prelu */ 36283);
/* harmony import */ var _kernels_Prod__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./kernels/Prod */ 62180);
/* harmony import */ var _kernels_RaggedGather__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./kernels/RaggedGather */ 80760);
/* harmony import */ var _kernels_RaggedRange__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./kernels/RaggedRange */ 4511);
/* harmony import */ var _kernels_RaggedTensorToTensor__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./kernels/RaggedTensorToTensor */ 50410);
/* harmony import */ var _kernels_Range__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./kernels/Range */ 54678);
/* harmony import */ var _kernels_Real__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./kernels/Real */ 50954);
/* harmony import */ var _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./kernels/RealDiv */ 27148);
/* harmony import */ var _kernels_Reciprocal__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./kernels/Reciprocal */ 34199);
/* harmony import */ var _kernels_Relu__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./kernels/Relu */ 94082);
/* harmony import */ var _kernels_Relu6__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./kernels/Relu6 */ 31983);
/* harmony import */ var _kernels_Reshape__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./kernels/Reshape */ 96349);
/* harmony import */ var _kernels_ResizeBilinear__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./kernels/ResizeBilinear */ 55657);
/* harmony import */ var _kernels_ResizeBilinearGrad__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./kernels/ResizeBilinearGrad */ 3667);
/* harmony import */ var _kernels_ResizeNearestNeighbor__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./kernels/ResizeNearestNeighbor */ 70373);
/* harmony import */ var _kernels_ResizeNearestNeighborGrad__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./kernels/ResizeNearestNeighborGrad */ 56036);
/* harmony import */ var _kernels_Reverse__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./kernels/Reverse */ 2841);
/* harmony import */ var _kernels_RotateWithOffset__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./kernels/RotateWithOffset */ 5635);
/* harmony import */ var _kernels_Round__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./kernels/Round */ 75897);
/* harmony import */ var _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./kernels/Rsqrt */ 1013);
/* harmony import */ var _kernels_ScatterNd__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./kernels/ScatterNd */ 58510);
/* harmony import */ var _kernels_SearchSorted__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./kernels/SearchSorted */ 75660);
/* harmony import */ var _kernels_Select__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./kernels/Select */ 25618);
/* harmony import */ var _kernels_Selu__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./kernels/Selu */ 40001);
/* harmony import */ var _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./kernels/Sigmoid */ 57479);
/* harmony import */ var _kernels_Sign__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./kernels/Sign */ 15629);
/* harmony import */ var _kernels_Sin__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./kernels/Sin */ 98583);
/* harmony import */ var _kernels_Sinh__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./kernels/Sinh */ 924);
/* harmony import */ var _kernels_Slice__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./kernels/Slice */ 92461);
/* harmony import */ var _kernels_Softmax__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./kernels/Softmax */ 33648);
/* harmony import */ var _kernels_Softplus__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./kernels/Softplus */ 41149);
/* harmony import */ var _kernels_SpaceToBatchND__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./kernels/SpaceToBatchND */ 31264);
/* harmony import */ var _kernels_SparseFillEmptyRows__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./kernels/SparseFillEmptyRows */ 34312);
/* harmony import */ var _kernels_SparseReshape__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./kernels/SparseReshape */ 17650);
/* harmony import */ var _kernels_SparseSegmentMean__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./kernels/SparseSegmentMean */ 10785);
/* harmony import */ var _kernels_SparseSegmentSum__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./kernels/SparseSegmentSum */ 39498);
/* harmony import */ var _kernels_SparseToDense__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./kernels/SparseToDense */ 73800);
/* harmony import */ var _kernels_SplitV__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./kernels/SplitV */ 12684);
/* harmony import */ var _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./kernels/Sqrt */ 53598);
/* harmony import */ var _kernels_Square__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./kernels/Square */ 55);
/* harmony import */ var _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./kernels/SquaredDifference */ 49172);
/* harmony import */ var _kernels_StaticRegexReplace__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./kernels/StaticRegexReplace */ 52562);
/* harmony import */ var _kernels_Step__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./kernels/Step */ 54171);
/* harmony import */ var _kernels_StridedSlice__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./kernels/StridedSlice */ 22515);
/* harmony import */ var _kernels_StringNGrams__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./kernels/StringNGrams */ 58737);
/* harmony import */ var _kernels_StringSplit__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./kernels/StringSplit */ 34487);
/* harmony import */ var _kernels_StringToHashBucketFast__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./kernels/StringToHashBucketFast */ 70157);
/* harmony import */ var _kernels_Sub__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./kernels/Sub */ 13621);
/* harmony import */ var _kernels_Sum__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./kernels/Sum */ 52081);
/* harmony import */ var _kernels_Tan__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./kernels/Tan */ 95221);
/* harmony import */ var _kernels_Tanh__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./kernels/Tanh */ 32788);
/* harmony import */ var _kernels_TensorScatterUpdate__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./kernels/TensorScatterUpdate */ 50064);
/* harmony import */ var _kernels_Tile__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./kernels/Tile */ 6488);
/* harmony import */ var _kernels_TopK__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./kernels/TopK */ 81831);
/* harmony import */ var _kernels_Transform__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./kernels/Transform */ 83329);
/* harmony import */ var _kernels_Transpose__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./kernels/Transpose */ 16665);
/* harmony import */ var _kernels_Unique__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./kernels/Unique */ 3744);
/* harmony import */ var _kernels_Unpack__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./kernels/Unpack */ 45384);
/* harmony import */ var _kernels_UnsortedSegmentSum__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./kernels/UnsortedSegmentSum */ 67159);
/* harmony import */ var _kernels_ZerosLike__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./kernels/ZerosLike */ 88697);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










































































































































































// List all kernel configs here
const kernelConfigs = [_kernels_FusedMatMul__WEBPACK_IMPORTED_MODULE_1__._fusedMatMulConfig, _kernels_Abs__WEBPACK_IMPORTED_MODULE_2__.absConfig, _kernels_Acos__WEBPACK_IMPORTED_MODULE_3__.acosConfig, _kernels_Acosh__WEBPACK_IMPORTED_MODULE_4__.acoshConfig, _kernels_Add__WEBPACK_IMPORTED_MODULE_5__.addConfig, _kernels_AddN__WEBPACK_IMPORTED_MODULE_6__.addNConfig, _kernels_All__WEBPACK_IMPORTED_MODULE_7__.allConfig, _kernels_Any__WEBPACK_IMPORTED_MODULE_8__.anyConfig, _kernels_ArgMax__WEBPACK_IMPORTED_MODULE_9__.argMaxConfig, _kernels_ArgMin__WEBPACK_IMPORTED_MODULE_10__.argMinConfig, _kernels_Asin__WEBPACK_IMPORTED_MODULE_11__.asinConfig, _kernels_Asinh__WEBPACK_IMPORTED_MODULE_12__.asinhConfig, _kernels_Atan__WEBPACK_IMPORTED_MODULE_13__.atanConfig, _kernels_Atan2__WEBPACK_IMPORTED_MODULE_14__.atan2Config, _kernels_Atanh__WEBPACK_IMPORTED_MODULE_15__.atanhConfig, _kernels_AvgPool__WEBPACK_IMPORTED_MODULE_16__.avgPoolConfig, _kernels_AvgPool3D__WEBPACK_IMPORTED_MODULE_17__.avgPool3DConfig, _kernels_AvgPool3DGrad__WEBPACK_IMPORTED_MODULE_18__.avgPool3DGradConfig, _kernels_AvgPoolGrad__WEBPACK_IMPORTED_MODULE_19__.avgPoolGradConfig, _kernels_BatchMatMul__WEBPACK_IMPORTED_MODULE_20__.batchMatMulConfig, _kernels_BatchNorm__WEBPACK_IMPORTED_MODULE_21__.batchNormConfig, _kernels_BatchToSpaceND__WEBPACK_IMPORTED_MODULE_22__.batchToSpaceNDConfig, _kernels_Bincount__WEBPACK_IMPORTED_MODULE_23__.bincountConfig, _kernels_BroadcastArgs__WEBPACK_IMPORTED_MODULE_24__.broadcastArgsConfig, _kernels_Cast__WEBPACK_IMPORTED_MODULE_25__.castConfig, _kernels_Ceil__WEBPACK_IMPORTED_MODULE_26__.ceilConfig, _kernels_ClipByValue__WEBPACK_IMPORTED_MODULE_27__.clipByValueConfig, _kernels_Complex__WEBPACK_IMPORTED_MODULE_28__.complexConfig, _kernels_ComplexAbs__WEBPACK_IMPORTED_MODULE_29__.complexAbsConfig, _kernels_Concat__WEBPACK_IMPORTED_MODULE_30__.concatConfig, _kernels_Conv2D__WEBPACK_IMPORTED_MODULE_31__.conv2DConfig, _kernels_Conv2DBackpropFilter__WEBPACK_IMPORTED_MODULE_32__.conv2DBackpropFilterConfig, _kernels_Conv2DBackpropInput__WEBPACK_IMPORTED_MODULE_33__.conv2DBackpropInputConfig, _kernels_Conv3D__WEBPACK_IMPORTED_MODULE_34__.conv3DConfig, _kernels_Conv3DBackpropFilterV2__WEBPACK_IMPORTED_MODULE_35__.conv3DBackpropFilterV2Config, _kernels_Conv3DBackpropInputV2__WEBPACK_IMPORTED_MODULE_36__.conv3DBackpropInputConfig, _kernels_Cos__WEBPACK_IMPORTED_MODULE_37__.cosConfig, _kernels_Cosh__WEBPACK_IMPORTED_MODULE_38__.coshConfig, _kernels_CropAndResize__WEBPACK_IMPORTED_MODULE_39__.cropAndResizeConfig, _kernels_Cumprod__WEBPACK_IMPORTED_MODULE_40__.cumprodConfig, _kernels_Cumsum__WEBPACK_IMPORTED_MODULE_41__.cumsumConfig, _kernels_DenseBincount__WEBPACK_IMPORTED_MODULE_42__.denseBincountConfig, _kernels_DepthToSpace__WEBPACK_IMPORTED_MODULE_43__.depthToSpaceConfig, _kernels_DepthwiseConv2dNative__WEBPACK_IMPORTED_MODULE_44__.depthwiseConv2dNativeConfig, _kernels_DepthwiseConv2dNativeBackpropFilter__WEBPACK_IMPORTED_MODULE_45__.depthwiseConv2dNativeBackpropFilterConfig, _kernels_DepthwiseConv2dNativeBackpropInput__WEBPACK_IMPORTED_MODULE_46__.depthwiseConv2dNativeBackpropInputConfig, _kernels_Diag__WEBPACK_IMPORTED_MODULE_47__.diagConfig, _kernels_Dilation2D__WEBPACK_IMPORTED_MODULE_48__.dilation2DConfig, _kernels_Einsum__WEBPACK_IMPORTED_MODULE_49__.einsumConfig, _kernels_Elu__WEBPACK_IMPORTED_MODULE_50__.eluConfig, _kernels_EluGrad__WEBPACK_IMPORTED_MODULE_51__.eluGradConfig, _kernels_Equal__WEBPACK_IMPORTED_MODULE_52__.equalConfig, _kernels_Erf__WEBPACK_IMPORTED_MODULE_53__.erfConfig, _kernels_Exp__WEBPACK_IMPORTED_MODULE_54__.expConfig, _kernels_ExpandDims__WEBPACK_IMPORTED_MODULE_55__.expandDimsConfig, _kernels_Expm1__WEBPACK_IMPORTED_MODULE_56__.expm1Config, _kernels_FFT__WEBPACK_IMPORTED_MODULE_57__.fftConfig, _kernels_Fill__WEBPACK_IMPORTED_MODULE_58__.fillConfig, _kernels_FlipLeftRight__WEBPACK_IMPORTED_MODULE_59__.flipLeftRightConfig, _kernels_Floor__WEBPACK_IMPORTED_MODULE_60__.floorConfig, _kernels_FloorDiv__WEBPACK_IMPORTED_MODULE_61__.floorDivConfig, _kernels_FromPixels__WEBPACK_IMPORTED_MODULE_62__.fromPixelsConfig, _kernels_FusedConv2D__WEBPACK_IMPORTED_MODULE_63__.fusedConv2DConfig, _kernels_FusedDepthwiseConv2D__WEBPACK_IMPORTED_MODULE_64__.fusedDepthwiseConv2DConfig, _kernels_GatherNd__WEBPACK_IMPORTED_MODULE_65__.gatherNdConfig, _kernels_GatherV2__WEBPACK_IMPORTED_MODULE_66__.gatherV2Config, _kernels_Greater__WEBPACK_IMPORTED_MODULE_67__.greaterConfig, _kernels_GreaterEqual__WEBPACK_IMPORTED_MODULE_68__.greaterEqualConfig, _kernels_Identity__WEBPACK_IMPORTED_MODULE_69__.identityConfig, _kernels_IFFT__WEBPACK_IMPORTED_MODULE_70__.ifftConfig, _kernels_Imag__WEBPACK_IMPORTED_MODULE_71__.imagConfig, _kernels_IsFinite__WEBPACK_IMPORTED_MODULE_72__.isFiniteConfig, _kernels_IsInf__WEBPACK_IMPORTED_MODULE_73__.isInfConfig, _kernels_IsNaN__WEBPACK_IMPORTED_MODULE_74__.isNaNConfig, _kernels_LeakyRelu__WEBPACK_IMPORTED_MODULE_75__.leakyReluConfig, _kernels_Less__WEBPACK_IMPORTED_MODULE_76__.lessConfig, _kernels_LessEqual__WEBPACK_IMPORTED_MODULE_77__.lessEqualConfig, _kernels_LinSpace__WEBPACK_IMPORTED_MODULE_78__.linSpaceConfig, _kernels_Log__WEBPACK_IMPORTED_MODULE_79__.logConfig, _kernels_Log1p__WEBPACK_IMPORTED_MODULE_80__.log1pConfig, _kernels_LogicalAnd__WEBPACK_IMPORTED_MODULE_81__.logicalAndConfig, _kernels_LogicalNot__WEBPACK_IMPORTED_MODULE_82__.logicalNotConfig, _kernels_LogicalOr__WEBPACK_IMPORTED_MODULE_83__.logicalOrConfig, _kernels_LRN__WEBPACK_IMPORTED_MODULE_84__.LRNConfig, _kernels_LRNGrad__WEBPACK_IMPORTED_MODULE_85__.LRNGradConfig, _kernels_Max__WEBPACK_IMPORTED_MODULE_86__.maxConfig, _kernels_Maximum__WEBPACK_IMPORTED_MODULE_87__.maximumConfig, _kernels_MaxPool__WEBPACK_IMPORTED_MODULE_88__.maxPoolConfig, _kernels_MaxPool3D__WEBPACK_IMPORTED_MODULE_89__.maxPool3DConfig, _kernels_MaxPool3DGrad__WEBPACK_IMPORTED_MODULE_90__.maxPool3DGradConfig, _kernels_MaxPoolGrad__WEBPACK_IMPORTED_MODULE_91__.maxPoolGradConfig, _kernels_MaxPoolWithArgmax__WEBPACK_IMPORTED_MODULE_92__.maxPoolWithArgmaxConfig, _kernels_Mean__WEBPACK_IMPORTED_MODULE_93__.meanConfig, _kernels_Min__WEBPACK_IMPORTED_MODULE_94__.minConfig, _kernels_Minimum__WEBPACK_IMPORTED_MODULE_95__.minimumConfig, _kernels_MirrorPad__WEBPACK_IMPORTED_MODULE_96__.mirrorPadConfig, _kernels_Mod__WEBPACK_IMPORTED_MODULE_97__.modConfig, _kernels_Multinomial__WEBPACK_IMPORTED_MODULE_98__.multinomialConfig, _kernels_Multiply__WEBPACK_IMPORTED_MODULE_99__.multiplyConfig, _kernels_Neg__WEBPACK_IMPORTED_MODULE_100__.negConfig, _kernels_NonMaxSuppressionV3__WEBPACK_IMPORTED_MODULE_101__.nonMaxSuppressionV3Config, _kernels_NonMaxSuppressionV4__WEBPACK_IMPORTED_MODULE_102__.nonMaxSuppressionV4Config, _kernels_NonMaxSuppressionV5__WEBPACK_IMPORTED_MODULE_103__.nonMaxSuppressionV5Config, _kernels_NotEqual__WEBPACK_IMPORTED_MODULE_104__.notEqualConfig, _kernels_OneHot__WEBPACK_IMPORTED_MODULE_105__.oneHotConfig, _kernels_OnesLike__WEBPACK_IMPORTED_MODULE_106__.onesLikeConfig, _kernels_Pack__WEBPACK_IMPORTED_MODULE_107__.packConfig, _kernels_PadV2__WEBPACK_IMPORTED_MODULE_108__.padV2Config, _kernels_Pow__WEBPACK_IMPORTED_MODULE_109__.powConfig, _kernels_Prelu__WEBPACK_IMPORTED_MODULE_110__.preluConfig, _kernels_Prod__WEBPACK_IMPORTED_MODULE_111__.prodConfig, _kernels_RaggedGather__WEBPACK_IMPORTED_MODULE_112__.raggedGatherConfig, _kernels_RaggedRange__WEBPACK_IMPORTED_MODULE_113__.raggedRangeConfig, _kernels_RaggedTensorToTensor__WEBPACK_IMPORTED_MODULE_114__.raggedTensorToTensorConfig, _kernels_Range__WEBPACK_IMPORTED_MODULE_115__.rangeConfig, _kernels_Real__WEBPACK_IMPORTED_MODULE_116__.realConfig, _kernels_RealDiv__WEBPACK_IMPORTED_MODULE_117__.realDivConfig, _kernels_Reciprocal__WEBPACK_IMPORTED_MODULE_118__.reciprocalConfig, _kernels_Relu__WEBPACK_IMPORTED_MODULE_119__.reluConfig, _kernels_Relu6__WEBPACK_IMPORTED_MODULE_120__.relu6Config, _kernels_Reshape__WEBPACK_IMPORTED_MODULE_121__.reshapeConfig, _kernels_ResizeBilinear__WEBPACK_IMPORTED_MODULE_122__.resizeBilinearConfig, _kernels_ResizeBilinearGrad__WEBPACK_IMPORTED_MODULE_123__.resizeBilinearGradConfig, _kernels_ResizeNearestNeighbor__WEBPACK_IMPORTED_MODULE_124__.resizeNearestNeighborConfig, _kernels_ResizeNearestNeighborGrad__WEBPACK_IMPORTED_MODULE_125__.resizeNearestNeighborGradConfig, _kernels_Reverse__WEBPACK_IMPORTED_MODULE_126__.reverseConfig, _kernels_RotateWithOffset__WEBPACK_IMPORTED_MODULE_127__.rotateWithOffsetConfig, _kernels_Round__WEBPACK_IMPORTED_MODULE_128__.roundConfig, _kernels_Rsqrt__WEBPACK_IMPORTED_MODULE_129__.rsqrtConfig, _kernels_ScatterNd__WEBPACK_IMPORTED_MODULE_130__.scatterNdConfig, _kernels_SearchSorted__WEBPACK_IMPORTED_MODULE_131__.searchSortedConfig, _kernels_Select__WEBPACK_IMPORTED_MODULE_132__.selectConfig, _kernels_Selu__WEBPACK_IMPORTED_MODULE_133__.seluConfig, _kernels_Sigmoid__WEBPACK_IMPORTED_MODULE_134__.sigmoidConfig, _kernels_Sign__WEBPACK_IMPORTED_MODULE_135__.signConfig, _kernels_Sin__WEBPACK_IMPORTED_MODULE_136__.sinConfig, _kernels_Sinh__WEBPACK_IMPORTED_MODULE_137__.sinhConfig, _kernels_Slice__WEBPACK_IMPORTED_MODULE_138__.sliceConfig, _kernels_Softmax__WEBPACK_IMPORTED_MODULE_139__.softmaxConfig, _kernels_Softplus__WEBPACK_IMPORTED_MODULE_140__.softplusConfig, _kernels_SpaceToBatchND__WEBPACK_IMPORTED_MODULE_141__.spaceToBatchNDConfig, _kernels_SparseFillEmptyRows__WEBPACK_IMPORTED_MODULE_142__.sparseFillEmptyRowsConfig, _kernels_SparseReshape__WEBPACK_IMPORTED_MODULE_143__.sparseReshapeConfig, _kernels_SparseSegmentMean__WEBPACK_IMPORTED_MODULE_144__.sparseSegmentMeanConfig, _kernels_SparseSegmentSum__WEBPACK_IMPORTED_MODULE_145__.sparseSegmentSumConfig, _kernels_SparseToDense__WEBPACK_IMPORTED_MODULE_146__.sparseToDenseConfig, _kernels_SplitV__WEBPACK_IMPORTED_MODULE_147__.splitVConfig, _kernels_Sqrt__WEBPACK_IMPORTED_MODULE_148__.sqrtConfig, _kernels_Square__WEBPACK_IMPORTED_MODULE_149__.squareConfig, _kernels_SquaredDifference__WEBPACK_IMPORTED_MODULE_150__.squaredDifferenceConfig, _kernels_StaticRegexReplace__WEBPACK_IMPORTED_MODULE_151__.staticRegexReplaceConfig, _kernels_Step__WEBPACK_IMPORTED_MODULE_152__.stepConfig, _kernels_StridedSlice__WEBPACK_IMPORTED_MODULE_153__.stridedSliceConfig, _kernels_StringNGrams__WEBPACK_IMPORTED_MODULE_154__.stringNGramsConfig, _kernels_StringSplit__WEBPACK_IMPORTED_MODULE_155__.stringSplitConfig, _kernels_StringToHashBucketFast__WEBPACK_IMPORTED_MODULE_156__.stringToHashBucketFastConfig, _kernels_Sub__WEBPACK_IMPORTED_MODULE_157__.subConfig, _kernels_Sum__WEBPACK_IMPORTED_MODULE_158__.sumConfig, _kernels_Tan__WEBPACK_IMPORTED_MODULE_159__.tanConfig, _kernels_Tanh__WEBPACK_IMPORTED_MODULE_160__.tanhConfig, _kernels_TensorScatterUpdate__WEBPACK_IMPORTED_MODULE_161__.tensorScatterUpdateConfig, _kernels_Tile__WEBPACK_IMPORTED_MODULE_162__.tileConfig, _kernels_TopK__WEBPACK_IMPORTED_MODULE_163__.topKConfig, _kernels_Transform__WEBPACK_IMPORTED_MODULE_164__.transformConfig, _kernels_Transpose__WEBPACK_IMPORTED_MODULE_165__.transposeConfig, _kernels_Unique__WEBPACK_IMPORTED_MODULE_166__.uniqueConfig, _kernels_Unpack__WEBPACK_IMPORTED_MODULE_167__.unpackConfig, _kernels_UnsortedSegmentSum__WEBPACK_IMPORTED_MODULE_168__.unsortedSegmentSumConfig, _kernels_ZerosLike__WEBPACK_IMPORTED_MODULE_169__.zerosLikeConfig];
for (const kernelConfig of kernelConfigs) {
  (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerKernel)(kernelConfig);
}

/***/ }),

/***/ 78043:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReshapePackedProgram": () => (/* binding */ ReshapePackedProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class ReshapePackedProgram {
  constructor(outputShape, inputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.customUniforms = [{
      name: 'inputShape',
      type: 'ivec3'
    }];
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    let mainLoop = ``;
    for (let i = 0; i < 4; i++) {
      let thisRC = `thisRC = rc;`;
      if (i % 2 === 1) {
        thisRC += `thisRC.z += 1;`;
      }
      if (i > 1) {
        thisRC += `thisRC.y += 1;`;
      }
      mainLoop += `
        ${thisRC}
        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${i}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${i > 0 ? '}' : ''}
      `;
    }
    this.userCode = `
      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? _shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__.getFlatIndexFrom3DOutput() : _shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__.getFlatIndexFrom3D(outputShape)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};
        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};

        ${mainLoop}

        setOutput(result);
      }
    `;
  }
}
function getReshapedInputCoords(shape, enableShapeUniforms) {
  const coordsFromIndexSnippet = enableShapeUniforms ? _shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') : _shader_compiler_util__WEBPACK_IMPORTED_MODULE_1__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}

/***/ }),

/***/ 74946:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeBilinearBackpropProgram": () => (/* binding */ ResizeBilinearBackpropProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearBackpropProgram {
  constructor(dyShape, inputShape, alignCorners) {
    this.variableNames = ['dy'];
    this.outputShape = [];
    this.outputShape = inputShape;
    const [, xHeight, xWidth] = inputShape;
    const [, yHeight, yWidth] = dyShape;
    // In the backwards pass, we want to find the pixels that were generated for
    // each pixel in the input image the forward pass and add the corresponding
    // coefficient from dy to the gradient (with some interpolation).
    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    const invHeightScale = 1 / heightScale;
    const invWidthScale = 1 / widthScale;
    // This defines the size of the window of values around a particular
    // index in dy that we want to search for contributions to dx.
    const winHeight = Math.ceil(invHeightScale) * 2 + 2;
    const winWidth = Math.ceil(invWidthScale) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}

/***/ }),

/***/ 56148:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeBilinearProgram": () => (/* binding */ ResizeBilinearProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    let sourceFracIndexRC;
    if (halfPixelCenters) {
      sourceFracIndexRC = `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` + ` - vec2(0.5)`;
    } else {
      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;
    }
    this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}

/***/ }),

/***/ 67490:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeBilinearPackedProgram": () => (/* binding */ ResizeBilinearPackedProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeBilinearPackedProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    let sourceFracIndexRC;
    if (halfPixelCenters) {
      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` + `effectiveInputOverOutputRatioRC - vec3(0.5)`;
    } else {
      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;
    }
    this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}

/***/ }),

/***/ 1315:
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeNearestNeigborBackpropProgram": () => (/* binding */ ResizeNearestNeigborBackpropProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeigborBackpropProgram {
  constructor(dyShape, inputShape, alignCorners) {
    this.variableNames = ['dy'];
    this.outputShape = [];
    this.outputShape = inputShape;
    const [, xHeight, xWidth] = inputShape;
    const [, yHeight, yWidth] = dyShape;
    // In the backwards pass, we want to find the pixels that were generated for
    // each pixel in the input image the forward pass and add the corresponding
    // coefficient from dy to the gradient (with some interpolation).
    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];
    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];
    const heightScale = effectiveXSize[0] / effectiveYSize[0];
    const widthScale = effectiveXSize[1] / effectiveYSize[1];
    const invHeightScale = 1 / heightScale;
    const invWidthScale = 1 / widthScale;
    // This defines the size of the window of values around a particular
    // index in dy that we want to search for contributions to dx.
    const winHeight = Math.ceil(invHeightScale) * 2 + 2;
    const winWidth = Math.ceil(invWidthScale) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${heightScale});
        const float widthScale = float(${widthScale});

        const float invHeightScale = float(${invHeightScale});
        const float invWidthScale = float(${invWidthScale});

        const int winHeight = int(${winHeight});
        const int winWidth = int(${winWidth});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${yHeight}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${yWidth}) {
              continue;
            }

            float sourceFracRow =
              float(${effectiveXSize[0]}) *
                (float(dyR) / float(${effectiveYSize[0]}));

            float sourceFracCol =
                float(${effectiveXSize[1]}) *
                  (float(dyC) / float(${effectiveYSize[1]}));

            int sourceNearestRow = int(min(
                float(int(${xHeight}) - 1),
                ${alignCorners} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${xWidth}) - 1),
                ${alignCorners} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}

/***/ }),

/***/ 69809:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeNearestNeighborProgram": () => (/* binding */ ResizeNearestNeighborProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeighborProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    // When align corners is false, we rounds the value with floor.
    const roundBase = alignCorners ? '0.5' : '0.0';
    let sourceFracIndexRC;
    if (halfPixelCenters) {
      sourceFracIndexRC = `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` + `, vec2(0.0))`;
    } else {
      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;
    }
    this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}

/***/ }),

/***/ 64563:
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_packed_gpu.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeNearestNeighborPackedProgram": () => (/* binding */ ResizeNearestNeighborPackedProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ResizeNearestNeighborPackedProgram {
  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = [];
    const [batch, oldHeight, oldWidth, depth] = inputShape;
    this.outputShape = [batch, newHeight, newWidth, depth];
    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];
    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];
    // When align corners is false, we rounds the value with floor.
    const roundBase = alignCorners ? '0.5' : '0.0';
    let sourceFracIndexRC;
    if (halfPixelCenters) {
      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` + `effectiveInputOverOutputRatioRC, vec3(0.0))`;
    } else {
      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;
    }
    this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${effectiveInSize[0] / effectiveOutSize[0]},
          ${effectiveInSize[1] / effectiveOutSize[1]},
          ${effectiveInSize[1] / effectiveOutSize[1]});
      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,
                                     ${oldWidth}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${sourceFracIndexRC};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${depth - 1};
        bool hasNextRow = coords.z < ${newWidth - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}

/***/ }),

/***/ 17944:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReverseProgram": () => (/* binding */ ReverseProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class ReverseProgram {
  constructor(xShape, axis) {
    this.variableNames = ['x'];
    const rank = xShape.length;
    if (rank > 4) {
      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
    }
    this.outputShape = xShape;
    if (rank === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${xShape[0]} - coord - 1));
        }
      `;
      return;
    }
    const getInCoord = i => {
      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
        return `${xShape[i]} - coords[${i}] - 1`;
      }
      return `coords[${i}]`;
    };
    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');
    const type = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);
    this.userCode = `
      void main() {
        ${type} coords = getOutputCoords();
        setOutput(getX(${inCoords}));
      }
    `;
  }
}

/***/ }),

/***/ 2138:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReversePackedProgram": () => (/* binding */ ReversePackedProgram)
/* harmony export */ });
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class ReversePackedProgram {
  constructor(xShape, axis) {
    this.variableNames = ['x'];
    this.packedInputs = true;
    this.packedOutput = true;
    const rank = xShape.length;
    if (rank > 4) {
      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);
    }
    this.outputShape = xShape;
    const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_0__.getChannels)('rc', rank);
    const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;
    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;
    const type = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_1__.getCoordsDataType)(rank);
    if (rank === 1) {
      this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${xShape[0]} - rc - 1),
            ${xShape[0]} - rc - 1);
          if(${nextColumn}){
              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),
                ${xShape[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `;
    } else {
      this.userCode = `
        void main() {
          ${type} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${getR(channels.slice())};
          if(${nextColumn}){
            result.g = ${getG(channels.slice())};
          }
          if(${nextRow}) {
            result.b = ${getB(channels.slice())};
            if(${nextColumn}) {
              result.a = ${getA(channels.slice())};
            }
          }
          setOutput(result);
        }
    `;
    }
    function getR(channels) {
      return getChannel(channels);
    }
    function getG(channels) {
      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
      return getChannel(channels);
    }
    function getB(channels) {
      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
      return getChannel(channels);
    }
    function getA(channels) {
      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;
      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;
      return getChannel(channels);
    }
    function getChannel(channels) {
      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));
      const inCoords = inCoordsArray.join(',');
      const innerDims = inCoordsArray.slice(-2).join(',');
      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;
    }
    function getInCoord(i, channels1) {
      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {
        return `${xShape[i]} - ${channels1[i]} - 1`;
      } else {
        return `${channels1[i]}`;
      }
    }
  }
}

/***/ }),

/***/ 20559:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RotateProgram": () => (/* binding */ RotateProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RotateProgram {
  constructor(imageShape, fillValue) {
    this.variableNames = ['Image'];
    this.outputShape = [];
    this.customUniforms = [{
      name: 'params',
      type: 'vec4'
    }];
    const imageHeight = imageShape[1];
    const imageWidth = imageShape[2];
    this.outputShape = imageShape;
    let fillSnippet = '';
    if (typeof fillValue === 'number') {
      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;
    } else {
      fillSnippet = `
        vec3 fill = vec3(${fillValue.join(',')});
        float outputValue = fill[coords[3]];`;
    }
    this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${fillSnippet}
          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}

/***/ }),

/***/ 5586:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScatterProgram": () => (/* binding */ ScatterProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class ScatterProgram {
  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true, defaultIsTensor = false) {
    this.variableNames = ['updates', 'indices', 'defaultValue'];
    this.outputShape = shape;
    const stridesType = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(strides.length);
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(shape.length);
    let indicesString = '';
    if (indicesRank === 1) {
      indicesString = 'i';
    } else if (indicesRank === 2) {
      indicesString = 'i, j';
    }
    const indicesSnippet = `getIndices(${indicesString})`;
    let updatesString = '';
    if (updatesRank === 1) {
      updatesString = 'i';
    } else if (updatesRank === 2) {
      updatesString = 'i, coords[1]';
    }
    const updatesSnippet = `getUpdates(${updatesString})`;
    let defaultValuesString = '';
    if (defaultIsTensor) {
      defaultValuesString = 'coords[0], coords[1]';
    }
    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;
    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';
    this.userCode = `
        ${stridesType} strides = ${stridesType}(${strides});

        void main() {
          ${dtype} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${updateSize}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${sliceDim}; j++) {
              int index = round(${indicesSnippet});
              flattenedIndex += index * ${strideString};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${updatesSnippet};
              found = true;
            }
          }
          setOutput(mix(${defaultValueSnippet}, sum, float(found)));
        }
      `;
  }
}

/***/ }),

/***/ 12185:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_packed_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScatterPackedProgram": () => (/* binding */ ScatterPackedProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class ScatterPackedProgram {
  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true, defaultIsTensor = false) {
    this.variableNames = ['updates', 'indices', 'defaultValue'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = shape;
    const stridesType = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(strides.length);
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(shape.length);
    let indicesString = '';
    if (indicesRank === 1) {
      indicesString = 'i';
    } else if (indicesRank === 2) {
      indicesString = 'i, j';
    }
    const indicesSnippet = `getIndices(${indicesString})`;
    let updatesString = '';
    if (updatesRank === 1) {
      updatesString = 'i';
    } else if (updatesRank === 2) {
      updatesString = 'i, coords[1]';
    }
    const updatesSnippet = `getUpdates(${updatesString})`;
    let defaultValuesString = '';
    if (defaultIsTensor) {
      defaultValuesString = 'coords[0], coords[1]';
    }
    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;
    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';
    const strideString2 = sliceDim > 1 ? 'strides[j + 1]' : 'strides';
    this.userCode = `
        ${stridesType} strides = ${stridesType}(${strides});

        void main() {
          ${dtype} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${updateSize}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${sliceDim}; j+=2) {
              ivec4 index = round(${indicesSnippet});
              flattenedIndex += index.xz * ${strideString};
              if (j + 1 < ${sliceDim}) {
                flattenedIndex += index.yw * ${strideString2};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${updatesSnippet};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${defaultValueSnippet}, sum, found));
        }
      `;
  }
}

/***/ }),

/***/ 42324:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/search_sorted_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SearchSortedProgram": () => (/* binding */ SearchSortedProgram)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class SearchSortedProgram {
  constructor(batchSize, numInputs, numValues, side) {
    this.variableNames = ['sortedSequence', 'values'];
    this.customUniforms = [{
      name: 'numInputs',
      type: 'int'
    }];
    this.outputShape = [batchSize, numValues];
    const webGL2LoopHead = 'while (left < right) {';
    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop
    // iterations.
    const webGL1LoopHead = `for (int i = 0; i < ${Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;
    const loopHead = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead : webGL1LoopHead;
    // left corresponds to lower bound and right to upper bound.
    const boundComparator = side === 'left' ? '<' : '<=';
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${loopHead}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${boundComparator} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}

/***/ }),

/***/ 1427:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SegmentOpProgram": () => (/* binding */ SegmentOpProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SegmentOpProgram {
  constructor(segOpInfo, segOpType) {
    this.variableNames = ['x', 'segmentIds'];
    const windowSize = segOpInfo.windowSize;
    const batchSize = segOpInfo.batchSize;
    const inSize = segOpInfo.inSize;
    const numSegments = segOpInfo.numSegments;
    const outSize = numSegments * Math.ceil(inSize / windowSize);
    this.outputShape = [batchSize, outSize];
    const initializationValue = '0.0';
    const returnValue = `sumValue`;
    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;
    const windowSizeVec4Remainder = windowSize % 4;
    const updateSnippet = `
        sumValue += dot(values, segFilter);
    `;
    let checkValueOutOfBounds = '';
    if (inSize % windowSize > 0) {
      checkValueOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return initializationValue;
        }
      `;
    }
    let checkSegmentIdOutOfBounds = '';
    if (inSize % windowSize > 0) {
      checkSegmentIdOutOfBounds = `
        if (inIdx < 0 || inIdx >= ${inSize}) {
          return -1.0;
        }
      `;
    }
    this.userCode = `
      const float initializationValue = ${initializationValue};

      float getValue(int batch, int inIdx) {
        ${checkValueOutOfBounds}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${checkSegmentIdOutOfBounds}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${numSegments})) * float(${windowSize}));
        int currentSeg = int(mod(float(outIdx), float(${numSegments})));

        float sumValue = 0.0;

        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${updateSnippet}
        }

        int inIdx = inOffset + ${windowSizeNearestVec4};
        if (${windowSizeVec4Remainder === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${updateSnippet}
        } else if (${windowSizeVec4Remainder === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${updateSnippet}
        }
        setOutput(${returnValue});
      }
    `;
  }
}

/***/ }),

/***/ 34864:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectProgram": () => (/* binding */ SelectProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class SelectProgram {
  constructor(cRank, shape, rank) {
    this.variableNames = ['c', 'a', 'b'];
    this.outputShape = shape;
    let cCoords;
    let abCoords;
    if (rank > 4) {
      throw Error(`Where for rank ${rank} is not yet supported`);
    }
    if (rank === 1) {
      abCoords = `resRC`;
      cCoords = `resRC`;
    } else {
      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];
      const cCoordVars = [];
      const abCoordVars = [];
      for (let i = 0; i < shape.length; i++) {
        abCoordVars.push(`${currentCoords[i]}`);
        if (i < cRank) {
          cCoordVars.push(`${currentCoords[i]}`);
        }
      }
      cCoords = cCoordVars.join();
      abCoords = abCoordVars.join();
    }
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(rank);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        float cVal = getC(${cCoords});
        if (cVal >= 1.0) {
          setOutput(getA(${abCoords}));
        } else {
          setOutput(getB(${abCoords}));
        }
      }
    `;
  }
}

/***/ }),

/***/ 1640:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCoordsDataType": () => (/* binding */ getCoordsDataType),
/* harmony export */   "getUniformInfoFromShape": () => (/* binding */ getUniformInfoFromShape),
/* harmony export */   "makeShader": () => (/* binding */ makeShader),
/* harmony export */   "squeezeInputInfo": () => (/* binding */ squeezeInputInfo)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _glsl_version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glsl_version */ 9198);
/* harmony import */ var _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler_util */ 34299);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well
// mapped if any shader source code is changed in this file.

const {
  getBroadcastDims
} = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util;


function makeShader(inputsInfo, outputShape, program) {
  const prefixSnippets = [];
  inputsInfo.forEach(x => {
    const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(x.shapeInfo.logicalShape);
    // Snippet when we decided to upload the values as uniform.
    if (x.shapeInfo.isUniform) {
      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);
    } else {
      prefixSnippets.push(`uniform sampler2D ${x.name};`);
      prefixSnippets.push(`uniform int offset${x.name};`);
    }
    if (program.enableShapeUniforms) {
      const {
        uniformShape
      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);
      switch (uniformShape.length) {
        case 1:
          prefixSnippets.push(`uniform int ${x.name}Shape;`);
          break;
        case 2:
          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);
          break;
        case 3:
          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);
          break;
        case 4:
          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);
          break;
        default:
          break;
      }
      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);
    }
  });
  if (program.enableShapeUniforms) {
    switch (outputShape.logicalShape.length) {
      case 1:
        prefixSnippets.push(`uniform int outShape;`);
        break;
      case 2:
        prefixSnippets.push(`uniform ivec2 outShape;`);
        prefixSnippets.push(`uniform int outShapeStrides;`);
        break;
      case 3:
        prefixSnippets.push(`uniform ivec3 outShape;`);
        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);
        break;
      case 4:
        prefixSnippets.push(`uniform ivec4 outShape;`);
        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);
        break;
      default:
        break;
    }
    prefixSnippets.push(`uniform ivec2 outTexShape;`);
  }
  if (program.customUniforms) {
    program.customUniforms.forEach(d => {
      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);
    });
  }
  const inputPrefixSnippet = prefixSnippets.join('\n');
  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\n');
  const outTexShape = outputShape.texShape;
  const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);
  let outputSamplingSnippet;
  let floatTextureSetOutputSnippet;
  let shaderPrefix = getShaderPrefix(glsl);
  if (outputShape.isPacked) {
    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);
    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);
  } else {
    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);
    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);
  }
  if (program.packedInputs) {
    shaderPrefix += SHADER_PACKED_PREFIX;
  }
  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\n');
  return source;
}
function getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {
  const shape = inInfo.shapeInfo.logicalShape;
  switch (shape.length) {
    case 0:
      return getSamplerScalar(inInfo, enableShapeUniforms);
    case 1:
      return getSampler1D(inInfo, enableShapeUniforms);
    case 2:
      return getSampler2D(inInfo, enableShapeUniforms);
    case 3:
      return getSampler3D(inInfo, enableShapeUniforms);
    case 4:
      return getSampler4D(inInfo, enableShapeUniforms);
    case 5:
      return getSampler5D(inInfo);
    case 6:
      return getSampler6D(inInfo);
    default:
      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);
  }
}
function getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {
  const shape = inInfo.shapeInfo.logicalShape;
  switch (shape.length) {
    case 0:
      return getPackedSamplerScalar(inInfo);
    case 1:
      return getPackedSampler1D(inInfo, enableShapeUniforms);
    case 2:
      return getPackedSampler2D(inInfo, enableShapeUniforms);
    case 3:
      return getPackedSampler3D(inInfo, enableShapeUniforms);
    default:
      return getPackedSamplerND(inInfo, enableShapeUniforms);
  }
}
function getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {
  let res = '';
  if (usesPackedTextures) {
    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);
  } else {
    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);
  }
  const inShape = inInfo.shapeInfo.logicalShape;
  const outShape = outShapeInfo.logicalShape;
  if (inShape.length <= outShape.length) {
    if (usesPackedTextures) {
      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);
    } else {
      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);
    }
  }
  return res;
}
function getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {
  switch (outShape.length) {
    case 0:
      return getOutputScalarCoords();
    case 1:
      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);
    case 2:
      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);
    case 3:
      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);
    default:
      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);
  }
}
function getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {
  switch (outShape.length) {
    case 0:
      return getOutputScalarCoords();
    case 1:
      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);
    case 2:
      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);
    case 3:
      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);
    case 4:
      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);
    case 5:
      return getOutput5DCoords(outShape, outTexShape);
    case 6:
      return getOutput6DCoords(outShape, outTexShape);
    default:
      throw new Error(`${outShape.length}-D output sampling is not yet supported`);
  }
}
function getFloatTextureSampleSnippet(glsl) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${glsl.texture2D}(textureSampler, uv).r;
    }
  `;
}
function getFloatTextureSetRSnippet(glsl) {
  return `
    void setOutput(float val) {
      ${glsl.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function getFloatTextureSetRGBASnippet(glsl) {
  return `
    void setOutput(vec4 val) {
      ${glsl.output} = val;
    }
  `;
}
function getShaderPrefix(glsl) {
  const SHADER_PREFIX = `${glsl.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${glsl.varyingFs} vec2 resultUV;
    ${glsl.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${glsl.defineSpecialNaN}
    ${glsl.defineSpecialInf}
    ${glsl.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${SAMPLE_1D_SNIPPET}
    ${SAMPLE_2D_SNIPPET}
    ${SAMPLE_3D_SNIPPET}
  `;
  return SHADER_PREFIX;
}
const SAMPLE_1D_SNIPPET = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_2D_SNIPPET = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SAMPLE_3D_SNIPPET = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
const SHADER_PACKED_PREFIX = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function getOutputScalarCoords() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  if (packedTexShape[0] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `;
    }
    return `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);
      }
    `;
  }
  if (packedTexShape[1] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `;
    }
    return `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);
      }
    `;
  }
  if (enableShapeUniforms) {
    return `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `;
  }
  return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);
    }
  `;
}
function getOutput1DCoords(shape, texShape, enableShapeUniforms) {
  if (texShape[0] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `;
    }
    return `
      int getOutputCoords() {
        return int(resultUV.x * ${texShape[1]}.0);
      }
    `;
  }
  if (texShape[1] === 1) {
    if (enableShapeUniforms) {
      return `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `;
    }
    return `
      int getOutputCoords() {
        return int(resultUV.y * ${texShape[0]}.0);
      }
    `;
  }
  if (enableShapeUniforms) {
    return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `;
  }
  return `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      return resTexRC.x * ${texShape[1]} + resTexRC.y;
    }
  `;
}
function getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  }
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texelsInLogicalRow = Math.ceil(shape[2] / 2);
  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function getOutput3DCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${coordsFromIndexSnippet}
    return ivec3(r, c, d);
  }
`;
  }
  const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec3(r, c, d);
    }
  `;
}
function getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    // TODO: support 5d and 6d
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  }
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);
  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);
  let texelsInBatchN = texelsInBatch;
  let batches = ``;
  let coords = 'b, r, c';
  for (let b = 2; b < shape.length - 1; b++) {
    texelsInBatchN *= shape[shape.length - b - 1];
    batches = `
      int b${b} = index / ${texelsInBatchN};
      index -= b${b} * ${texelsInBatchN};
    ` + batches;
    coords = `b${b}, ` + coords;
  }
  return `
    ivec${shape.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;

      ${batches}

      int b = index / ${texelsInBatch};
      index -= b * ${texelsInBatch};

      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec${shape.length}(${coords});
    }
  `;
}
function getOutput4DCoords(shape, texShape, enableShapeUniforms) {
  if (enableShapeUniforms) {
    const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
  }
  const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      ${coordsFromIndexSnippet}
      return ivec4(r, c, d, d2);
    }
  `;
}
function getOutput5DCoords(shape, texShape) {
  const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},
                             ${texShape[1]}));

      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function getOutput6DCoords(shape, texShape) {
  const coordsFromIndexSnippet = _shader_compiler_util__WEBPACK_IMPORTED_MODULE_2__.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;

      ${coordsFromIndexSnippet}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `;
    }
    return `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));
      }
    `;
  }
  // texels needed to accommodate a logical row
  const texelsInLogicalRow = Math.ceil(shape[1] / 2);
  /**
   * getOutputCoords
   *
   * resTexRC: The rows and columns of the texels. If you move over one
   * texel to the right in the packed texture, you are moving over one column
   * (not two).
   *
   * index: The texel index
   */
  if (enableShapeUniforms) {
    return `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `;
  }
  return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));

      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;
      int r = 2 * (index / ${texelsInLogicalRow});
      int c = imod(index, ${texelsInLogicalRow}) * 2;

      return ivec2(r, c);
    }
  `;
}
function getOutput2DCoords(shape, texShape, enableShapeUniforms) {
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `;
    }
    return `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));
      }
    `;
  }
  if (shape[1] === 1) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
    }
    return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `;
  }
  if (shape[0] === 1) {
    if (enableShapeUniforms) {
      return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `;
    }
    return `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${texShape[0]}, ${texShape[1]}));
        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `;
  }
  if (enableShapeUniforms) {
    return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `;
  }
  return `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${texShape[0]}, ${texShape[1]}));
      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;
      int r = index / ${shape[1]};
      int c = index - r * ${shape[1]};
      return ivec2(r, c);
    }
  `;
}
function getFlatOffsetUniformName(texName) {
  return `offset${texName}`;
}
function getPackedSamplerScalar(inputInfo) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
  return `
    vec4 ${funcName}() {
      return ${glsl.texture2D}(${texName}, halfCR);
    }
  `;
}
function getSamplerScalar(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  if (inputInfo.shapeInfo.isUniform) {
    return `float ${funcName}() {return ${texName};}`;
  }
  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;
  if (texNumR === 1 && texNumC === 1) {
    return `
      float ${funcName}() {
        return sampleTexture(${texName}, halfCR);
      }
    `;
  }
  const offset = getFlatOffsetUniformName(texName);
  if (enableShapeUniforms) {
    return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
  }
  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;
  return `
    float ${funcName}() {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getPackedSampler1D(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
  if (enableShapeUniforms) {
    return `
    vec4 ${funcName}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  return `
    vec4 ${funcName}(int index) {
      vec2 uv = packedUVfrom1D(
        ${packedTexShape[0]}, ${packedTexShape[1]}, index);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler1D(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int index) {
        ${getUniformSampler(inputInfo)}
      }
    `;
  }
  const texShape = inputInfo.shapeInfo.texShape;
  const tNumR = texShape[0];
  const tNumC = texShape[1];
  if (tNumC === 1 && tNumR === 1) {
    return `
      float ${funcName}(int index) {
        return sampleTexture(${texName}, halfCR);
      }
    `;
  }
  const offset = getFlatOffsetUniformName(texName);
  if (tNumC === 1) {
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
      float ${funcName}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  if (tNumR === 1) {
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
      float ${funcName}(int index) {
        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  if (enableShapeUniforms) {
    return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
  }
  return `
    float ${funcName}(int index) {
      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getPackedSampler2D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
  if (texShape != null && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
    }
    return `
      vec4 ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);

        return ${glsl.texture2D}(${texName}, uv);
      }
    `;
  }
  if (enableShapeUniforms) {
    return `
    vec4 ${funcName}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const valuesPerRow = Math.ceil(shape[1] / 2);
  return `
    vec4 ${funcName}(int row, int col) {
      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler2D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  if (texShape != null && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape)) {
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    const texNumR = texShape[0];
    const texNumC = texShape[1];
    return `
    float ${funcName}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }
  const {
    newShape,
    keptDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);
  const squeezedShape = newShape;
  if (squeezedShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['row', 'col'];
    return `
      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
      float ${funcName}(int row, int col) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }
  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const offset = getFlatOffsetUniformName(texName);
  if (texNumC === 1) {
    // index is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col) {
        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }
  if (texNumR === 1) {
    // index is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col) {
        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
    float ${funcName}(int row, int col) {
      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);
      return sampleTexture(${texName}, uv);
    }
  `;
  }
  if (enableShapeUniforms) {
    return `
      float ${funcName}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${texName}Shape[1] + col + ${offset};
        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  return `
  float ${funcName}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${shape[1]} + col + ${offset};
    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
    return sampleTexture(${texName}, uv);
  }
`;
}
function getPackedSampler3D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const texShape = inputInfo.shapeInfo.texShape;
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  if (shape[0] === 1) {
    const squeezedShape = shape.slice(1);
    const keptDims = [1, 2];
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['b', 'row', 'col'];
    return `
        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
        vec4 ${funcName}(int b, int row, int col) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
  }
  const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
  if (enableShapeUniforms) {
    return `
    vec4 ${funcName}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }
  const texNumR = packedTexShape[0];
  const texNumC = packedTexShape[1];
  const valuesPerRow = Math.ceil(shape[2] / 2);
  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);
  return `
    vec4 ${funcName}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler3D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride0 = shape[1] * shape[2];
  const stride1 = shape[2];
  const {
    newShape,
    keptDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);
  const squeezedShape = newShape;
  if (squeezedShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);
    const params = ['row', 'col', 'depth'];
    return `
        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
        float ${funcName}(int row, int col, int depth) {
          return ${funcName}(${getSqueezedParams(params, keptDims)});
        }
      `;
  }
  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${stride0}, ${stride1}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const flatOffset = inputInfo.shapeInfo.flatOffset;
  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth) {
        int stride1 = ${texName}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
        float ${funcName}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${texNumC}.0, ${texNumR}.0);
          return sampleTexture(${texName}, uv);
        }
      `;
  }
  if (texNumC === stride1 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
    float ${funcName}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);
      return sampleTexture(${texName}, uv);
    }
  `;
  }
  const offset = getFlatOffsetUniformName(texName);
  if (enableShapeUniforms) {
    return `
    float ${funcName}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];
      int stride1 = ${texName}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${offset};
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);
      return sampleTexture(${texName}, uv);
    }
    `;
  }
  return `
      float ${funcName}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};
        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
        return sampleTexture(${texName}, uv);
      }
  `;
}
function getPackedSamplerND(inputInfo, enableShapeUniforms) {
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const glsl = (0,_glsl_version__WEBPACK_IMPORTED_MODULE_1__.getGlslDifferences)();
  if (enableShapeUniforms) {
    // TODO: support 5d and 6d
    return `
    vec4 ${funcName}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${texName}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);
    }
  `;
  }
  const shape = inputInfo.shapeInfo.logicalShape;
  const rank = shape.length;
  const texShape = inputInfo.shapeInfo.texShape;
  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];
  const texNumR = packedTexShape[0];
  const texNumC = packedTexShape[1];
  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);
  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);
  let params = `int b, int row, int col`;
  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;
  for (let b = 2; b < rank - 1; b++) {
    params = `int b${b}, ` + params;
    texelsInBatch *= shape[rank - b - 1];
    index = `b${b} * ${texelsInBatch} + ` + index;
  }
  return `
    vec4 ${funcName}(${params}) {
      int index = ${index};
      int texR = index / ${texNumC};
      int texC = index - texR * ${texNumC};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});
      return ${glsl.texture2D}(${texName}, uv);
    }
  `;
}
function getSampler4D(inputInfo, enableShapeUniforms) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride2 = shape[3];
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;
  const {
    newShape,
    keptDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);
  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2'];
    return `
      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}
      float ${funcName}(int row, int col, int depth, int depth2) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }
  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }
  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  const stride2Str = `int stride2 = ${texName}Shape[3];`;
  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;
  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;
  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        ${stride2Str}
        ${stride1Str}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${stride1}, ${stride2}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  if (texNumC === stride2 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    if (enableShapeUniforms) {
      return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);
        return sampleTexture(${texName}, uv);
      }
    `;
    }
    return `
      float ${funcName}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  const offset = getFlatOffsetUniformName(texName);
  if (enableShapeUniforms) {
    return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${stride2Str}
      ${stride1Str}
      ${stride0Str}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
  }
  return `
    float ${funcName}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} +
          depth * ${stride2} + depth2;
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getSampler5D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const stride3 = shape[4];
  const stride2 = shape[3] * stride3;
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;
  const {
    newShape,
    keptDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);
  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }
  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          depth3;
        ${getUniformSampler(inputInfo)}
      }
    `;
  }
  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${stride1}, ${stride2}, ${stride3}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  if (texNumC === stride3 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3]},
               ${shape[2] * shape[3]}, ${shape[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getSampler6D(inputInfo) {
  const shape = inputInfo.shapeInfo.logicalShape;
  const texName = inputInfo.name;
  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);
  const {
    newShape,
    keptDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);
  if (newShape.length < shape.length) {
    const newInputInfo = squeezeInputInfo(inputInfo, newShape);
    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];
    return `
      ${getSamplerFromInInfo(newInputInfo)}
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${funcName}(${getSqueezedParams(params, keptDims)});
      }
    `;
  }
  const stride4 = shape[5];
  const stride3 = shape[4] * stride4;
  const stride2 = shape[3] * stride3;
  const stride1 = shape[2] * stride2;
  const stride0 = shape[1] * stride1;
  if (inputInfo.shapeInfo.isUniform) {
    // Uniform arrays will be less than 65505 (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +
          dot(
            vec2(depth3, depth4),
            vec2(${stride4}, 1)));
        ${getUniformSampler(inputInfo)}
      }
    `;
  }
  const flatOffset = inputInfo.shapeInfo.flatOffset;
  const texShape = inputInfo.shapeInfo.texShape;
  const texNumR = texShape[0];
  const texNumC = texShape[1];
  if (texNumC === stride0 && flatOffset == null) {
    // texC is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  if (texNumC === stride4 && flatOffset == null) {
    // texR is used directly as physical (no risk of float16 overflow).
    return `
      float ${funcName}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},
               ${shape[2] * shape[3] * shape[4]},
               ${shape[3] * shape[4]},
               ${shape[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${texNumC}.0, ${texNumR}.0);
        return sampleTexture(${texName}, uv);
      }
    `;
  }
  const offset = getFlatOffsetUniformName(texName);
  return `
    float ${funcName}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +
          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};
      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);
      return sampleTexture(${texName}, uv);
    }
  `;
}
function getUniformSampler(inputInfo) {
  const texName = inputInfo.name;
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);
  if (inSize < 2) {
    return `return ${texName};`;
  }
  return `
    for (int i = 0; i < ${inSize}; i++) {
      if (i == index) {
        return ${texName}[i];
      }
    }
  `;
}
function getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {
  const texName = inputInfo.name;
  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
  const inRank = inputInfo.shapeInfo.logicalShape.length;
  const outRank = outShapeInfo.logicalShape.length;
  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
  const type = getCoordsDataType(outRank);
  const rankDiff = outRank - inRank;
  let coordsSnippet;
  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];
  if (inRank === 0) {
    coordsSnippet = '';
  } else if (outRank < 2 && broadcastDims.length >= 1) {
    coordsSnippet = 'coords = 0;';
  } else {
    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\n');
  }
  let unpackedCoordsSnippet = '';
  if (outRank < 2 && inRank > 0) {
    unpackedCoordsSnippet = 'coords';
  } else {
    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');
  }
  let output = `return outputValue;`;
  const inSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(inputInfo.shapeInfo.logicalShape);
  const isInputScalar = inSize === 1;
  const outSize = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(outShapeInfo.logicalShape);
  const isOutputScalar = outSize === 1;
  if (inRank === 1 && !isInputScalar && !isOutputScalar) {
    output = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  } else if (isInputScalar && !isOutputScalar) {
    if (outRank === 1) {
      output = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `;
    } else {
      output = `
        return vec4(outputValue.x);
      `;
    }
  } else if (broadcastDims.length) {
    const rows = inRank - 2;
    const cols = inRank - 1;
    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {
      output = `return vec4(outputValue.x);`;
    } else if (broadcastDims.indexOf(rows) > -1) {
      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;
    } else if (broadcastDims.indexOf(cols) > -1) {
      output = `return vec4(outputValue.xx, outputValue.zz);`;
    }
  }
  return `
    vec4 ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});
      ${output}
    }
  `;
}
function getSamplerAtOutputCoords(inputInfo, outShapeInfo) {
  const texName = inputInfo.name;
  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);
  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';
  const outTexShape = outShapeInfo.texShape;
  const inTexShape = inputInfo.shapeInfo.texShape;
  const inRank = inputInfo.shapeInfo.logicalShape.length;
  const outRank = outShapeInfo.logicalShape.length;
  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(inTexShape, outTexShape)) {
    return `
      float ${funcName}() {
        return sampleTexture(${texName}, resultUV);
      }
    `;
  }
  const type = getCoordsDataType(outRank);
  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);
  const rankDiff = outRank - inRank;
  let coordsSnippet;
  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];
  if (inRank === 0) {
    coordsSnippet = '';
  } else if (outRank < 2 && broadcastDims.length >= 1) {
    coordsSnippet = 'coords = 0;';
  } else {
    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\n');
  }
  let unpackedCoordsSnippet = '';
  if (outRank < 2 && inRank > 0) {
    unpackedCoordsSnippet = 'coords';
  } else {
    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');
  }
  return `
    float ${funcName}() {
      ${type} coords = getOutputCoords();
      ${coordsSnippet}
      return get${texFuncSnippet}(${unpackedCoordsSnippet});
    }
  `;
}
function getCoordsDataType(rank) {
  if (rank <= 1) {
    return 'int';
  } else if (rank === 2) {
    return 'ivec2';
  } else if (rank === 3) {
    return 'ivec3';
  } else if (rank === 4) {
    return 'ivec4';
  } else if (rank === 5) {
    return 'ivec5';
  } else if (rank === 6) {
    return 'ivec6';
  } else {
    throw Error(`GPU for rank ${rank} is not yet supported`);
  }
}
function getUniformInfoFromShape(isPacked, shape, texShape) {
  const {
    newShape,
    keptDims
  } = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(shape);
  const rank = shape.length;
  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;
  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;
  const useSqueezeShape = !isPacked && rank > 1 && !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;
  const uniformShape = useSqueezeShape ? squeezeShape : shape;
  return {
    useSqueezeShape,
    uniformShape,
    keptDims
  };
}
/** Returns a new input info (a copy) that has a squeezed logical shape. */
function squeezeInputInfo(inInfo, squeezedShape) {
  // Deep copy.
  const newInputInfo = JSON.parse(JSON.stringify(inInfo));
  newInputInfo.shapeInfo.logicalShape = squeezedShape;
  return newInputInfo;
}
function getSqueezedParams(params, keptDims) {
  return keptDims.map(d => params[d]).join(', ');
}

/***/ }),

/***/ 34299:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ENCODE_FLOAT_SNIPPET": () => (/* binding */ ENCODE_FLOAT_SNIPPET),
/* harmony export */   "dotify": () => (/* binding */ dotify),
/* harmony export */   "getFlatIndexFrom3D": () => (/* binding */ getFlatIndexFrom3D),
/* harmony export */   "getFlatIndexFrom3DOutput": () => (/* binding */ getFlatIndexFrom3DOutput),
/* harmony export */   "getLogicalCoordinatesFromFlatIndex": () => (/* binding */ getLogicalCoordinatesFromFlatIndex),
/* harmony export */   "getLogicalCoordinatesFromFlatIndexByUniform": () => (/* binding */ getLogicalCoordinatesFromFlatIndexByUniform),
/* harmony export */   "getOutputLogicalCoordinatesFromFlatIndexByUniform": () => (/* binding */ getOutputLogicalCoordinatesFromFlatIndexByUniform)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Produces GLSL code that derives logical coordinates from a flat
 * index. The code performs integer division with each stride and decrements
 * the index until the index equals the final dimension coordinate.
 */
function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {
  const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(shape);
  return strides.map((stride, i) => {
    const line1 = `int ${coords[i]} = ${index} / ${stride}`;
    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` : `index -= ${coords[i]} * ${stride}`;
    return `${line1}; ${line2};`;
  }).join('');
}
function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape, index = 'index') {
  const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(shape);
  return strides.map((_, i) => {
    const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;
    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${i}]` : `index -= ${coords[i]} * outShapeStrides[${i}]`;
    return `${line1}; ${line2};`;
  }).join('');
}
// Produces GLSL code that computes strides.
function symbolicallyComputeStrides(indicesArr, variableName) {
  const numCoords = indicesArr.length;
  const shape = indicesArr.map(d => `${variableName}[${d}]`);
  const strides = new Array(numCoords - 1);
  strides[numCoords - 2] = shape[numCoords - 1];
  for (let i = numCoords - 3; i >= 0; --i) {
    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;
  }
  return strides;
}
function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName, index = 'index') {
  const indicesArray = coords.map((_, i) => i);
  const strides = symbolicallyComputeStrides(indicesArray, variableName);
  return strides.map((_, i) => {
    const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;
    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` : `index -= ${coords[i]} * ${strides[i]}`;
    return `${line1}; ${line2};`;
  }).join('');
}
function buildVec(x) {
  if (x.length === 1) {
    return `${x[0]}`;
  }
  return `vec${x.length}(${x.join(',')})`;
}
/**
 * Produces GLSL code that computes the dot product of the input x and y
 * vectors. Handles splitting inputs into increments of vec4s when necessary.
 */
function dotify(x, y) {
  if (x.length !== y.length) {
    throw new Error(`Vectors to be dotted must be of the same length -` + `got ${x.length} and ${y.length}`);
  }
  const slices = [];
  const nearestVec4 = Math.floor(x.length / 4);
  const nearestVec4Remainder = x.length % 4;
  for (let i = 0; i < nearestVec4; i++) {
    const xSlice = x.slice(i * 4, i * 4 + 4);
    const ySlice = y.slice(i * 4, i * 4 + 4);
    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);
  }
  if (nearestVec4Remainder !== 0) {
    let xSlice = x.slice(nearestVec4 * 4);
    let ySlice = y.slice(nearestVec4 * 4);
    if (xSlice.length === 1) {
      xSlice = xSlice.map(d => `float(${d})`);
      ySlice = ySlice.map(d => `float(${d})`);
    }
    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);
  }
  return slices.map((d, i) => `dot(${d})`).join('+');
}
/**
 * Produces GLSL that computes the flat index from 3D coordinates.
 */
function getFlatIndexFrom3D(shape) {
  const strides = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.computeStrides(shape).map(d => d.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;
  }
`;
}
function getFlatIndexFrom3DOutput() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const ENCODE_FLOAT_SNIPPET = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;

/***/ }),

/***/ 43286:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SliceProgram": () => (/* binding */ SliceProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class SliceProgram {
  constructor(destSize) {
    this.variableNames = ['source'];
    this.outputShape = destSize;
    this.rank = destSize.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);
    this.customUniforms = [{
      name: 'start',
      arrayIndex: this.rank,
      type: 'int'
    }];
    const sourceCoords = getCoords(this.rank);
    let body;
    const coordSum = destSize.map((_, i) => {
      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;
    });
    body = `
        ${dtype} sourceLoc;
        ${dtype} coords = getOutputCoords();
        ${coordSum.join('\n')}
      `;
    this.userCode = `
      void main() {
        ${body}
        setOutput(getSource(${sourceCoords}));
      }
    `;
  }
}
const coords = ['x', 'y', 'z', 'w', 'u', 'v'];
function getCoords(rank) {
  if (rank === 1) {
    return 'sourceLoc';
  } else if (rank <= 6) {
    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');
  } else {
    throw Error(`Slicing for rank ${rank} is not yet supported`);
  }
}

/***/ }),

/***/ 39249:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlicePackedProgram": () => (/* binding */ SlicePackedProgram)
/* harmony export */ });
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class SlicePackedProgram {
  constructor(destSize) {
    this.variableNames = ['source'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = destSize;
    this.rank = destSize.length;
    this.customUniforms = [{
      name: 'start',
      arrayIndex: this.rank,
      type: 'int'
    }];
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);
    const coords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('coords', this.rank);
    const sourceLoc = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('sourceLoc', this.rank);
    const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;
    const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;
    const upperRow = `
      result.x = ${getChannel};
      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
        ++${sourceLoc[this.rank - 1]};
        result.y = ${getChannel};
        --${sourceLoc[this.rank - 1]};
      }
    `;
    const lowerRow = this.rank === 1 ? '' : `
      --${coords[this.rank - 1]};
      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {
        ++${sourceLoc[this.rank - 2]};
        result.z = ${getChannel};
        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {
          ++${sourceLoc[this.rank - 1]};
          result.w = ${getChannel};
        }
      }
    `;
    const sourceLocSetup = this.rank <= 4 ? `sourceLoc = coords +
            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` : destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`).join('\n');
    this.userCode = `
      void main() {
        ${dtype} coords = getOutputCoords();
        ${dtype} sourceLoc;
        ${sourceLocSetup}
        vec4 result = vec4(0.);
        ${upperRow}
        ${lowerRow}
        setOutput(result);
      }
    `;
  }
}

/***/ }),

/***/ 82285:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StridedSliceProgram": () => (/* binding */ StridedSliceProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class StridedSliceProgram {
  constructor(begin, strides, size) {
    this.variableNames = ['x'];
    this.outputShape = size;
    const rank = size.length;
    const inputDtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(size.length);
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(size.length);
    let newCoords = '';
    if (rank === 1) {
      newCoords = 'coords * strides + begin';
    } else {
      let outputAxis = 0;
      newCoords = size.map((_, i) => {
        outputAxis++;
        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;
      }).join(',');
    }
    this.userCode = `
      ${inputDtype} begin = ${inputDtype}(${begin});
      ${inputDtype} strides = ${inputDtype}(${strides});

      void main() {
        ${dtype} coords = getOutputCoords();
        setOutput(getX(${newCoords}));
      }
    `;
  }
}

/***/ }),

/***/ 86215:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PackingScheme": () => (/* binding */ PackingScheme),
/* harmony export */   "PhysicalTextureType": () => (/* binding */ PhysicalTextureType),
/* harmony export */   "TextureUsage": () => (/* binding */ TextureUsage),
/* harmony export */   "decodeMatrixFromUnpackedColorRGBAArray": () => (/* binding */ decodeMatrixFromUnpackedColorRGBAArray),
/* harmony export */   "getColorMatrixTextureShapeWidthHeight": () => (/* binding */ getColorMatrixTextureShapeWidthHeight),
/* harmony export */   "getDenseTexShape": () => (/* binding */ getDenseTexShape),
/* harmony export */   "getMatrixSizeFromUnpackedArraySize": () => (/* binding */ getMatrixSizeFromUnpackedArraySize),
/* harmony export */   "getPackedMatrixTextureShapeWidthHeight": () => (/* binding */ getPackedMatrixTextureShapeWidthHeight),
/* harmony export */   "getPackedRGBAArraySizeFromMatrixShape": () => (/* binding */ getPackedRGBAArraySizeFromMatrixShape),
/* harmony export */   "getTextureConfig": () => (/* binding */ getTextureConfig),
/* harmony export */   "getUnpackedArraySizeFromMatrixSize": () => (/* binding */ getUnpackedArraySizeFromMatrixSize),
/* harmony export */   "getUnpackedMatrixTextureShapeWidthHeight": () => (/* binding */ getUnpackedMatrixTextureShapeWidthHeight)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

var PackingScheme;
(function (PackingScheme) {
  /**
   * All values in a single texel are densely packed without any constraints.
   *
   * This is how the shader encodes a tensor with shape = [2, 3, 4]
   * (indices are [batch, row, col]).
   *
   * 000|001   010|011   020|021
   * -------   -------   -------
   * 002|003   012|013   022|023
   *
   * 100|101   110|111   120|121
   * -------   -------   -------
   * 102|103   112|113   122|123
   *
   */
  PackingScheme[PackingScheme["DENSE"] = 0] = "DENSE";
  /**
   * Single texels contain only values from the same batch, and from adjacent
   * rows and columns.
   *
   * This is how the shader encodes a tensor with shape = [2, 3, 5]
   * (indices are [batch, row, col]).
   *
   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx
   * -------   -------   -------   -------   -------   -------
   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx
   *
   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx
   * -------   -------   -------   -------   -------   -------
   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx
   *
   */
  PackingScheme[PackingScheme["SHARED_BATCH"] = 1] = "SHARED_BATCH";
})(PackingScheme || (PackingScheme = {}));
var TextureUsage;
(function (TextureUsage) {
  TextureUsage[TextureUsage["RENDER"] = 0] = "RENDER";
  TextureUsage[TextureUsage["UPLOAD"] = 1] = "UPLOAD";
  TextureUsage[TextureUsage["PIXELS"] = 2] = "PIXELS";
  TextureUsage[TextureUsage["DOWNLOAD"] = 3] = "DOWNLOAD";
})(TextureUsage || (TextureUsage = {}));
var PhysicalTextureType;
(function (PhysicalTextureType) {
  PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT16"] = 0] = "UNPACKED_FLOAT16";
  PhysicalTextureType[PhysicalTextureType["UNPACKED_FLOAT32"] = 1] = "UNPACKED_FLOAT32";
  PhysicalTextureType[PhysicalTextureType["PACKED_4X1_UNSIGNED_BYTE"] = 2] = "PACKED_4X1_UNSIGNED_BYTE";
  PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT32"] = 3] = "PACKED_2X2_FLOAT32";
  PhysicalTextureType[PhysicalTextureType["PACKED_2X2_FLOAT16"] = 4] = "PACKED_2X2_FLOAT16";
})(PhysicalTextureType || (PhysicalTextureType = {}));
function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {
  return [columns, rows];
}
function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {
  return matrixSize * channelsPerTexture;
}
function getColorMatrixTextureShapeWidthHeight(rows, columns) {
  return [columns * 4, rows];
}
/**
 * Get shape for densely packed RGBA texture.
 */
function getDenseTexShape(shape) {
  const size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape);
  const texelsNeeded = Math.ceil(size / 4);
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeToSquarishShape(texelsNeeded);
}
function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {
  if (unpackedSize % channelsPerTexture !== 0) {
    throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);
  }
  return unpackedSize / channelsPerTexture;
}
function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {
  const requiredSize = unpackedArray.length * channels / 4;
  if (matrix.length < requiredSize) {
    throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);
  }
  let dst = 0;
  for (let src = 0; src < unpackedArray.length; src += 4) {
    for (let c = 0; c < channels; c++) {
      matrix[dst++] = unpackedArray[src + c];
    }
  }
}
function getPackedMatrixTextureShapeWidthHeight(rows, columns) {
  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];
}
function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {
  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);
  return w * h * 4;
}
function getTextureConfig(
// tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
  // tslint:disable-next-line:no-any
  const glany = gl;
  let internalFormatFloat;
  let internalFormatHalfFloat;
  let internalFormatPackedHalfFloat;
  let internalFormatPackedFloat;
  let textureFormatFloat;
  let downloadTextureFormat;
  let downloadUnpackNumChannels;
  let defaultNumChannels;
  let textureTypeHalfFloat;
  let textureTypeFloat;
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {
    internalFormatFloat = glany.R32F;
    internalFormatHalfFloat = glany.R16F;
    internalFormatPackedHalfFloat = glany.RGBA16F;
    internalFormatPackedFloat = glany.RGBA32F;
    textureFormatFloat = glany.RED;
    downloadUnpackNumChannels = 4;
    defaultNumChannels = 1;
    textureTypeHalfFloat = glany.HALF_FLOAT;
    textureTypeFloat = glany.FLOAT;
    downloadTextureFormat = glany.RGBA8;
  } else {
    internalFormatFloat = gl.RGBA;
    internalFormatHalfFloat = gl.RGBA;
    internalFormatPackedHalfFloat = gl.RGBA;
    internalFormatPackedFloat = glany.RGBA;
    textureFormatFloat = gl.RGBA;
    downloadUnpackNumChannels = 4;
    defaultNumChannels = 4;
    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;
    textureTypeFloat = gl.FLOAT;
    downloadTextureFormat = gl.RGBA;
  }
  return {
    internalFormatFloat,
    internalFormatHalfFloat,
    internalFormatPackedHalfFloat,
    internalFormatPackedFloat,
    textureFormatFloat,
    downloadTextureFormat,
    downloadUnpackNumChannels,
    defaultNumChannels,
    textureTypeHalfFloat,
    textureTypeFloat
  };
}

/***/ }),

/***/ 23396:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextureManager": () => (/* binding */ TextureManager),
/* harmony export */   "computeBytes": () => (/* binding */ computeBytes)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gpgpu_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gpgpu_util */ 122);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tex_util */ 86215);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



class TextureManager {
  constructor(gpgpu) {
    this.gpgpu = gpgpu;
    this.numUsedTextures = 0;
    this.numFreeTextures = 0;
    this._numBytesAllocated = 0;
    // Number of bytes that have been allocated and available for reuse.
    this._numBytesFree = 0;
    this.freeTextures = {};
    this.usedTextures = {};
    this.logEnabled = false;
  }
  acquireTexture(shapeRC, usage, isPacked) {
    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);
    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);
    if (!(shapeKey in this.freeTextures)) {
      this.freeTextures[shapeKey] = [];
    }
    if (!(shapeKey in this.usedTextures)) {
      this.usedTextures[shapeKey] = [];
    }
    const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
    if (this.freeTextures[shapeKey].length > 0) {
      this.numFreeTextures--;
      this.numUsedTextures++;
      this._numBytesFree -= texBytes;
      this.log();
      const newTexture = this.freeTextures[shapeKey].pop();
      this.usedTextures[shapeKey].push(newTexture);
      return newTexture;
    }
    let newTexture;
    if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32) {
      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT16) {
      newTexture = this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT32) {
      newTexture = this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT16) {
      newTexture = this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);
    } else if (physicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {
      newTexture = this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);
    }
    this.usedTextures[shapeKey].push(newTexture);
    this.numUsedTextures++;
    this._numBytesAllocated += texBytes;
    this.log();
    return newTexture;
  }
  releaseTexture(texture, shape, logicalTexType, isPacked) {
    if (this.freeTextures == null) {
      // Already disposed.
      return;
    }
    const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);
    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);
    if (!(shapeKey in this.freeTextures)) {
      this.freeTextures[shapeKey] = [];
    }
    const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);
    const deleteTexThreshold = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('WEBGL_DELETE_TEXTURE_THRESHOLD');
    if (deleteTexThreshold !== -1 && this._numBytesAllocated > deleteTexThreshold) {
      this.gpgpu.deleteMatrixTexture(texture.texture);
      this._numBytesAllocated -= texBytes;
    } else {
      this.freeTextures[shapeKey].push(texture);
      this.numFreeTextures++;
      this._numBytesFree += texBytes;
    }
    this.numUsedTextures--;
    const texList = this.usedTextures[shapeKey];
    const texIndex = texList && texList.indexOf(texture);
    if (texIndex == null || texIndex < 0) {
      throw new Error('Cannot release a texture that was never provided by this ' + 'texture manager');
    }
    texList[texIndex] = texList[texList.length - 1];
    texList.pop();
    this.log();
  }
  log() {
    if (!this.logEnabled) {
      return;
    }
    const total = this.numFreeTextures + this.numUsedTextures;
    console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);
    const freeRatio = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`);
    console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures == null) {
      // Already disposed.
      return;
    }
    for (const texShape in this.freeTextures) {
      this.freeTextures[texShape].forEach(tex => {
        this.gpgpu.deleteMatrixTexture(tex.texture);
      });
    }
    for (const texShape in this.usedTextures) {
      this.usedTextures[texShape].forEach(tex => {
        this.gpgpu.deleteMatrixTexture(tex.texture);
      });
    }
    // TODO: Assign non-null value (empty object) to textures after disposed.
    this.freeTextures = null;
    this.usedTextures = null;
    this.numUsedTextures = 0;
    this.numFreeTextures = 0;
    this._numBytesAllocated = 0;
    this._numBytesFree = 0;
  }
}
function numBytesForInternalFormat(gl, internalFormat) {
  // tslint:disable-next-line:no-any
  const glany = gl;
  if (internalFormat === glany.R32F) {
    return 4;
  } else if (internalFormat === glany.R16F) {
    return 2;
  } else if (internalFormat === glany.RGBA32F) {
    return 16;
  } else if (internalFormat === gl.RGBA) {
    return 16;
  } else if (internalFormat === glany.RGBA16F) {
    return 8;
  } else if (internalFormat === glany.RGBA8) {
    return 4;
  }
  throw new Error(`Unknown internal format ${internalFormat}`);
}
function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {
  // It is not possible to infer packed status from the texture type because
  // depending on the textureConfig, different  texture types may resolve to the
  // same internal format (e.g. in WebGL1, the internal format for
  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`
  // explicitly.
  const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);
  let numElements;
  if (isPacked) {
    const [packedWidth, packedHeight] = (0,_tex_util__WEBPACK_IMPORTED_MODULE_1__.getPackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);
    numElements = packedWidth * packedHeight;
  } else {
    const [width, height] = (0,_tex_util__WEBPACK_IMPORTED_MODULE_1__.getUnpackedMatrixTextureShapeWidthHeight)(shape[0], shape[1]);
    numElements = width * height;
  }
  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);
  return numElements * bytesPerElement;
}
function internalFormatForPhysicalTexType(physicalTexType, textureConfig) {
  switch (physicalTexType) {
    case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32:
      return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForPackedMatrixTexture)(textureConfig);
    case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT16:
      return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForFloat16PackedMatrixTexture)(textureConfig);
    case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT32:
      return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForFloat32MatrixTexture)(textureConfig);
    case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT16:
      return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForFloat16MatrixTexture)(textureConfig);
    case _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:
      return (0,_gpgpu_util__WEBPACK_IMPORTED_MODULE_2__.getInternalFormatForUnsignedBytesMatrixTexture)(textureConfig);
    default:
      throw new Error(`Unknown physical texture type ${physicalTexType}`);
  }
}
function getPhysicalTextureForRendering(isPacked) {
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {
    if (isPacked) {
      return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32;
    }
    return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT32;
  }
  if (isPacked) {
    return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT16;
  }
  return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.UNPACKED_FLOAT16;
}
function getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {
  if (logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.UPLOAD) {
    return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_2X2_FLOAT32;
  } else if (logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.RENDER || logicalTexType == null) {
    return getPhysicalTextureForRendering(isPacked);
  } else if (logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.DOWNLOAD || logicalTexType === _tex_util__WEBPACK_IMPORTED_MODULE_1__.TextureUsage.PIXELS) {
    return _tex_util__WEBPACK_IMPORTED_MODULE_1__.PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
  }
  throw new Error(`Unknown logical texture type ${logicalTexType}`);
}
function getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {
  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;
}

/***/ }),

/***/ 67435:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TileProgram": () => (/* binding */ TileProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class TileProgram {
  constructor(aShape, reps) {
    this.variableNames = ['A'];
    const outputShape = new Array(aShape.length);
    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[i] * reps[i];
    }
    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);
    const sourceCoords = getSourceCoords(aShape);
    this.userCode = `
      void main() {
        ${dtype} resRC = getOutputCoords();
        setOutput(getA(${sourceCoords}));
      }
    `;
  }
}
function getSourceCoords(aShape) {
  const rank = aShape.length;
  if (rank > 5) {
    throw Error(`Tile for rank ${rank} is not yet supported`);
  }
  if (rank === 1) {
    return `imod(resRC, ${aShape[0]})`;
  }
  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];
  const sourceCoords = [];
  for (let i = 0; i < aShape.length; i++) {
    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);
  }
  return sourceCoords.join();
}

/***/ }),

/***/ 23839:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/top_k_gpu.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MergeProgram": () => (/* binding */ MergeProgram),
/* harmony export */   "SwapProgram": () => (/* binding */ SwapProgram)
/* harmony export */ });
// Based on Algorithm 2 of Bitonic Top K, ref:
// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf
// The original algorithm is based on computing the top K only, however
// since for TFJS we require the indices of the top K values as well then the
// algorithm found here is a bit modified. Rather than producing the values
// at each step, the indices containing the top K are generated instead.
// The output values are not generated to reduce the number of outputs in the
// GPU, the values can easily be retrieved from the indices using a gather
// op.
class SwapProgram {
  /**
   * @param shape desired output shape (can be larger than input shape, output
   *                                    will be padded with -Infinity)
   */
  constructor(shape) {
    this.variableNames = ['x', 'indices'];
    // |n| Size of the original input of TopK.
    // |firstPass|indicates if this is the first time swap is being used which
    // means no indices input containing the top K is present yet.
    // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...
    this.customUniforms = [{
      name: 'n',
      type: 'int'
    }, {
      name: 'firstPass',
      type: 'int'
    }, {
      name: 'negativeInf',
      type: 'float'
    }, {
      name: 'dir',
      type: 'int'
    }, {
      name: 'inc',
      type: 'int'
    }];
    this.outputShape = shape;
    this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class MergeProgram {
  /**
   * @param shape desired output shape (must be half of the input size)
   */
  constructor(shape) {
    this.variableNames = ['x', 'indices'];
    // |n| Size of the original input of TopK
    // |firstPass| indicates if this is the first time swap is being used which
    // means no indices input containing the top K is present yet.
    // |k| Top k elements desired
    this.customUniforms = [{
      name: 'n',
      type: 'int'
    }, {
      name: 'firstPass',
      type: 'int'
    }, {
      name: 'k',
      type: 'int'
    }];
    this.outputShape = shape;
    this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}

/***/ }),

/***/ 4587:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/transform_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransformProgram": () => (/* binding */ TransformProgram)
/* harmony export */ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TransformProgram {
  constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {
    this.variableNames = ['Image', 'Transforms'];
    this.outputShape = outShape;
    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;
    let fillModeId;
    switch (fillMode) {
      case 'constant':
        fillModeId = 1;
        break;
      case 'reflect':
        fillModeId = 2;
        break;
      case 'wrap':
        fillModeId = 3;
        break;
      case 'nearest':
        fillModeId = 4;
        break;
      default:
        fillModeId = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${fillModeId} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${fillModeId} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${fillModeId} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${fillValue});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${fillValue});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${imageWidth}));
                float mapY = mapCoord(inY, float(${imageHeight}));

                if (${interpolationModeId} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}

/***/ }),

/***/ 33263:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransposeProgram": () => (/* binding */ TransposeProgram)
/* harmony export */ });
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class TransposeProgram {
  constructor(aShape, newDim) {
    this.variableNames = ['A'];
    const outputShape = new Array(aShape.length);
    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[newDim[i]];
    }
    this.outputShape = outputShape;
    this.rank = outputShape.length;
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);
    const switched = getSwitchedCoords(newDim);
    this.userCode = `
    void main() {
      ${dtype} resRC = getOutputCoords();
      setOutput(getA(${switched}));
    }
    `;
  }
}
function getSwitchedCoords(newDim) {
  const rank = newDim.length;
  if (rank > 6) {
    throw Error(`Transpose for rank ${rank} is not yet supported`);
  }
  const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];
  const switchedCoords = new Array(rank);
  for (let i = 0; i < newDim.length; i++) {
    switchedCoords[newDim[i]] = originalOrder[i];
  }
  return switchedCoords.join();
}

/***/ }),

/***/ 87595:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransposePackedProgram": () => (/* binding */ TransposePackedProgram)
/* harmony export */ });
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class TransposePackedProgram {
  constructor(aShape, newDim) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    const outputShape = new Array(aShape.length);
    for (let i = 0; i < outputShape.length; i++) {
      outputShape[i] = aShape[newDim[i]];
    }
    this.outputShape = outputShape;
    this.rank = outputShape.length;
    if (this.rank > 6) {
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    }
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_0__.getCoordsDataType)(this.rank);
    const outputOrder = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getVecChannels)('rc', this.rank);
    const switchedOrder = new Array(this.rank);
    for (let i = 0; i < newDim.length; i++) {
      switchedOrder[newDim[i]] = outputOrder[i];
    }
    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;
    const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;
    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;
    this.userCode = `
    void main() {
      ${dtype} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${getc};
      if(${nextColumn}) {
        result[1] = ${getc};
      }
      --${outputOrder[this.rank - 1]};
      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {
        result[2] = ${getc};
        if(${nextColumn}) {
          result[3] = ${getc};
        }
      }
      setOutput(result);
    }
    `;
  }
}

/***/ }),

/***/ 176:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ABS": () => (/* binding */ ABS),
/* harmony export */   "CHECK_NAN_SNIPPET": () => (/* binding */ CHECK_NAN_SNIPPET),
/* harmony export */   "CLONE": () => (/* binding */ CLONE),
/* harmony export */   "ELU": () => (/* binding */ ELU),
/* harmony export */   "LINEAR": () => (/* binding */ LINEAR),
/* harmony export */   "RELU": () => (/* binding */ RELU),
/* harmony export */   "RELU6": () => (/* binding */ RELU6),
/* harmony export */   "SIGMOID": () => (/* binding */ SIGMOID),
/* harmony export */   "STEP": () => (/* binding */ STEP),
/* harmony export */   "UnaryOpProgram": () => (/* binding */ UnaryOpProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

class UnaryOpProgram {
  constructor(aShape, opSnippet) {
    this.variableNames = ['A'];
    this.outputShape = aShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      float unaryOperation(float x) {
        ${opSnippet}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;
const LINEAR = `return x;`;
const ABS = `return abs(x);`;
function STEP(alpha = 0.0) {
  return CHECK_NAN_SNIPPET + `
    return x > 0.0 ? 1.0 : float(${alpha});
  `;
}
const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;
const RELU = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : x;
`;
const RELU6 = CHECK_NAN_SNIPPET + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
const CLONE = 'return x;';
const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;

/***/ }),

/***/ 81992:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ELU": () => (/* binding */ ELU),
/* harmony export */   "LINEAR": () => (/* binding */ LINEAR),
/* harmony export */   "RELU": () => (/* binding */ RELU),
/* harmony export */   "RELU6": () => (/* binding */ RELU6),
/* harmony export */   "SIGMOID": () => (/* binding */ SIGMOID),
/* harmony export */   "UnaryOpPackedProgram": () => (/* binding */ UnaryOpPackedProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const LINEAR = `return x;`;
const ELU = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
const RELU = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const RELU6 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;
class UnaryOpPackedProgram {
  constructor(aShape, opSnippet) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = true;
    this.outputShape = aShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${opSnippet}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}

/***/ }),

/***/ 96593:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnpackProgram": () => (/* binding */ UnpackProgram)
/* harmony export */ });
/* harmony import */ var _gpgpu_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gpgpu_math */ 33464);
/* harmony import */ var _packing_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packing_util */ 88573);
/* harmony import */ var _shader_compiler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shader_compiler */ 1640);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



class UnpackProgram {
  constructor(outputShape) {
    this.variableNames = ['A'];
    this.packedInputs = true;
    this.packedOutput = false;
    this.outputShape = outputShape;
    this.enableShapeUniforms = (0,_gpgpu_math__WEBPACK_IMPORTED_MODULE_0__.useShapeUniforms)(this.outputShape.length);
    const rank = outputShape.length;
    const channels = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getChannels)('rc', rank);
    const dtype = (0,_shader_compiler__WEBPACK_IMPORTED_MODULE_2__.getCoordsDataType)(rank);
    const sourceCoords = (0,_packing_util__WEBPACK_IMPORTED_MODULE_1__.getSourceCoords)(rank, channels);
    const innerDims = channels.slice(-2);
    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;
    this.userCode = `
      void main() {
        ${dtype} rc = getOutputCoords();
        vec4 packedInput = getA(${sourceCoords});

        setOutput(getChannel(packedInput, ${coords}));
      }
    `;
  }
}

/***/ }),

/***/ 53892:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '4.5.0';


/***/ }),

/***/ 68586:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GPGPUContext": () => (/* reexport safe */ _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__.GPGPUContext),
/* harmony export */   "MathBackendWebGL": () => (/* reexport safe */ _backend_webgl__WEBPACK_IMPORTED_MODULE_1__.MathBackendWebGL),
/* harmony export */   "forceHalfFloat": () => (/* binding */ forceHalfFloat),
/* harmony export */   "gpgpu_util": () => (/* reexport module object */ _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "setWebGLContext": () => (/* reexport safe */ _canvas_util__WEBPACK_IMPORTED_MODULE_2__.setWebGLContext),
/* harmony export */   "webgl_util": () => (/* reexport module object */ _webgl_util__WEBPACK_IMPORTED_MODULE_5__)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _gpgpu_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gpgpu_util */ 122);
/* harmony import */ var _webgl_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webgl_util */ 45181);
/* harmony import */ var _backend_webgl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend_webgl */ 48488);
/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas_util */ 80186);
/* harmony import */ var _gpgpu_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gpgpu_context */ 29859);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






// WebGL specific utils.

/**
 * Enforce use of half precision textures if available on the platform.
 *
 * @doc {heading: 'Environment', namespace: 'webgl'}
 */
function forceHalfFloat() {
  (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().set('WEBGL_FORCE_F16_TEXTURES', true);
}

/***/ }),

/***/ 45181:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertNotComplex": () => (/* binding */ assertNotComplex),
/* harmony export */   "bindCanvasToFramebuffer": () => (/* binding */ bindCanvasToFramebuffer),
/* harmony export */   "bindColorTextureToFramebuffer": () => (/* binding */ bindColorTextureToFramebuffer),
/* harmony export */   "bindTextureToProgramUniformSampler": () => (/* binding */ bindTextureToProgramUniformSampler),
/* harmony export */   "bindTextureUnit": () => (/* binding */ bindTextureUnit),
/* harmony export */   "bindVertexBufferToProgramAttribute": () => (/* binding */ bindVertexBufferToProgramAttribute),
/* harmony export */   "callAndCheck": () => (/* binding */ callAndCheck),
/* harmony export */   "canBeRepresented": () => (/* binding */ canBeRepresented),
/* harmony export */   "createFragmentShader": () => (/* binding */ createFragmentShader),
/* harmony export */   "createFramebuffer": () => (/* binding */ createFramebuffer),
/* harmony export */   "createProgram": () => (/* binding */ createProgram),
/* harmony export */   "createStaticIndexBuffer": () => (/* binding */ createStaticIndexBuffer),
/* harmony export */   "createStaticVertexBuffer": () => (/* binding */ createStaticVertexBuffer),
/* harmony export */   "createTexture": () => (/* binding */ createTexture),
/* harmony export */   "createVertexShader": () => (/* binding */ createVertexShader),
/* harmony export */   "getBatchDim": () => (/* binding */ getBatchDim),
/* harmony export */   "getExtensionOrThrow": () => (/* binding */ getExtensionOrThrow),
/* harmony export */   "getFramebufferErrorMessage": () => (/* binding */ getFramebufferErrorMessage),
/* harmony export */   "getMaxTexturesInShader": () => (/* binding */ getMaxTexturesInShader),
/* harmony export */   "getNumChannels": () => (/* binding */ getNumChannels),
/* harmony export */   "getProgramUniformLocation": () => (/* binding */ getProgramUniformLocation),
/* harmony export */   "getProgramUniformLocationOrThrow": () => (/* binding */ getProgramUniformLocationOrThrow),
/* harmony export */   "getRowsCols": () => (/* binding */ getRowsCols),
/* harmony export */   "getShapeAs3D": () => (/* binding */ getShapeAs3D),
/* harmony export */   "getTextureShapeFromLogicalShape": () => (/* binding */ getTextureShapeFromLogicalShape),
/* harmony export */   "getWebGLDisjointQueryTimerVersion": () => (/* binding */ getWebGLDisjointQueryTimerVersion),
/* harmony export */   "getWebGLErrorMessage": () => (/* binding */ getWebGLErrorMessage),
/* harmony export */   "getWebGLMaxTextureSize": () => (/* binding */ getWebGLMaxTextureSize),
/* harmony export */   "hasExtension": () => (/* binding */ hasExtension),
/* harmony export */   "isCapableOfRenderingToFloatTexture": () => (/* binding */ isCapableOfRenderingToFloatTexture),
/* harmony export */   "isDownloadFloatTextureEnabled": () => (/* binding */ isDownloadFloatTextureEnabled),
/* harmony export */   "isReshapeFree": () => (/* binding */ isReshapeFree),
/* harmony export */   "isWebGLFenceEnabled": () => (/* binding */ isWebGLFenceEnabled),
/* harmony export */   "isWebGLVersionEnabled": () => (/* binding */ isWebGLVersionEnabled),
/* harmony export */   "linkProgram": () => (/* binding */ linkProgram),
/* harmony export */   "logShaderSourceAndInfoLog": () => (/* binding */ logShaderSourceAndInfoLog),
/* harmony export */   "resetMaxTextureSize": () => (/* binding */ resetMaxTextureSize),
/* harmony export */   "resetMaxTexturesInShader": () => (/* binding */ resetMaxTexturesInShader),
/* harmony export */   "unbindColorTextureFromFramebuffer": () => (/* binding */ unbindColorTextureFromFramebuffer),
/* harmony export */   "unbindTextureUnit": () => (/* binding */ unbindTextureUnit),
/* harmony export */   "validateFramebuffer": () => (/* binding */ validateFramebuffer),
/* harmony export */   "validateProgram": () => (/* binding */ validateProgram),
/* harmony export */   "validateTextureSize": () => (/* binding */ validateTextureSize)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _canvas_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas_util */ 80186);
/* harmony import */ var _tex_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tex_util */ 86215);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function callAndCheck(gl, func) {
  const returnValue = func();
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('DEBUG')) {
    checkWebGLError(gl);
  }
  return returnValue;
}
function checkWebGLError(gl) {
  const error = gl.getError();
  if (error !== gl.NO_ERROR) {
    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));
  }
}
// https://en.wikipedia.org/wiki/Half-precision_floating-point_format
const MIN_FLOAT16 = 5.96e-8;
const MAX_FLOAT16 = 65504;
function canBeRepresented(num) {
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 || MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16) {
    return true;
  }
  return false;
}
function getWebGLErrorMessage(gl, status) {
  switch (status) {
    case gl.NO_ERROR:
      return 'NO_ERROR';
    case gl.INVALID_ENUM:
      return 'INVALID_ENUM';
    case gl.INVALID_VALUE:
      return 'INVALID_VALUE';
    case gl.INVALID_OPERATION:
      return 'INVALID_OPERATION';
    case gl.INVALID_FRAMEBUFFER_OPERATION:
      return 'INVALID_FRAMEBUFFER_OPERATION';
    case gl.OUT_OF_MEMORY:
      return 'OUT_OF_MEMORY';
    case gl.CONTEXT_LOST_WEBGL:
      return 'CONTEXT_LOST_WEBGL';
    default:
      return `Unknown error code ${status}`;
  }
}
function getExtensionOrThrow(gl, extensionName) {
  return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension "' + extensionName + '" not supported on this browser.');
}
function createVertexShader(gl, vertexShaderSource) {
  const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');
  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));
  callAndCheck(gl, () => gl.compileShader(vertexShader));
  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {
    console.log(gl.getShaderInfoLog(vertexShader));
    throw new Error('Failed to compile vertex shader.');
  }
  return vertexShader;
}
function createFragmentShader(gl, fragmentShaderSource) {
  const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');
  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));
  callAndCheck(gl, () => gl.compileShader(fragmentShader));
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('ENGINE_COMPILE_ONLY')) {
    return fragmentShader;
  }
  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {
    logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));
    throw new Error('Failed to compile fragment shader.');
  }
  return fragmentShader;
}
const lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {
  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);
  if (lineNumberRegexResult == null) {
    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);
    console.log(shaderSource);
    return;
  }
  const lineNumber = +lineNumberRegexResult[1];
  const shaderLines = shaderSource.split('\n');
  const pad = shaderLines.length.toString().length + 2;
  const linesWithLineNumbers = shaderLines.map((line, lineNumber) => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.rightPad((lineNumber + 1).toString(), pad) + line);
  let maxLineLength = 0;
  for (let i = 0; i < linesWithLineNumbers.length; i++) {
    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);
  }
  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);
  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);
  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);
  console.log(beforeErrorLines.join('\n'));
  console.log(shaderInfoLog.split('\n')[0]);
  console.log(`%c ${_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');
  console.log(afterErrorLines.join('\n'));
}
function createProgram(gl) {
  return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');
}
function linkProgram(gl, program) {
  callAndCheck(gl, () => gl.linkProgram(program));
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().get('ENGINE_COMPILE_ONLY')) {
    return;
  }
  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
    console.log(gl.getProgramInfoLog(program));
    throw new Error('Failed to link vertex and fragment shaders.');
  }
}
/// validateProgram is effectively "If we `useProgram(program); drawArrays();`,
/// give feedback in log about perf/correctness warnings or errors that would
/// occur."
/// So make sure we set up all vertex/texture/sampler/uniform data before
/// calling validateProgram!
function validateProgram(gl, program) {
  callAndCheck(gl, () => gl.validateProgram(program));
  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {
    console.log(gl.getProgramInfoLog(program));
    throw new Error('Shader program validation failed.');
  }
}
function createStaticVertexBuffer(gl, data) {
  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));
  return buffer;
}
function createStaticIndexBuffer(gl, data) {
  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');
  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));
  return buffer;
}
function getNumChannels() {
  if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_VERSION') === 2) {
    return 1;
  }
  return 4;
}
function createTexture(gl) {
  return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');
}
function validateTextureSize(width, height) {
  const maxTextureSize = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');
  if (width <= 0 || height <= 0) {
    const requested = `[${width}x${height}]`;
    throw new Error('Requested texture size ' + requested + ' is invalid.');
  }
  if (width > maxTextureSize || height > maxTextureSize) {
    const requested = `[${width}x${height}]`;
    const max = `[${maxTextureSize}x${maxTextureSize}]`;
    throw new Error('Requested texture size ' + requested + ' greater than WebGL maximum on this browser / GPU ' + max + '.');
  }
}
function createFramebuffer(gl) {
  return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');
}
function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {
  const loc = gl.getAttribLocation(program, attribute);
  if (loc === -1) {
    // The GPU compiler decided to strip out this attribute because it's unused,
    // thus no need to bind.
    return false;
  }
  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));
  callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));
  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));
  return true;
}
function bindTextureUnit(gl, texture, textureUnit) {
  validateTextureUnit(gl, textureUnit);
  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));
  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));
}
function unbindTextureUnit(gl, textureUnit) {
  validateTextureUnit(gl, textureUnit);
  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));
  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));
}
function getProgramUniformLocationOrThrow(gl, program, uniformName) {
  return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform "' + uniformName + '" not present in program.');
}
function getProgramUniformLocation(gl, program, uniformName) {
  return gl.getUniformLocation(program, uniformName);
}
function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {
  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));
  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));
}
function bindCanvasToFramebuffer(gl) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));
  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));
  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));
}
function bindColorTextureToFramebuffer(gl, texture, framebuffer) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));
}
function unbindColorTextureFromFramebuffer(gl, framebuffer) {
  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));
  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));
}
function validateFramebuffer(gl) {
  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
  if (status !== gl.FRAMEBUFFER_COMPLETE) {
    throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));
  }
}
function getFramebufferErrorMessage(gl, status) {
  switch (status) {
    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
    case gl.FRAMEBUFFER_UNSUPPORTED:
      return 'FRAMEBUFFER_UNSUPPORTED';
    default:
      return `unknown error ${status}`;
  }
}
function throwIfNull(gl, returnTOrNull, failureMessage) {
  const tOrNull = callAndCheck(gl, () => returnTOrNull());
  if (tOrNull == null) {
    throw new Error(failureMessage);
  }
  return tOrNull;
}
function validateTextureUnit(gl, textureUnit) {
  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
  const glTextureUnit = textureUnit + gl.TEXTURE0;
  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {
    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;
    throw new Error(`textureUnit must be in ${textureUnitRange}.`);
  }
}
function getBatchDim(shape, dimsToSkip = 2) {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));
}
function getRowsCols(shape) {
  if (shape.length === 0) {
    throw Error('Cannot get rows and columns of an empty shape array.');
  }
  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];
}
function getShapeAs3D(shape) {
  let shapeAs3D = [1, 1, 1];
  const isScalar = shape.length === 0 || shape.length === 1 && shape[0] === 1;
  if (!isScalar) {
    shapeAs3D = [getBatchDim(shape), ...getRowsCols(shape)];
  }
  return shapeAs3D;
}
function getTextureShapeFromLogicalShape(logShape, isPacked = false) {
  let maxTexSize = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_MAX_TEXTURE_SIZE');
  let maxSizeForNarrowTex = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');
  if (maxSizeForNarrowTex === Infinity && (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {
    maxSizeForNarrowTex = maxTexSize / 2;
  }
  if (isPacked) {
    maxTexSize = maxTexSize * 2;
    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;
    // This logic ensures we accurately count the number of packed texels needed
    // to accommodate the tensor. We can only pack values in the same texel if
    // they are from adjacent pairs of rows/cols within the same batch. So if a
    // tensor has 3 rows, we pretend it has 4 rows in order to account for the
    // fact that the texels containing the third row are half empty.
    logShape = logShape.map((d, i) => i >= logShape.length - 2 ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.nearestLargerEven(logShape[i]) : logShape[i]);
    // Packed texture height is at least 2 (the channel height of a single
    // texel).
    if (logShape.length === 1) {
      logShape = [2, logShape[0]];
    }
  }
  // If logical shape is 2, we don't squeeze, since we want to match physical.
  if (logShape.length !== 2) {
    const squeezeResult = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.squeezeShape(logShape);
    logShape = squeezeResult.newShape;
  }
  let size = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(logShape);
  let textureShape = null;
  if (logShape.length <= 1 && size <= maxTexSize) {
    textureShape = [1, size];
  } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {
    textureShape = logShape;
  } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize && logShape[2] <= maxTexSize) {
    textureShape = [logShape[0] * logShape[1], logShape[2]];
  } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {
    textureShape = [logShape[0], logShape[1] * logShape[2]];
  } else if (logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTexSize && logShape[3] <= maxTexSize) {
    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];
  } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {
    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];
  }
  // true if one edge length is 1 (1 or 2, if packed), while another edge
  // length exceeds maxSizeForNarrowTex.
  const isLongNarrowTex = textureShape != null && Math.max(...textureShape) > maxSizeForNarrowTex && Math.min(...textureShape) <= (isPacked ? 2 : 1) && Math.min(...textureShape) > 0;
  if (textureShape == null || isLongNarrowTex) {
    if (isPacked) {
      // For packed textures size equals the number of channels required to
      // accommodate the texture data. However in order to squarify such that
      // inner dimensions stay even, we rewrite size to equal the number of
      // texels. Then in the return statement we rehydrate the squarified
      // dimensions to channel units.
      const batchDim = getBatchDim(logShape);
      let rows = 2,
        cols = 2;
      if (logShape.length) {
        [rows, cols] = getRowsCols(logShape);
      }
      size = batchDim * (rows / 2) * (cols / 2);
      textureShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeToSquarishShape(size).map(d => d * 2);
    } else {
      textureShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeToSquarishShape(size);
    }
  }
  return textureShape;
}
function isEven(n) {
  return n % 2 === 0;
}
/**
 * This determines whether reshaping a packed texture requires rearranging
 * the data within the texture, assuming 2x2 packing.
 */
function isReshapeFree(shape1, shape2) {
  shape1 = shape1.slice(-2);
  shape2 = shape2.slice(-2);
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape1, shape2)) {
    return true;
  }
  if (!shape1.length || !shape2.length) {
    // One of the shapes is a scalar.
    return true;
  }
  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 || shape2[1] === 0) {
    return true;
  }
  if (shape1.length !== shape2.length) {
    // One of the shapes is a vector.
    const shape1Cols = shape1[shape1.length - 1];
    const shape2Cols = shape2[shape2.length - 1];
    if (shape1Cols === shape2Cols) {
      return true;
    }
    if (isEven(shape1Cols) && isEven(shape2Cols) && (shape1[0] === 1 || shape2[0] === 1)) {
      return true;
    }
  }
  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);
}
// We cache webgl params because the environment gets reset between
// unit tests and we don't want to constantly query the WebGLContext for
// MAX_TEXTURE_SIZE.
let MAX_TEXTURE_SIZE;
let MAX_TEXTURES_IN_SHADER;
function getWebGLMaxTextureSize(webGLVersion) {
  if (MAX_TEXTURE_SIZE == null) {
    const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);
    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
  }
  return MAX_TEXTURE_SIZE;
}
function resetMaxTextureSize() {
  MAX_TEXTURE_SIZE = null;
}
function resetMaxTexturesInShader() {
  MAX_TEXTURES_IN_SHADER = null;
}
function getMaxTexturesInShader(webGLVersion) {
  if (MAX_TEXTURES_IN_SHADER == null) {
    const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);
    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
  }
  // We cap at 16 to avoid spurious runtime "memory exhausted" error.
  return Math.min(16, MAX_TEXTURES_IN_SHADER);
}
function getWebGLDisjointQueryTimerVersion(webGLVersion) {
  if (webGLVersion === 0) {
    return 0;
  }
  let queryTimerVersion;
  const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);
  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') && webGLVersion === 2) {
    queryTimerVersion = 2;
  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {
    queryTimerVersion = 1;
  } else {
    queryTimerVersion = 0;
  }
  return queryTimerVersion;
}
function hasExtension(gl, extensionName) {
  const ext = gl.getExtension(extensionName);
  return ext != null;
}
function isWebGLVersionEnabled(webGLVersion) {
  try {
    const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);
    if (gl != null) {
      return true;
    }
  } catch (e) {
    console.log('Error when getting WebGL context: ', e);
    return false;
  }
  return false;
}
function isCapableOfRenderingToFloatTexture(webGLVersion) {
  if (webGLVersion === 0) {
    return false;
  }
  const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);
  if (webGLVersion === 1) {
    if (!hasExtension(gl, 'OES_texture_float')) {
      return false;
    }
  } else {
    if (!hasExtension(gl, 'EXT_color_buffer_float')) {
      return false;
    }
  }
  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
  return isFrameBufferComplete;
}
/**
 * Check if we can download values from a float/half-float texture.
 *
 * Note that for performance reasons we use binding a texture to a framebuffer
 * as a proxy for ability to download float values later using readPixels. The
 * texture params of this texture will not match those in readPixels exactly
 * but if we are unable to bind some kind of float texture to the frameBuffer
 * then we definitely will not be able to read float values from it.
 */
function isDownloadFloatTextureEnabled(webGLVersion) {
  if (webGLVersion === 0) {
    return false;
  }
  const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);
  if (webGLVersion === 1) {
    if (!hasExtension(gl, 'OES_texture_float')) {
      return false;
    }
    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {
      return false;
    }
  } else {
    if (hasExtension(gl, 'EXT_color_buffer_float')) {
      return createFloatTextureAndBindToFramebuffer(gl);
    }
    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';
    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {
      const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);
      return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);
    }
    return false;
  }
  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);
  return isFrameBufferComplete;
}
function createFloatTextureAndBindToFramebuffer(gl) {
  const texConfig = (0,_tex_util__WEBPACK_IMPORTED_MODULE_2__.getTextureConfig)(gl);
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  const width = 1;
  const height = 1;
  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);
  const frameBuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.deleteTexture(texture);
  gl.deleteFramebuffer(frameBuffer);
  return isFrameBufferComplete;
}
function createHalfFloatTextureAndBindToFramebuffer(
// tslint:disable-next-line:no-any
gl, textureHalfFloatExtension) {
  const texConfig = (0,_tex_util__WEBPACK_IMPORTED_MODULE_2__.getTextureConfig)(gl, textureHalfFloatExtension);
  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  const width = 1;
  const height = 1;
  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);
  const frameBuffer = gl.createFramebuffer();
  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
  gl.bindTexture(gl.TEXTURE_2D, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.deleteTexture(texture);
  gl.deleteFramebuffer(frameBuffer);
  return isFrameBufferComplete;
}
function isWebGLFenceEnabled(webGLVersion) {
  if (webGLVersion !== 2) {
    return false;
  }
  const gl = (0,_canvas_util__WEBPACK_IMPORTED_MODULE_1__.getWebGLContext)(webGLVersion);
  // tslint:disable-next-line:no-any
  const isEnabled = gl.fenceSync != null;
  return isEnabled;
}
function assertNotComplex(tensor, opName) {
  if (!Array.isArray(tensor)) {
    tensor = [tensor];
  }
  tensor.forEach(t => {
    if (t != null) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` + 'in the WebGL backend.');
    }
  });
}

/***/ }),

/***/ 52783:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absGradConfig": () => (/* binding */ absGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/step */ 75842);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const absGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Abs,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_step__WEBPACK_IMPORTED_MODULE_2__.step)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32'), -1))
    };
  }
};

/***/ }),

/***/ 29687:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acosGradConfig": () => (/* binding */ acosGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sqrt */ 20536);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sub */ 55939);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const acosGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Acos,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const a = (0,_ops_square__WEBPACK_IMPORTED_MODULE_1__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(x, 'float32'));
        const b = (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_3__.sqrt)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_4__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_5__.scalar)(1), a));
        return (0,_ops_neg__WEBPACK_IMPORTED_MODULE_6__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)(dy, b));
      }
    };
  }
};

/***/ }),

/***/ 20000:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acoshGradConfig": () => (/* binding */ acoshGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/sqrt */ 20536);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ 55939);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const acoshGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Acosh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const a = (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_1__.sqrt)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32')), 1));
        return (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(dy, a);
      }
    };
  }
};

/***/ }),

/***/ 22090:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addNGradConfig": () => (/* binding */ addNGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const addNGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.AddN,
  saveAllInputs: true,
  gradFunc: (dy, saved) => {
    const ders = {};
    saved.forEach((_, i) => {
      ders[i] = () => dy.clone();
    });
    return ders;
  }
};

/***/ }),

/***/ 79327:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addGradConfig": () => (/* binding */ addGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const addGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Add,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(a.shape, b.shape);
    const derA = () => {
      let res = dy;
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(a.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, a.shape);
    };
    const derB = () => {
      let res = dy;
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(b.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, b.shape);
    };
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 96991:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMaxGradConfig": () => (/* binding */ argMaxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const argMaxGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ArgMax,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(x)
    };
  }
};

/***/ }),

/***/ 1187:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMinGradConfig": () => (/* binding */ argMinGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const argMinGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ArgMin,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(x)
    };
  }
};

/***/ }),

/***/ 36442:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinGradConfig": () => (/* binding */ asinGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sqrt */ 20536);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ 55939);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const asinGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Asin,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_2__.sqrt)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_4__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_5__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_6__.cast)(x, 'float32')))))
    };
  }
};

/***/ }),

/***/ 48542:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinhGradConfig": () => (/* binding */ asinhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ 97416);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/sqrt */ 20536);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ 89759);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const asinhGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Asinh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const a = (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_1__.sqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_5__.cast)(x, 'float32'))));
        return (0,_ops_div__WEBPACK_IMPORTED_MODULE_6__.div)(dy, a);
      }
    };
  }
};

/***/ }),

/***/ 93488:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan2GradConfig": () => (/* binding */ atan2GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ 97416);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const atan2GradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Atan2,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
    const derA = () => {
      const d = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(a), (0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(b));
      let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(b, d));
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, a.shape);
    };
    const derB = () => {
      const d = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(a), (0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(b));
      let res = (0,_ops_neg__WEBPACK_IMPORTED_MODULE_8__.neg)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(a, d)));
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, b.shape);
    };
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 69908:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanGradConfig": () => (/* binding */ atanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ 97416);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ 89759);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const atanGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Atan,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32')), 1))
    };
  }
};

/***/ }),

/***/ 24240:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanhGradConfig": () => (/* binding */ atanhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ 55939);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const atanhGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Atanh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_5__.cast)(x, 'float32'))))
    };
  }
};

/***/ }),

/***/ 77431:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3DGradConfig": () => (/* binding */ avgPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_avg_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/avg_pool_3d_grad */ 5808);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const avgPool3DGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.AvgPool3D,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      filterSize,
      strides,
      pad,
      dimRoundingMode
    } = attrs;
    return {
      x: () => (0,_ops_avg_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__.avgPool3dGrad)(dy, x, filterSize, strides, pad, dimRoundingMode)
    };
  }
};

/***/ }),

/***/ 23429:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPoolGradConfig": () => (/* binding */ avgPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_avg_pool_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/avg_pool_grad */ 98251);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const avgPoolGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.AvgPool,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      filterSize,
      strides,
      pad
    } = attrs;
    return {
      x: () => (0,_ops_avg_pool_grad__WEBPACK_IMPORTED_MODULE_1__.avgPoolGrad)(dy, x, filterSize, strides, pad)
    };
  }
};

/***/ }),

/***/ 48506:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchMatMulGradConfig": () => (/* binding */ batchMatMulGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mat_mul */ 44946);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const batchMatMulGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.BatchMatMul,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved, attrs) => {
    const [a, b] = saved;
    const {
      transposeA,
      transposeB
    } = attrs;
    if (!transposeA && !transposeB) {
      return {
        a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, b, false, true),
        b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(a, dy, true, false)
      };
    } else if (!transposeA && transposeB) {
      return {
        a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, b, false, false),
        b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, a, true, false)
      };
    } else if (transposeA && !transposeB) {
      return {
        a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(b, dy, false, true),
        b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(a, dy, false, false)
      };
    } else {
      return {
        a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(b, dy, true, true),
        b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, a, true, true)
      };
    }
  }
};

/***/ }),

/***/ 73731:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchToSpaceNDGradConfig": () => (/* binding */ batchToSpaceNDGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/space_to_batch_nd */ 23243);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const batchToSpaceNDGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.BatchToSpaceND,
  gradFunc: (dy, saved, attrs) => {
    const {
      blockShape,
      crops
    } = attrs;
    return {
      x: () => (0,_ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__.spaceToBatchND)(dy, blockShape, crops)
    };
  }
};

/***/ }),

/***/ 64314:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastToGradConfig": () => (/* binding */ broadcastToGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const broadcastToGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.BroadcastTo,
  gradFunc: (dy, saved, attrs) => {
    const broadCastToAttrs = attrs;
    const inputShape = broadCastToAttrs.inputShape;
    const outputShape = broadCastToAttrs.shape;
    const reps = Array.from(outputShape);
    for (let i = inputShape.length - 1; i >= 0; i--) {
      if (inputShape[i] === outputShape[i]) {
        reps[i] = 1;
      } else if (inputShape[i] !== 1) {
        throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);
      }
    }
    const axes = [];
    for (let i = 0; i < reps.length; i++) {
      if (reps[i] > 1) {
        axes.push(i);
      }
    }
    return {
      x: () => (0,_ops_sum__WEBPACK_IMPORTED_MODULE_1__.sum)(dy, axes, true /* keepDims */)
    };
  }
};

/***/ }),

/***/ 70849:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "castGradConfig": () => (/* binding */ castGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const castGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cast,
  gradFunc: dy => {
    return {
      x: () => dy.clone()
    };
  }
};

/***/ }),

/***/ 63987:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceilGradConfig": () => (/* binding */ ceilGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ceilGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Ceil,
  gradFunc: dy => {
    // TODO(manrajgrover): Return null for gradients when backprop supports it.
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 46903:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clipByValueGradConfig": () => (/* binding */ clipByValueGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/greater_equal */ 67383);
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/less_equal */ 86845);
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/logical_and */ 60385);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/where */ 9214);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const clipByValueGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ClipByValue,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      clipValueMin,
      clipValueMax
    } = attrs;
    return {
      x: () => (0,_ops_where__WEBPACK_IMPORTED_MODULE_1__.where)((0,_ops_logical_and__WEBPACK_IMPORTED_MODULE_2__.logicalAnd)((0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__.greaterEqual)(x, clipValueMin), (0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_4__.lessEqual)(x, clipValueMax)), dy, (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__.zerosLike)(dy))
    };
  }
};

/***/ }),

/***/ 3627:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ComplexAbs_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complexAbsGradConfig": () => (/* binding */ complexAbsGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _Abs_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Abs_grad */ 52783);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const complexAbsGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ComplexAbs,
  inputsToSave: ['x'],
  gradFunc: _Abs_grad__WEBPACK_IMPORTED_MODULE_1__.absGradConfig.gradFunc
};

/***/ }),

/***/ 16245:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatGradConfig": () => (/* binding */ concatGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/split */ 77334);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const concatGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Concat,
  saveAllInputs: true,
  gradFunc: (dy, saved, attrs) => {
    const shapes = saved.map(t => t.shape);
    const {
      axis
    } = attrs;
    const $axis = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, saved[0].shape)[0];
    const sizeSplits = shapes.map(s => s[$axis]);
    const derTensors = (0,_ops_split__WEBPACK_IMPORTED_MODULE_2__.split)(dy, sizeSplits, $axis);
    return derTensors.map(t => () => t);
  }
};

/***/ }),

/***/ 92783:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropInputGradConfig": () => (/* binding */ conv2DBackpropInputGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/conv2d */ 54505);
/* harmony import */ var _ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv2d_backprop_filter */ 90561);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const conv2DBackpropInputGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropInput,
  inputsToSave: ['dy', 'filter'],
  gradFunc: (ddx, saved, attrs) => {
    const [dy, filter] = saved;
    const {
      strides,
      pad,
      dataFormat,
      dimRoundingMode
    } = attrs;
    return {
      dy: () => (0,_ops_conv2d__WEBPACK_IMPORTED_MODULE_1__.conv2d)(ddx, filter, strides, pad, dataFormat, 1 /* dilations */, dimRoundingMode),
      filter: () => (0,_ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_2__.conv2DBackpropFilter)(ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode)
    };
  }
};

/***/ }),

/***/ 90922:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DGradConfig": () => (/* binding */ conv2DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/conv2d_backprop_filter */ 90561);
/* harmony import */ var _ops_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/conv2d_backprop_input */ 55233);
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv_util */ 15357);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const conv2DGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Conv2D,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const [x4D, $filter] = saved;
    const {
      dilations,
      strides,
      pad,
      dataFormat
    } = attrs;
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.tupleValuesAreOne(dilations), () => 'Error in gradient of conv2D: dilation rates greater than 1 ' + `are not yet supported in gradients. Got dilations '${dilations}'`);
    return {
      x: () => (0,_ops_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_3__.conv2DBackpropInput)(x4D.shape, dy, $filter, strides, pad, dataFormat),
      filter: () => (0,_ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__.conv2DBackpropFilter)(x4D, dy, $filter.shape, strides, pad, dataFormat)
    };
  }
};

/***/ }),

/***/ 67205:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DGradConfig": () => (/* binding */ conv3DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_conv3d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/conv3d_backprop_filter */ 76775);
/* harmony import */ var _ops_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/conv3d_backprop_input */ 99765);
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv_util */ 15357);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const conv3DGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Conv3D,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const {
      dilations,
      strides,
      pad
    } = attrs;
    _util__WEBPACK_IMPORTED_MODULE_1__.assert((0,_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.tupleValuesAreOne)(dilations), () => 'Error in gradient of conv3D: dilation rates greater than 1 are ' + `not yet supported in gradients. Got dilations '${dilations}'`);
    const [x5D, $filter] = saved;
    return {
      x: () => (0,_ops_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_3__.conv3DBackpropInput)(x5D.shape, dy, $filter, strides, pad),
      filter: () => (0,_ops_conv3d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__.conv3DBackpropFilter)(x5D, dy, $filter.shape, strides, pad)
    };
  }
};

/***/ }),

/***/ 48892:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosGradConfig": () => (/* binding */ cosGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_sin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sin */ 32942);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const cosGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cos,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_neg__WEBPACK_IMPORTED_MODULE_2__.neg)((0,_ops_sin__WEBPACK_IMPORTED_MODULE_3__.sin)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32'))), dy)
    };
  }
};

/***/ }),

/***/ 82012:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "coshGradConfig": () => (/* binding */ coshGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_sinh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sinh */ 71097);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const coshGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cosh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_sinh__WEBPACK_IMPORTED_MODULE_2__.sinh)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32')), dy)
    };
  }
};

/***/ }),

/***/ 62779:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumsumGradConfig": () => (/* binding */ cumsumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ 47642);
/* harmony import */ var _ops_cumsum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cumsum */ 42185);
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/transpose */ 62152);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const cumsumGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cumsum,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      axis,
      exclusive,
      reverse
    } = attrs;
    return {
      x: () => {
        const permutation = (0,_ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.getAxesPermutation)([axis], x.rank);
        let out = (0,_ops_cumsum__WEBPACK_IMPORTED_MODULE_2__.cumsum)(dy, axis, exclusive, !reverse);
        if (permutation != null) {
          out = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)(out, permutation);
        }
        return out;
      }
    };
  }
};

/***/ }),

/***/ 97562:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeGradConfig": () => (/* binding */ depthwiseConv2dNativeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv_util */ 15357);
/* harmony import */ var _ops_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/depthwise_conv2d_native_backprop_filter */ 45309);
/* harmony import */ var _ops_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/depthwise_conv2d_native_backprop_input */ 83672);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const depthwiseConv2dNativeGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNative,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const {
      dilations,
      strides,
      pad,
      dimRoundingMode
    } = attrs;
    const $dilations = dilations == null ? [1, 1] : dilations;
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${$dilations}'`);
    const [x, filter] = saved;
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` + `rank 4, but got rank ${x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` + `rank 4, but got rank ${filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` + `channels (${x.shape[3]}) must match the inChannels dimension ` + `in filter ${filter.shape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' + `dilations must be  1. Got strides ${strides} and dilations ` + `'${$dilations}'.`);
    _ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);
    return {
      x: () => (0,_ops_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_3__.depthwiseConv2dNativeBackpropInput)(x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),
      filter: () => (0,_ops_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_4__.depthwiseConv2dNativeBackpropFilter)(x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode)
    };
  }
};

/***/ }),

/***/ 41085:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dilation2dGradConfig": () => (/* binding */ dilation2dGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ 9617);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const dilation2dGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.Dilation2D,
  inputsToSave: ['x', 'filter'],
  gradFunc: (dy, saved, attrs) => {
    const [x, filter] = saved;
    const inputInputs = {
      x,
      filter,
      dy
    };
    const filterInputs = {
      x,
      filter,
      dy
    };
    return {
      x: () => _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.Dilation2DBackpropInput, inputInputs, attrs),
      filter: () => _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.Dilation2DBackpropFilter, filterInputs, attrs)
    };
  }
};

/***/ }),

/***/ 52312:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eluGradConfig": () => (/* binding */ eluGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ 9617);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const eluGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.Elu,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;
    const inputs = {
      dy,
      y
    };
    return {
      x: () => _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.EluGrad, inputs)
    };
  }
};

/***/ }),

/***/ 46631:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "erfGradConfig": () => (/* binding */ erfGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/exp */ 70825);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ 89759);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const erfGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Erf,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    const a = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_exp__WEBPACK_IMPORTED_MODULE_2__.exp)((0,_ops_neg__WEBPACK_IMPORTED_MODULE_3__.neg)((0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)(x))), 2 / Math.sqrt(Math.PI));
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, a)
    };
  }
};

/***/ }),

/***/ 99695:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expGradConfig": () => (/* binding */ expGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const expGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Exp,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, y)
    };
  }
};

/***/ }),

/***/ 80424:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ExpandDims_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expandDimsGradConfig": () => (/* binding */ expandDimsGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const expandDimsGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ExpandDims,
  inputsToSave: ['input'],
  gradFunc: (dy, saved) => {
    const [input] = saved;
    return {
      input: () => (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, input.shape)
    };
  }
};

/***/ }),

/***/ 76148:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expm1GradConfig": () => (/* binding */ expm1GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/exp */ 70825);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const expm1GradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Expm1,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_exp__WEBPACK_IMPORTED_MODULE_2__.exp)(x))
    };
  }
};

/***/ }),

/***/ 79679:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorDivGradConfig": () => (/* binding */ floorDivGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const floorDivGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.FloorDiv,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
    const derA = () => {
      const res = (0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(b, 'float32'));
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
      if (reduceAxes.length > 0) {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), a.shape);
      }
      return res;
    };
    const derB = () => {
      let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(a, 'float32'));
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), b.shape);
      }
      const tmp = (0,_ops_square__WEBPACK_IMPORTED_MODULE_7__.square)(b);
      return (0,_ops_neg__WEBPACK_IMPORTED_MODULE_8__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(res, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(tmp, 'float32')));
    };
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 90595:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorGradConfig": () => (/* binding */ floorGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const floorGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Floor,
  gradFunc: dy => {
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 37709:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fusedBatchNormGradConfig": () => (/* binding */ fusedBatchNormGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/add */ 97416);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_rsqrt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/rsqrt */ 27303);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ 55939);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/sum */ 85755);
/* harmony import */ var _ops_tile__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/tile */ 98763);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










const fusedBatchNormGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.FusedBatchNorm,
  inputsToSave: ['x', 'mean', 'variance', 'scale'],
  gradFunc: (dy, saved, attrs) => {
    const {
      varianceEpsilon
    } = attrs;
    const [x, mean, variance, scale] = saved;
    const scaleValue = scale == null ? (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(1) : scale;
    const reductionAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.getReductionAxes)(mean.shape, x.shape);
    const tileShape = [];
    if (mean.rank === 1) {
      for (let i = 0; i < x.shape.length - 1; ++i) {
        tileShape.push(x.shape[i]);
      }
      tileShape.push(1);
    }
    const xMinusMean = (0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(x, mean);
    const dyTimesScaleValue = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, scaleValue);
    const oneOverSqrtVariance = (0,_ops_rsqrt__WEBPACK_IMPORTED_MODULE_5__.rsqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)(variance, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(varianceEpsilon)));
    const minusHalfRCube = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(-0.5));
    const derX = () => {
      if (mean.rank === 1) {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_tile__WEBPACK_IMPORTED_MODULE_8__.tile)((0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);
      } else {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, oneOverSqrtVariance), scaleValue), x.shape);
      }
    };
    const derMean = () => {
      let meanDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(oneOverSqrtVariance, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(-1)), dyTimesScaleValue);
      if (mean.rank === 1) {
        meanDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(meanDer, reductionAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(meanDer, mean.shape);
    };
    const derVariance = () => {
      let varianceDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(minusHalfRCube, xMinusMean), dyTimesScaleValue);
      if (mean.rank === 1) {
        varianceDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(varianceDer, reductionAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(varianceDer, mean.shape);
    };
    const derScale = () => {
      const xMinusMean2TimesRsqrt = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(xMinusMean, oneOverSqrtVariance);
      let scaleDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, xMinusMean2TimesRsqrt);
      if (mean.rank === 1) {
        scaleDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(scaleDer, reductionAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(scaleDer, mean.shape);
    };
    const derOffset = () => {
      let offsetDer = dy;
      if (mean.rank === 1) {
        offsetDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(offsetDer, reductionAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(offsetDer, mean.shape);
    };
    return {
      x: derX,
      mean: derMean,
      variance: derVariance,
      scale: derScale,
      offset: derOffset
    };
  }
};

/***/ }),

/***/ 79898:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherGradConfig": () => (/* binding */ gatherGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/axis_util */ 47642);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/transpose */ 62152);
/* harmony import */ var _ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/unsorted_segment_sum */ 68182);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const gatherGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.GatherV2,
  inputsToSave: ['x', 'indices'],
  gradFunc: (dy, saved, attrs) => {
    const [x, indices] = saved;
    const {
      axis
    } = attrs;
    const parsedAxis = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, x.shape)[0];
    const derX = () => {
      const paramsShape = x.shape;
      const indicesSize = indices.size;
      const outerShape = paramsShape.slice(0, parsedAxis);
      const outerDims = outerShape.length;
      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);
      const innerDims = innerShape.length;
      const outerAxesIndices = arrayRange(0, outerDims);
      const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);
      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);
      const values = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(dy, valuesShape);
      const reshapedIndices = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(indices, [indicesSize]);
      const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);
      const valuesTranspose = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)(values, transposeDims);
      let paramsGrad = (0,_ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_4__.unsortedSegmentSum)(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);
      const invertTransposeDims = (0,_ops_axis_util__WEBPACK_IMPORTED_MODULE_5__.getUndoAxesPermutation)(transposeDims);
      paramsGrad = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)(paramsGrad, invertTransposeDims);
      return paramsGrad;
    };
    return {
      x: derX,
      indices: () => indices
    };
  }
};
function arrayRange(start, stop) {
  const result = [];
  for (let i = start; i < stop; ++i) {
    result.push(i);
  }
  return result;
}
function arrayConcat(arrays) {
  const result = [];
  for (let i = 0; i < arrays.length; ++i) {
    for (let j = 0; j < arrays[i].length; ++j) {
      result.push(arrays[i][j]);
    }
  }
  return result;
}

/***/ }),

/***/ 60535:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greaterEqualGradConfig": () => (/* binding */ greaterEqualGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const greaterEqualGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.GreaterEqual,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    return {
      a: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(a),
      b: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(b)
    };
  }
};

/***/ }),

/***/ 85876:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identityGradConfig": () => (/* binding */ identityGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ 8993);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const identityGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Identity,
  gradFunc: dy => {
    return {
      x: () => (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)(dy, 'float32')
    };
  }
};

/***/ }),

/***/ 95619:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFiniteGradConfig": () => (/* binding */ isFiniteGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isFiniteGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.IsFinite,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 76330:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInfGradConfig": () => (/* binding */ isInfGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isInfGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.IsInf,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 49754:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNanGradConfig": () => (/* binding */ isNanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isNanGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.IsNan,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 33311:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lrnGradConfig": () => (/* binding */ lrnGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_local_response_normalization_backprop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/local_response_normalization_backprop */ 50265);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const lrnGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.LRN,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [x, y] = saved;
    const {
      depthRadius,
      bias,
      alpha,
      beta
    } = attrs;
    return {
      x: () => (0,_ops_local_response_normalization_backprop__WEBPACK_IMPORTED_MODULE_1__.localResponseNormalizationBackprop)(x, y, dy, depthRadius, bias, alpha, beta)
    };
  }
};

/***/ }),

/***/ 61155:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LeakyRelu_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leakyReluGradConfig": () => (/* binding */ leakyReluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/greater */ 74182);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/where */ 9214);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const leakyReluGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.LeakyRelu,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      alpha
    } = attrs;
    const mask = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(x, 0);
    // Returns `gradients * (features > 0) + alpha * gradients * (features <=
    // 0)`.
    return {
      x: () => (0,_ops_where__WEBPACK_IMPORTED_MODULE_2__.where)(mask, dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, alpha))
    };
  }
};

/***/ }),

/***/ 93004:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log1pGradConfig": () => (/* binding */ log1pGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ 97416);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const log1pGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Log1p,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(x, 1))
    };
  }
};

/***/ }),

/***/ 88755:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logSoftmaxGradConfig": () => (/* binding */ logSoftmaxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/exp */ 70825);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ 55939);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const logSoftmaxGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.LogSoftmax,
  inputsToSave: [],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [value] = saved;
    const {
      axis
    } = attrs;
    return {
      logits: () => {
        const keepDims = true;
        const softmax = (0,_ops_exp__WEBPACK_IMPORTED_MODULE_1__.exp)(value);
        return (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_4__.sum)(dy, axis, keepDims), softmax));
      }
    };
  }
};

/***/ }),

/***/ 1979:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logGradConfig": () => (/* binding */ logGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const logGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Log,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(x, 'float32'))
    };
  }
};

/***/ }),

/***/ 1993:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3DGradConfig": () => (/* binding */ maxPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_max_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/max_pool_3d_grad */ 15377);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const maxPool3DGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.MaxPool3D,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [x, y] = saved;
    const {
      filterSize,
      strides,
      pad,
      dimRoundingMode
    } = attrs;
    return {
      x: () => (0,_ops_max_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__.maxPool3dGrad)(dy, x, y, filterSize, strides, pad, dimRoundingMode)
    };
  }
};

/***/ }),

/***/ 29005:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolGradConfig": () => (/* binding */ maxPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_max_pool_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/max_pool_grad */ 64880);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const maxPoolGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.MaxPool,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [x, y] = saved;
    const {
      filterSize,
      strides,
      pad
    } = attrs;
    return {
      x: () => (0,_ops_max_pool_grad__WEBPACK_IMPORTED_MODULE_1__.maxPoolGrad)(dy, x, y, filterSize, strides, pad)
    };
  }
};

/***/ }),

/***/ 25922:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxGradConfig": () => (/* binding */ maxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/* harmony import */ var _min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./min_max_grad_util */ 76328);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const maxGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Max,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const maxAttrs = attrs;
    const {
      reductionIndices
    } = maxAttrs;
    const x = saved[0];
    const y = saved[1];
    const origAxes = _util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam(reductionIndices, x.shape);
    const maxGrad = (0,_min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__.gradForMinAndMax)(dy, y, x, origAxes);
    return {
      x: () => {
        return maxGrad['x']();
      }
    };
  }
};

/***/ }),

/***/ 58519:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maximumGradConfig": () => (/* binding */ maximumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/greater_equal */ 67383);
/* harmony import */ var _ops_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/less */ 82292);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const maximumGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Maximum,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const derA = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__.greaterEqual)(a, b), 'float32'));
    const derB = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_less__WEBPACK_IMPORTED_MODULE_4__.less)(a, b), 'float32'));
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 66714:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Mean_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "meanGradConfig": () => (/* binding */ meanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/axis_util */ 47642);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/ones */ 55525);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const meanGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Mean,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      axis
    } = attrs;
    const axes = _util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam(axis, x.shape);
    const shapes = (0,_ops_axis_util__WEBPACK_IMPORTED_MODULE_2__.computeOutAndReduceShapes)(x.shape, axes);
    const reduceShape = shapes[1];
    const reduceSize = _util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape(reduceShape);
    const derX = () => {
      const expandedDyShape = x.shape.slice();
      axes.forEach(axis => {
        expandedDyShape[axis] = 1;
      });
      const expandedDy = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(dy, expandedDyShape);
      const res = (0,_ops_div__WEBPACK_IMPORTED_MODULE_4__.div)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(expandedDy, (0,_ops_ones__WEBPACK_IMPORTED_MODULE_6__.ones)(x.shape, 'float32')), reduceSize);
      return res;
    };
    return {
      x: derX
    };
  }
};

/***/ }),

/***/ 36236:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minGradConfig": () => (/* binding */ minGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/* harmony import */ var _min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./min_max_grad_util */ 76328);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const minGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Min,
  inputsToSave: ['x'],
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const minAttrs = attrs;
    const {
      axis
    } = minAttrs;
    const [x, y] = saved;
    const origAxes = _util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam(axis, x.shape);
    const minGrad = (0,_min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__.gradForMinAndMax)(dy, y, x, origAxes);
    return {
      x: () => {
        return minGrad['x']();
      }
    };
  }
};

/***/ }),

/***/ 74019:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minimumGradConfig": () => (/* binding */ minimumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/greater */ 74182);
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/less_equal */ 86845);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const minimumGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Minimum,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const derA = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_3__.lessEqual)(a, b), 'float32'));
    const derB = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_greater__WEBPACK_IMPORTED_MODULE_4__.greater)(a, b), 'float32'));
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 72251:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mirrorPadGradConfig": () => (/* binding */ mirrorPadGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice */ 59370);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const mirrorPadGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.MirrorPad,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    // Pad introduces values around the original tensor, so the gradient
    // slices the original shape out of the gradient.
    const x = saved[0];
    const {
      paddings
    } = attrs;
    const begin = paddings.map(p => p[0]);
    return {
      x: () => (0,_ops_slice__WEBPACK_IMPORTED_MODULE_1__.slice)(dy, begin, x.shape)
    };
  }
};

/***/ }),

/***/ 18509:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "modGradConfig": () => (/* binding */ modGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_floor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/floor */ 86954);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const modGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Mod,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
    const derA = () => {
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
      if (reduceAxes.length > 0) {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(dy, reduceAxes), a.shape);
      }
      return dy;
    };
    const derB = () => {
      const res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_neg__WEBPACK_IMPORTED_MODULE_5__.neg)((0,_ops_floor__WEBPACK_IMPORTED_MODULE_6__.floor)((0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)(a, b))));
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
      if (reduceAxes.length > 0) {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(res, reduceAxes), b.shape);
      }
      return res;
    };
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 98354:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiplyGradConfig": () => (/* binding */ multiplyGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const multiplyGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Multiply,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
    const derA = () => {
      const res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(b, 'float32'));
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
      if (reduceAxes.length > 0) {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), a.shape);
      }
      return res;
    };
    const derB = () => {
      const res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(a, 'float32'));
      const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
      if (reduceAxes.length > 0) {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), b.shape);
      }
      return res;
    };
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 93804:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Neg_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "negGradConfig": () => (/* binding */ negGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/neg */ 88313);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const negGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Neg,
  gradFunc: dy => {
    return {
      x: () => (0,_ops_neg__WEBPACK_IMPORTED_MODULE_1__.neg)(dy)
    };
  }
};

/***/ }),

/***/ 73776:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "oneHotGradConfig": () => (/* binding */ oneHotGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros */ 33055);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const oneHotGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.OneHot,
  inputsToSave: ['indices'],
  gradFunc: (dy, saved) => {
    const indices = saved[0];
    return {
      indices: () => (0,_ops_zeros__WEBPACK_IMPORTED_MODULE_1__.zeros)(indices.shape, 'float32')
    };
  }
};

/***/ }),

/***/ 97159:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onesLikeGradConfig": () => (/* binding */ onesLikeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const onesLikeGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.OnesLike,
  gradFunc: dy => {
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 78831:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Pack_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "packGradConfig": () => (/* binding */ packGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_unstack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/unstack */ 67353);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const packGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Pack,
  saveAllInputs: true,
  gradFunc: (dy, saved, attrs) => {
    const {
      axis
    } = attrs;
    const derTensors = (0,_ops_unstack__WEBPACK_IMPORTED_MODULE_1__.unstack)(dy, axis);
    return derTensors.map(t => () => t);
  }
};

/***/ }),

/***/ 23648:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padV2GradConfig": () => (/* binding */ padV2GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice */ 59370);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const padV2GradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.PadV2,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    // Pad introduces values around the original tensor, so the gradient
    // slices the original shape out of the gradient.
    const x = saved[0];
    const {
      paddings
    } = attrs;
    const begin = paddings.map(p => p[0]);
    return {
      x: () => (0,_ops_slice__WEBPACK_IMPORTED_MODULE_1__.slice)(dy, begin, x.shape)
    };
  }
};

/***/ }),

/***/ 9716:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "powGradConfig": () => (/* binding */ powGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/greater */ 74182);
/* harmony import */ var _ops_log__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ops/log */ 72601);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/pow */ 40178);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sub */ 55939);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/sum */ 85755);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/where */ 9214);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













const powGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Pow,
  inputsToSave: ['a', 'b'],
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [a, b, y] = saved;
    const base = a;
    const exp = b;
    const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(base.shape, exp.shape);
    const derBase = () => {
      const expFloat = (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(exp, 'float32');
      let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(expFloat, (0,_ops_pow__WEBPACK_IMPORTED_MODULE_4__.pow)(base, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_5__.sub)(expFloat, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_6__.scalar)(1)))));
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(base.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_7__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(res, base.shape);
    };
    const derExp = () => {
      const condition = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_9__.greater)(base, 0);
      const logBase = (0,_ops_where__WEBPACK_IMPORTED_MODULE_10__.where)(condition, (0,_ops_log__WEBPACK_IMPORTED_MODULE_11__.log)(base), (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_12__.zerosLike)(base));
      let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(y, logBase));
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(exp.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_7__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(res, exp.shape);
    };
    return {
      a: derBase,
      b: derExp
    };
  }
};

/***/ }),

/***/ 54692:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "preluGradConfig": () => (/* binding */ preluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/greater */ 74182);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/sum */ 85755);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/where */ 9214);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const preluGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Prelu,
  inputsToSave: ['x', 'alpha'],
  gradFunc: (dy, saved) => {
    const [x, alpha] = saved;
    const mask = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(x, 0);
    return {
      x: () => (0,_ops_where__WEBPACK_IMPORTED_MODULE_2__.where)(mask, dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, alpha)),
      alpha: () => {
        let res = (0,_ops_where__WEBPACK_IMPORTED_MODULE_2__.where)(mask, (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__.zerosLike)(dy), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, x));
        const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_5__.getReductionAxes)(alpha.shape, dy.shape);
        if (reduceAxes.length > 0) {
          res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(res, reduceAxes);
        }
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, alpha.shape);
      }
    };
  }
};

/***/ }),

/***/ 96099:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Prod_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prodGradConfig": () => (/* binding */ prodGradConfig)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base */ 47642);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cumprod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cumprod */ 69412);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/transpose */ 62152);
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






// Gradient for product operation on a single axis.
function prodGradFn_(x, dy, axis) {
  // The gradient tensor (dy) has a set of axes removed, so we create re-shaped
  // versions (of size 1) for the removed axis; this supports broadcasting over
  // those dimensions.
  const expandedYShape = x.shape.slice();
  expandedYShape[axis] = 1;
  // The actual gradient computation.
  const expandedDy = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(dy, expandedYShape);
  const xCumProd = (0,_ops_cumprod__WEBPACK_IMPORTED_MODULE_1__.cumprod)(x, axis, true, false);
  const xCumRevProd = (0,_ops_cumprod__WEBPACK_IMPORTED_MODULE_1__.cumprod)(x, axis, true, true);
  const dx = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(xCumProd, xCumRevProd);
  return (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(expandedDy, dx);
}
// Support gradients when the product is done on many axes at once.
// This done py pushing all the axes on which the product is applied into a
// single axis.
function prodsGradFn_(x, dy, axis) {
  // Move all axes for doing prod over to the end of the tensor.
  const xRank = x.shape.length;
  const finalProdAxis = xRank - axis.length;
  const xPermutation = _base__WEBPACK_IMPORTED_MODULE_3__.getAxesPermutation(axis, xRank);
  let permutedX = x;
  if (xPermutation != null) {
    permutedX = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_4__.transpose)(x, xPermutation);
  }
  // Reshape all the prod dimensions into a single one, and do compute prod
  // gradients on that.
  const newShape = permutedX.shape.slice();
  const removedShape = newShape.splice(xRank - axis.length, axis.length);
  const endPartShape = removedShape.reduce((p, c) => p * c, 1);
  newShape.push(endPartShape);
  const reshapedPermutedX = permutedX.reshape(newShape);
  let prodGrad = prodGradFn_(reshapedPermutedX, dy, finalProdAxis);
  // Undo the re-shaping now we have the dx vector, and permute back to
  // original axes order.
  prodGrad = prodGrad.reshape(permutedX.shape);
  if (xPermutation != null) {
    const undoPermutation = _base__WEBPACK_IMPORTED_MODULE_3__.getUndoAxesPermutation(xPermutation);
    prodGrad = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_4__.transpose)(prodGrad, undoPermutation);
  }
  return prodGrad;
}
// Running example:
// [
//   [
//     [3.0, 4.0],
//     [5.0, 6.0],
//     [7.0, 8.0]
//   ],
//   [
//     [3.0, 5.0],
//     [0.0, 6.0],
//     [5.0, 6.0]
//   ]
// ]
//
const prodGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_5__.Prod,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      axis
    } = attrs;
    let axisArr = [];
    if (axis === undefined || axis === null) {
      axisArr = x.shape.map((_, i) => i);
    } else if (typeof axis === 'number') {
      axisArr = [axis];
    } else {
      axisArr = axis;
    }
    return {
      x: () => prodsGradFn_(x, dy, axisArr)
    };
  }
};

/***/ }),

/***/ 22131:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/RealDiv_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divGradConfig": () => (/* binding */ divGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const divGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.RealDiv,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(a.shape, b.shape);
    const derA = () => {
      const res = (0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(b, 'float32'));
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(a.shape, outShape);
      if (reduceAxes.length > 0) {
        return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), a.shape);
      }
      return res;
    };
    const derB = () => {
      let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(a, 'float32'));
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(b.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), b.shape);
      }
      const tmp = (0,_ops_square__WEBPACK_IMPORTED_MODULE_7__.square)(b);
      return (0,_ops_neg__WEBPACK_IMPORTED_MODULE_8__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(res, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(tmp, 'float32')));
    };
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 38851:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reciprocalGradConfig": () => (/* binding */ reciprocalGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ 89759);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const reciprocalGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Reciprocal,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_neg__WEBPACK_IMPORTED_MODULE_2__.neg)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(x)))
    };
  }
};

/***/ }),

/***/ 84277:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu6GradConfig": () => (/* binding */ relu6GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/less_equal */ 86845);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/step */ 75842);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const relu6GradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Relu6,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    const mask = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_2__.lessEqual)(x, 6), (0,_ops_step__WEBPACK_IMPORTED_MODULE_3__.step)(x));
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(mask, 'float32'))
    };
  }
};

/***/ }),

/***/ 22413:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reluGradConfig": () => (/* binding */ reluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/step */ 75842);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const reluGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Relu,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_step__WEBPACK_IMPORTED_MODULE_3__.step)(x), 'float32'))
    };
  }
};

/***/ }),

/***/ 86401:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reshapeGradConfig": () => (/* binding */ reshapeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const reshapeGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Reshape,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, x.shape)
    };
  }
};

/***/ }),

/***/ 8010:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeBilinearGradConfig": () => (/* binding */ resizeBilinearGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ 9617);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const resizeBilinearGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinear,
  inputsToSave: ['images'],
  gradFunc: (dy, saved, attrs) => {
    const [images] = saved;
    const inputs = {
      dy,
      images
    };
    const imagesDer = () =>
    // tslint:disable-next-line: no-unnecessary-type-assertion
    _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinearGrad, inputs, attrs);
    return {
      images: imagesDer
    };
  }
};

/***/ }),

/***/ 34486:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeNearestNeighborGradConfig": () => (/* binding */ resizeNearestNeighborGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ 9617);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const resizeNearestNeighborGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighbor,
  inputsToSave: ['images'],
  gradFunc: (dy, saved, attrs) => {
    const [images] = saved;
    const inputs = {
      dy,
      images
    };
    const imagesDer = () =>
    // tslint:disable-next-line: no-unnecessary-type-assertion
    _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighborGrad, inputs, attrs);
    return {
      images: imagesDer
    };
  }
};

/***/ }),

/***/ 60409:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverseGradConfig": () => (/* binding */ reverseGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_reverse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reverse */ 78522);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const reverseGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Reverse,
  gradFunc: (dy, saved, attrs) => {
    const {
      dims
    } = attrs;
    const axes = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(dims, dy.shape);
    return {
      x: () => (0,_ops_reverse__WEBPACK_IMPORTED_MODULE_2__.reverse)(dy, axes)
    };
  }
};

/***/ }),

/***/ 12271:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "roundGradConfig": () => (/* binding */ roundGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const roundGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Round,
  gradFunc: dy => {
    // TODO(nsthorat): Let gradients be null for cases where we want to stop
    // backpropgation.
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 32497:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rsqrtGradConfig": () => (/* binding */ rsqrtGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/pow */ 40178);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const rsqrtGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Rsqrt,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_neg__WEBPACK_IMPORTED_MODULE_1__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)((0,_ops_pow__WEBPACK_IMPORTED_MODULE_4__.pow)(x, 1.5), 2)))
    };
  }
};

/***/ }),

/***/ 29308:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Select_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selectGradConfig": () => (/* binding */ selectGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_logical_not__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/logical_not */ 44040);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const selectGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Select,
  inputsToSave: ['condition'],
  gradFunc: (dy, saved) => {
    const [condition] = saved;
    return {
      // TODO(julianoks): Return null for condition gradient
      // when backprop supports it.
      condition: () => (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)((0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__.zerosLike)(condition), 'float32'),
      t: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)(condition, dy.dtype)),
      e: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)((0,_ops_logical_not__WEBPACK_IMPORTED_MODULE_4__.logicalNot)(condition), dy.dtype))
    };
  }
};

/***/ }),

/***/ 5339:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "seluGradConfig": () => (/* binding */ seluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/exp */ 70825);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/greater */ 74182);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_selu_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/selu_util */ 60550);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/where */ 9214);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const seluGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Selu,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => {
        const mask = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(x, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_2__.scalar)(0));
        const scaleAlpha = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_2__.scalar)(_ops_selu_util__WEBPACK_IMPORTED_MODULE_3__.SELU_SCALEALPHA);
        const scale = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_2__.scalar)(_ops_selu_util__WEBPACK_IMPORTED_MODULE_3__.SELU_SCALE);
        const greaterThanZeroDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, scale);
        const lessEqualZeroDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, scaleAlpha), (0,_ops_exp__WEBPACK_IMPORTED_MODULE_5__.exp)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_6__.cast)(x, 'float32')));
        return (0,_ops_where__WEBPACK_IMPORTED_MODULE_7__.where)(mask, greaterThanZeroDer, lessEqualZeroDer);
      }
    };
  }
};

/***/ }),

/***/ 12942:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sigmoidGradConfig": () => (/* binding */ sigmoidGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ 55939);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sigmoidGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sigmoid,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(y, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), y)))
    };
  }
};

/***/ }),

/***/ 13926:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "signGradConfig": () => (/* binding */ signGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const signGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sign,
  gradFunc: dy => {
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 6684:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinGradConfig": () => (/* binding */ sinGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_cos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cos */ 11544);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sinGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sin,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_cos__WEBPACK_IMPORTED_MODULE_2__.cos)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32')), dy)
    };
  }
};

/***/ }),

/***/ 82521:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinhGradConfig": () => (/* binding */ sinhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_cosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cosh */ 48477);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sinhGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sinh,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_cosh__WEBPACK_IMPORTED_MODULE_2__.cosh)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32')), dy)
    };
  }
};

/***/ }),

/***/ 96512:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sliceGradConfig": () => (/* binding */ sliceGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_pad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/pad */ 8711);
/* harmony import */ var _ops_slice_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice_util */ 15501);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const sliceGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Slice,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      begin,
      size
    } = attrs;
    const inputShape = x.shape;
    const [begin_, size_] = (0,_ops_slice_util__WEBPACK_IMPORTED_MODULE_1__.parseSliceParams)(x, begin, size);
    // Create an Nx2 padding where the first column represents how many
    // zeros are prepended (at start) for each dimension, and the second
    // column indicates how many zeros are appended (at end).
    // The number of zeros to append is the shape of the input
    // elementwise-subtracted by both the begin vector and sizes vector.
    const paddings = [];
    for (let i = 0; i < dy.rank; i++) {
      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);
    }
    return {
      x: () => (0,_ops_pad__WEBPACK_IMPORTED_MODULE_2__.pad)(dy, paddings)
    };
  }
};

/***/ }),

/***/ 45442:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softmaxGradConfig": () => (/* binding */ softmaxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ 55939);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const softmaxGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Softmax,
  outputsToSave: [true],
  gradFunc: (dy, saved, attrs) => {
    const [y] = saved;
    const {
      dim
    } = attrs;
    const keepDims = true;
    const dyTimesY = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, y);
    return {
      logits: () => (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)(dyTimesY, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(dyTimesY, [dim], keepDims), y))
    };
  }
};

/***/ }),

/***/ 16374:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softplusGradConfig": () => (/* binding */ softplusGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_sigmoid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sigmoid */ 27415);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const softplusGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Softplus,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_sigmoid__WEBPACK_IMPORTED_MODULE_2__.sigmoid)(x))
    };
  }
};

/***/ }),

/***/ 15242:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "spaceToBatchNDGradConfig": () => (/* binding */ spaceToBatchNDGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/batch_to_space_nd */ 89218);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const spaceToBatchNDGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.SpaceToBatchND,
  gradFunc: (dy, saved, attrs) => {
    const {
      blockShape,
      paddings
    } = attrs;
    return {
      x: () => (0,_ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__.batchToSpaceND)(dy, blockShape, paddings)
    };
  }
};

/***/ }),

/***/ 79955:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitVGradConfig": () => (/* binding */ splitVGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/concat */ 43614);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const splitVGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.SplitV,
  gradFunc: (dy, saved, attrs) => {
    const {
      axis
    } = attrs;
    return {
      x: () => (0,_ops_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(dy, axis)
    };
  }
};

/***/ }),

/***/ 33392:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrtGradConfig": () => (/* binding */ sqrtGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sqrt */ 20536);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const sqrtGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sqrt,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)((0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_3__.sqrt)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32')), 2))
    };
  }
};

/***/ }),

/***/ 957:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squareGradConfig": () => (/* binding */ squareGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const squareGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Square,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(x, 'float32'), 2))
    };
  }
};

/***/ }),

/***/ 21411:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squaredDifferenceGradConfig": () => (/* binding */ squaredDifferenceGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ 55939);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const squaredDifferenceGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const two = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(2);
    const derA = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(two, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(a, b)));
    const derB = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(two, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(b, a)));
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 63574:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stepGradConfig": () => (/* binding */ stepGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const stepGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Step,
  gradFunc: dy => {
    // TODO(manrajgrover): Return null for gradients when backprop supports
    // it.
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 66042:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subGradConfig": () => (/* binding */ subGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ 62551);
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/neg */ 88313);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sum */ 85755);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const subGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sub,
  inputsToSave: ['a', 'b'],
  gradFunc: (dy, saved) => {
    const [a, b] = saved;
    const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(a.shape, b.shape);
    const derA = () => {
      let res = dy;
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(a.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, a.shape);
    };
    const derB = () => {
      let res = dy;
      const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(b.shape, outShape);
      if (reduceAxes.length > 0) {
        res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
      }
      return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)((0,_ops_neg__WEBPACK_IMPORTED_MODULE_4__.neg)(res), b.shape);
    };
    return {
      a: derA,
      b: derB
    };
  }
};

/***/ }),

/***/ 8139:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sumGradConfig": () => (/* binding */ sumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/ones */ 55525);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ 80058);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const sumGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sum,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const expandedDyShape = x.shape.slice();
    const {
      axis
    } = attrs;
    const axes = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, x.shape);
    axes.forEach(axis => {
      expandedDyShape[axis] = 1;
    });
    const expandedDy = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(dy, expandedDyShape);
    const derX = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(expandedDy, (0,_ops_ones__WEBPACK_IMPORTED_MODULE_4__.ones)(x.shape, 'float32'));
    return {
      x: () => derX
    };
  }
};

/***/ }),

/***/ 87764:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanGradConfig": () => (/* binding */ tanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_cos__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cos */ 11544);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ 43724);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/square */ 89759);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const tanGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Tan,
  inputsToSave: ['x'],
  gradFunc: (dy, saved) => {
    const [x] = saved;
    return {
      x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_square__WEBPACK_IMPORTED_MODULE_2__.square)((0,_ops_cos__WEBPACK_IMPORTED_MODULE_3__.cos)(x)))
    };
  }
};

/***/ }),

/***/ 32939:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanhGradConfig": () => (/* binding */ tanhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ 89759);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ 55939);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const tanhGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Tanh,
  outputsToSave: [true],
  gradFunc: (dy, saved) => {
    const [y] = saved;
    return {
      x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)(y)), dy)
    };
  }
};

/***/ }),

/***/ 4822:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tileGradConfig": () => (/* binding */ tileGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ 97416);
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/slice */ 59370);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const tileGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Tile,
  inputsToSave: ['x'],
  gradFunc: (dy, saved, attrs) => {
    const [x] = saved;
    const {
      reps
    } = attrs;
    const derX = () => {
      let xGrad = (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(x);
      // TODO(cais): Maybe reduce memory footprint by avoiding repeated
      // slicing.
      if (x.rank === 1) {
        for (let i = 0; i < reps[0]; ++i) {
          xGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [i * x.shape[0]], [x.shape[0]]));
        }
      } else if (x.rank === 2) {
        for (let i = 0; i < reps[0]; ++i) {
          for (let j = 0; j < reps[1]; ++j) {
            xGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));
          }
        }
      } else if (x.rank === 3) {
        for (let i = 0; i < reps[0]; ++i) {
          for (let j = 0; j < reps[1]; ++j) {
            for (let k = 0; k < reps[2]; ++k) {
              xGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));
            }
          }
        }
      } else if (x.rank === 4) {
        for (let i = 0; i < reps[0]; ++i) {
          for (let j = 0; j < reps[1]; ++j) {
            for (let k = 0; k < reps[2]; ++k) {
              for (let l = 0; l < reps[3]; ++l) {
                xGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2], l * x.shape[3]], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));
              }
            }
          }
        }
      } else {
        throw new Error(`Gradient for tile operation is not implemented for rank-` + `${x.rank} tensors yet.`);
      }
      return xGrad;
    };
    return {
      x: derX
    };
  }
};

/***/ }),

/***/ 52854:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transposeGradConfig": () => (/* binding */ transposeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ 47642);
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/transpose */ 62152);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const transposeGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Transpose,
  gradFunc: (dy, saved, attrs) => {
    const transposeAttrs = attrs;
    const {
      perm
    } = transposeAttrs;
    const undoPerm = _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.getUndoAxesPermutation(perm);
    return {
      x: () => (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)(dy, undoPerm)
    };
  }
};

/***/ }),

/***/ 64468:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unpackGradConfig": () => (/* binding */ unpackGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/stack */ 3828);
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const unpackGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Unpack,
  gradFunc: (dy, saved, attrs) => {
    const unpackAttrs = attrs;
    const {
      axis
    } = unpackAttrs;
    return {
      value: () => (0,_ops_stack__WEBPACK_IMPORTED_MODULE_1__.stack)(dy, axis)
    };
  }
};

/***/ }),

/***/ 22472:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsortedSegmentSumGradConfig": () => (/* binding */ unsortedSegmentSumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_expand_dims__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/expand_dims */ 96397);
/* harmony import */ var _ops_gather__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/gather */ 86831);
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/greater_equal */ 67383);
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/logical_and */ 60385);
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/maximum */ 63309);
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/ones */ 55525);
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/scalar */ 69683);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/where */ 9214);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










const unsortedSegmentSumGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.UnsortedSegmentSum,
  inputsToSave: ['segmentIds'],
  gradFunc: (dy, saved) => {
    const [segmentIds] = saved;
    const derX = () => {
      return gatherDropNegatives(dy, segmentIds);
    };
    return {
      x: derX
    };
  }
};
function gatherDropNegatives(x, indices) {
  // Helper function for unsorted segment ops. Gathers params for
  // positive segment ids and gathers 0 for inputs with negative segment id.
  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py
  const zeroClippedIndices = (0,_ops_maximum__WEBPACK_IMPORTED_MODULE_1__.maximum)(indices, (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__.zerosLike)(indices));
  const gathered = (0,_ops_gather__WEBPACK_IMPORTED_MODULE_3__.gather)(x, zeroClippedIndices);
  let isPositive = (0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_4__.greaterEqual)(indices, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_5__.scalar)(0, 'int32'));
  const numIters = gathered.rank - isPositive.rank;
  for (let i = 0; i < numIters; ++i) {
    isPositive = (0,_ops_expand_dims__WEBPACK_IMPORTED_MODULE_6__.expandDims)(isPositive, i + 1);
  }
  isPositive = (0,_ops_logical_and__WEBPACK_IMPORTED_MODULE_7__.logicalAnd)(isPositive, (0,_ops_ones__WEBPACK_IMPORTED_MODULE_8__.ones)(gathered.shape, 'bool'));
  const zeroSlice = (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__.zerosLike)(gathered);
  return (0,_ops_where__WEBPACK_IMPORTED_MODULE_9__.where)(isPositive, gathered, zeroSlice);
}

/***/ }),

/***/ 65849:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zerosLikeGradConfig": () => (/* binding */ zerosLikeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ 66776);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const zerosLikeGradConfig = {
  kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ZerosLike,
  gradFunc: dy => {
    return {
      x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy)
    };
  }
};

/***/ }),

/***/ 76328:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gradForMinAndMax": () => (/* binding */ gradForMinAndMax)
/* harmony export */ });
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ 47642);
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ 8993);
/* harmony import */ var _ops_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/equal */ 93545);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ 6850);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/reshape */ 72289);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Gradient helper function for the min and max operations.
 */
function gradForMinAndMax(dy, y, xOrig, origAxes) {
  if (y.rank < xOrig.rank) {
    y = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(y, _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.expandShapeToKeepDim(y.shape, origAxes));
  }
  if (dy.rank < xOrig.rank) {
    dy = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(dy, _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.expandShapeToKeepDim(dy.shape, origAxes));
  }
  return {
    x: () => {
      const dx = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)((0,_ops_equal__WEBPACK_IMPORTED_MODULE_4__.equal)(xOrig, y), dy.dtype));
      return dx;
    }
  };
}

/***/ }),

/***/ 5808:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3dGrad": () => (/* binding */ avgPool3dGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ 58619);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ 80058);
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ 15357);
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ 21208);
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ 72289);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the backprop of a 3d avg pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function avgPool3dGrad_(dy, input, filterSize, strides, pad, dimRoundingMode) {
  const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'avgPool3dGrad');
  const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'avgPool3dGrad');
  let dy5D = $dy;
  let input5D = $input;
  let reshapedTo5D = false;
  if ($input.rank === 4) {
    reshapedTo5D = true;
    dy5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
    input5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);
  }
  _util__WEBPACK_IMPORTED_MODULE_3__.assert(dy5D.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ` + `${dy5D.rank}.`);
  _util__WEBPACK_IMPORTED_MODULE_3__.assert(input5D.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ` + `${input5D.rank}.`);
  (0,_conv_util__WEBPACK_IMPORTED_MODULE_4__.checkPadOnDimRoundingMode)('avgPool3dGrad', pad, dimRoundingMode);
  const inputs = {
    dy: dy5D,
    input: input5D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  };
  // tslint:disable-next-line: no-unnecessary-type-assertion
  const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.AvgPool3DGrad, inputs, attrs);
  if (reshapedTo5D) {
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }
  return res;
}
const avgPool3dGrad = /* @__PURE__ */(0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({
  avgPool3dGrad_
});

/***/ }),

/***/ 98251:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_grad.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPoolGrad": () => (/* binding */ avgPoolGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ 58619);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ 80058);
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ 21208);
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ 72289);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the backprop of an 2D avg pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The input image, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm used in the forward prop of the op.
 *     'same', 'valid', for more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 */
function avgPoolGrad_(dy, input, filterSize, strides, pad) {
  const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'avgPoolGrad');
  const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'avgPoolGrad');
  _util__WEBPACK_IMPORTED_MODULE_2__.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);
  let input4D = $input;
  let dy4D = $dy;
  let reshapedTo4D = false;
  if ($input.rank === 3) {
    reshapedTo4D = true;
    input4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);
    dy4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);
  }
  _util__WEBPACK_IMPORTED_MODULE_2__.assert(dy4D.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` + `${dy4D.rank}.`);
  _util__WEBPACK_IMPORTED_MODULE_2__.assert(input4D.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ` + `${input4D.rank}.`);
  const inputs = {
    dy: dy4D,
    input: input4D
  };
  const attrs = {
    filterSize,
    strides,
    pad
  };
  // tslint:disable-next-line: no-unnecessary-type-assertion
  const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.AvgPoolGrad, inputs, attrs);
  if (reshapedTo4D) {
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
  }
  return res;
}
const avgPoolGrad = /* @__PURE__ */(0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({
  avgPoolGrad_
});

/***/ }),

/***/ 76775:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DBackpropFilter": () => (/* binding */ conv3DBackpropFilter)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ 80058);
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ 21208);
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ 72289);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the derivative of the filter of a 3D convolution.
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is
 *     assumed.
 * @param dy The dy image, of rank 5 or rank 4, of shape
 *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is
 *     assumed.
 * @param filterShape The shape of the filter, length 5,
 *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideDepth, strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */
function conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {
  let x5D = x;
  if (x.rank === 4) {
    x5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);
  }
  let dy5D = dy;
  if (dy5D.rank === 4) {
    dy5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
  }
  _util__WEBPACK_IMPORTED_MODULE_2__.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` + `${x5D.shape}.`);
  _util__WEBPACK_IMPORTED_MODULE_2__.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` + `${dy5D.shape}.`);
  _util__WEBPACK_IMPORTED_MODULE_2__.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` + `${filterShape}.`);
  _util__WEBPACK_IMPORTED_MODULE_2__.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` + `match input depth in filter (${filterShape[3]}.`);
  _util__WEBPACK_IMPORTED_MODULE_2__.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` + `match output depth for filter (${filterShape[4]}).`);
  const inputs = {
    x: x5D,
    dy: dy5D
  };
  const attrs = {
    strides,
    pad,
    filterShape
  };
  // tslint:disable-next-line: no-unnecessary-type-assertion
  return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Conv3DBackpropFilterV2, inputs, attrs);
}
const conv3DBackpropFilter = /* @__PURE__ */(0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({
  conv3DBackpropFilter_
});

/***/ }),

/***/ 50265:
/*!**********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "localResponseNormalizationBackprop": () => (/* binding */ localResponseNormalizationBackprop)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ 21208);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function localResponseNormalizationBackprop_(x, y, dy, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
  const inputs = {
    x,
    y,
    dy
  };
  const attrs = {
    depthRadius,
    bias,
    alpha,
    beta
  };
  return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.LRNGrad, inputs, attrs);
}
const localResponseNormalizationBackprop = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({
  localResponseNormalizationBackprop_
});

/***/ }),

/***/ 15377:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3dGrad": () => (/* binding */ maxPool3dGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ 58619);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ 80058);
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ 15357);
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ 21208);
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ 72289);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the backprop of a 3d max pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank 4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param output The original output image, of rank 5 of shape
 *     [batchSize, outDepth, outHeight, outWidth, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function maxPool3dGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {
  const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'maxPool3dGrad');
  const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'maxPool3dGrad');
  const $output = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(output, 'output', 'maxPool3dGrad');
  let dy5D = $dy;
  let input5D = $input;
  let output5D = $output;
  let reshapedTo5D = false;
  if ($input.rank === 4) {
    reshapedTo5D = true;
    dy5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
    input5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);
    output5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($output, [1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]]);
  }
  _util__WEBPACK_IMPORTED_MODULE_3__.assert(dy5D.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ` + `${dy5D.rank}.`);
  _util__WEBPACK_IMPORTED_MODULE_3__.assert(input5D.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ` + `${input5D.rank}.`);
  _util__WEBPACK_IMPORTED_MODULE_3__.assert(output5D.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ` + `${output5D.rank}.`);
  (0,_conv_util__WEBPACK_IMPORTED_MODULE_4__.checkPadOnDimRoundingMode)('maxPool3dGrad', pad, dimRoundingMode);
  const inputs = {
    dy: dy5D,
    input: input5D,
    output: output5D
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  };
  // tslint:disable-next-line: no-unnecessary-type-assertion
  const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.MaxPool3DGrad, inputs, attrs);
  if (reshapedTo5D) {
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
  }
  return res;
}
const maxPool3dGrad = /* @__PURE__ */(0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({
  maxPool3dGrad_
});

/***/ }),

/***/ 64880:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_grad.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolGrad": () => (/* binding */ maxPoolGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ 18021);
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ 9617);
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ 58619);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ 80058);
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ 15357);
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ 21208);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the backprop of a 2D max pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The original input image, of rank 4, of shape
 *     [batchSize, height, width, channels].
 * @param output The original output image, of rank 4, of shape
 *     [batchSize, outHeight, outWidth, channels].
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm used in the forward prop of the op.
 *     'same', 'valid', for more info, see this guide:
 *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](
 *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function maxPoolGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {
  const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'maxPoolGrad');
  const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'maxPoolGrad');
  const $output = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(output, 'output', 'maxPoolGrad');
  _util__WEBPACK_IMPORTED_MODULE_2__.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` + `(${$dy.rank})`);
  _util__WEBPACK_IMPORTED_MODULE_2__.assert($dy.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` + `${$dy.rank}.`);
  _util__WEBPACK_IMPORTED_MODULE_2__.assert($input.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ` + `${$input.rank}.`);
  _conv_util__WEBPACK_IMPORTED_MODULE_3__.checkPadOnDimRoundingMode('maxPoolGrad', pad, dimRoundingMode);
  const inputs = {
    dy: $dy,
    input: $input,
    output: $output
  };
  const attrs = {
    filterSize,
    strides,
    pad,
    dimRoundingMode
  };
  // tslint:disable-next-line: no-unnecessary-type-assertion
  return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.MaxPoolGrad, inputs, attrs);
}
const maxPoolGrad = /* @__PURE__ */(0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({
  maxPoolGrad_
});

/***/ }),

/***/ 50099:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 13022);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.abs = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.abs)(this);
};

/***/ }),

/***/ 85938:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 19021);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.acos = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.acos)(this);
};

/***/ }),

/***/ 26130:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 61997);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.acosh = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.acosh)(this);
};

/***/ }),

/***/ 53229:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/add */ 97416);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.add = function (b) {
  this.throwIfDisposed();
  return (0,_ops_add__WEBPACK_IMPORTED_MODULE_1__.add)(this, b);
};

/***/ }),

/***/ 12236:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_all__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/all */ 35479);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.all = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_all__WEBPACK_IMPORTED_MODULE_1__.all)(this, axis, keepDims);
};

/***/ }),

/***/ 64637:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_any__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/any */ 63618);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.any = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_any__WEBPACK_IMPORTED_MODULE_1__.any)(this, axis, keepDims);
};

/***/ }),

/***/ 31116:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_arg_max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/arg_max */ 30125);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.argMax = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_arg_max__WEBPACK_IMPORTED_MODULE_1__.argMax)(this, axis);
};

/***/ }),

/***/ 88137:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_arg_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/arg_min */ 50122);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.argMin = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_arg_min__WEBPACK_IMPORTED_MODULE_1__.argMin)(this, axis);
};

/***/ }),

/***/ 71907:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor1D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.as1D = function () {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [this.size]);
};

/***/ }),

/***/ 54870:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor2D`.
 *
 * @param rows Number of rows in `tf.Tensor2D`.
 * @param columns Number of columns in `tf.Tensor2D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.as2D = function (rows, columns) {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns]);
};

/***/ }),

/***/ 75318:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor3D`.
 *
 * @param rows Number of rows in `tf.Tensor3D`.
 * @param columns Number of columns in `tf.Tensor3D`.
 * @param depth Depth of `tf.Tensor3D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.as3D = function (rows, columns, depth) {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns, depth]);
};

/***/ }),

/***/ 4050:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor4D`.
 *
 * @param rows Number of rows in `tf.Tensor4D`.
 * @param columns Number of columns in `tf.Tensor4D`.
 * @param depth Depth of `tf.Tensor4D`.
 * @param depth2 4th dimension of `tf.Tensor4D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.as4D = function (rows, columns, depth, depth2) {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns, depth, depth2]);
};

/***/ }),

/***/ 37863:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor5D`.
 *
 * @param rows Number of rows in `tf.Tensor5D`.
 * @param columns Number of columns in `tf.Tensor5D`.
 * @param depth Depth of `tf.Tensor5D`.
 * @param depth2 4th dimension of `tf.Tensor5D`.
 * @param depth3 5th dimension of 'tf.Tensor5D'
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.as5D = function (rows, columns, depth, depth2, depth3) {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns, depth, depth2, depth3]);
};

/***/ }),

/***/ 66148:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ 80058);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Converts a size-1 `tf.Tensor` to a `tf.Scalar`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.asScalar = function () {
  this.throwIfDisposed();
  (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(this.size === 1, () => 'The array must have only 1 element.');
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(this, []);
};

/***/ }),

/***/ 68899:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 8993);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * Casts a `tf.Tensor` to a specified dtype.
 *
 * @param dtype Data-type to cast the tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.asType = function (dtype) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, dtype);
};

/***/ }),

/***/ 97101:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 96283);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.asin = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.asin)(this);
};

/***/ }),

/***/ 74333:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 74360);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.asinh = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.asinh)(this);
};

/***/ }),

/***/ 75820:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 25325);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.atan = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.atan)(this);
};

/***/ }),

/***/ 49206:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_atan2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/atan2 */ 7238);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.atan2 = function (b) {
  this.throwIfDisposed();
  return (0,_ops_atan2__WEBPACK_IMPORTED_MODULE_1__.atan2)(this, b);
};

/***/ }),

/***/ 48028:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 69982);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.atanh = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.atanh)(this);
};

/***/ }),

/***/ 75649:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_avg_pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/avg_pool */ 21806);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {
  this.throwIfDisposed();
  return (0,_ops_avg_pool__WEBPACK_IMPORTED_MODULE_1__.avgPool)(this, filterSize, strides, pad, dimRoundingMode);
};

/***/ }),

/***/ 44299:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/batch_to_space_nd */ 89218);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.batchToSpaceND = function (blockShape, crops) {
  this.throwIfDisposed();
  return (0,_ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__.batchToSpaceND)(this, blockShape, crops);
};

/***/ }),

/***/ 58587:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_batchnorm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/batchnorm */ 31143);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.batchNorm = function (mean, variance, offset, scale, varianceEpsilon) {
  this.throwIfDisposed();
  return (0,_ops_batchnorm__WEBPACK_IMPORTED_MODULE_1__.batchNorm)(this, mean, variance, offset, scale, varianceEpsilon);
};

/***/ }),

/***/ 21868:
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_broadcast_to__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/broadcast_to */ 85225);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.broadcastTo = function (shape) {
  this.throwIfDisposed();
  return (0,_ops_broadcast_to__WEBPACK_IMPORTED_MODULE_1__.broadcastTo)(this, shape);
};

/***/ }),

/***/ 98403:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 8993);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.cast = function (dtype) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, dtype);
};

/***/ }),

/***/ 87159:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 227);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.ceil = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.ceil)(this);
};

/***/ }),

/***/ 48821:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 70497);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.clipByValue = function (min, max) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.clipByValue)(this, min, max);
};

/***/ }),

/***/ 46620:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/concat */ 43614);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.concat = function (x, axis) {
  this.throwIfDisposed();
  if (x instanceof _tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor) {
    x = [x];
  }
  return (0,_ops_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([this, ...x], axis);
};

/***/ }),

/***/ 65880:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv1d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/conv1d */ 88581);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
  this.throwIfDisposed();
  return (0,_ops_conv1d__WEBPACK_IMPORTED_MODULE_1__.conv1d)(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
};

/***/ }),

/***/ 56849:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/conv2d */ 54505);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
  this.throwIfDisposed();
  return (0,_ops_conv2d__WEBPACK_IMPORTED_MODULE_1__.conv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};

/***/ }),

/***/ 43142:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv2d_transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/conv2d_transpose */ 16857);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {
  this.throwIfDisposed();
  return (0,_ops_conv2d_transpose__WEBPACK_IMPORTED_MODULE_1__.conv2dTranspose)(this, filter, outputShape, strides, pad, dimRoundingMode);
};

/***/ }),

/***/ 51114:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 11544);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.cos = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cos)(this);
};

/***/ }),

/***/ 35369:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 48477);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.cosh = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cosh)(this);
};

/***/ }),

/***/ 5487:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumprod.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_cumprod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/cumprod */ 69412);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.cumprod = function (axis, exclusive, reverse) {
  this.throwIfDisposed();
  return (0,_ops_cumprod__WEBPACK_IMPORTED_MODULE_1__.cumprod)(this, axis, exclusive, reverse);
};

/***/ }),

/***/ 40363:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_cumsum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/cumsum */ 42185);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.cumsum = function (axis, exclusive, reverse) {
  this.throwIfDisposed();
  return (0,_ops_cumsum__WEBPACK_IMPORTED_MODULE_1__.cumsum)(this, axis, exclusive, reverse);
};

/***/ }),

/***/ 5396:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_depth_to_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/depth_to_space */ 85457);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.depthToSpace = function (blockSize, dataFormat) {
  this.throwIfDisposed();
  return (0,_ops_depth_to_space__WEBPACK_IMPORTED_MODULE_1__.depthToSpace)(this, blockSize, dataFormat);
};

/***/ }),

/***/ 63464:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/depthwise_conv2d */ 48758);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.depthwiseConv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
  this.throwIfDisposed();
  return (0,_ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__.depthwiseConv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};

/***/ }),

/***/ 21651:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_dilation2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/dilation2d */ 29135);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.dilation2d = function (filter, strides, pad, dilations, dataFormat) {
  this.throwIfDisposed();
  return (0,_ops_dilation2d__WEBPACK_IMPORTED_MODULE_1__.dilation2d)(this, filter, strides, pad, dilations, dataFormat);
};

/***/ }),

/***/ 27833:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/div */ 43724);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.div = function (b) {
  this.throwIfDisposed();
  return (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(this, b);
};

/***/ }),

/***/ 44650:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_div_no_nan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/div_no_nan */ 90991);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.divNoNan = function (b) {
  this.throwIfDisposed();
  return (0,_ops_div_no_nan__WEBPACK_IMPORTED_MODULE_1__.divNoNan)(this, b);
};

/***/ }),

/***/ 54680:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_dot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/dot */ 62862);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.dot = function (b) {
  this.throwIfDisposed();
  return (0,_ops_dot__WEBPACK_IMPORTED_MODULE_1__.dot)(this, b);
};

/***/ }),

/***/ 21123:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_elu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/elu */ 94075);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.elu = function () {
  this.throwIfDisposed();
  return (0,_ops_elu__WEBPACK_IMPORTED_MODULE_1__.elu)(this);
};

/***/ }),

/***/ 55837:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/equal */ 93545);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.equal = function (b) {
  this.throwIfDisposed();
  return (0,_ops_equal__WEBPACK_IMPORTED_MODULE_1__.equal)(this, b);
};

/***/ }),

/***/ 39179:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 28447);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.erf = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.erf)(this);
};

/***/ }),

/***/ 11391:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/euclidean_norm.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_euclidean_norm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/euclidean_norm */ 57778);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.euclideanNorm = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_euclidean_norm__WEBPACK_IMPORTED_MODULE_1__.euclideanNorm)(this, axis, keepDims);
};

/***/ }),

/***/ 5843:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 70825);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.exp = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.exp)(this);
};

/***/ }),

/***/ 27161:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_expand_dims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/expand_dims */ 96397);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.expandDims = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_expand_dims__WEBPACK_IMPORTED_MODULE_1__.expandDims)(this, axis);
};

/***/ }),

/***/ 51774:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 50949);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.expm1 = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.expm1)(this);
};

/***/ }),

/***/ 60530:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 36696);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.fft = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.fft)(this);
};

/***/ }),

/***/ 68000:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Flatten a Tensor to a 1D array.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.flatten = function () {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [this.size]);
};

/***/ }),

/***/ 56614:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 86954);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.floor = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.floor)(this);
};

/***/ }),

/***/ 87660:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_floorDiv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/floorDiv */ 56669);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.floorDiv = function (b) {
  this.throwIfDisposed();
  return (0,_ops_floorDiv__WEBPACK_IMPORTED_MODULE_1__.floorDiv)(this, b);
};

/***/ }),

/***/ 27806:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_gather__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/gather */ 86831);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.gather = function (indices, axis, batchDims) {
  this.throwIfDisposed();
  return (0,_ops_gather__WEBPACK_IMPORTED_MODULE_1__.gather)(this, indices, axis, batchDims);
};

/***/ }),

/***/ 96998:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/greater */ 74182);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.greater = function (b) {
  this.throwIfDisposed();
  return (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(this, b);
};

/***/ }),

/***/ 33720:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/greater_equal */ 67383);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.greaterEqual = function (b) {
  this.throwIfDisposed();
  return (0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_1__.greaterEqual)(this, b);
};

/***/ }),

/***/ 52386:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 46716);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.ifft = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.ifft)(this);
};

/***/ }),

/***/ 93193:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 33888);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.irfft = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.irfft)(this);
};

/***/ }),

/***/ 60468:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 27949);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.isFinite = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.isFinite)(this);
};

/***/ }),

/***/ 85818:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 45743);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.isInf = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.isInf)(this);
};

/***/ }),

/***/ 24816:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 58997);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.isNaN = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.isNaN)(this);
};

/***/ }),

/***/ 73920:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_leaky_relu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/leaky_relu */ 8408);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.leakyRelu = function (alpha) {
  this.throwIfDisposed();
  return (0,_ops_leaky_relu__WEBPACK_IMPORTED_MODULE_1__.leakyRelu)(this, alpha);
};

/***/ }),

/***/ 99597:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_less__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/less */ 82292);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.less = function (b) {
  this.throwIfDisposed();
  return (0,_ops_less__WEBPACK_IMPORTED_MODULE_1__.less)(this, b);
};

/***/ }),

/***/ 87966:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/less_equal */ 86845);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.lessEqual = function (b) {
  this.throwIfDisposed();
  return (0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_1__.lessEqual)(this, b);
};

/***/ }),

/***/ 96035:
/*!****************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_local_response_normalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/local_response_normalization */ 7142);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.localResponseNormalization = function (depthRadius, bias, alpha, beta) {
  this.throwIfDisposed();
  return (0,_ops_local_response_normalization__WEBPACK_IMPORTED_MODULE_1__.localResponseNormalization)(this, depthRadius, bias, alpha, beta);
};

/***/ }),

/***/ 64680:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 72601);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.log = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.log)(this);
};

/***/ }),

/***/ 94691:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 19976);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.log1p = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.log1p)(this);
};

/***/ }),

/***/ 75761:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 10233);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.logSigmoid = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.logSigmoid)(this);
};

/***/ }),

/***/ 49445:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 56740);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.logSoftmax = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.logSoftmax)(this, axis);
};

/***/ }),

/***/ 37200:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_log_sum_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/log_sum_exp */ 57427);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.logSumExp = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_log_sum_exp__WEBPACK_IMPORTED_MODULE_1__.logSumExp)(this, axis, keepDims);
};

/***/ }),

/***/ 31425:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_and */ 60385);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.logicalAnd = function (b) {
  this.throwIfDisposed();
  return (0,_ops_logical_and__WEBPACK_IMPORTED_MODULE_1__.logicalAnd)(this, b);
};

/***/ }),

/***/ 5990:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_not__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_not */ 44040);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.logicalNot = function () {
  this.throwIfDisposed();
  return (0,_ops_logical_not__WEBPACK_IMPORTED_MODULE_1__.logicalNot)(this);
};

/***/ }),

/***/ 14240:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_or__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_or */ 81988);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.logicalOr = function (b) {
  this.throwIfDisposed();
  return (0,_ops_logical_or__WEBPACK_IMPORTED_MODULE_1__.logicalOr)(this, b);
};

/***/ }),

/***/ 12001:
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_xor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_xor */ 33453);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.logicalXor = function (b) {
  this.throwIfDisposed();
  return (0,_ops_logical_xor__WEBPACK_IMPORTED_MODULE_1__.logicalXor)(this, b);
};

/***/ }),

/***/ 757:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mat_mul */ 44946);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.matMul = function (b, transposeA, transposeB) {
  this.throwIfDisposed();
  return (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(this, b, transposeA, transposeB);
};

/***/ }),

/***/ 91674:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/max */ 41795);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.max = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_max__WEBPACK_IMPORTED_MODULE_1__.max)(this, axis, keepDims);
};

/***/ }),

/***/ 27572:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_max_pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/max_pool */ 49833);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {
  this.throwIfDisposed();
  return (0,_ops_max_pool__WEBPACK_IMPORTED_MODULE_1__.maxPool)(this, filterSize, strides, pad, dimRoundingMode);
};

/***/ }),

/***/ 28118:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/maximum */ 63309);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.maximum = function (b) {
  this.throwIfDisposed();
  return (0,_ops_maximum__WEBPACK_IMPORTED_MODULE_1__.maximum)(this, b);
};

/***/ }),

/***/ 98440:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mean */ 17039);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.mean = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_mean__WEBPACK_IMPORTED_MODULE_1__.mean)(this, axis, keepDims);
};

/***/ }),

/***/ 44422:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/min */ 22909);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.min = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_min__WEBPACK_IMPORTED_MODULE_1__.min)(this, axis, keepDims);
};

/***/ }),

/***/ 74698:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_minimum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/minimum */ 54846);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.minimum = function (b) {
  this.throwIfDisposed();
  return (0,_ops_minimum__WEBPACK_IMPORTED_MODULE_1__.minimum)(this, b);
};

/***/ }),

/***/ 73715:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mirror_pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mirror_pad */ 38799);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.mirrorPad = function (paddings, mode) {
  this.throwIfDisposed();
  return (0,_ops_mirror_pad__WEBPACK_IMPORTED_MODULE_1__.mirrorPad)(this, paddings, mode);
};

/***/ }),

/***/ 9696:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mod */ 29746);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.mod = function (b) {
  this.throwIfDisposed();
  return (0,_ops_mod__WEBPACK_IMPORTED_MODULE_1__.mod)(this, b);
};

/***/ }),

/***/ 51498:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mul */ 6850);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.mul = function (b) {
  this.throwIfDisposed();
  return (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(this, b);
};

/***/ }),

/***/ 48034:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 88313);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.neg = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.neg)(this);
};

/***/ }),

/***/ 38463:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 59050);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.norm = function (ord, axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.norm)(this, ord, axis, keepDims);
};

/***/ }),

/***/ 64766:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_not_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/not_equal */ 13633);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.notEqual = function (b) {
  this.throwIfDisposed();
  return (0,_ops_not_equal__WEBPACK_IMPORTED_MODULE_1__.notEqual)(this, b);
};

/***/ }),

/***/ 36741:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_one_hot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/one_hot */ 19665);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.oneHot = function (depth, onValue = 1, offValue = 0) {
  this.throwIfDisposed();
  return (0,_ops_one_hot__WEBPACK_IMPORTED_MODULE_1__.oneHot)(this, depth, onValue, offValue);
};

/***/ }),

/***/ 83322:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 65601);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.onesLike = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.onesLike)(this);
};

/***/ }),

/***/ 93238:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/pad */ 8711);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.pad = function (paddings, constantValue) {
  this.throwIfDisposed();
  return (0,_ops_pad__WEBPACK_IMPORTED_MODULE_1__.pad)(this, paddings, constantValue);
};

/***/ }),

/***/ 5088:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/pool */ 83456);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.pool = function (windowShape, poolingType, padding, dilationRate, strides, dimRoundingMode) {
  this.throwIfDisposed();
  return (0,_ops_pool__WEBPACK_IMPORTED_MODULE_1__.pool)(this, windowShape, poolingType, padding, dilationRate, strides, dimRoundingMode);
};

/***/ }),

/***/ 77267:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/pow */ 40178);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.pow = function (exp) {
  this.throwIfDisposed();
  return (0,_ops_pow__WEBPACK_IMPORTED_MODULE_1__.pow)(this, exp);
};

/***/ }),

/***/ 60142:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_prelu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/prelu */ 19996);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.prelu = function (alpha) {
  this.throwIfDisposed();
  return (0,_ops_prelu__WEBPACK_IMPORTED_MODULE_1__.prelu)(this, alpha);
};

/***/ }),

/***/ 58572:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_prod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/prod */ 68226);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.prod = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_prod__WEBPACK_IMPORTED_MODULE_1__.prod)(this, axis, keepDims);
};

/***/ }),

/***/ 99020:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 86583);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.reciprocal = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.reciprocal)(this);
};

/***/ }),

/***/ 88381:
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ 50099);
/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acos */ 85938);
/* harmony import */ var _acosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acosh */ 26130);
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ 53229);
/* harmony import */ var _all__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./all */ 12236);
/* harmony import */ var _any__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./any */ 64637);
/* harmony import */ var _arg_max__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./arg_max */ 31116);
/* harmony import */ var _arg_min__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./arg_min */ 88137);
/* harmony import */ var _as_scalar__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./as_scalar */ 66148);
/* harmony import */ var _as_type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./as_type */ 68899);
/* harmony import */ var _as1d__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./as1d */ 71907);
/* harmony import */ var _as2d__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./as2d */ 54870);
/* harmony import */ var _as3d__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./as3d */ 75318);
/* harmony import */ var _as4d__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./as4d */ 4050);
/* harmony import */ var _as5d__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./as5d */ 37863);
/* harmony import */ var _asin__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./asin */ 97101);
/* harmony import */ var _asinh__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./asinh */ 74333);
/* harmony import */ var _atan__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./atan */ 75820);
/* harmony import */ var _atan2__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./atan2 */ 49206);
/* harmony import */ var _atanh__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./atanh */ 48028);
/* harmony import */ var _avg_pool__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./avg_pool */ 75649);
/* harmony import */ var _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./batch_to_space_nd */ 44299);
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./batchnorm */ 58587);
/* harmony import */ var _broadcast_to__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./broadcast_to */ 21868);
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./cast */ 98403);
/* harmony import */ var _ceil__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ceil */ 87159);
/* harmony import */ var _clip_by_value__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./clip_by_value */ 48821);
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./concat */ 46620);
/* harmony import */ var _conv1d__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./conv1d */ 65880);
/* harmony import */ var _conv2d_transpose__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./conv2d_transpose */ 43142);
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./conv2d */ 56849);
/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./cos */ 51114);
/* harmony import */ var _cosh__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./cosh */ 35369);
/* harmony import */ var _cumprod__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./cumprod */ 5487);
/* harmony import */ var _cumsum__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./cumsum */ 40363);
/* harmony import */ var _depth_to_space__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./depth_to_space */ 5396);
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./depthwise_conv2d */ 63464);
/* harmony import */ var _dilation2d__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./dilation2d */ 21651);
/* harmony import */ var _div_no_nan__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./div_no_nan */ 44650);
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./div */ 27833);
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./dot */ 54680);
/* harmony import */ var _elu__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./elu */ 21123);
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./equal */ 55837);
/* harmony import */ var _erf__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./erf */ 39179);
/* harmony import */ var _euclidean_norm__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./euclidean_norm */ 11391);
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./exp */ 5843);
/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./expand_dims */ 27161);
/* harmony import */ var _expm1__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./expm1 */ 51774);
/* harmony import */ var _fft__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./fft */ 60530);
/* harmony import */ var _flatten__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./flatten */ 68000);
/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./floor */ 56614);
/* harmony import */ var _floorDiv__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./floorDiv */ 87660);
/* harmony import */ var _gather__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./gather */ 27806);
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./greater_equal */ 33720);
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./greater */ 96998);
/* harmony import */ var _ifft__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./ifft */ 52386);
/* harmony import */ var _irfft__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./irfft */ 93193);
/* harmony import */ var _is_finite__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./is_finite */ 60468);
/* harmony import */ var _is_inf__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./is_inf */ 85818);
/* harmony import */ var _is_nan__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./is_nan */ 24816);
/* harmony import */ var _leaky_relu__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./leaky_relu */ 73920);
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./less_equal */ 87966);
/* harmony import */ var _less__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./less */ 99597);
/* harmony import */ var _local_response_normalization__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./local_response_normalization */ 96035);
/* harmony import */ var _log_sigmoid__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./log_sigmoid */ 75761);
/* harmony import */ var _log_softmax__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./log_softmax */ 49445);
/* harmony import */ var _log_sum_exp__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./log_sum_exp */ 37200);
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./log */ 64680);
/* harmony import */ var _log1p__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./log1p */ 94691);
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./logical_and */ 31425);
/* harmony import */ var _logical_not__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./logical_not */ 5990);
/* harmony import */ var _logical_or__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./logical_or */ 14240);
/* harmony import */ var _logical_xor__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./logical_xor */ 12001);
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./mat_mul */ 757);
/* harmony import */ var _max_pool__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./max_pool */ 27572);
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./max */ 91674);
/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./maximum */ 28118);
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./mean */ 98440);
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./min */ 44422);
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./minimum */ 74698);
/* harmony import */ var _mirror_pad__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./mirror_pad */ 73715);
/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./mod */ 9696);
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./mul */ 51498);
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./neg */ 48034);
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./norm */ 38463);
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./not_equal */ 64766);
/* harmony import */ var _one_hot__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./one_hot */ 36741);
/* harmony import */ var _ones_like__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./ones_like */ 83322);
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./pad */ 93238);
/* harmony import */ var _pool__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./pool */ 5088);
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./pow */ 77267);
/* harmony import */ var _prelu__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./prelu */ 60142);
/* harmony import */ var _prod__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./prod */ 58572);
/* harmony import */ var _reciprocal__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./reciprocal */ 99020);
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./relu */ 62955);
/* harmony import */ var _relu6__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./relu6 */ 38617);
/* harmony import */ var _reshape_as__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./reshape_as */ 57516);
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./reshape */ 38174);
/* harmony import */ var _resize_bilinear__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./resize_bilinear */ 46278);
/* harmony import */ var _resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./resize_nearest_neighbor */ 95730);
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./reverse */ 9230);
/* harmony import */ var _rfft__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./rfft */ 69641);
/* harmony import */ var _round__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./round */ 85467);
/* harmony import */ var _rsqrt__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./rsqrt */ 70008);
/* harmony import */ var _selu__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./selu */ 2580);
/* harmony import */ var _separable_conv2d__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./separable_conv2d */ 80088);
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./sigmoid */ 33044);
/* harmony import */ var _sign__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./sign */ 92777);
/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./sin */ 67419);
/* harmony import */ var _sinh__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./sinh */ 19342);
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./slice */ 77239);
/* harmony import */ var _softmax__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./softmax */ 24839);
/* harmony import */ var _softplus__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./softplus */ 74639);
/* harmony import */ var _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./space_to_batch_nd */ 62697);
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./split */ 14163);
/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./sqrt */ 80082);
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./square */ 16202);
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./squared_difference */ 49275);
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./squeeze */ 56201);
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./stack */ 38436);
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./step */ 22724);
/* harmony import */ var _strided_slice__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./strided_slice */ 90043);
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./sub */ 97504);
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./sum */ 35570);
/* harmony import */ var _tan__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./tan */ 99419);
/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./tanh */ 24435);
/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./tile */ 38166);
/* harmony import */ var _to_bool__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./to_bool */ 15951);
/* harmony import */ var _to_float__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./to_float */ 72067);
/* harmony import */ var _to_int__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./to_int */ 4638);
/* harmony import */ var _topk__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./topk */ 89936);
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./transpose */ 83278);
/* harmony import */ var _unique__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./unique */ 53488);
/* harmony import */ var _unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./unsorted_segment_sum */ 30228);
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./unstack */ 47441);
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./where */ 66478);
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./zeros_like */ 70475);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










































































































































/***/ }),

/***/ 62955:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_relu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/relu */ 39058);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.relu = function () {
  this.throwIfDisposed();
  return (0,_ops_relu__WEBPACK_IMPORTED_MODULE_1__.relu)(this);
};

/***/ }),

/***/ 38617:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_relu6__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/relu6 */ 87859);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.relu6 = function () {
  this.throwIfDisposed();
  return (0,_ops_relu6__WEBPACK_IMPORTED_MODULE_1__.relu6)(this);
};

/***/ }),

/***/ 38174:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.reshape = function (shape) {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, shape);
};

/***/ }),

/***/ 57516:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ 72289);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Reshapes the tensor into the shape of the provided tensor.
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.reshapeAs = function (x) {
  this.throwIfDisposed();
  return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, x.shape);
};

/***/ }),

/***/ 46278:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_image_resize_bilinear__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/image/resize_bilinear */ 47666);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.resizeBilinear = function (newShape2D, alignCorners, halfPixelCenters) {
  this.throwIfDisposed();
  return (0,_ops_image_resize_bilinear__WEBPACK_IMPORTED_MODULE_1__.resizeBilinear)(this, newShape2D, alignCorners, halfPixelCenters);
};

/***/ }),

/***/ 95730:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/image/resize_nearest_neighbor */ 69060);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.resizeNearestNeighbor = function (newShape2D, alignCorners, halfFloatCenters) {
  this.throwIfDisposed();
  return (0,_ops_image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_1__.resizeNearestNeighbor)(this, newShape2D, alignCorners, halfFloatCenters);
};

/***/ }),

/***/ 9230:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reverse */ 78522);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.reverse = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_reverse__WEBPACK_IMPORTED_MODULE_1__.reverse)(this, axis);
};

/***/ }),

/***/ 69641:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 35585);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.rfft = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.rfft)(this);
};

/***/ }),

/***/ 85467:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 55238);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.round = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.round)(this);
};

/***/ }),

/***/ 70008:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 27303);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.rsqrt = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.rsqrt)(this);
};

/***/ }),

/***/ 2580:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_selu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/selu */ 32339);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.selu = function () {
  this.throwIfDisposed();
  return (0,_ops_selu__WEBPACK_IMPORTED_MODULE_1__.selu)(this);
};

/***/ }),

/***/ 80088:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_separable_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/separable_conv2d */ 42428);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.separableConv2d = function (depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
  this.throwIfDisposed();
  return (0,_ops_separable_conv2d__WEBPACK_IMPORTED_MODULE_1__.separableConv2d)(this, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat);
};

/***/ }),

/***/ 33044:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 27415);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.sigmoid = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sigmoid)(this);
};

/***/ }),

/***/ 92777:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 17492);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.sign = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sign)(this);
};

/***/ }),

/***/ 67419:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 32942);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.sin = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sin)(this);
};

/***/ }),

/***/ 19342:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 71097);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.sinh = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sinh)(this);
};

/***/ }),

/***/ 77239:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 59370);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.slice = function (begin, size) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.slice)(this, begin, size);
};

/***/ }),

/***/ 24839:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 17646);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.softmax = function (dim) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.softmax)(this, dim);
};

/***/ }),

/***/ 74639:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 68534);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.softplus = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.softplus)(this);
};

/***/ }),

/***/ 62697:
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/space_to_batch_nd */ 23243);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.spaceToBatchND = function (blockShape, paddings) {
  this.throwIfDisposed();
  return (0,_ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__.spaceToBatchND)(this, blockShape, paddings);
};

/***/ }),

/***/ 14163:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/split */ 77334);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.split = function (numOrSizeSplits, axis) {
  this.throwIfDisposed();
  return (0,_ops_split__WEBPACK_IMPORTED_MODULE_1__.split)(this, numOrSizeSplits, axis);
};

/***/ }),

/***/ 80082:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 20536);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.sqrt = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sqrt)(this);
};

/***/ }),

/***/ 16202:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 89759);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.square = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.square)(this);
};

/***/ }),

/***/ 49275:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_squared_difference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/squared_difference */ 85512);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.squaredDifference = function (b) {
  this.throwIfDisposed();
  return (0,_ops_squared_difference__WEBPACK_IMPORTED_MODULE_1__.squaredDifference)(this, b);
};

/***/ }),

/***/ 56201:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_squeeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/squeeze */ 16487);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.squeeze = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_squeeze__WEBPACK_IMPORTED_MODULE_1__.squeeze)(this, axis);
};

/***/ }),

/***/ 38436:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/stack */ 3828);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.stack = function (x, axis) {
  this.throwIfDisposed();
  const tensorsToBeStacked = x instanceof _tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor ? [this, x] : [this, ...x];
  return (0,_ops_stack__WEBPACK_IMPORTED_MODULE_1__.stack)(tensorsToBeStacked, axis);
};

/***/ }),

/***/ 22724:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 75842);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.step = function (alpha) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.step)(this, alpha);
};

/***/ }),

/***/ 90043:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 61453);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.stridedSlice = function (begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.stridedSlice)(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
};

/***/ }),

/***/ 97504:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/sub */ 55939);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.sub = function (b) {
  this.throwIfDisposed();
  return (0,_ops_sub__WEBPACK_IMPORTED_MODULE_1__.sub)(this, b);
};

/***/ }),

/***/ 35570:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/sum */ 85755);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.sum = function (axis, keepDims) {
  this.throwIfDisposed();
  return (0,_ops_sum__WEBPACK_IMPORTED_MODULE_1__.sum)(this, axis, keepDims);
};

/***/ }),

/***/ 99419:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 56594);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.tan = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.tan)(this);
};

/***/ }),

/***/ 24435:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 77141);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.tanh = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.tanh)(this);
};

/***/ }),

/***/ 38166:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_tile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/tile */ 98763);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.tile = function (reps) {
  this.throwIfDisposed();
  return (0,_ops_tile__WEBPACK_IMPORTED_MODULE_1__.tile)(this, reps);
};

/***/ }),

/***/ 15951:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 8993);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * Casts the array to type `bool`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.toBool = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, 'bool');
};

/***/ }),

/***/ 72067:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 8993);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * Casts the array to type `float32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.toFloat = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, 'float32');
};

/***/ }),

/***/ 4638:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 8993);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * Casts the array to type `int32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.toInt = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, 'int32');
};

/***/ }),

/***/ 89936:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_topk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/topk */ 90201);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.topk = function (k, sorted) {
  this.throwIfDisposed();
  return (0,_ops_topk__WEBPACK_IMPORTED_MODULE_1__.topk)(this, k, sorted);
};

/***/ }),

/***/ 83278:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/transpose */ 62152);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.transpose = function (perm) {
  this.throwIfDisposed();
  return (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)(this, perm);
};

/***/ }),

/***/ 53488:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unique__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/unique */ 3299);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.unique = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_unique__WEBPACK_IMPORTED_MODULE_1__.unique)(this, axis);
};

/***/ }),

/***/ 30228:
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/unsorted_segment_sum */ 68182);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.unsortedSegmentSum = function (segmentIds, numSegments) {
  this.throwIfDisposed();
  return (0,_ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_1__.unsortedSegmentSum)(this, segmentIds, numSegments);
};

/***/ }),

/***/ 47441:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unstack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/unstack */ 67353);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.unstack = function (axis) {
  this.throwIfDisposed();
  return (0,_ops_unstack__WEBPACK_IMPORTED_MODULE_1__.unstack)(this, axis);
};

/***/ }),

/***/ 66478:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/where */ 9214);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.where = function (condition, x) {
  this.throwIfDisposed();
  return (0,_ops_where__WEBPACK_IMPORTED_MODULE_1__.where)(condition, this, x);
};

/***/ }),

/***/ 70475:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ 66776);
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ 82498);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


(0,_tensor__WEBPACK_IMPORTED_MODULE_0__.getGlobalTensorClass)().prototype.zerosLike = function () {
  this.throwIfDisposed();
  return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(this);
};

/***/ }),

/***/ 16394:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _gradients_Abs_grad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gradients/Abs_grad */ 52783);
/* harmony import */ var _gradients_Acos_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gradients/Acos_grad */ 29687);
/* harmony import */ var _gradients_Acosh_grad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gradients/Acosh_grad */ 20000);
/* harmony import */ var _gradients_Add_grad__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gradients/Add_grad */ 79327);
/* harmony import */ var _gradients_AddN_grad__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gradients/AddN_grad */ 22090);
/* harmony import */ var _gradients_ArgMax_grad__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gradients/ArgMax_grad */ 96991);
/* harmony import */ var _gradients_ArgMin_grad__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gradients/ArgMin_grad */ 1187);
/* harmony import */ var _gradients_Asin_grad__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gradients/Asin_grad */ 36442);
/* harmony import */ var _gradients_Asinh_grad__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./gradients/Asinh_grad */ 48542);
/* harmony import */ var _gradients_Atan2_grad__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./gradients/Atan2_grad */ 93488);
/* harmony import */ var _gradients_Atan_grad__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./gradients/Atan_grad */ 69908);
/* harmony import */ var _gradients_Atanh_grad__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./gradients/Atanh_grad */ 24240);
/* harmony import */ var _gradients_AvgPool3D_grad__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./gradients/AvgPool3D_grad */ 77431);
/* harmony import */ var _gradients_AvgPool_grad__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./gradients/AvgPool_grad */ 23429);
/* harmony import */ var _gradients_BatchMatMul_grad__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./gradients/BatchMatMul_grad */ 48506);
/* harmony import */ var _gradients_BatchToSpaceND_grad__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./gradients/BatchToSpaceND_grad */ 73731);
/* harmony import */ var _gradients_BroadcastTo_grad__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./gradients/BroadcastTo_grad */ 64314);
/* harmony import */ var _gradients_Cast_grad__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./gradients/Cast_grad */ 70849);
/* harmony import */ var _gradients_Ceil_grad__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./gradients/Ceil_grad */ 63987);
/* harmony import */ var _gradients_ClipByValue_grad__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./gradients/ClipByValue_grad */ 46903);
/* harmony import */ var _gradients_ComplexAbs_grad__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./gradients/ComplexAbs_grad */ 3627);
/* harmony import */ var _gradients_Concat_grad__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./gradients/Concat_grad */ 16245);
/* harmony import */ var _gradients_Conv2D_grad__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./gradients/Conv2D_grad */ 90922);
/* harmony import */ var _gradients_Conv2DBackpropInput_grad__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./gradients/Conv2DBackpropInput_grad */ 92783);
/* harmony import */ var _gradients_Conv3D_grad__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./gradients/Conv3D_grad */ 67205);
/* harmony import */ var _gradients_Cos_grad__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./gradients/Cos_grad */ 48892);
/* harmony import */ var _gradients_Cosh_grad__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./gradients/Cosh_grad */ 82012);
/* harmony import */ var _gradients_Cumsum_grad__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./gradients/Cumsum_grad */ 62779);
/* harmony import */ var _gradients_DepthwiseConv2dNative_grad__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./gradients/DepthwiseConv2dNative_grad */ 97562);
/* harmony import */ var _gradients_Dilation2D_grad__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./gradients/Dilation2D_grad */ 41085);
/* harmony import */ var _gradients_Elu_grad__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./gradients/Elu_grad */ 52312);
/* harmony import */ var _gradients_Erf_grad__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./gradients/Erf_grad */ 46631);
/* harmony import */ var _gradients_Exp_grad__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./gradients/Exp_grad */ 99695);
/* harmony import */ var _gradients_ExpandDims_grad__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./gradients/ExpandDims_grad */ 80424);
/* harmony import */ var _gradients_Expm1_grad__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./gradients/Expm1_grad */ 76148);
/* harmony import */ var _gradients_Floor_grad__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./gradients/Floor_grad */ 90595);
/* harmony import */ var _gradients_FloorDiv_grad__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./gradients/FloorDiv_grad */ 79679);
/* harmony import */ var _gradients_FusedBatchNorm_grad__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./gradients/FusedBatchNorm_grad */ 37709);
/* harmony import */ var _gradients_GatherV2_grad__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./gradients/GatherV2_grad */ 79898);
/* harmony import */ var _gradients_GreaterEqual_grad__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./gradients/GreaterEqual_grad */ 60535);
/* harmony import */ var _gradients_Identity_grad__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./gradients/Identity_grad */ 85876);
/* harmony import */ var _gradients_IsFinite_grad__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./gradients/IsFinite_grad */ 95619);
/* harmony import */ var _gradients_IsInf_grad__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./gradients/IsInf_grad */ 76330);
/* harmony import */ var _gradients_IsNan_grad__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./gradients/IsNan_grad */ 49754);
/* harmony import */ var _gradients_LeakyRelu_grad__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./gradients/LeakyRelu_grad */ 61155);
/* harmony import */ var _gradients_Log1p_grad__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./gradients/Log1p_grad */ 93004);
/* harmony import */ var _gradients_Log_grad__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./gradients/Log_grad */ 1979);
/* harmony import */ var _gradients_LogSoftmax_grad__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./gradients/LogSoftmax_grad */ 88755);
/* harmony import */ var _gradients_LRN_grad__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./gradients/LRN_grad */ 33311);
/* harmony import */ var _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./gradients/Max_grad */ 25922);
/* harmony import */ var _gradients_Maximum_grad__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./gradients/Maximum_grad */ 58519);
/* harmony import */ var _gradients_MaxPool3D_grad__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./gradients/MaxPool3D_grad */ 1993);
/* harmony import */ var _gradients_MaxPool_grad__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./gradients/MaxPool_grad */ 29005);
/* harmony import */ var _gradients_Mean_grad__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./gradients/Mean_grad */ 66714);
/* harmony import */ var _gradients_Min_grad__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./gradients/Min_grad */ 36236);
/* harmony import */ var _gradients_Minimum_grad__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./gradients/Minimum_grad */ 74019);
/* harmony import */ var _gradients_MirrorPad_grad__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./gradients/MirrorPad_grad */ 72251);
/* harmony import */ var _gradients_Mod_grad__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./gradients/Mod_grad */ 18509);
/* harmony import */ var _gradients_Multiply_grad__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./gradients/Multiply_grad */ 98354);
/* harmony import */ var _gradients_Neg_grad__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./gradients/Neg_grad */ 93804);
/* harmony import */ var _gradients_OneHot_grad__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./gradients/OneHot_grad */ 73776);
/* harmony import */ var _gradients_OnesLike_grad__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./gradients/OnesLike_grad */ 97159);
/* harmony import */ var _gradients_Pack_grad__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./gradients/Pack_grad */ 78831);
/* harmony import */ var _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./gradients/PadV2_grad */ 23648);
/* harmony import */ var _gradients_Pow_grad__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./gradients/Pow_grad */ 9716);
/* harmony import */ var _gradients_Prelu_grad__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./gradients/Prelu_grad */ 54692);
/* harmony import */ var _gradients_Prod_grad__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./gradients/Prod_grad */ 96099);
/* harmony import */ var _gradients_RealDiv_grad__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./gradients/RealDiv_grad */ 22131);
/* harmony import */ var _gradients_Reciprocal_grad__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./gradients/Reciprocal_grad */ 38851);
/* harmony import */ var _gradients_Relu6_grad__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./gradients/Relu6_grad */ 84277);
/* harmony import */ var _gradients_Relu_grad__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./gradients/Relu_grad */ 22413);
/* harmony import */ var _gradients_Reshape_grad__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./gradients/Reshape_grad */ 86401);
/* harmony import */ var _gradients_ResizeBilinear_grad__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./gradients/ResizeBilinear_grad */ 8010);
/* harmony import */ var _gradients_ResizeNearestNeighbor_grad__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./gradients/ResizeNearestNeighbor_grad */ 34486);
/* harmony import */ var _gradients_Reverse_grad__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./gradients/Reverse_grad */ 60409);
/* harmony import */ var _gradients_Round_grad__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./gradients/Round_grad */ 12271);
/* harmony import */ var _gradients_Rsqrt_grad__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./gradients/Rsqrt_grad */ 32497);
/* harmony import */ var _gradients_Select_grad__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./gradients/Select_grad */ 29308);
/* harmony import */ var _gradients_Selu_grad__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./gradients/Selu_grad */ 5339);
/* harmony import */ var _gradients_Sigmoid_grad__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./gradients/Sigmoid_grad */ 12942);
/* harmony import */ var _gradients_Sign_grad__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./gradients/Sign_grad */ 13926);
/* harmony import */ var _gradients_Sin_grad__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./gradients/Sin_grad */ 6684);
/* harmony import */ var _gradients_Sinh_grad__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./gradients/Sinh_grad */ 82521);
/* harmony import */ var _gradients_Slice_grad__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./gradients/Slice_grad */ 96512);
/* harmony import */ var _gradients_Softmax_grad__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./gradients/Softmax_grad */ 45442);
/* harmony import */ var _gradients_Softplus_grad__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./gradients/Softplus_grad */ 16374);
/* harmony import */ var _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./gradients/SpaceToBatchND_grad */ 15242);
/* harmony import */ var _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./gradients/SplitV_grad */ 79955);
/* harmony import */ var _gradients_Sqrt_grad__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./gradients/Sqrt_grad */ 33392);
/* harmony import */ var _gradients_Square_grad__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./gradients/Square_grad */ 957);
/* harmony import */ var _gradients_SquaredDifference_grad__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./gradients/SquaredDifference_grad */ 21411);
/* harmony import */ var _gradients_Step_grad__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./gradients/Step_grad */ 63574);
/* harmony import */ var _gradients_Sub_grad__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./gradients/Sub_grad */ 66042);
/* harmony import */ var _gradients_Sum_grad__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./gradients/Sum_grad */ 8139);
/* harmony import */ var _gradients_Tan_grad__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./gradients/Tan_grad */ 87764);
/* harmony import */ var _gradients_Tanh_grad__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./gradients/Tanh_grad */ 32939);
/* harmony import */ var _gradients_Tile_grad__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./gradients/Tile_grad */ 4822);
/* harmony import */ var _gradients_Transpose_grad__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./gradients/Transpose_grad */ 52854);
/* harmony import */ var _gradients_Unpack_grad__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./gradients/Unpack_grad */ 64468);
/* harmony import */ var _gradients_UnsortedSegmentSum_grad__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./gradients/UnsortedSegmentSum_grad */ 22472);
/* harmony import */ var _gradients_ZerosLike_grad__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./gradients/ZerosLike_grad */ 65849);
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./kernel_registry */ 69064);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






































































































// Export all kernel configs here so that the package can auto register them
const gradConfigs = [_gradients_Abs_grad__WEBPACK_IMPORTED_MODULE_0__.absGradConfig, _gradients_Acos_grad__WEBPACK_IMPORTED_MODULE_1__.acosGradConfig, _gradients_Acosh_grad__WEBPACK_IMPORTED_MODULE_2__.acoshGradConfig, _gradients_Add_grad__WEBPACK_IMPORTED_MODULE_3__.addGradConfig, _gradients_AddN_grad__WEBPACK_IMPORTED_MODULE_4__.addNGradConfig, _gradients_ArgMax_grad__WEBPACK_IMPORTED_MODULE_5__.argMaxGradConfig, _gradients_ArgMin_grad__WEBPACK_IMPORTED_MODULE_6__.argMinGradConfig, _gradients_Asin_grad__WEBPACK_IMPORTED_MODULE_7__.asinGradConfig, _gradients_Asinh_grad__WEBPACK_IMPORTED_MODULE_8__.asinhGradConfig, _gradients_Atan2_grad__WEBPACK_IMPORTED_MODULE_9__.atan2GradConfig, _gradients_Atan_grad__WEBPACK_IMPORTED_MODULE_10__.atanGradConfig, _gradients_Atanh_grad__WEBPACK_IMPORTED_MODULE_11__.atanhGradConfig, _gradients_AvgPool3D_grad__WEBPACK_IMPORTED_MODULE_12__.avgPool3DGradConfig, _gradients_AvgPool_grad__WEBPACK_IMPORTED_MODULE_13__.avgPoolGradConfig, _gradients_BatchMatMul_grad__WEBPACK_IMPORTED_MODULE_14__.batchMatMulGradConfig, _gradients_BatchToSpaceND_grad__WEBPACK_IMPORTED_MODULE_15__.batchToSpaceNDGradConfig, _gradients_BroadcastTo_grad__WEBPACK_IMPORTED_MODULE_16__.broadcastToGradConfig, _gradients_Cast_grad__WEBPACK_IMPORTED_MODULE_17__.castGradConfig, _gradients_Ceil_grad__WEBPACK_IMPORTED_MODULE_18__.ceilGradConfig, _gradients_ClipByValue_grad__WEBPACK_IMPORTED_MODULE_19__.clipByValueGradConfig, _gradients_ComplexAbs_grad__WEBPACK_IMPORTED_MODULE_20__.complexAbsGradConfig, _gradients_Concat_grad__WEBPACK_IMPORTED_MODULE_21__.concatGradConfig, _gradients_Conv2DBackpropInput_grad__WEBPACK_IMPORTED_MODULE_22__.conv2DBackpropInputGradConfig, _gradients_Conv2D_grad__WEBPACK_IMPORTED_MODULE_23__.conv2DGradConfig, _gradients_Conv3D_grad__WEBPACK_IMPORTED_MODULE_24__.conv3DGradConfig, _gradients_Cos_grad__WEBPACK_IMPORTED_MODULE_25__.cosGradConfig, _gradients_Cosh_grad__WEBPACK_IMPORTED_MODULE_26__.coshGradConfig, _gradients_Cumsum_grad__WEBPACK_IMPORTED_MODULE_27__.cumsumGradConfig, _gradients_DepthwiseConv2dNative_grad__WEBPACK_IMPORTED_MODULE_28__.depthwiseConv2dNativeGradConfig, _gradients_Dilation2D_grad__WEBPACK_IMPORTED_MODULE_29__.dilation2dGradConfig, _gradients_RealDiv_grad__WEBPACK_IMPORTED_MODULE_30__.divGradConfig, _gradients_Elu_grad__WEBPACK_IMPORTED_MODULE_31__.eluGradConfig, _gradients_Erf_grad__WEBPACK_IMPORTED_MODULE_32__.erfGradConfig, _gradients_Exp_grad__WEBPACK_IMPORTED_MODULE_33__.expGradConfig, _gradients_ExpandDims_grad__WEBPACK_IMPORTED_MODULE_34__.expandDimsGradConfig, _gradients_Expm1_grad__WEBPACK_IMPORTED_MODULE_35__.expm1GradConfig, _gradients_FloorDiv_grad__WEBPACK_IMPORTED_MODULE_36__.floorDivGradConfig, _gradients_Floor_grad__WEBPACK_IMPORTED_MODULE_37__.floorGradConfig, _gradients_FusedBatchNorm_grad__WEBPACK_IMPORTED_MODULE_38__.fusedBatchNormGradConfig, _gradients_GatherV2_grad__WEBPACK_IMPORTED_MODULE_39__.gatherGradConfig, _gradients_GreaterEqual_grad__WEBPACK_IMPORTED_MODULE_40__.greaterEqualGradConfig, _gradients_Identity_grad__WEBPACK_IMPORTED_MODULE_41__.identityGradConfig, _gradients_IsFinite_grad__WEBPACK_IMPORTED_MODULE_42__.isFiniteGradConfig, _gradients_IsInf_grad__WEBPACK_IMPORTED_MODULE_43__.isInfGradConfig, _gradients_IsNan_grad__WEBPACK_IMPORTED_MODULE_44__.isNanGradConfig, _gradients_LeakyRelu_grad__WEBPACK_IMPORTED_MODULE_45__.leakyReluGradConfig, _gradients_Log1p_grad__WEBPACK_IMPORTED_MODULE_46__.log1pGradConfig, _gradients_Log_grad__WEBPACK_IMPORTED_MODULE_47__.logGradConfig, _gradients_LogSoftmax_grad__WEBPACK_IMPORTED_MODULE_48__.logSoftmaxGradConfig, _gradients_LRN_grad__WEBPACK_IMPORTED_MODULE_49__.lrnGradConfig, _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_50__.maxGradConfig, _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_50__.maxGradConfig, _gradients_Maximum_grad__WEBPACK_IMPORTED_MODULE_51__.maximumGradConfig, _gradients_MaxPool3D_grad__WEBPACK_IMPORTED_MODULE_52__.maxPool3DGradConfig, _gradients_MaxPool_grad__WEBPACK_IMPORTED_MODULE_53__.maxPoolGradConfig, _gradients_Mean_grad__WEBPACK_IMPORTED_MODULE_54__.meanGradConfig, _gradients_Min_grad__WEBPACK_IMPORTED_MODULE_55__.minGradConfig, _gradients_Minimum_grad__WEBPACK_IMPORTED_MODULE_56__.minimumGradConfig, _gradients_MirrorPad_grad__WEBPACK_IMPORTED_MODULE_57__.mirrorPadGradConfig, _gradients_Mod_grad__WEBPACK_IMPORTED_MODULE_58__.modGradConfig, _gradients_Multiply_grad__WEBPACK_IMPORTED_MODULE_59__.multiplyGradConfig, _gradients_Neg_grad__WEBPACK_IMPORTED_MODULE_60__.negGradConfig, _gradients_OneHot_grad__WEBPACK_IMPORTED_MODULE_61__.oneHotGradConfig, _gradients_OnesLike_grad__WEBPACK_IMPORTED_MODULE_62__.onesLikeGradConfig, _gradients_Pack_grad__WEBPACK_IMPORTED_MODULE_63__.packGradConfig, _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_64__.padV2GradConfig, _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_64__.padV2GradConfig, _gradients_Pow_grad__WEBPACK_IMPORTED_MODULE_65__.powGradConfig, _gradients_Prelu_grad__WEBPACK_IMPORTED_MODULE_66__.preluGradConfig, _gradients_Prod_grad__WEBPACK_IMPORTED_MODULE_67__.prodGradConfig, _gradients_Reciprocal_grad__WEBPACK_IMPORTED_MODULE_68__.reciprocalGradConfig, _gradients_Relu6_grad__WEBPACK_IMPORTED_MODULE_69__.relu6GradConfig, _gradients_Relu_grad__WEBPACK_IMPORTED_MODULE_70__.reluGradConfig, _gradients_Reshape_grad__WEBPACK_IMPORTED_MODULE_71__.reshapeGradConfig, _gradients_ResizeBilinear_grad__WEBPACK_IMPORTED_MODULE_72__.resizeBilinearGradConfig, _gradients_ResizeNearestNeighbor_grad__WEBPACK_IMPORTED_MODULE_73__.resizeNearestNeighborGradConfig, _gradients_Reverse_grad__WEBPACK_IMPORTED_MODULE_74__.reverseGradConfig, _gradients_Round_grad__WEBPACK_IMPORTED_MODULE_75__.roundGradConfig, _gradients_Rsqrt_grad__WEBPACK_IMPORTED_MODULE_76__.rsqrtGradConfig, _gradients_Select_grad__WEBPACK_IMPORTED_MODULE_77__.selectGradConfig, _gradients_Selu_grad__WEBPACK_IMPORTED_MODULE_78__.seluGradConfig, _gradients_Sigmoid_grad__WEBPACK_IMPORTED_MODULE_79__.sigmoidGradConfig, _gradients_Sign_grad__WEBPACK_IMPORTED_MODULE_80__.signGradConfig, _gradients_Sin_grad__WEBPACK_IMPORTED_MODULE_81__.sinGradConfig, _gradients_Sinh_grad__WEBPACK_IMPORTED_MODULE_82__.sinhGradConfig, _gradients_Slice_grad__WEBPACK_IMPORTED_MODULE_83__.sliceGradConfig, _gradients_Softmax_grad__WEBPACK_IMPORTED_MODULE_84__.softmaxGradConfig, _gradients_Softplus_grad__WEBPACK_IMPORTED_MODULE_85__.softplusGradConfig, _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_86__.spaceToBatchNDGradConfig, _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_86__.spaceToBatchNDGradConfig, _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_87__.splitVGradConfig, _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_87__.splitVGradConfig, _gradients_Sqrt_grad__WEBPACK_IMPORTED_MODULE_88__.sqrtGradConfig, _gradients_SquaredDifference_grad__WEBPACK_IMPORTED_MODULE_89__.squaredDifferenceGradConfig, _gradients_Square_grad__WEBPACK_IMPORTED_MODULE_90__.squareGradConfig, _gradients_Step_grad__WEBPACK_IMPORTED_MODULE_91__.stepGradConfig, _gradients_Sub_grad__WEBPACK_IMPORTED_MODULE_92__.subGradConfig, _gradients_Sum_grad__WEBPACK_IMPORTED_MODULE_93__.sumGradConfig, _gradients_Tan_grad__WEBPACK_IMPORTED_MODULE_94__.tanGradConfig, _gradients_Tanh_grad__WEBPACK_IMPORTED_MODULE_95__.tanhGradConfig, _gradients_Tile_grad__WEBPACK_IMPORTED_MODULE_96__.tileGradConfig, _gradients_Transpose_grad__WEBPACK_IMPORTED_MODULE_97__.transposeGradConfig, _gradients_Unpack_grad__WEBPACK_IMPORTED_MODULE_98__.unpackGradConfig, _gradients_UnsortedSegmentSum_grad__WEBPACK_IMPORTED_MODULE_99__.unsortedSegmentSumGradConfig, _gradients_ZerosLike_grad__WEBPACK_IMPORTED_MODULE_100__.zerosLikeGradConfig];
for (const gradientConfig of gradConfigs) {
  (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_101__.registerGradient)(gradientConfig);
}

/***/ }),

/***/ 64784:
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/dataset.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Dataset": () => (/* binding */ Dataset),
/* harmony export */   "array": () => (/* binding */ array),
/* harmony export */   "datasetFromIteratorFn": () => (/* binding */ datasetFromIteratorFn),
/* harmony export */   "zip": () => (/* binding */ zip)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! seedrandom */ 67801);
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iterators/lazy_iterator */ 67376);
/* harmony import */ var _util_deep_map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/deep_map */ 89602);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */




// TODO(soergel): consider vectorized operations within the pipeline.
/**
 * Represents a potentially large list of independent data elements (typically
 * 'samples' or 'examples').
 *
 * A 'data example' may be a primitive, an array, a map from string keys to
 * values, or any nested structure of these.
 *
 * A `Dataset` represents an ordered collection of elements, together with a
 * chain of transformations to be performed on those elements. Each
 * transformation is a method of `Dataset` that returns another `Dataset`, so
 * these may be chained, e.g.
 * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.
 *
 * Data loading and transformation is done in a lazy, streaming fashion.  The
 * dataset may be iterated over multiple times; each iteration starts the data
 * loading anew and recapitulates the transformations.
 *
 * A `Dataset` is typically processed as a stream of unbatched examples -- i.e.,
 * its transformations are applied one example at a time. Batching produces a
 * new `Dataset` where each element is a batch. Batching should usually come
 * last in a pipeline, because data transformations are easier to express on a
 * per-example basis than on a per-batch basis.
 *
 * The following code examples are calling `await dataset.forEachAsync(...)` to
 * iterate once over the entire dataset in order to print out the data.
 *
 * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}
 */
class Dataset {
  constructor() {
    this.size = null;
  }
  // TODO(soergel): Make Datasets report whether repeated iterator() calls
  // produce the same result (e.g., reading from a file) or different results
  // (e.g., from the webcam).  Currently we don't make this distinction but it
  // could be important for the user to know.
  // abstract isDeterministic(): boolean;
  /**
   * Groups elements into batches.
   *
   * It is assumed that each of the incoming dataset elements has the same
   * structure -- i.e. the same set of keys at each location in an object
   * hierarchy.  For each key, the resulting `Dataset` provides a batched
   * element collecting all of the incoming values for that key.
   *
   *  * Incoming primitives are grouped into a 1-D Tensor.
   *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is
   *    the batch dimension.
   *  * Incoming arrays are converted to Tensor and then batched.
   *  * A nested array is interpreted as an n-D Tensor, so the batched result
   *    has n+1 dimensions.
   *  * An array that cannot be converted to Tensor produces an error.
   *
   * If an array should not be batched as a unit, it should first be converted
   * to an object with integer keys.
   *
   * Here are a few examples:
   *
   * Batch a dataset of numbers:
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);
   * await a.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of arrays:
   * ```js
   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);
   * await b.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of objects:
   * ```js
   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},
   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},
   *   {a: 8, b: 18}]).batch(4);
   * await c.forEachAsync(e => {
   *   console.log('{');
   *   for(var key in e) {
   *     console.log(key+':');
   *     e[key].print();
   *   }
   *   console.log('}');
   * })
   * ```
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `Dataset`, from which a stream of batches can be obtained.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  batch(batchSize, smallLastBatch = true) {
    const base = this;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(batchSize > 0, () => `batchSize needs to be positive, but it is
      ${batchSize}`);
    let size;
    if (this.size === Infinity || this.size == null) {
      // If the size of this dataset is infinity or null, the new size keeps the
      // same.
      size = this.size;
    } else if (smallLastBatch) {
      // If the size of this dataset is known and include small last batch, the
      // new size is full batch count plus last batch.
      size = Math.ceil(this.size / batchSize);
    } else {
      // If the size of this dataset is known and not include small last batch,
      // the new size is full batch count.
      size = Math.floor(this.size / batchSize);
    }
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);
    }), size);
  }
  /**
   * Concatenates this `Dataset` with another.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * const b = tf.data.array([4, 5, 6]);
   * const c = a.concatenate(b);
   * await c.forEachAsync(e => console.log(e));
   * ```
   *
   * @param dataset A `Dataset` to be concatenated onto this one.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  concatenate(dataset) {
    const base = this;
    let size;
    if (this.size === Infinity || dataset.size === Infinity) {
      // If the size of any of these two dataset is infinity, new size is
      // infinity.
      size = Infinity;
    } else if (this.size != null && dataset.size != null) {
      // If the size of both datasets are known and not infinity, new size is
      // sum the size of these two datasets.
      size = this.size + dataset.size;
    } else {
      // If neither of these two datasets has infinite size and any of these two
      // datasets' size is null, the new size is null.
      size = null;
    }
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).concatenate(yield dataset.iterator());
    }), size);
  }
  /**
   * Filters this dataset according to `predicate`.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
   *   .filter(x => x%2 === 0);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param predicate A function mapping a dataset element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `Dataset` of elements for which the predicate was true.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  filter(predicate) {
    const base = this;
    let size;
    if (this.size === Infinity) {
      // If the size of this dataset is infinity, new size is infinity
      size = Infinity;
    } else {
      // If this dataset has limited elements, new size is null because it might
      // exhausted randomly.
      size = null;
    }
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).filter(x => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => predicate(x)));
    }), size);
  }
  /**
   * Apply a function to every element of the dataset.
   *
   * After the function is applied to a dataset element, any Tensors contained
   * within that element are disposed.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param f A function to apply to each dataset element.
   * @returns A `Promise` that resolves after all elements have been processed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  forEachAsync(f) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield _this.iterator()).forEachAsync(f);
    })();
  }
  /**
   * Maps this dataset through a 1-to-1 transform.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).map(x => x*x);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param transform A function mapping a dataset element to a transformed
   *   dataset element.
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  map(transform) {
    const base = this;
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).map(x => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => transform(x)));
    }), this.size);
  }
  /**
   * Maps this dataset through an async 1-to-1 transform.
   *
   * ```js
   * const a =
   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){
   *    setTimeout(() => {
   *      resolve(x * x);
   *    }, Math.random()*1000 + 500);
   *  }));
   * console.log(await a.toArray());
   * ```
   *
   * @param transform A function mapping a dataset element to a `Promise` for a
   *   transformed dataset element.  This transform is responsible for disposing
   *   any intermediate `Tensor`s, i.e. by wrapping its computation in
   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous
   *   `map()` case).
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  mapAsync(transform) {
    const base = this;
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).mapAsync(transform);
    }), this.size);
  }
  /**
   *  Creates a `Dataset` that prefetches elements from this dataset.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  prefetch(bufferSize) {
    if (bufferSize == null) {
      throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');
    }
    const base = this;
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).prefetch(bufferSize);
    }), this.size);
  }
  /**
   * Repeats this dataset `count` times.
   *
   * NOTE: If this dataset is a function of global state (e.g. a random number
   * generator), then different repetitions may produce different elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).repeat(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: (Optional) An integer, representing the number of times
   *   the dataset should be repeated. The default behavior (if `count` is
   *   `undefined` or negative) is for the dataset be repeated indefinitely.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  repeat(count) {
    const base = this;
    let size;
    if (this.size != null && count > 0) {
      // If this dataset has size and count is positive, new size is current
      // size multiply count. This also covers the case that current size is
      // infinity.
      size = this.size * count;
    } else if (count === 0) {
      // If count is 0, new size is 0.
      size = 0;
    } else if (this.size != null && (count === undefined || count < 0)) {
      // If this dataset has size and count is undefined or negative, the
      // dataset will be repeated indefinitely and new size is infinity.
      size = Infinity;
    } else {
      // If the size of this dataset is null, the new dataset's size is null.
      size = null;
    }
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const iteratorIterator = (0,_iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__.iteratorFromFunction)( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        return {
          value: yield base.iterator(),
          done: false
        };
      }));
      return (0,_iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__.iteratorFromConcatenated)(iteratorIterator.take(count));
    }), size);
  }
  /**
   * Creates a `Dataset` that skips `count` initial elements from this dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be skipped
   *   to form the new dataset.  If `count` is greater than the size of this
   *   dataset, the new dataset will contain no elements.  If `count`
   *   is `undefined` or negative, skips the entire dataset.
   *
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  skip(count) {
    const base = this;
    let size;
    if (this.size != null && count >= 0 && this.size >= count) {
      // If the size of this dataset is greater than count, the new dataset's
      // size is current size minus skipped size.This also covers the case that
      // current size is infinity.
      size = this.size - count;
    } else if (this.size != null && (this.size < count || count === undefined || count < 0)) {
      // If the size of this dataset is smaller than count, or count is
      // undefined or negative, skips the entire dataset and the new size is 0.
      size = 0;
    } else {
      // If the size of this dataset is null, the new dataset's size is null.
      size = null;
    }
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).skip(count);
    }), size);
  }
  /**
   * Pseudorandomly shuffles the elements of this dataset. This is done in a
   * streaming manner, by sampling from a given number of prefetched elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param bufferSize: An integer specifying the number of elements from this
   *   dataset from which the new dataset will sample.
   * @param seed: (Optional) An integer specifying the random seed that will
   *   be used to create the distribution.
   * @param reshuffleEachIteration: (Optional) A boolean, which if true
   *   indicates that the dataset should be pseudorandomly reshuffled each time
   *   it is iterated over. If false, elements will be returned in the same
   *   shuffled order on each iteration. (Defaults to `true`.)
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  shuffle(bufferSize, seed, reshuffleEachIteration = true) {
    if (bufferSize == null || bufferSize < 0) {
      if (this.size == null) {
        throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');
      } else {
        throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  ' + 'If your data fits in main memory (for regular JS objects), ' + 'and/or GPU memory (for `tf.Tensor`s), consider setting ' + `bufferSize to the dataset size (${this.size} elements)`);
      }
    }
    const base = this;
    const random = seedrandom__WEBPACK_IMPORTED_MODULE_2__.alea(seed || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now().toString());
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let seed2 = random.int32();
      if (reshuffleEachIteration) {
        seed2 += random.int32();
      }
      return (yield base.iterator()).shuffle(bufferSize, seed2.toString());
    }), this.size);
  }
  /**
   * Creates a `Dataset` with at most `count` initial elements from this
   * dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be taken
   *   to form the new dataset.  If `count` is `undefined` or negative, or if
   *   `count` is greater than the size of this dataset, the new dataset will
   *   contain all elements of this dataset.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  take(count) {
    const base = this;
    let size;
    if (this.size != null && this.size > count) {
      // If the size of this dataset is greater than count, the new dataset's
      // size is count.
      size = count;
    } else if (this.size != null && this.size <= count) {
      // If the size of this dataset is equal or smaller than count, the new
      // dataset's size is the size of this dataset.
      size = this.size;
    } else {
      // If the size of this dataset is null, the new dataset's size is null.
      size = null;
    }
    return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield base.iterator()).take(count);
    }), size);
  }
  /**
   * Collect all elements of this dataset into an array.
   *
   * Obviously this will succeed only for small datasets that fit in memory.
   * Useful for testing and generally should be avoided if possible.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);
   * console.log(await a.toArray());
   * ```
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  toArray() {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.size === Infinity) {
        throw new Error('Can not convert infinite data stream to array.');
      }
      return (yield _this2.iterator()).toArray();
    })();
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   */
  toArrayForTest() {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this3.size === Infinity) {
        throw new Error('Can not convert infinite data stream to array.');
      }
      return (yield _this3.iterator()).toArrayForTest();
    })();
  }
}
// TODO(soergel): deep sharded shuffle, where supported
Dataset.MAX_BUFFER_SIZE = 10000;
/**
 * Create a `Dataset` defined by a provided iterator() function.
 *
 * ```js
 * let i = -1;
 * const func = () =>
 *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};
 * const iter = tf.data.iteratorFromFunction(func);
 * const ds = tf.data.datasetFromIteratorFn(iter);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 */
function datasetFromIteratorFn(iteratorFn, size = null) {
  return new class extends Dataset {
    constructor() {
      super(...arguments);
      this.size = size;
    }
    /*
     * Provide a new stream of elements.  Note this will also start new streams
     * from any underlying `Dataset`s.
     */
    iterator() {
      return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        return iteratorFn();
      })();
    }
  }();
}
/**
 * Create a `Dataset` from an array of elements.
 *
 * Create a Dataset from an array of objects:
 * ```js
 * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);
 * await a.forEachAsync(e => console.log(e));
 * ```
 *
 * Create a Dataset from an array of numbers:
 * ```js
 * const a = tf.data.array([4, 5, 6]);
 * await a.forEachAsync(e => console.log(e));
 * ```
 * @param items An array of elements that will be parsed as items in a dataset.
 *
 * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}
 */
function array(items) {
  return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
    return (0,_iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__.iteratorFromItems)(items);
  }), items.length);
}
/**
 * Create a `Dataset` by zipping together an array, dict, or nested
 * structure of `Dataset`s (and perhaps additional constants).
 * The underlying datasets must provide elements in a consistent order such that
 * they correspond.
 *
 * The number of elements in the resulting dataset is the same as the size of
 * the smallest dataset in datasets.
 *
 * The nested structure of the `datasets` argument determines the
 * structure of elements in the resulting iterator.
 *
 * Note this means that, given an array of two datasets that produce dict
 * elements, the result is a dataset that produces elements that are arrays
 * of two dicts:
 *
 * Zip an array of datasets:
 * ```js
 * console.log('Zip two datasets of objects:');
 * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);
 * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);
 * const ds3 = tf.data.zip([ds1, ds2]);
 * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));
 *
 * // If the goal is to merge the dicts in order to produce elements like
 * // {a: ..., b: ...}, this requires a second step such as:
 * console.log('Merge the objects:');
 * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});
 * await ds4.forEachAsync(e => console.log(e));
 * ```
 *
 * Zip a dict of datasets:
 * ```js
 * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);
 * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);
 * const c = tf.data.zip({c: a, d: b});
 * await c.forEachAsync(e => console.log(JSON.stringify(e)));
 * ```
 *
 * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}
 */
function zip(datasets) {
  // manually type-check the argument for JS users
  if (!(0,_util_deep_map__WEBPACK_IMPORTED_MODULE_4__.isIterable)(datasets)) {
    throw new Error('The argument to zip() must be an object or array.');
  }
  let size;
  if (Array.isArray(datasets)) {
    for (let i = 0; i < datasets.length; i++) {
      size = size == null ? datasets[i].size : Math.min(size, datasets[i].size);
    }
  } else if (datasets instanceof Object) {
    for (const ds in datasets) {
      size = size == null ? datasets[ds].size : Math.min(size, datasets[ds].size);
    }
  }
  return datasetFromIteratorFn( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
    const streams = yield (0,_util_deep_map__WEBPACK_IMPORTED_MODULE_4__.deepMapAndAwaitAll)(datasets, d => {
      if (d instanceof Dataset) {
        return {
          value: d.iterator(),
          recurse: false
        };
      } else if ((0,_util_deep_map__WEBPACK_IMPORTED_MODULE_4__.isIterable)(d)) {
        return {
          value: null,
          recurse: true
        };
      } else {
        throw new Error('Leaves of the structure passed to zip() must be Datasets, ' + 'not primitives.');
      }
    });
    return (0,_iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__.iteratorFromZipped)(streams, _iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__.ZipMismatchMode.SHORTEST);
  }), size);
}
/**
 * A zip function for use with deepZip, passed via the columnMajorBatch call.
 *
 * Accepts an array of identically-structured nested elements and either batches
 * them (if they are primitives, numeric arrays, or Tensors) or requests
 * recursion (if not).
 */
// tslint:disable-next-line:no-any
function deepBatchConcat(rows) {
  if (rows === null) {
    return null;
  }
  // use the first item to decide whether to recurse or batch here.
  const exampleRow = rows[0];
  if ((0,_util_deep_map__WEBPACK_IMPORTED_MODULE_4__.canTensorify)(exampleRow)) {
    // rows is an array of primitives, Tensors, or arrays.  Batch them.
    const value = batchConcat(rows);
    return {
      value,
      recurse: false
    };
  }
  // the example row is an object, so recurse into it.
  return {
    value: null,
    recurse: true
  };
}
/**
 * Assembles a list of same-shaped numbers, number arrays, or Tensors
 * into a single new Tensor where axis 0 is the batch dimension.
 */
function batchConcat(arrays) {
  if (arrays.length === 0) {
    // We can't return an empty Tensor because we don't know the element shape.
    throw new Error('Can\'t make a batch of zero elements.');
  }
  if (arrays[0] instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
    // Input is an array of Tensors
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.stack(arrays);
  } else {
    // Input is a possibly-nested array of numbers.
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor(arrays);
  }
}

/***/ }),

/***/ 99764:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSVDataset": () => (/* binding */ CSVDataset)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _dataset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dataset */ 64784);
/* harmony import */ var _text_line_dataset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./text_line_dataset */ 15146);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */



const CODE_QUOTE = '"';
const STATE_OUT = Symbol('out');
const STATE_FIELD = Symbol('field');
const STATE_QUOTE = Symbol('quote');
const STATE_QUOTE_AFTER_QUOTE = Symbol('quoteafterquote');
const STATE_WITHIN_QUOTE_IN_QUOTE = Symbol('quoteinquote');
/**
 * Represents a potentially large collection of delimited text records.
 *
 * The produced `TensorContainer`s each contain one key-value pair for
 * every column of the table.  When a field is empty in the incoming data, the
 * resulting value is `undefined`, or throw error if it is required.  Values
 * that can be parsed as numbers are emitted as type `number`, other values
 * are parsed as `string`.
 *
 * The results are not batched.
 *
 * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}
 */
class CSVDataset extends _dataset__WEBPACK_IMPORTED_MODULE_2__.Dataset {
  /**
   * Returns column names of the csv dataset. If `configuredColumnsOnly` is
   * true, return column names in `columnConfigs`. If `configuredColumnsOnly` is
   * false and `columnNames` is provided, `columnNames`. If
   * `configuredColumnsOnly` is false and `columnNames` is not provided, return
   * all column names parsed from the csv file. For example usage please go to
   * `tf.data.csv`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  columnNames() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this.columnNamesValidated) {
        yield _this.setColumnNames();
      }
      return _this.configuredColumnsOnly ? Object.keys(_this.columnConfigs) : _this.fullColumnNames;
    })();
  }
  /* 1) If `columnNames` is provided as string[], use this string[] as output
   * keys in corresponding order. The length must match the number of inferred
   * columns if `hasHeader` is true .
   * 2) If `columnNames` is not provided, parse header line as `columnNames` if
   * hasHeader is true. If `hasHeader` is false, throw an error.
   * 3) If `columnConfigs` is provided, all the keys in `columnConfigs` must
   * exist in parsed `columnNames`.
   */
  setColumnNames() {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const columnNamesFromFile = yield _this2.maybeReadHeaderLine();
      if (!_this2.fullColumnNames && !columnNamesFromFile) {
        // Throw an error if columnNames is not provided and no header line.
        throw new Error('Column names must be provided if there is no header line.');
      } else if (_this2.fullColumnNames && columnNamesFromFile) {
        // Check provided columnNames match header line.
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(columnNamesFromFile.length === _this2.fullColumnNames.length, () => 'The length of provided columnNames (' + _this2.fullColumnNames.length.toString() + ') does not match the length of the header line read from ' + 'file (' + columnNamesFromFile.length.toString() + ').');
      }
      if (!_this2.fullColumnNames) {
        _this2.fullColumnNames = columnNamesFromFile;
      }
      // Check if there are duplicate column names.
      const counts = _this2.fullColumnNames.reduce((countAcc, name) => {
        countAcc[name] = countAcc[name] + 1 || 1;
        return countAcc;
      }, {});
      const duplicateNames = Object.keys(counts).filter(name => counts[name] > 1);
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(duplicateNames.length === 0, () => 'Duplicate column names found: ' + duplicateNames.toString());
      // Check if keys in columnConfigs match columnNames.
      if (_this2.columnConfigs) {
        for (const key of Object.keys(_this2.columnConfigs)) {
          const index = _this2.fullColumnNames.indexOf(key);
          if (index === -1) {
            throw new Error('The key "' + key + '" provided in columnConfigs does not match any of the column ' + 'names (' + _this2.fullColumnNames.toString() + ').');
          }
        }
      }
      _this2.columnNamesValidated = true;
    })();
  }
  maybeReadHeaderLine() {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this3.hasHeader) {
        const iter = yield _this3.base.iterator();
        const firstElement = yield iter.next();
        if (firstElement.done) {
          throw new Error('No data was found for CSV parsing.');
        }
        const firstLine = firstElement.value;
        const headers = _this3.parseRow(firstLine, false);
        return headers;
      } else {
        return null;
      }
    })();
  }
  /**
   * Create a `CSVDataset`.
   *
   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.
   * @param csvConfig (Optional) A CSVConfig object that contains configurations
   *     of reading and decoding from CSV file(s).
   *
   *     hasHeader: (Optional) A boolean value that indicates whether the first
   *     row of provided CSV file is a header line with column names, and should
   *     not be included in the data. Defaults to `true`.
   *
   *     columnNames: (Optional) A list of strings that corresponds to
   *     the CSV column names, in order. If provided, it ignores the column
   *     names inferred from the header row. If not provided, infers the column
   *     names from the first row of the records. If hasHeader is false and
   *     columnNames is not provided, this method throws an error.
   *
   *     columnConfigs: (Optional) A dictionary whose key is column names, value
   *     is an object stating if this column is required, column's data type,
   *     default value, and if this column is label. If provided, keys must
   *     correspond to names provided in columnNames or inferred from the file
   *     header lines. If isLabel is true any column, returns an array of two
   *     items: the first item is a dict of features key/value pairs, the second
   *     item is a dict of labels key/value pairs. If no feature is marked as
   *     label, returns a dict of features only.
   *
   *     configuredColumnsOnly (Optional) If true, only columns provided in
   *     columnConfigs will be parsed and provided during iteration.
   *
   *     delimiter (Optional) The string used to parse each line of the input
   *     file. Defaults to `,`.
   */
  constructor(input, csvConfig) {
    super();
    this.input = input;
    this.hasHeader = true;
    this.fullColumnNames = null;
    this.columnNamesValidated = false;
    this.columnConfigs = null;
    this.configuredColumnsOnly = false;
    this.delimiter = ',';
    this.delimWhitespace = false;
    this.base = new _text_line_dataset__WEBPACK_IMPORTED_MODULE_3__.TextLineDataset(input);
    if (!csvConfig) {
      csvConfig = {};
    }
    this.hasHeader = csvConfig.hasHeader === false ? false : true;
    this.fullColumnNames = csvConfig.columnNames;
    this.columnConfigs = csvConfig.columnConfigs;
    this.configuredColumnsOnly = csvConfig.configuredColumnsOnly;
    if (csvConfig.delimWhitespace) {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(csvConfig.delimiter == null, () => 'Delimiter should not be provided when delimWhitespace is true.');
      this.delimWhitespace = true;
      this.delimiter = ' ';
    } else {
      this.delimiter = csvConfig.delimiter ? csvConfig.delimiter : ',';
    }
  }
  iterator() {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this4.columnNamesValidated) {
        yield _this4.setColumnNames();
      }
      let lines = yield _this4.base.iterator();
      if (_this4.hasHeader) {
        // We previously read the first line to get the columnNames.
        // Now that we're providing data, skip it.
        lines = lines.skip(1);
      }
      return lines.map(x => _this4.makeDataElement(x));
    })();
  }
  makeDataElement(line) {
    const values = this.parseRow(line);
    const features = {};
    const labels = {};
    for (let i = 0; i < this.fullColumnNames.length; i++) {
      const key = this.fullColumnNames[i];
      const config = this.columnConfigs ? this.columnConfigs[key] : null;
      if (this.configuredColumnsOnly && !config) {
        // This column is not selected.
        continue;
      } else {
        const value = values[i];
        let parsedValue = null;
        if (value === '') {
          // If default value is provided, use it. If default value is not
          // provided, set as undefined.
          if (config && config.default !== undefined) {
            parsedValue = config.default;
          } else if (config && (config.required || config.isLabel)) {
            throw new Error(`Required column ${key} is empty in this line: ${line}`);
          } else {
            parsedValue = undefined;
          }
        } else {
          // A value is present, so parse it based on type
          const valueAsNum = Number(value);
          if (isNaN(valueAsNum)) {
            // The value is a string and this column is declared as boolean
            // in config, parse it as boolean.
            if (config && config.dtype === 'bool') {
              parsedValue = this.getBoolean(value);
            } else {
              // Set value as string
              parsedValue = value;
            }
          } else if (!config || !config.dtype) {
            // If this value is a number and no type config is provided, return
            // it as number.
            parsedValue = valueAsNum;
          } else {
            // If this value is a number and data type is provided, parse it
            // according to provided data type.
            switch (config.dtype) {
              case 'float32':
                parsedValue = valueAsNum;
                break;
              case 'int32':
                parsedValue = Math.floor(valueAsNum);
                break;
              case 'bool':
                parsedValue = this.getBoolean(value);
                break;
              default:
                parsedValue = valueAsNum;
            }
          }
        }
        // Check if this column is label.
        config && config.isLabel ? labels[key] = parsedValue : features[key] = parsedValue;
      }
    }
    // If label exists, return an object of features and labels as {xs:features,
    // ys:labels}, otherwise return features only.
    if (Object.keys(labels).length === 0) {
      return features;
    } else {
      return {
        xs: features,
        ys: labels
      };
    }
  }
  getBoolean(value) {
    if (value === '1' || value.toLowerCase() === 'true') {
      return 1;
    } else {
      return 0;
    }
  }
  // adapted from https://beta.observablehq.com/@mbostock/streaming-csv
  parseRow(line, validateElementCount = true) {
    const result = [];
    let readOffset = 0;
    const readLength = line.length;
    let currentState = STATE_OUT;
    // Goes through the line to parse quote.
    for (let i = 0; i < readLength; i++) {
      switch (currentState) {
        // Before enter a new field
        case STATE_OUT:
          switch (line.charAt(i)) {
            // Enter a quoted field
            case CODE_QUOTE:
              readOffset = i + 1;
              currentState = STATE_QUOTE;
              break;
            // Read an empty field
            case this.delimiter:
              readOffset = i + 1;
              // If delimiter is white space and configured to collapse
              // multiple white spaces, ignore this white space.
              if (this.delimiter === ' ' && this.delimWhitespace) {
                break;
              }
              result.push('');
              currentState = STATE_OUT;
              break;
            // Enter an unquoted field
            default:
              currentState = STATE_FIELD;
              readOffset = i;
              break;
          }
          break;
        // In an unquoted field
        case STATE_FIELD:
          switch (line.charAt(i)) {
            // Exit an unquoted field, add it to result
            case this.delimiter:
              result.push(line.substring(readOffset, i));
              currentState = STATE_OUT;
              readOffset = i + 1;
              break;
            default:
          }
          break;
        // In a quoted field
        case STATE_QUOTE:
          switch (line.charAt(i)) {
            // Read a quote after a quote
            case CODE_QUOTE:
              currentState = STATE_QUOTE_AFTER_QUOTE;
              break;
            default:
          }
          break;
        // This state means it's right after a second quote in a field
        case STATE_QUOTE_AFTER_QUOTE:
          switch (line.charAt(i)) {
            // Finished a quoted field
            case this.delimiter:
              result.push(line.substring(readOffset, i - 1));
              currentState = STATE_OUT;
              readOffset = i + 1;
              break;
            // Finished a quoted part in a quoted field
            case CODE_QUOTE:
              currentState = STATE_QUOTE;
              break;
            // In a quoted part in a quoted field
            default:
              currentState = STATE_WITHIN_QUOTE_IN_QUOTE;
              break;
          }
          break;
        case STATE_WITHIN_QUOTE_IN_QUOTE:
          switch (line.charAt(i)) {
            // Exit a quoted part in a quoted field
            case CODE_QUOTE:
              currentState = STATE_QUOTE;
              break;
            default:
          }
          break;
        default:
      }
    }
    // Adds last item based on if it is quoted.
    if (currentState === STATE_QUOTE_AFTER_QUOTE) {
      result.push(line.substring(readOffset, readLength - 1));
    } else {
      result.push(line.substring(readOffset));
    }
    // Check if each row has the same number of elements as column names.
    if (validateElementCount && result.length !== this.fullColumnNames.length) {
      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${result}`);
    }
    return result;
  }
}
// TODO(soergel): add more basic datasets for parity with tf.data
// tf.data.FixedLengthRecordDataset()
// tf.data.TFRecordDataset()

/***/ }),

/***/ 15146:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/datasets/text_line_dataset.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextLineDataset": () => (/* binding */ TextLineDataset)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _dataset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dataset */ 64784);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */

/**
 * Represents a potentially large collection of text lines.
 *
 * The results are not batched.
 */
class TextLineDataset extends _dataset__WEBPACK_IMPORTED_MODULE_1__.Dataset {
  /**
   * Create a `TextLineDataset`.
   *
   * @param input A `DataSource` providing a chunked, UTF8-encoded byte stream.
   */
  constructor(input) {
    super();
    this.input = input;
  }
  iterator() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const inputIterator = yield _this.input.iterator();
      const utf8Iterator = inputIterator.decodeUTF8();
      const lineIterator = utf8Iterator.split('\n').map(line => {
        // Windows/DOS format text file has extra line breaker at the end of line.
        if (line.endsWith('\r')) {
          line = line.slice(0, -1);
        }
        return line;
      });
      return lineIterator;
    })();
  }
}

/***/ }),

/***/ 83784:
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/datasource.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSource": () => (/* binding */ DataSource)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * Represents a data source readable as a stream of binary data chunks.
 *
 * Because `Dataset`s can be read repeatedly (via `Dataset.iterator()`), this
 * provides a means to repeatedly create streams from the underlying data
 * sources.
 */
class DataSource {}
// TODO(soergel): consider convenience factory functions here
// in combination with chainable source->dataset above, e.g.:
// tf.data.url(...).asCsvDataset().shuffle().batch()

/***/ }),

/***/ 69309:
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSVDataset": () => (/* reexport safe */ _datasets_csv_dataset__WEBPACK_IMPORTED_MODULE_1__.CSVDataset),
/* harmony export */   "Dataset": () => (/* reexport safe */ _dataset__WEBPACK_IMPORTED_MODULE_0__.Dataset),
/* harmony export */   "FileDataSource": () => (/* reexport safe */ _sources_file_data_source__WEBPACK_IMPORTED_MODULE_4__.FileDataSource),
/* harmony export */   "TextLineDataset": () => (/* reexport safe */ _datasets_text_line_dataset__WEBPACK_IMPORTED_MODULE_2__.TextLineDataset),
/* harmony export */   "URLDataSource": () => (/* reexport safe */ _sources_url_data_source__WEBPACK_IMPORTED_MODULE_5__.URLDataSource),
/* harmony export */   "array": () => (/* reexport safe */ _dataset__WEBPACK_IMPORTED_MODULE_0__.array),
/* harmony export */   "csv": () => (/* reexport safe */ _readers__WEBPACK_IMPORTED_MODULE_3__.csv),
/* harmony export */   "func": () => (/* reexport safe */ _readers__WEBPACK_IMPORTED_MODULE_3__.func),
/* harmony export */   "generator": () => (/* reexport safe */ _readers__WEBPACK_IMPORTED_MODULE_3__.generator),
/* harmony export */   "microphone": () => (/* reexport safe */ _readers__WEBPACK_IMPORTED_MODULE_3__.microphone),
/* harmony export */   "version_data": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_6__.version),
/* harmony export */   "webcam": () => (/* reexport safe */ _readers__WEBPACK_IMPORTED_MODULE_3__.webcam),
/* harmony export */   "zip": () => (/* reexport safe */ _dataset__WEBPACK_IMPORTED_MODULE_0__.zip)
/* harmony export */ });
/* harmony import */ var _dataset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataset */ 64784);
/* harmony import */ var _datasets_csv_dataset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./datasets/csv_dataset */ 99764);
/* harmony import */ var _datasets_text_line_dataset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datasets/text_line_dataset */ 15146);
/* harmony import */ var _readers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./readers */ 97173);
/* harmony import */ var _sources_file_data_source__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sources/file_data_source */ 12647);
/* harmony import */ var _sources_url_data_source__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sources/url_data_source */ 37052);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./version */ 88879);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/***/ }),

/***/ 64359:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/iterators/byte_chunk_iterator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ByteChunkIterator": () => (/* binding */ ByteChunkIterator)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _lazy_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lazy_iterator */ 67376);
/* harmony import */ var _string_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string_iterator */ 94979);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */



class ByteChunkIterator extends _lazy_iterator__WEBPACK_IMPORTED_MODULE_2__.LazyIterator {
  /**
   * Decode a stream of UTF8-encoded byte arrays to a stream of strings.
   *
   * The byte arrays producetd from the ByteChunkIterator on which this is
   * called will be interpreted as concatenated.  No assumptions are made about
   * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a
   * character may span the boundary between chunks.  This naturally happens,
   * for instance, when reading fixed-size byte arrays from a file.
   */
  decodeUTF8() {
    return new Utf8Iterator(this);
  }
}
// ============================================================================
// The following private classes serve to implement the chainable methods
// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,
// due to resulting trouble with circular imports.
// ============================================================================
// We wanted multiple inheritance, e.g.
//   class Utf8Iterator extends QueueIterator<string>, StringIterator
// but the TypeScript mixin approach is a bit hacky, so we take this adapter
// approach instead.
class Utf8Iterator extends _string_iterator__WEBPACK_IMPORTED_MODULE_3__.StringIterator {
  constructor(upstream) {
    super();
    this.upstream = upstream;
    this.impl = new Utf8IteratorImpl(upstream);
  }
  summary() {
    return this.impl.summary();
  }
  next() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.impl.next();
    })();
  }
}
/**
 * Decode a stream of UTF8-encoded byte arrays to a stream of strings.
 *
 * This is tricky because the incoming byte array boundaries may disrupt a
 * multi-byte UTF8 character. Thus any incomplete character data at the end of
 * a chunk must be carried over and prepended to the next chunk before
 * decoding. Luckily with native decoder, TextDecoder in browser and
 * string_decoder in node, byte array boundaries are handled automatically.
 *
 * In the context of an input pipeline for machine learning, UTF8 decoding is
 * needed to parse text files containing training examples or prediction
 * requests (e.g., formatted as CSV or JSON). We cannot use the built-in
 * decoding provided by FileReader.readAsText() because here we are in a
 * streaming context, which FileReader does not support.
 *
 * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded
 *   text, which should be interpreted as concatenated.  No assumptions are
 *   made about the boundaries of the incoming chunks, so a multi-byte UTF8
 *   encoding of a character may span the boundary between chunks.  This
 *   naturally happens, for instance, when reading fixed-size byte arrays from a
 *   file.
 */
class Utf8IteratorImpl extends _lazy_iterator__WEBPACK_IMPORTED_MODULE_2__.OneToManyIterator {
  constructor(upstream) {
    super();
    this.upstream = upstream;
    if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('IS_BROWSER')) {
      this.decoder = new TextDecoder('utf-8');
    } else {
      // tslint:disable-next-line:no-require-imports
      const {
        StringDecoder
      } = __webpack_require__(/*! string_decoder */ 31601);
      this.decoder = new StringDecoder('utf8');
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  pump() {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const chunkResult = yield _this2.upstream.next();
      let chunk;
      if (chunkResult.done) {
        return false;
      } else {
        chunk = chunkResult.value;
      }
      let text;
      if ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('IS_BROWSER')) {
        text = _this2.decoder.decode(chunk, {
          stream: true
        });
      } else {
        text = _this2.decoder.write(Buffer.from(chunk.buffer));
      }
      _this2.outputQueue.push(text);
      return true;
    })();
  }
}

/***/ }),

/***/ 39647:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/iterators/file_chunk_iterator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileChunkIterator": () => (/* binding */ FileChunkIterator)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _byte_chunk_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./byte_chunk_iterator */ 64359);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
// inspired by https://github.com/maxogden/filereader-stream


/**
 * Provide a stream of chunks from a File, Blob, or Uint8Array.
 * @param file The source File, Blob or Uint8Array.
 * @param options Optional settings controlling file reading.
 * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the
 *   input File, Blob or Uint8Array.
 */
class FileChunkIterator extends _byte_chunk_iterator__WEBPACK_IMPORTED_MODULE_2__.ByteChunkIterator {
  constructor(file, options = {}) {
    super();
    this.file = file;
    this.options = options;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(file instanceof Uint8Array || ((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('IS_BROWSER') ? file instanceof File || file instanceof Blob : false), () => 'FileChunkIterator only supports File, Blob and Uint8Array ' + 'right now.');
    this.offset = options.offset || 0;
    // default 1MB chunk has tolerable perf on large files
    this.chunkSize = options.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  next() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this.offset >= (_this.file instanceof Uint8Array ? _this.file.byteLength : _this.file.size)) {
        return {
          value: null,
          done: true
        };
      }
      const chunk = new Promise((resolve, reject) => {
        const end = _this.offset + _this.chunkSize;
        if (_this.file instanceof Uint8Array) {
          // Note if end > this.uint8Array.byteLength, we just get a small last
          // chunk.
          resolve(new Uint8Array(_this.file.slice(_this.offset, end)));
        } else {
          // This branch assumes that this.file type is File or Blob, which
          // means it is in the browser environment.
          // TODO(soergel): is this a performance issue?
          const fileReader = new FileReader();
          fileReader.onload = event => {
            let data = fileReader.result;
            // Not sure we can trust the return type of
            // FileReader.readAsArrayBuffer See e.g.
            // https://github.com/node-file-api/FileReader/issues/2
            if (data instanceof ArrayBuffer) {
              data = new Uint8Array(data);
            }
            if (!(data instanceof Uint8Array)) {
              return reject(new TypeError('FileReader returned unknown type.'));
            }
            resolve(data);
          };
          fileReader.onabort = event => {
            return reject(new Error('Aborted'));
          };
          fileReader.onerror = event => {
            return reject(new Error(event.type));
          };
          // TODO(soergel): better handle onabort, onerror
          // Note if end > this.file.size, we just get a small last chunk.
          const slice = _this.file.slice(_this.offset, end);
          // We can't use readAsText here (even if we know the file is text)
          // because the slice boundary may fall within a multi-byte character.
          fileReader.readAsArrayBuffer(slice);
        }
        _this.offset = end;
      });
      return {
        value: yield chunk,
        done: false
      };
    })();
  }
}

/***/ }),

/***/ 67376:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChainedIterator": () => (/* binding */ ChainedIterator),
/* harmony export */   "LazyIterator": () => (/* binding */ LazyIterator),
/* harmony export */   "OneToManyIterator": () => (/* binding */ OneToManyIterator),
/* harmony export */   "PrefetchIterator": () => (/* binding */ PrefetchIterator),
/* harmony export */   "ShuffleIterator": () => (/* binding */ ShuffleIterator),
/* harmony export */   "ZipMismatchMode": () => (/* binding */ ZipMismatchMode),
/* harmony export */   "iteratorFromConcatenated": () => (/* binding */ iteratorFromConcatenated),
/* harmony export */   "iteratorFromConcatenatedFunction": () => (/* binding */ iteratorFromConcatenatedFunction),
/* harmony export */   "iteratorFromFunction": () => (/* binding */ iteratorFromFunction),
/* harmony export */   "iteratorFromIncrementing": () => (/* binding */ iteratorFromIncrementing),
/* harmony export */   "iteratorFromItems": () => (/* binding */ iteratorFromItems),
/* harmony export */   "iteratorFromZipped": () => (/* binding */ iteratorFromZipped)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! seedrandom */ 67801);
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _util_deep_clone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/deep_clone */ 31455);
/* harmony import */ var _util_deep_map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/deep_map */ 89602);
/* harmony import */ var _util_growing_ring_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/growing_ring_buffer */ 35822);
/* harmony import */ var _util_ring_buffer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/ring_buffer */ 30008);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */






// Here we implement a simple asynchronous iterator.
// This lets us avoid using either third-party stream libraries or
// recent TypeScript language support requiring polyfills.
/**
 * Create a `LazyIterator` from an array of items.
 */
function iteratorFromItems(items) {
  return new ArrayIterator(items);
}
/**
 * Create a `LazyIterator` of incrementing integers.
 */
function iteratorFromIncrementing(start) {
  let i = start;
  return iteratorFromFunction(() => ({
    value: i++,
    done: false
  }));
}
/**
 * Create a `LazyIterator` from a function.
 *
 * ```js
 * let i = -1;
 * const func = () =>
 *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};
 * const iter = tf.data.iteratorFromFunction(func);
 * await iter.forEachAsync(e => console.log(e));
 * ```
 *
 * @param func A function that produces data on each call.
 */
function iteratorFromFunction(func) {
  return new FunctionCallIterator(func);
}
/**
 * Create a `LazyIterator` by concatenating underlying streams, which are
 * themselves provided as a stream.
 *
 * This can also be thought of as a "stream flatten" operation.
 *
 * @param baseIterators A stream of streams to be concatenated.
 * @param baseErrorHandler An optional function that can intercept `Error`s
 *   raised during a `next()` call on the base stream.  This function can decide
 *   whether the error should be propagated, whether the error should be
 *   ignored, or whether the base stream should be terminated.
 */
function iteratorFromConcatenated(baseIterators, baseErrorHandler) {
  return new ChainedIterator(baseIterators, baseErrorHandler);
}
/**
 * Create a `LazyIterator` by concatenating streams produced by calling a
 * stream-generating function a given number of times.
 *
 * Since a `LazyIterator` is read-once, it cannot be repeated, but this
 * function can be used to achieve a similar effect:
 *
 *   LazyIterator.ofConcatenatedFunction(() => new MyIterator(), 6);
 *
 * @param iteratorFunc: A function that produces a new stream on each call.
 * @param count: The number of times to call the function.
 * @param baseErrorHandler An optional function that can intercept `Error`s
 *   raised during a `next()` call on the base stream.  This function can decide
 *   whether the error should be propagated, whether the error should be
 *   ignored, or whether the base stream should be terminated.
 */
function iteratorFromConcatenatedFunction(iteratorFunc, count, baseErrorHandler) {
  return iteratorFromConcatenated(iteratorFromFunction(iteratorFunc).take(count), baseErrorHandler);
}
/**
 * Create a `LazyIterator` by zipping together an array, dict, or nested
 * structure of `LazyIterator`s (and perhaps additional constants).
 *
 * The underlying streams must provide elements in a consistent order such
 * that they correspond.
 *
 * Typically, the underlying streams should have the same number of
 * elements. If they do not, the behavior is determined by the
 * `mismatchMode` argument.
 *
 * The nested structure of the `iterators` argument determines the
 * structure of elements in the resulting iterator.
 *
 * @param iterators: An array or object containing LazyIterators at the
 * leaves.
 * @param mismatchMode: Determines what to do when one underlying iterator
 * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)
 * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`
 * causes the zipped iterator to terminate with the furst underlying
 * streams, so elements remaining on the longer streams are ignored.
 * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling
 * in nulls for the exhausted streams, until all streams are exhausted.
 */
function iteratorFromZipped(iterators, mismatchMode = ZipMismatchMode.FAIL) {
  return new ZipIterator(iterators, mismatchMode);
}
/**
 * An asynchronous iterator, providing lazy access to a potentially
 * unbounded stream of elements.
 *
 * Iterator can be obtained from a dataset:
 * `const iter = await dataset.iterator();`
 */
class LazyIterator {
  /**
   * Collect all remaining elements of a bounded stream into an array.
   * Obviously this will succeed only for small streams that fit in memory.
   * Useful for testing.
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  toArray() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const result = [];
      let x = yield _this.next();
      while (!x.done) {
        result.push(x.value);
        x = yield _this.next();
      }
      return result;
    })();
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  toArrayForTest() {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const stream = _this2.prefetch(100);
      const result = [];
      let x = yield stream.next();
      while (!x.done) {
        result.push(x.value);
        x = yield stream.next();
      }
      return result;
    })();
  }
  /**
   * Draw items from the stream until it is exhausted.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  resolveFully() {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let x = yield _this3.next();
      while (!x.done) {
        x = yield _this3.next();
      }
    })();
  }
  /**
   * Draw items from the stream until it is exhausted, or a predicate fails.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  resolveWhile(predicate) {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let x = yield _this4.next();
      let shouldContinue = predicate(x.value);
      while (!x.done && shouldContinue) {
        x = yield _this4.next();
        shouldContinue = predicate(x.value);
      }
    })();
  }
  /**
   * Handles errors thrown on this stream using a provided handler function.
   *
   * @param handler A function that handles any `Error` thrown during a `next()`
   *   call and returns true if the stream should continue (dropping the failed
   *   call) or false if the stream should quietly terminate.  If the handler
   *   itself throws (or rethrows) an `Error`, that will be propagated.
   *
   * @returns A `LazyIterator` of elements passed through from upstream,
   *   possibly filtering or terminating on upstream `next()` calls that
   *   throw an `Error`.
   */
  handleErrors(handler) {
    return new ErrorHandlingLazyIterator(this, handler);
  }
  // TODO(soergel): Implement reduce() etc.
  /**
   * Filters this stream according to `predicate`.
   *
   * @param predicate A function mapping a stream element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `LazyIterator` of elements for which the predicate was true.
   */
  filter(predicate) {
    return new FilterIterator(this, predicate);
  }
  /**
   * Maps this stream through a 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  map(transform) {
    return new MapIterator(this, transform);
  }
  /**
   * Maps this stream through an async 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a `Promise` for a
   *   transformed stream element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  mapAsync(transform) {
    return new AsyncMapIterator(this, transform);
  }
  /**
   * Maps this stream through a 1-to-1 transform, forcing serial execution.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  serialMapAsync(transform) {
    return new AsyncMapIterator(this, transform).serial();
  }
  /**
   * Maps this stream through a 1-to-many transform.
   *
   * @param transform A function mapping a stream element to an array of
   *   transformed elements.
   *
   * @returns A `DataStream` of transformed elements.
   */
  flatmap(transform) {
    return new FlatmapIterator(this, transform);
  }
  /**
   * Apply a function to every element of the stream.
   *
   * @param f A function to apply to each stream element.
   */
  forEachAsync(f) {
    var _this5 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this5.map(f).resolveFully();
    })();
  }
  /**
   * Apply a function to every element of the stream, forcing serial execution.
   *
   * @param f A function to apply to each stream element.  Should return 'true'
   *   to indicate that the stream should continue, or 'false' to cause it to
   *   terminate.
   */
  serialForEach(f) {
    var _this6 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this6.serialMapAsync(f).resolveWhile(x => x === true);
    })();
  }
  /**
   * Groups elements into batches, represented as arrays of elements.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "Row-major" means that the resulting batch is simply a collection of
   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major
   * form, which is needed for vectorized computation.
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `LazyIterator` of batches of elements, represented as arrays
   *   of the original element type.
   */
  rowMajorBatch(batchSize, smallLastBatch = true) {
    return new RowMajorBatchIterator(this, batchSize, smallLastBatch);
  }
  /**
   * Groups elements into batches, represented in column-major form.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "column-major" means that the resulting batch is a (potentially
   * nested) structure representing the columns.  Each column entry, then,
   * contains a collection of the values found in that column for a range of
   * input elements.  This representation allows for vectorized computation, in
   * contrast to the row-major form.
   *
   * The inputs should all have the same nested structure (i.e., of arrays and
   * dicts).  The result is a single object with the same nested structure,
   * where the leaves are arrays collecting the values of the inputs at that
   * location (or, optionally, the result of a custom function applied to those
   * arrays).
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @param zipFn: (optional) A function that expects an array of elements at a
   *   single node of the object tree, and returns a `DeepMapResult`.  The
   *   `DeepMapResult` either provides a result value for that node (i.e.,
   *   representing the subtree), or indicates that the node should be processed
   *   recursively.  The default zipFn recurses as far as possible and places
   *   arrays at the leaves.
   * @returns A `LazyIterator` of batches of elements, represented as an object
   *   with collections at the leaves.
   */
  columnMajorBatch(batchSize, smallLastBatch = true,
  // tslint:disable-next-line:no-any
  zipFn = _util_deep_map__WEBPACK_IMPORTED_MODULE_4__.zipToList) {
    // First collect the desired number of input elements as a row-major batch.
    const rowBatches = this.rowMajorBatch(batchSize, smallLastBatch);
    // Now 'rotate' or 'pivot' the data, collecting all values from each column
    // in the batch (i.e., for each key within the elements) into an array.
    return rowBatches.map(x => (0,_util_deep_map__WEBPACK_IMPORTED_MODULE_4__.deepZip)(x, zipFn));
  }
  /**
   * Concatenate this `LazyIterator` with another.
   *
   * @param iterator A `LazyIterator` to be concatenated onto this one.
   * @param baseErrorHandler An optional function that can intercept `Error`s
   *   raised during a `next()` call on the base stream.  This function can
   *   decide whether the error should be propagated, whether the error should
   *   be ignored, or whether the base stream should be terminated.
   * @returns A `LazyIterator`.
   */
  concatenate(iterator, baseErrorHandler) {
    return new ChainedIterator(iteratorFromItems([this, iterator]), baseErrorHandler);
  }
  /**
   * Limits this stream to return at most `count` items.
   *
   * @param count The maximum number of items to provide from the stream. If
   * a negative or undefined value is given, the entire stream is returned
   *   unaltered.
   */
  take(count) {
    if (count < 0 || count == null) {
      return this;
    }
    return new TakeIterator(this, count);
  }
  /**
   * Skips the first `count` items in this stream.
   *
   * @param count The number of items to skip.  If a negative or undefined
   * value is given, the entire stream is returned unaltered.
   */
  skip(count) {
    if (count < 0 || count == null) {
      return this;
    }
    return new SkipIterator(this, count);
  }
  /**
   * Prefetch the first `bufferSize` items in this stream.
   *
   * Note this prefetches Promises, but makes no guarantees about when those
   * Promises resolve.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   */
  prefetch(bufferSize) {
    return new PrefetchIterator(this, bufferSize);
  }
  // TODO(soergel): deep sharded shuffle, where supported
  /**
   * Randomly shuffles the elements of this stream.
   *
   * @param bufferSize: An integer specifying the number of elements from
   * this stream from which the new stream will sample.
   * @param seed: (Optional.) An integer specifying the random seed that
   * will be used to create the distribution.
   */
  shuffle(windowSize, seed) {
    return new ShuffleIterator(this, windowSize, seed);
  }
  /**
   * Force an iterator to execute serially: each next() call will await the
   * prior one, so that they cannot execute concurrently.
   */
  serial() {
    return new SerialIterator(this);
  }
}
// ============================================================================
// The following private classes serve to implement the chainable methods
// on LazyIterator.  Unfortunately they can't be placed in separate files,
// due to resulting trouble with circular imports.
// ============================================================================
// Iterators that just extend LazyIterator directly
// ============================================================================
class ArrayIterator extends LazyIterator {
  constructor(items) {
    super();
    this.items = items;
    this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  next() {
    var _this7 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this7.trav >= _this7.items.length) {
        return {
          value: null,
          done: true
        };
      }
      const item = _this7.items[_this7.trav];
      _this7.trav++;
      return {
        value: (0,_util_deep_clone__WEBPACK_IMPORTED_MODULE_3__.deepClone)(item),
        done: false
      };
    })();
  }
}
class FunctionCallIterator extends LazyIterator {
  constructor(nextFn) {
    super();
    this.nextFn = nextFn;
  }
  summary() {
    return `Function call`;
  }
  next() {
    var _this8 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      try {
        return _this8.nextFn();
      } catch (e) {
        // Modify the error message but leave the stack trace intact
        e.message = `Error thrown while iterating through a dataset: ${e.message}`;
        throw e;
      }
    })();
  }
}
class SerialIterator extends LazyIterator {
  constructor(upstream) {
    super();
    this.upstream = upstream;
    this.lastRead = Promise.resolve({
      value: null,
      done: false
    });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  next() {
    var _this9 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This sets this.lastRead to a new Promise right away, as opposed to
      // saying `await this.lastRead; this.lastRead = this.serialNext();` which
      // would not work because this.nextRead would be updated only after the
      // promise resolves.
      _this9.lastRead = _this9.lastRead.then(() => _this9.serialNext());
      return _this9.lastRead;
    })();
  }
  serialNext() {
    var _this10 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this10.upstream.next();
    })();
  }
}
class SkipIterator extends LazyIterator {
  constructor(upstream, maxCount) {
    super();
    this.upstream = upstream;
    this.maxCount = maxCount;
    // Local state that should not be clobbered by out-of-order execution.
    this.count = 0;
    this.lastRead = Promise.resolve({
      value: null,
      done: false
    });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  next() {
    var _this11 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This sets this.lastRead to a new Promise right away, as opposed to
      // saying `await this.lastRead; this.lastRead = this.serialNext();` which
      // would not work because this.nextRead would be updated only after the
      // promise resolves.
      _this11.lastRead = _this11.lastRead.then(() => _this11.serialNext());
      return _this11.lastRead;
    })();
  }
  serialNext() {
    var _this12 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // TODO(soergel): consider tradeoffs of reading in parallel, eg.
      // collecting next() promises in an Array and then waiting for
      // Promise.all() of those. Benefit: pseudo-parallel execution.  Drawback:
      // maybe delayed GC.
      while (_this12.count++ < _this12.maxCount) {
        const skipped = yield _this12.upstream.next();
        // short-circuit if upstream is already empty
        if (skipped.done) {
          return skipped;
        }
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(skipped.value);
      }
      return _this12.upstream.next();
    })();
  }
}
class TakeIterator extends LazyIterator {
  constructor(upstream, maxCount) {
    super();
    this.upstream = upstream;
    this.maxCount = maxCount;
    this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  next() {
    var _this13 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this13.count++ >= _this13.maxCount) {
        return {
          value: null,
          done: true
        };
      }
      return _this13.upstream.next();
    })();
  }
}
// Note this batch just groups items into row-wise element arrays.
// Rotating these to a column-wise representation happens only at the dataset
// level.
class RowMajorBatchIterator extends LazyIterator {
  constructor(upstream, batchSize, enableSmallLastBatch = true) {
    super();
    this.upstream = upstream;
    this.batchSize = batchSize;
    this.enableSmallLastBatch = enableSmallLastBatch;
    this.lastRead = Promise.resolve({
      value: null,
      done: false
    });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  next() {
    var _this14 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This sets this.lastRead to a new Promise right away, as opposed to
      // saying `await this.lastRead; this.lastRead = this.serialNext();` which
      // would not work because this.nextRead would be updated only after the
      // promise resolves.
      _this14.lastRead = _this14.lastRead.then(() => _this14.serialNext());
      return _this14.lastRead;
    })();
  }
  serialNext() {
    var _this15 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const batch = [];
      while (batch.length < _this15.batchSize) {
        const item = yield _this15.upstream.next();
        if (item.done) {
          if (_this15.enableSmallLastBatch && batch.length > 0) {
            return {
              value: batch,
              done: false
            };
          }
          return {
            value: null,
            done: true
          };
        }
        batch.push(item.value);
      }
      return {
        value: batch,
        done: false
      };
    })();
  }
}
class FilterIterator extends LazyIterator {
  constructor(upstream, predicate) {
    super();
    this.upstream = upstream;
    this.predicate = predicate;
    this.lastRead = Promise.resolve({
      value: null,
      done: false
    });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  next() {
    var _this16 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This sets this.lastRead to a new Promise right away, as opposed to
      // saying `await this.lastRead; this.lastRead = this.serialNext();` which
      // would not work because this.nextRead would be updated only after the
      // promise resolves.
      _this16.lastRead = _this16.lastRead.then(() => _this16.serialNext());
      return _this16.lastRead;
    })();
  }
  serialNext() {
    var _this17 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      while (true) {
        const item = yield _this17.upstream.next();
        if (item.done || _this17.predicate(item.value)) {
          return item;
        }
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(item.value);
      }
    })();
  }
}
class MapIterator extends LazyIterator {
  constructor(upstream, transform) {
    super();
    this.upstream = upstream;
    this.transform = transform;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  next() {
    var _this18 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const item = yield _this18.upstream.next();
      if (item.done) {
        return {
          value: null,
          done: true
        };
      }
      const inputTensors = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.getTensorsInContainer(item.value);
      // Careful: the transform may mutate the item in place.
      // That's why we have to remember the input Tensors above, and then
      // below dispose only those that were not passed through to the output.
      // Note too that the transform function is responsible for tidying
      // any intermediate Tensors.  Here we are concerned only about the
      // inputs.
      const mapped = _this18.transform(item.value);
      const outputTensors = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.getTensorsInContainer(mapped);
      // TODO(soergel) faster intersection
      // TODO(soergel) move to tf.disposeExcept(in, out)?
      for (const t of inputTensors) {
        if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.isTensorInList(t, outputTensors)) {
          t.dispose();
        }
      }
      return {
        value: mapped,
        done: false
      };
    })();
  }
}
class ErrorHandlingLazyIterator extends LazyIterator {
  constructor(upstream, handler) {
    super();
    this.upstream = upstream;
    this.handler = handler;
    this.count = 0;
    this.lastRead = Promise.resolve({
      value: null,
      done: false
    });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  next() {
    var _this19 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This sets this.lastRead to a new Promise right away, as opposed to
      // saying `await this.lastRead; this.lastRead = this.serialNext();` which
      // would not work because this.nextRead would be updated only after the
      // promise resolves.
      _this19.lastRead = _this19.lastRead.then(() => _this19.serialNext());
      return _this19.lastRead;
    })();
  }
  serialNext() {
    var _this20 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      while (true) {
        try {
          return yield _this20.upstream.next();
        } catch (e) {
          if (!_this20.handler(e)) {
            return {
              value: null,
              done: true
            };
          }
          // If the handler returns true, loop and fetch the next upstream item.
          // If the upstream iterator throws an endless stream of errors, and if
          // the handler says to ignore them, then we loop forever here.  That is
          // the correct behavior-- it's up to the handler to decide when to stop.
        }
      }
    })();
  }
}

class AsyncMapIterator extends LazyIterator {
  constructor(upstream, transform) {
    super();
    this.upstream = upstream;
    this.transform = transform;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  next() {
    var _this21 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const item = yield _this21.upstream.next();
      if (item.done) {
        return {
          value: null,
          done: true
        };
      }
      const inputTensors = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.getTensorsInContainer(item.value);
      // Careful: the transform may mutate the item in place.
      // That's why we have to remember the input Tensors above, and then
      // below dispose only those that were not passed through to the output.
      // Note too that the transform function is responsible for tidying
      // any intermediate Tensors.  Here we are concerned only about the
      // inputs.
      const mapped = yield _this21.transform(item.value);
      const outputTensors = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.getTensorsInContainer(mapped);
      // TODO(soergel) faster intersection
      // TODO(soergel) move to tf.disposeExcept(in, out)?
      for (const t of inputTensors) {
        if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.isTensorInList(t, outputTensors)) {
          t.dispose();
        }
      }
      return {
        value: mapped,
        done: false
      };
    })();
  }
}
// Iterators that maintain a queue of pending items
// ============================================================================
/**
 * A base class for transforming streams that operate by maintaining an
 * output queue of elements that are ready to return via next().  This is
 * commonly required when the transformation is 1-to-many:  A call to next()
 * may trigger a call to the underlying stream, which will produce many
 * mapped elements of this stream-- of which we need to return only one, so
 * we have to queue the rest.
 */
class OneToManyIterator extends LazyIterator {
  constructor() {
    super();
    this.outputQueue = new _util_growing_ring_buffer__WEBPACK_IMPORTED_MODULE_5__.GrowingRingBuffer();
    this.lastRead = Promise.resolve({
      value: null,
      done: false
    });
  }
  next() {
    var _this22 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This sets this.lastRead to a new Promise right away, as opposed to
      // saying `await this.lastRead; this.lastRead = this.serialNext();` which
      // would not work because this.nextRead would be updated only after the
      // promise resolves.
      _this22.lastRead = _this22.lastRead.then(() => _this22.serialNext());
      return _this22.lastRead;
    })();
  }
  serialNext() {
    var _this23 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Fetch so that the queue contains at least one item if possible.
      // If the upstream source is exhausted, AND there are no items left in
      // the output queue, then this stream is also exhausted.
      while (_this23.outputQueue.length() === 0) {
        // TODO(soergel): consider parallel reads.
        if (!(yield _this23.pump())) {
          return {
            value: null,
            done: true
          };
        }
      }
      return {
        value: _this23.outputQueue.shift(),
        done: false
      };
    })();
  }
}
class FlatmapIterator extends OneToManyIterator {
  constructor(upstream, transform) {
    super();
    this.upstream = upstream;
    this.transform = transform;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  pump() {
    var _this24 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const item = yield _this24.upstream.next();
      if (item.done) {
        return false;
      }
      const inputTensors = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.getTensorsInContainer(item.value);
      // Careful: the transform may mutate the item in place.
      // that's why we have to remember the input Tensors above, and then
      // below dispose only those that were not passed through to the output.
      // Note too that the transform function is responsible for tidying any
      // intermediate Tensors.  Here we are concerned only about the inputs.
      const mappedArray = _this24.transform(item.value);
      const outputTensors = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.getTensorsInContainer(mappedArray);
      _this24.outputQueue.pushAll(mappedArray);
      // TODO(soergel) faster intersection, and deduplicate outputTensors
      // TODO(soergel) move to tf.disposeExcept(in, out)?
      for (const t of inputTensors) {
        if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor_util.isTensorInList(t, outputTensors)) {
          t.dispose();
        }
      }
      return true;
    })();
  }
}
/**
 * Provides a `LazyIterator` that concatenates a stream of underlying
 * streams.
 *
 * Doing this in a concurrency-safe way requires some trickery.  In
 * particular, we want this stream to return the elements from the
 * underlying streams in the correct order according to when next() was
 * called, even if the resulting Promises resolve in a different order.
 */
class ChainedIterator extends LazyIterator {
  constructor(iterators, baseErrorHandler) {
    super();
    this.baseErrorHandler = baseErrorHandler;
    // Strict Promise execution order:
    // a next() call may not even begin until the previous one completes.
    this.lastRead = null;
    // Local state that should not be clobbered by out-of-order execution.
    this.iterator = null;
    this.moreIterators = iterators;
  }
  summary() {
    const upstreamSummaries = 'TODO: fill in upstream of chained summaries';
    return `${upstreamSummaries} -> Chained`;
  }
  next() {
    var _this25 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this25.lastRead = _this25.readFromChain(_this25.lastRead);
      return _this25.lastRead;
    })();
  }
  readFromChain(lastRead) {
    var _this26 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Must await on the previous read since the previous read may have advanced
      // the stream of streams, from which we need to read.
      // This is unfortunate since we can't parallelize reads. Which means
      // prefetching of chained streams is a no-op.
      // One solution is to prefetch immediately upstream of this.
      yield lastRead;
      if (_this26.iterator == null) {
        const iteratorResult = yield _this26.moreIterators.next();
        if (iteratorResult.done) {
          // No more streams to stream from.
          return {
            value: null,
            done: true
          };
        }
        _this26.iterator = iteratorResult.value;
        if (_this26.baseErrorHandler != null) {
          _this26.iterator = _this26.iterator.handleErrors(_this26.baseErrorHandler);
        }
      }
      const itemResult = yield _this26.iterator.next();
      if (itemResult.done) {
        _this26.iterator = null;
        return _this26.readFromChain(lastRead);
      }
      return itemResult;
    })();
  }
}
var ZipMismatchMode;
(function (ZipMismatchMode) {
  ZipMismatchMode[ZipMismatchMode["FAIL"] = 0] = "FAIL";
  ZipMismatchMode[ZipMismatchMode["SHORTEST"] = 1] = "SHORTEST";
  ZipMismatchMode[ZipMismatchMode["LONGEST"] = 2] = "LONGEST"; // use nulls for exhausted streams; use up the longest stream.
})(ZipMismatchMode || (ZipMismatchMode = {}));
/**
 * Provides a `LazyIterator` that zips together an array, dict, or nested
 * structure of `LazyIterator`s (and perhaps additional constants).
 *
 * The underlying streams must provide elements in a consistent order such
 * that they correspond.
 *
 * Typically, the underlying streams should have the same number of
 * elements. If they do not, the behavior is determined by the
 * `mismatchMode` argument.
 *
 * The nested structure of the `iterators` argument determines the
 * structure of elements in the resulting iterator.
 *
 * Doing this in a concurrency-safe way requires some trickery.  In
 * particular, we want this stream to return the elements from the
 * underlying streams in the correct order according to when next() was
 * called, even if the resulting Promises resolve in a different order.
 *
 * @param iterators: An array or object containing LazyIterators at the
 * leaves.
 * @param mismatchMode: Determines what to do when one underlying iterator
 * is exhausted before the others.  `ZipMismatchMode.FAIL` (the default)
 * causes an error to be thrown in this case.  `ZipMismatchMode.SHORTEST`
 * causes the zipped iterator to terminate with the furst underlying
 * streams, so elements remaining on the longer streams are ignored.
 * `ZipMismatchMode.LONGEST` causes the zipped stream to continue, filling
 * in nulls for the exhausted streams, until all streams are exhausted.
 */
class ZipIterator extends LazyIterator {
  constructor(iterators, mismatchMode = ZipMismatchMode.FAIL) {
    super();
    this.iterators = iterators;
    this.mismatchMode = mismatchMode;
    this.count = 0;
    this.currentPromise = null;
  }
  summary() {
    const upstreamSummaries = 'TODO: fill in upstream of zip summaries';
    return `{${upstreamSummaries}} -> Zip`;
  }
  nextState(afterState) {
    var _this27 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This chaining ensures that the underlying next() are not even called
      // before the previous ones have resolved.
      yield afterState;
      // Collect underlying iterator "done" signals as a side effect in
      // getNext()
      let numIterators = 0;
      let iteratorsDone = 0;
      function getNext(container) {
        if (container instanceof LazyIterator) {
          const result = container.next();
          return {
            value: result.then(x => {
              numIterators++;
              if (x.done) {
                iteratorsDone++;
              }
              return x.value;
            }),
            recurse: false
          };
        } else {
          return {
            value: null,
            recurse: true
          };
        }
      }
      const mapped = yield (0,_util_deep_map__WEBPACK_IMPORTED_MODULE_4__.deepMapAndAwaitAll)(_this27.iterators, getNext);
      if (numIterators === iteratorsDone) {
        // The streams have all ended.
        return {
          value: null,
          done: true
        };
      }
      if (iteratorsDone > 0) {
        switch (_this27.mismatchMode) {
          case ZipMismatchMode.FAIL:
            throw new Error('Zipped streams should have the same length. ' + `Mismatched at element ${_this27.count}.`);
          case ZipMismatchMode.SHORTEST:
            return {
              value: null,
              done: true
            };
          case ZipMismatchMode.LONGEST:
          default:
          // Continue.  The exhausted streams already produced value: null.
        }
      }

      _this27.count++;
      return {
        value: mapped,
        done: false
      };
    })();
  }
  next() {
    var _this28 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this28.currentPromise = _this28.nextState(_this28.currentPromise);
      return _this28.currentPromise;
    })();
  }
}
// Iterators that maintain a ring buffer of pending promises
// ============================================================================
/**
 * A stream that prefetches a given number of items from an upstream source,
 * returning them in FIFO order.
 *
 * Note this prefetches Promises, but makes no guarantees about when those
 * Promises resolve.
 */
class PrefetchIterator extends LazyIterator {
  constructor(upstream, bufferSize) {
    super();
    this.upstream = upstream;
    this.bufferSize = bufferSize;
    this.buffer = new _util_ring_buffer__WEBPACK_IMPORTED_MODULE_6__.RingBuffer(bufferSize);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  /**
   * Refill the prefetch buffer.  Returns only after the buffer is full, or
   * the upstream source is exhausted.
   */
  refill() {
    while (!this.buffer.isFull()) {
      const v = this.upstream.next();
      this.buffer.push(v);
    }
  }
  next() {
    this.refill();
    // This shift will never throw an error because the buffer is always
    // full after a refill. If the stream is exhausted, the buffer will be
    // full of Promises that will resolve to the end-of-stream signal.
    return this.buffer.shift();
  }
}
/**
 * A stream that performs a sliding-window random shuffle on an upstream
 * source. This is like a `PrefetchIterator` except that the items are
 * returned in randomized order.  Mixing naturally improves as the buffer
 * size increases.
 */
class ShuffleIterator extends PrefetchIterator {
  constructor(upstream, windowSize, seed) {
    super(upstream, windowSize);
    this.upstream = upstream;
    this.windowSize = windowSize;
    // Local state that should not be clobbered by out-of-order execution.
    this.upstreamExhausted = false;
    this.random = seedrandom__WEBPACK_IMPORTED_MODULE_2__.alea(seed || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.now().toString());
    this.lastRead = Promise.resolve({
      value: null,
      done: false
    });
  }
  next() {
    var _this29 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // This sets this.lastRead to a new Promise right away, as opposed to
      // saying `await this.lastRead; this.lastRead = this.serialNext();` which
      // would not work because this.nextRead would be updated only after the
      // promise resolves.
      _this29.lastRead = _this29.lastRead.then(() => _this29.serialNext());
      return _this29.lastRead;
    })();
  }
  randomInt(max) {
    return Math.floor(this.random() * max);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  serialNext() {
    var _this30 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // TODO(soergel): consider performance
      if (!_this30.upstreamExhausted) {
        _this30.refill();
      }
      while (!_this30.buffer.isEmpty()) {
        const chosenIndex = _this30.chooseIndex();
        const result = yield _this30.buffer.shuffleExcise(chosenIndex);
        if (result.done) {
          _this30.upstreamExhausted = true;
        } else {
          _this30.refill();
          return result;
        }
      }
      return {
        value: null,
        done: true
      };
    })();
  }
}

/***/ }),

/***/ 22639:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/iterators/microphone_iterator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MicrophoneIterator": () => (/* binding */ MicrophoneIterator)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _lazy_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lazy_iterator */ 67376);

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */


/**
 * Provide a stream of tensors from microphone audio stream. The tensors are
 * representing audio data as frequency-domain spectrogram generated with
 * browser's native FFT. Tensors representing time-domain waveform is available
 * based on configuration. Only works in browser environment.
 */
class MicrophoneIterator extends _lazy_iterator__WEBPACK_IMPORTED_MODULE_2__.LazyIterator {
  constructor(microphoneConfig) {
    super();
    this.microphoneConfig = microphoneConfig;
    this.isClosed = false;
    this.fftSize = microphoneConfig.fftSize || 1024;
    const fftSizeLog2 = Math.log2(this.fftSize);
    if (this.fftSize < 0 || fftSizeLog2 < 4 || fftSizeLog2 > 14 || !Number.isInteger(fftSizeLog2)) {
      throw new Error(`Invalid fftSize: it must be a power of 2 between ` + `2 to 4 and 2 to 14, but got ${this.fftSize}`);
    }
    this.numFrames = microphoneConfig.numFramesPerSpectrogram || 43;
    this.sampleRateHz = microphoneConfig.sampleRateHz;
    this.columnTruncateLength = microphoneConfig.columnTruncateLength || this.fftSize;
    this.audioTrackConstraints = microphoneConfig.audioTrackConstraints;
    this.smoothingTimeConstant = microphoneConfig.smoothingTimeConstant || 0;
    this.includeSpectrogram = microphoneConfig.includeSpectrogram === false ? false : true;
    this.includeWaveform = microphoneConfig.includeWaveform === true ? true : false;
    if (!this.includeSpectrogram && !this.includeWaveform) {
      throw new Error('Both includeSpectrogram and includeWaveform are false. ' + 'At least one type of data should be returned.');
    }
  }
  summary() {
    return `microphone`;
  }
  // Construct a MicrophoneIterator and start the audio stream.
  static create(microphoneConfig = {}) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('IS_BROWSER')) {
        throw new Error('microphone API is only supported in browser environment.');
      }
      const microphoneIterator = new MicrophoneIterator(microphoneConfig);
      // Call async function start() to initialize the audio stream.
      yield microphoneIterator.start();
      return microphoneIterator;
    })();
  }
  // Start the audio stream and FFT.
  start() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      try {
        _this.stream = yield navigator.mediaDevices.getUserMedia({
          audio: _this.audioTrackConstraints == null ? true : _this.audioTrackConstraints,
          video: false
        });
      } catch (e) {
        throw new Error(`Error thrown while initializing video stream: ${e.message}`);
      }
      if (!_this.stream) {
        throw new Error('Could not obtain audio from microphone.');
      }
      const ctxConstructor =
      // tslint:disable-next-line:no-any
      window.AudioContext || window.webkitAudioContext;
      _this.audioContext = new ctxConstructor();
      if (!_this.sampleRateHz) {
        // If sample rate is not provided, use the available sample rate on
        // device.
        _this.sampleRateHz = _this.audioContext.sampleRate;
      } else if (_this.audioContext.sampleRate !== _this.sampleRateHz) {
        throw new Error(`Mismatch in sampling rate: ` + `Expected: ${_this.sampleRateHz}; ` + `Actual: ${_this.audioContext.sampleRate}`);
      }
      const streamSource = _this.audioContext.createMediaStreamSource(_this.stream);
      _this.analyser = _this.audioContext.createAnalyser();
      _this.analyser.fftSize = _this.fftSize * 2;
      _this.analyser.smoothingTimeConstant = _this.smoothingTimeConstant;
      streamSource.connect(_this.analyser);
      _this.freqData = new Float32Array(_this.fftSize);
      _this.timeData = new Float32Array(_this.fftSize);
      return;
    })();
  }
  next() {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.isClosed) {
        return {
          value: null,
          done: true
        };
      }
      let spectrogramTensor;
      let waveformTensor;
      const audioDataQueue = yield _this2.getAudioData();
      if (_this2.includeSpectrogram) {
        const freqData = _this2.flattenQueue(audioDataQueue.freqDataQueue);
        spectrogramTensor = _this2.getTensorFromAudioDataArray(freqData, [_this2.numFrames, _this2.columnTruncateLength, 1]);
      }
      if (_this2.includeWaveform) {
        const timeData = _this2.flattenQueue(audioDataQueue.timeDataQueue);
        waveformTensor = _this2.getTensorFromAudioDataArray(timeData, [_this2.numFrames * _this2.fftSize, 1]);
      }
      return {
        value: {
          'spectrogram': spectrogramTensor,
          'waveform': waveformTensor
        },
        done: false
      };
    })();
  }
  // Capture one result from the audio stream, and extract the value from
  // iterator.next() result.
  capture() {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield _this3.next()).value;
    })();
  }
  getAudioData() {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const freqDataQueue = [];
      const timeDataQueue = [];
      let currentFrames = 0;
      return new Promise(resolve => {
        const intervalID = setInterval(() => {
          if (_this4.includeSpectrogram) {
            _this4.analyser.getFloatFrequencyData(_this4.freqData);
            // If the audio stream is initializing, return empty queue.
            if (_this4.freqData[0] === -Infinity) {
              resolve({
                freqDataQueue,
                timeDataQueue
              });
            }
            freqDataQueue.push(_this4.freqData.slice(0, _this4.columnTruncateLength));
          }
          if (_this4.includeWaveform) {
            _this4.analyser.getFloatTimeDomainData(_this4.timeData);
            timeDataQueue.push(_this4.timeData.slice());
          }
          // Clean interval and return when all frames have been collected
          if (++currentFrames === _this4.numFrames) {
            clearInterval(intervalID);
            resolve({
              freqDataQueue,
              timeDataQueue
            });
          }
        }, _this4.fftSize / _this4.sampleRateHz * 1e3);
      });
    })();
  }
  // Stop the audio stream and pause the iterator.
  stop() {
    if (!this.isClosed) {
      this.isClosed = true;
      this.analyser.disconnect();
      this.audioContext.close();
      if (this.stream != null && this.stream.getTracks().length > 0) {
        this.stream.getTracks()[0].stop();
      }
    }
  }
  // Override toArray() function to prevent collecting.
  toArray() {
    throw new Error('Can not convert infinite audio stream to array.');
  }
  // Return audio sampling rate in Hz
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(queue) {
    const frameSize = queue[0].length;
    const freqData = new Float32Array(queue.length * frameSize);
    queue.forEach((data, i) => freqData.set(data, i * frameSize));
    return freqData;
  }
  getTensorFromAudioDataArray(freqData, shape) {
    const vals = new Float32Array(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.sizeFromShape(shape));
    // If the data is less than the output shape, the rest is padded with zeros.
    vals.set(freqData, vals.length - freqData.length);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor)(vals, shape);
  }
}

/***/ }),

/***/ 94979:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/iterators/string_iterator.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StringIterator": () => (/* binding */ StringIterator)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _lazy_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lazy_iterator */ 67376);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */

class StringIterator extends _lazy_iterator__WEBPACK_IMPORTED_MODULE_1__.LazyIterator {
  /**
   * Splits a string stream on a given separator.
   *
   * It is assumed that the incoming chunk boundaries have no semantic meaning,
   * so conceptually the incoming stream is treated simply as the concatenation
   * of its elements.
   *
   * The outgoing stream provides chunks corresponding to the results of the
   * standard string split() operation (even if such a chunk spanned incoming
   * chunks).  The separators are not included.
   *
   * A typical usage is to split a text file (represented as a stream with
   * arbitrary chunk boundaries) into lines.
   *
   * @param upstream A readable stream of strings that can be treated as
   *   concatenated.
   * @param separator A character to split on.
   */
  split(separator) {
    return new SplitIterator(this, separator);
  }
}
// ============================================================================
// The following private classes serve to implement the chainable methods
// on StringIterator.  Unfortunately they can't be placed in separate files, due
// to resulting trouble with circular imports.
// ============================================================================
// We wanted multiple inheritance, e.g.
//   class SplitIterator extends QueueIterator<string>, StringIterator
// but the TypeScript mixin approach is a bit hacky, so we take this adapter
// approach instead.
class SplitIterator extends StringIterator {
  constructor(upstream, separator) {
    super();
    this.upstream = upstream;
    this.impl = new SplitIteratorImpl(upstream, separator);
  }
  summary() {
    return this.impl.summary();
  }
  next() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.impl.next();
    })();
  }
}
class SplitIteratorImpl extends _lazy_iterator__WEBPACK_IMPORTED_MODULE_1__.OneToManyIterator {
  constructor(upstream, separator) {
    super();
    this.upstream = upstream;
    this.separator = separator;
    // A partial string at the end of an upstream chunk
    this.carryover = '';
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  pump() {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const chunkResult = yield _this2.upstream.next();
      if (chunkResult.done) {
        if (_this2.carryover === '') {
          return false;
        }
        // Pretend that the pump succeeded in order to emit the small last batch.
        // The next pump() call will actually fail.
        _this2.outputQueue.push(_this2.carryover);
        _this2.carryover = '';
        return true;
      }
      const lines = chunkResult.value.split(_this2.separator);
      // Note the behavior: " ab ".split(' ') === ['', 'ab', '']
      // Thus the carryover may be '' if the separator falls on a chunk
      // boundary; this produces the correct result.
      lines[0] = _this2.carryover + lines[0];
      for (const line of lines.slice(0, -1)) {
        _this2.outputQueue.push(line);
      }
      _this2.carryover = lines[lines.length - 1];
      return true;
    })();
  }
}

/***/ }),

/***/ 62192:
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/iterators/url_chunk_iterator.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "urlChunkIterator": () => (/* binding */ urlChunkIterator)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _file_chunk_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file_chunk_iterator */ 39647);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */


/**
 * Provide a stream of chunks from a URL.
 *
 * Note this class first downloads the entire file into memory before providing
 * the first element from the stream.  This is because the Fetch API does not
 * yet reliably provide a reader stream for the response body.
 */
function urlChunkIterator(_x) {
  return _urlChunkIterator.apply(this, arguments);
}
// Generate RequestInit from Request to match tf.util.fetch signature.
function _urlChunkIterator() {
  _urlChunkIterator = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, options = {}, fetchFunc) {
    let urlString;
    let requestInit;
    if (typeof url === 'string') {
      urlString = url;
    } else {
      urlString = url.url;
      requestInit = getRequestInitFromRequest(url);
    }
    const response = yield (fetchFunc || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.fetch)(urlString, requestInit);
    if (response.ok) {
      const uint8Array = new Uint8Array(yield response.arrayBuffer());
      return new _file_chunk_iterator__WEBPACK_IMPORTED_MODULE_2__.FileChunkIterator(uint8Array, options);
    } else {
      throw new Error(response.statusText);
    }
  });
  return _urlChunkIterator.apply(this, arguments);
}
const getRequestInitFromRequest = request => {
  const init = {
    method: request.method,
    headers: request.headers,
    body: request.body,
    mode: request.mode,
    credentials: request.credentials,
    cache: request.cache,
    redirect: request.redirect,
    referrer: request.referrer,
    integrity: request.integrity
  };
  return init;
};

/***/ }),

/***/ 67171:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebcamIterator": () => (/* binding */ WebcamIterator)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _lazy_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lazy_iterator */ 67376);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */


/**
 * Provide a stream of image tensors from webcam video stream. Only works in
 * browser environment.
 */
class WebcamIterator extends _lazy_iterator__WEBPACK_IMPORTED_MODULE_2__.LazyIterator {
  constructor(webcamVideoElement, webcamConfig) {
    super();
    this.webcamVideoElement = webcamVideoElement;
    this.webcamConfig = webcamConfig;
    this.isClosed = true;
    this.resize = false;
    if (this.needToResize()) {
      this.resize = true;
      this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];
      this.cropBoxInd = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor1d)([0], 'int32');
      if (this.webcamConfig.centerCrop) {
        // Calculate the box based on resizing shape.
        const widthCroppingRatio = this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;
        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 / this.webcamVideoElement.height;
        const widthCropStart = (1 - widthCroppingRatio) / 2;
        const heightCropStart = (1 - heightCroppingRatio) / 2;
        const widthCropEnd = widthCropStart + widthCroppingRatio;
        const heightCropEnd = heightCroppingRatio + heightCropStart;
        this.cropBox = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor2d)([heightCropStart, widthCropStart, heightCropEnd, widthCropEnd], [1, 4]);
      } else {
        this.cropBox = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor2d)([0, 0, 1, 1], [1, 4]);
      }
    }
  }
  summary() {
    return `webcam`;
  }
  // Construct a WebcamIterator and start it's video stream.
  static create(webcamVideoElement, webcamConfig = {}) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('IS_BROWSER')) {
        throw new Error('tf.data.webcam is only supported in browser environment.');
      }
      if (!webcamVideoElement) {
        // If webcam video element is not provided, create a hidden video element
        // with provided width and height.
        webcamVideoElement = document.createElement('video');
        if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {
          throw new Error('Please provide webcam video element, or resizeWidth and ' + 'resizeHeight to create a hidden video element.');
        }
        webcamVideoElement.width = webcamConfig.resizeWidth;
        webcamVideoElement.height = webcamConfig.resizeHeight;
      }
      const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);
      // Call async function to initialize the video stream.
      yield webcamIterator.start();
      return webcamIterator;
    })();
  }
  // Async function to start video stream.
  start() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this.webcamConfig.facingMode) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(_this.webcamConfig.facingMode === 'user' || _this.webcamConfig.facingMode === 'environment', () => `Invalid webcam facing mode: ${_this.webcamConfig.facingMode}. ` + `Please provide 'user' or 'environment'`);
      }
      try {
        _this.stream = yield navigator.mediaDevices.getUserMedia({
          video: {
            deviceId: _this.webcamConfig.deviceId,
            facingMode: _this.webcamConfig.facingMode ? _this.webcamConfig.facingMode : 'user',
            width: _this.webcamVideoElement.width,
            height: _this.webcamVideoElement.height
          }
        });
      } catch (e) {
        // Modify the error message but leave the stack trace intact
        e.message = `Error thrown while initializing video stream: ${e.message}`;
        throw e;
      }
      if (!_this.stream) {
        throw new Error('Could not obtain video from webcam.');
      }
      // Older browsers may not have srcObject
      try {
        _this.webcamVideoElement.srcObject = _this.stream;
      } catch (error) {
        console.log(error);
        _this.webcamVideoElement.src = window.URL.createObjectURL(_this.stream);
      }
      // Start the webcam video stream
      _this.webcamVideoElement.play();
      _this.isClosed = false;
      return new Promise(resolve => {
        // Add event listener to make sure the webcam has been fully initialized.
        _this.webcamVideoElement.onloadedmetadata = () => {
          resolve();
        };
      });
    })();
  }
  next() {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.isClosed) {
        return {
          value: null,
          done: true
        };
      }
      let img;
      try {
        img = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.browser.fromPixels(_this2.webcamVideoElement);
      } catch (e) {
        throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);
      }
      if (_this2.resize) {
        try {
          return {
            value: _this2.cropAndResizeFrame(img),
            done: false
          };
        } catch (e) {
          throw new Error(`Error thrown cropping the video: ${e.message}`);
        } finally {
          img.dispose();
        }
      } else {
        return {
          value: img,
          done: false
        };
      }
    })();
  }
  needToResize() {
    // If resizeWidth and resizeHeight are provided, and different from the
    // width and height of original HTMLVideoElement, then resizing and cropping
    // is required.
    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {
      return true;
    }
    return false;
  }
  // Cropping and resizing each frame based on config
  cropAndResizeFrame(img) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
      const expandedImage = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.expandDims)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.cast)(img, 'float32'), 0);
      let resizedImage;
      resizedImage = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.image.cropAndResize(expandedImage, this.cropBox, this.cropBoxInd, this.cropSize, 'bilinear');
      // Extract image from batch cropping.
      const shape = resizedImage.shape;
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.reshape)(resizedImage, shape.slice(1));
    });
  }
  // Capture one frame from the video stream, and extract the value from
  // iterator.next() result.
  capture() {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (yield _this3.next()).value;
    })();
  }
  // Stop the video stream and pause webcam iterator.
  stop() {
    const tracks = this.stream.getTracks();
    tracks.forEach(track => track.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (error) {
      console.log(error);
      this.webcamVideoElement.src = null;
    }
    this.isClosed = true;
  }
  // Override toArray() function to prevent collecting.
  toArray() {
    throw new Error('Can not convert infinite video stream to array.');
  }
}

/***/ }),

/***/ 97173:
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/readers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "csv": () => (/* binding */ csv),
/* harmony export */   "func": () => (/* binding */ func),
/* harmony export */   "generator": () => (/* binding */ generator),
/* harmony export */   "microphone": () => (/* binding */ microphone),
/* harmony export */   "webcam": () => (/* binding */ webcam)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _dataset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataset */ 64784);
/* harmony import */ var _datasets_csv_dataset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datasets/csv_dataset */ 99764);
/* harmony import */ var _iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iterators/lazy_iterator */ 67376);
/* harmony import */ var _iterators_microphone_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./iterators/microphone_iterator */ 22639);
/* harmony import */ var _iterators_webcam_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./iterators/webcam_iterator */ 67171);
/* harmony import */ var _sources_url_data_source__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sources/url_data_source */ 37052);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */






/**
 * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL
 * or local path if it's in Node environment.
 *
 * Note: If isLabel in columnConfigs is `true` for at least one column, the
 * element in returned `CSVDataset` will be an object of
 * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys
 * is a dict of labels key/value pairs. If no column is marked as label,
 * returns a dict of features only.
 *
 * ```js
 * const csvUrl =
 * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';
 *
 * async function run() {
 *   // We want to predict the column "medv", which represents a median value of
 *   // a home (in $1000s), so we mark it as a label.
 *   const csvDataset = tf.data.csv(
 *     csvUrl, {
 *       columnConfigs: {
 *         medv: {
 *           isLabel: true
 *         }
 *       }
 *     });
 *
 *   // Number of features is the number of column names minus one for the label
 *   // column.
 *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;
 *
 *   // Prepare the Dataset for training.
 *   const flattenedDataset =
 *     csvDataset
 *     .map(({xs, ys}) =>
 *       {
 *         // Convert xs(features) and ys(labels) from object form (keyed by
 *         // column name) to array form.
 *         return {xs:Object.values(xs), ys:Object.values(ys)};
 *       })
 *     .batch(10);
 *
 *   // Define the model.
 *   const model = tf.sequential();
 *   model.add(tf.layers.dense({
 *     inputShape: [numOfFeatures],
 *     units: 1
 *   }));
 *   model.compile({
 *     optimizer: tf.train.sgd(0.000001),
 *     loss: 'meanSquaredError'
 *   });
 *
 *   // Fit the model using the prepared Dataset
 *   return model.fitDataset(flattenedDataset, {
 *     epochs: 10,
 *     callbacks: {
 *       onEpochEnd: async (epoch, logs) => {
 *         console.log(epoch + ':' + logs.loss);
 *       }
 *     }
 *   });
 * }
 *
 * await run();
 * ```
 *
 * @param source URL or local path to get CSV file. If it's a local path, it
 * must have prefix `file://` and it only works in node environment.
 * @param csvConfig (Optional) A CSVConfig object that contains configurations
 *     of reading and decoding from CSV file(s).
 *
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   configParamIndices: [1]
 *  }
 */
function csv(source, csvConfig = {}) {
  return new _datasets_csv_dataset__WEBPACK_IMPORTED_MODULE_2__.CSVDataset(new _sources_url_data_source__WEBPACK_IMPORTED_MODULE_6__.URLDataSource(source), csvConfig);
}
/**
 * Create a `Dataset` that produces each element by calling a provided function.
 *
 * Note that repeated iterations over this `Dataset` may produce different
 * results, because the function will be called anew for each element of each
 * iteration.
 *
 * Also, beware that the sequence of calls to this function may be out of order
 * in time with respect to the logical order of the Dataset. This is due to the
 * asynchronous lazy nature of stream processing, and depends on downstream
 * transformations (e.g. .shuffle()). If the provided function is pure, this is
 * no problem, but if it is a closure over a mutable state (e.g., a traversal
 * pointer), then the order of the produced elements may be scrambled.
 *
 * ```js
 * let i = -1;
 * const func = () =>
 *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};
 * const ds = tf.data.func(func);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 *
 * @param f A function that produces one data element on each call.
 */
function func(f) {
  const iter = (0,_iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__.iteratorFromFunction)(f);
  return (0,_dataset__WEBPACK_IMPORTED_MODULE_1__.datasetFromIteratorFn)( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
    return iter;
  }));
}
/**
 * Create a `Dataset` that produces each element from provided JavaScript
 * generator, which is a function*
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),
 * or a function that returns an
 * iterator
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).
 *
 * The returned iterator should have `.next()` function that returns element in
 * format of `{value: TensorContainer, done:boolean}`.
 *
 * Example of creating a dataset from an iterator factory:
 * ```js
 * function makeIterator() {
 *   const numElements = 10;
 *   let index = 0;
 *
 *   const iterator = {
 *     next: () => {
 *       let result;
 *       if (index < numElements) {
 *         result = {value: index, done: false};
 *         index++;
 *         return result;
 *       }
 *       return {value: index, done: true};
 *     }
 *   };
 *   return iterator;
 * }
 * const ds = tf.data.generator(makeIterator);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 *
 * Example of creating a dataset from a generator:
 * ```js
 * function* dataGenerator() {
 *   const numElements = 10;
 *   let index = 0;
 *   while (index < numElements) {
 *     const x = index;
 *     index++;
 *     yield x;
 *   }
 * }
 *
 * const ds = tf.data.generator(dataGenerator);
 * await ds.forEachAsync(e => console.log(e));
 * ```
 *
 * @param generator A JavaScript generator function that returns a JavaScript
 *     iterator.
 *
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   configParamIndices: [1]
 *  }
 */
function generator(generator) {
  return (0,_dataset__WEBPACK_IMPORTED_MODULE_1__.datasetFromIteratorFn)( /*#__PURE__*/(0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
    const gen = yield generator();
    return (0,_iterators_lazy_iterator__WEBPACK_IMPORTED_MODULE_3__.iteratorFromFunction)(() => gen.next());
  }));
}
/**
 * Create an iterator that generates `Tensor`s from webcam video stream. This
 * API only works in Browser environment when the device has webcam.
 *
 * Note: this code snippet only works when the device has a webcam. It will
 * request permission to open the webcam when running.
 * ```js
 * const videoElement = document.createElement('video');
 * videoElement.width = 100;
 * videoElement.height = 100;
 * const cam = await tf.data.webcam(videoElement);
 * const img = await cam.capture();
 * img.print();
 * cam.stop();
 * ```
 *
 * @param webcamVideoElement A `HTMLVideoElement` used to play video from
 *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will
 *     be created. In that case, `resizeWidth` and `resizeHeight` must be
 *     provided to set the generated tensor shape.
 * @param webcamConfig A `WebcamConfig` object that contains configurations of
 *     reading and manipulating data from webcam video stream.
 *
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   ignoreCI: true
 *  }
 */
function webcam(_x, _x2) {
  return _webcam.apply(this, arguments);
}
/**
 * Create an iterator that generates frequency-domain spectrogram `Tensor`s from
 * microphone audio stream with browser's native FFT. This API only works in
 * browser environment when the device has microphone.
 *
 * Note: this code snippet only works when the device has a microphone. It will
 * request permission to open the microphone when running.
 * ```js
 * const mic = await tf.data.microphone({
 *   fftSize: 1024,
 *   columnTruncateLength: 232,
 *   numFramesPerSpectrogram: 43,
 *   sampleRateHz:44100,
 *   includeSpectrogram: true,
 *   includeWaveform: true
 * });
 * const audioData = await mic.capture();
 * const spectrogramTensor = audioData.spectrogram;
 * spectrogramTensor.print();
 * const waveformTensor = audioData.waveform;
 * waveformTensor.print();
 * mic.stop();
 * ```
 *
 * @param microphoneConfig A `MicrophoneConfig` object that contains
 *     configurations of reading audio data from microphone.
 *
 * @doc {
 *   heading: 'Data',
 *   subheading: 'Creation',
 *   namespace: 'data',
 *   ignoreCI: true
 *  }
 */
function _webcam() {
  _webcam = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (webcamVideoElement, webcamConfig) {
    return _iterators_webcam_iterator__WEBPACK_IMPORTED_MODULE_5__.WebcamIterator.create(webcamVideoElement, webcamConfig);
  });
  return _webcam.apply(this, arguments);
}
function microphone(_x3) {
  return _microphone.apply(this, arguments);
}
function _microphone() {
  _microphone = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (microphoneConfig) {
    return _iterators_microphone_iterator__WEBPACK_IMPORTED_MODULE_4__.MicrophoneIterator.create(microphoneConfig);
  });
  return _microphone.apply(this, arguments);
}

/***/ }),

/***/ 12647:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/sources/file_data_source.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileDataSource": () => (/* binding */ FileDataSource)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../datasource */ 83784);
/* harmony import */ var _iterators_file_chunk_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../iterators/file_chunk_iterator */ 39647);
/* harmony import */ var _util_source_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/source_util */ 2162);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */




/**
 * Represents a file, blob, or Uint8Array readable as a stream of binary data
 * chunks.
 */
class FileDataSource extends _datasource__WEBPACK_IMPORTED_MODULE_2__.DataSource {
  /**
   * Create a `FileDataSource`.
   *
   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to
   *     read. Local file only works in node environment.
   * @param options Options passed to the underlying `FileChunkIterator`s,
   *   such as {chunksize: 1024}.
   */
  constructor(input, options = {}) {
    super();
    this.input = input;
    this.options = options;
  }
  iterator() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if ((0,_util_source_util__WEBPACK_IMPORTED_MODULE_4__.isLocalPath)(_this.input) && (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get('IS_NODE')) {
        // tslint:disable-next-line:no-require-imports
        const fs = __webpack_require__(/*! fs */ 67792);
        _this.input = fs.readFileSync(_this.input.slice(7));
      }
      // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming
      // with file in browser.
      return new _iterators_file_chunk_iterator__WEBPACK_IMPORTED_MODULE_3__.FileChunkIterator(_this.input, _this.options);
    })();
  }
}

/***/ }),

/***/ 37052:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "URLDataSource": () => (/* binding */ URLDataSource)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../datasource */ 83784);
/* harmony import */ var _iterators_url_chunk_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../iterators/url_chunk_iterator */ 62192);
/* harmony import */ var _util_source_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/source_util */ 2162);
/* harmony import */ var _file_data_source__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./file_data_source */ 12647);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */




/*
 * Represents a URL readable as a stream of binary data chunks.
 */
class URLDataSource extends _datasource__WEBPACK_IMPORTED_MODULE_1__.DataSource {
  /**
   * Create a `URLDataSource`.
   *
   * @param url A source URL string, or a `Request` object.
   * @param options Options passed to the underlying `FileChunkIterator`s,
   *   such as {chunksize: 1024}.
   */
  constructor(url, fileOptions = {}) {
    super();
    this.url = url;
    this.fileOptions = fileOptions;
  }
  // TODO(soergel): provide appropriate caching options.  Currently this
  // will download the URL anew for each call to iterator().  Since we have
  // to treat the downloaded file as a blob/buffer anyway, we may as well retain
  // it-- but that raises GC issues.  Also we may want a persistent disk cache.
  iterator() {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if ((0,_util_source_util__WEBPACK_IMPORTED_MODULE_3__.isLocalPath)(_this.url)) {
        return new _file_data_source__WEBPACK_IMPORTED_MODULE_4__.FileDataSource(_this.url, _this.fileOptions).iterator();
      } else {
        return (0,_iterators_url_chunk_iterator__WEBPACK_IMPORTED_MODULE_2__.urlChunkIterator)(_this.url, _this.fileOptions);
      }
    })();
  }
}

/***/ }),

/***/ 31455:
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/util/deep_clone.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deepClone": () => (/* binding */ deepClone)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _deep_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deep_map */ 89602);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */


function deepClone(container) {
  return (0,_deep_map__WEBPACK_IMPORTED_MODULE_1__.deepMap)(container, cloneIfTensor);
}
// tslint:disable-next-line: no-any
function cloneIfTensor(item) {
  if (item instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor) {
    return {
      value: item.clone(),
      recurse: false
    };
  } else if ((0,_deep_map__WEBPACK_IMPORTED_MODULE_1__.isIterable)(item)) {
    return {
      value: null,
      recurse: true
    };
  } else {
    return {
      value: item,
      recurse: false
    };
  }
}

/***/ }),

/***/ 89602:
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/util/deep_map.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "canTensorify": () => (/* binding */ canTensorify),
/* harmony export */   "deepMap": () => (/* binding */ deepMap),
/* harmony export */   "deepMapAndAwaitAll": () => (/* binding */ deepMapAndAwaitAll),
/* harmony export */   "deepZip": () => (/* binding */ deepZip),
/* harmony export */   "isIterable": () => (/* binding */ isIterable),
/* harmony export */   "zipToList": () => (/* binding */ zipToList)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */

/**
 * Apply a mapping function to a nested structure in a recursive manner.
 *
 * The result of the mapping is an object with the same nested structure (i.e.,
 * of arrays and dicts) as the input, except that some subtrees are replaced,
 * according to the results of the mapping function.
 *
 * Mappings are memoized.  Thus, if the nested structure contains the same
 * object in multiple positions, the output will contain the same mapped object
 * in those positions.  Cycles are not supported, however.
 *
 * @param input: The object to which to apply the mapping function.
 * @param mapFn: A function that expects a single node of the object tree, and
 *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a
 *   replacement value for that node (i.e., replacing the subtree), or indicates
 *   that the node should be processed recursively.
 */
function deepMap(input, mapFn) {
  return deepMapInternal(input, mapFn);
}
/**
 * @param seen: A Map of known object mappings (i.e., memoized results of
 *   `mapFn()`)
 * @param containedIn: An set containing objects on the reference path currently
 *   being processed (used to detect cycles).
 */
function deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {
  if (input == null) {
    return null;
  }
  if (typeof Blob === 'function' && input instanceof Blob) {
    return input.slice();
  }
  if (containedIn.has(input)) {
    throw new Error('Circular references are not supported.');
  }
  if (seen.has(input)) {
    return seen.get(input);
  }
  const result = mapFn(input);
  if (result.recurse && result.value !== null) {
    throw new Error('A deep map function may not return both a value and recurse=true.');
  }
  if (!result.recurse) {
    seen.set(input, result.value);
    return result.value;
  } else if (isIterable(input)) {
    // tslint:disable-next-line:no-any
    const mappedIterable = Array.isArray(input) ? [] : {};
    containedIn.add(input);
    for (const k in input) {
      const child = input[k];
      const childResult = deepMapInternal(child, mapFn, seen, containedIn);
      mappedIterable[k] = childResult;
    }
    containedIn.delete(input);
    if (input.__proto__) {
      mappedIterable.__proto__ = input.__proto__;
    }
    return mappedIterable;
  } else {
    throw new Error(`Can't recurse into non-iterable type: ${input}`);
  }
}
// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion
// with zip()
/**
 * Zip nested structures together in a recursive manner.
 *
 * This has the effect of transposing or pivoting data, e.g. converting it from
 * a row-major representation to a column-major representation.
 *
 * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns
 * `{a: [1, 3], b: [2, 4]}`.
 *
 * The inputs should all have the same nested structure (i.e., of arrays and
 * dicts).  The result is a single object with the same nested structure, where
 * the leaves are arrays collecting the values of the inputs at that location
 * (or, optionally, the result of a custom function applied to those arrays).
 *
 * @param inputs: An array of the objects to zip together.
 * @param zipFn: (optional) A function that expects an array of elements at a
 *   single node of the object tree, and returns a `DeepMapResult`.  The
 *   `DeepMapResult` either provides a result value for that node (i.e.,
 *   representing the subtree), or indicates that the node should be processed
 *   recursively.  The default zipFn recurses as far as possible and places
 *   arrays at the leaves.
 */
function deepZip(inputs, zipFn = zipToList) {
  return deepZipInternal(inputs, zipFn);
}
/**
 * @param containedIn: An set containing objects on the reference path currently
 *   being processed (used to detect cycles).
 */
function deepZipInternal(inputs, zipFn, containedIn = new Set()) {
  // The recursion follows the structure of input 0; it's assumed that all the
  // other inputs have the same structure.
  const input = inputs[0];
  if (containedIn.has(input)) {
    throw new Error('Circular references are not supported.');
  }
  const result = zipFn(inputs);
  if (result.recurse && result.value !== null) {
    throw new Error('A deep zip function may not return both a value and recurse=true.');
  }
  if (!result.recurse) {
    return result.value;
  } else if (isIterable(input)) {
    // tslint:disable-next-line:no-any
    const mappedIterable = Array.isArray(input) ? [] : {};
    containedIn.add(input);
    for (const k in input) {
      const children = inputs.map(x => x[k]);
      const childResult = deepZipInternal(children, zipFn, containedIn);
      mappedIterable[k] = childResult;
    }
    containedIn.delete(input);
    return mappedIterable;
  } else {
    throw new Error(`Can't recurse into non-iterable type: ${input}`);
  }
}
// tslint:disable-next-line:no-any
function zipToList(x) {
  if (x === null) {
    return null;
  }
  // TODO(soergel): validate array type?
  if (isIterable(x[0])) {
    return {
      value: null,
      recurse: true
    };
  } else {
    return {
      value: x,
      recurse: false
    };
  }
}
/**
 * Apply an async mapping function to a nested structure in a recursive manner.
 *
 * This first creates a nested structure of Promises, and then awaits all of
 * those, resulting in a single Promise for a resolved nested structure.
 *
 * The result of the mapping is an object with the same nested structure (i.e.,
 * of arrays and dicts) as the input, except that some subtrees are replaced,
 * according to the results of the mapping function.
 *
 * Mappings are memoized.  Thus, if the nested structure contains the same
 * object in multiple positions, the output will contain the same mapped object
 * in those positions.  Cycles are not supported, however.
 *
 * @param input: The object to which to apply the mapping function.
 * @param mapFn: A function that expects a single node of the object tree, and
 *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides
 *   a `Promise` for a replacement value for that node (i.e., replacing the
 *   subtree), or indicates that the node should be processed recursively.  Note
 *   that the decision whether or not to recurse must be made immediately; only
 *   the mapped value may be promised.
 */
function deepMapAndAwaitAll(_x, _x2) {
  return _deepMapAndAwaitAll.apply(this, arguments);
}
/**
 * Determine whether the argument is iterable.
 *
 * @returns true if the argument is an array or any non-Tensor object.
 */
// tslint:disable-next-line:no-any
function _deepMapAndAwaitAll() {
  _deepMapAndAwaitAll = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (input, mapFn) {
    const seen = new Map();
    // First do a normal deepMap, collecting Promises in 'seen' as a side effect.
    deepMapInternal(input, mapFn, seen);
    // Replace the Promises in 'seen' in place.
    // Note TypeScript provides no async map iteration, and regular map iteration
    // is broken too, so sadly we have to do Array.from() to make it work.
    // (There's no advantage to Promise.all(), and that would be tricky anyway.)
    for (const key of Array.from(seen.keys())) {
      const value = seen.get(key);
      if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isPromise(value)) {
        const mappedValue = yield value;
        seen.set(key, mappedValue);
      }
    }
    // Normal deepMap again, this time filling in the resolved values.
    // It's unfortunate that we have to do two passes.
    // TODO(soergel): test performance and think harder about a fast solution.
    const result = deepMapInternal(input, mapFn, seen);
    return result;
  });
  return _deepMapAndAwaitAll.apply(this, arguments);
}
function isIterable(obj) {
  let isTextDecoder = false;
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env().get('IS_BROWSER')) {
    isTextDecoder = obj instanceof TextDecoder;
  } else {
    // tslint:disable-next-line:no-require-imports
    const {
      StringDecoder
    } = __webpack_require__(/*! string_decoder */ 34977);
    isTextDecoder = obj instanceof StringDecoder;
  }
  return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === 'object' && !(obj instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor) && !(obj instanceof Promise) && !isTextDecoder);
}
/**
 * Determine whether the argument can be converted to Tensor.
 *
 * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does
 * not.
 *
 * @returns true if the argument can be converted to Tensor.
 */
// tslint:disable-next-line:no-any
function canTensorify(obj) {
  return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === 'object' && obj instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isTypedArray(obj);
}
/**
 * Returns true if the given `value` is a primitive type. Otherwise returns
 * false. This is equivalant to node util.isPrimitive
 */
function isPrimitive(value) {
  return value === null || typeof value !== 'object' && typeof value !== 'function';
}

/***/ }),

/***/ 35822:
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/util/growing_ring_buffer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GrowingRingBuffer": () => (/* binding */ GrowingRingBuffer)
/* harmony export */ });
/* harmony import */ var _ring_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ring_buffer */ 30008);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */

class GrowingRingBuffer extends _ring_buffer__WEBPACK_IMPORTED_MODULE_0__.RingBuffer {
  /**
   * Constructs a `GrowingRingBuffer`.
   */
  constructor() {
    super(GrowingRingBuffer.INITIAL_CAPACITY);
  }
  isFull() {
    return false;
  }
  push(value) {
    if (super.isFull()) {
      this.expand();
    }
    super.push(value);
  }
  unshift(value) {
    if (super.isFull()) {
      this.expand();
    }
    super.unshift(value);
  }
  /**
   * Doubles the capacity of the buffer.
   */
  expand() {
    const newCapacity = this.capacity * 2;
    const newData = new Array(newCapacity);
    const len = this.length();
    // Rotate the buffer to start at index 0 again, since we can't just
    // allocate more space at the end.
    for (let i = 0; i < len; i++) {
      newData[i] = this.get(this.wrap(this.begin + i));
    }
    this.data = newData;
    this.capacity = newCapacity;
    this.doubledCapacity = 2 * this.capacity;
    this.begin = 0;
    this.end = len;
  }
}
GrowingRingBuffer.INITIAL_CAPACITY = 32;

/***/ }),

/***/ 30008:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/util/ring_buffer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RingBuffer": () => (/* binding */ RingBuffer)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * A ring buffer, providing O(1) FIFO, LIFO, and related operations.
 */
class RingBuffer {
  /**
   * Constructs a `RingBuffer`.
   * @param capacity The number of items that the buffer can accomodate.
   */
  constructor(capacity) {
    this.capacity = capacity;
    // Note we store the indices in the range 0 <= index < 2*capacity.
    // This allows us to distinguish the full from the empty case.
    // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/
    this.begin = 0; // inclusive
    this.end = 0; // exclusive
    if (capacity == null) {
      throw new RangeError('Can\'t create a ring buffer of unknown capacity.');
    }
    if (capacity < 1) {
      throw new RangeError('Can\'t create ring buffer of capacity < 1.');
    }
    this.data = new Array(capacity);
    this.doubledCapacity = 2 * capacity;
  }
  /**
   * Map any index into the range 0 <= index < 2*capacity.
   */
  wrap(index) {
    // don't trust % on negative numbers
    while (index < 0) {
      index += this.doubledCapacity;
    }
    return index % this.doubledCapacity;
  }
  get(index) {
    if (index < 0) {
      throw new RangeError('Can\'t get item at a negative index.');
    }
    return this.data[index % this.capacity];
  }
  set(index, value) {
    if (index < 0) {
      throw new RangeError('Can\'t set item at a negative index.');
    }
    this.data[index % this.capacity] = value;
  }
  /**
   * Returns the current number of items in the buffer.
   */
  length() {
    let length = this.end - this.begin;
    if (length < 0) {
      length = this.doubledCapacity + length;
    }
    return length;
  }
  /**
   * Reports whether the buffer is full.
   * @returns true if the number of items in the buffer equals its capacity, and
   *   false otherwise.
   */
  isFull() {
    return this.length() === this.capacity;
  }
  /**
   * Reports whether the buffer is empty.
   * @returns true if the number of items in the buffer equals zero, and
   *   false otherwise.
   */
  isEmpty() {
    return this.length() === 0;
  }
  /**
   * Adds an item to the end of the buffer.
   */
  push(value) {
    if (this.isFull()) {
      throw new RangeError('Ring buffer is full.');
    }
    this.set(this.end, value);
    this.end = this.wrap(this.end + 1);
  }
  /**
   * Adds many items to the end of the buffer, in order.
   */
  pushAll(values) {
    for (const value of values) {
      this.push(value);
    }
  }
  /**
   * Removes and returns the last item in the buffer.
   */
  pop() {
    if (this.isEmpty()) {
      throw new RangeError('Ring buffer is empty.');
    }
    this.end = this.wrap(this.end - 1);
    const result = this.get(this.end);
    this.set(this.end, undefined);
    return result;
  }
  /**
   * Adds an item to the beginning of the buffer.
   */
  unshift(value) {
    if (this.isFull()) {
      throw new RangeError('Ring buffer is full.');
    }
    this.begin = this.wrap(this.begin - 1);
    this.set(this.begin, value);
  }
  /**
   * Removes and returns the first item in the buffer.
   */
  shift() {
    if (this.isEmpty()) {
      throw new RangeError('Ring buffer is empty.');
    }
    const result = this.get(this.begin);
    this.set(this.begin, undefined);
    this.begin = this.wrap(this.begin + 1);
    return result;
  }
  /**
   * Removes and returns a specific item in the buffer, and moves the last item
   * to the vacated slot.  This is useful for implementing a shuffling stream.
   * Note that this operation necessarily scrambles the original order.
   *
   * @param relativeIndex: the index of the item to remove, relative to the
   *   first item in the buffer (e.g., hiding the ring nature of the underlying
   *   storage).
   */
  shuffleExcise(relativeIndex) {
    if (this.isEmpty()) {
      throw new RangeError('Ring buffer is empty.');
    }
    const index = this.wrap(this.begin + relativeIndex);
    const result = this.get(index);
    this.set(index, this.pop());
    return result;
  }
}

/***/ }),

/***/ 2162:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/util/source_util.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isLocalPath": () => (/* binding */ isLocalPath)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
// Skip tslint any type check cause this method is aiming to check type of
// input.
// tslint:disable-next-line:no-any
function isLocalPath(source) {
  return typeof source === 'string' && source.slice(0, 7) === 'file://';
}

/***/ }),

/***/ 88879:
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-data/dist/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '4.5.0';


/***/ }),

/***/ 27943:
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/activations.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Activation": () => (/* binding */ Activation),
/* harmony export */   "Elu": () => (/* binding */ Elu),
/* harmony export */   "HardSigmoid": () => (/* binding */ HardSigmoid),
/* harmony export */   "Linear": () => (/* binding */ Linear),
/* harmony export */   "LogSoftmax": () => (/* binding */ LogSoftmax),
/* harmony export */   "Mish": () => (/* binding */ Mish),
/* harmony export */   "Relu": () => (/* binding */ Relu),
/* harmony export */   "Relu6": () => (/* binding */ Relu6),
/* harmony export */   "Selu": () => (/* binding */ Selu),
/* harmony export */   "Sigmoid": () => (/* binding */ Sigmoid),
/* harmony export */   "Softmax": () => (/* binding */ Softmax),
/* harmony export */   "Softplus": () => (/* binding */ Softplus),
/* harmony export */   "Softsign": () => (/* binding */ Softsign),
/* harmony export */   "Swish": () => (/* binding */ Swish),
/* harmony export */   "Tanh": () => (/* binding */ Tanh),
/* harmony export */   "deserializeActivation": () => (/* binding */ deserializeActivation),
/* harmony export */   "getActivation": () => (/* binding */ getActivation),
/* harmony export */   "serializeActivation": () => (/* binding */ serializeActivation)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/tfjs_backend */ 81579);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
// Layer activation functions




/**
 * Base class for Activations.
 *
 * Special note: due to cross-language compatibility reasons, the
 * static readonly className field in this family of classes must be set to
 * the initialLowerCamelCase name of the activation.
 */
class Activation extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.Serializable {
  getConfig() {
    return {};
  }
}
/**
 * Exponential linear unit (ELU).
 * Reference: https://arxiv.org/abs/1511.07289
 */
class Elu extends Activation {
  /**
   * Calculate the activation function.
   *
   * @param x: Input.
   * @param alpha: Scaling factor the negative section.
   * @return Output of the ELU activation.
   */
  apply(x, alpha = 1) {
    return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.elu(x, alpha);
  }
}
/** @nocollapse */
Elu.className = 'elu';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Elu);
/**
 * Scaled Exponential Linear Unit. (Klambauer et al., 2017).
 * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515
 * Notes:
 *   - To be used together with the initialization "lecunNormal".
 *   - To be used together with the dropout variant "AlphaDropout".
 */
class Selu extends Activation {
  apply(x) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.selu(x);
  }
}
/** @nocollapse */
Selu.className = 'selu';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Selu);
/**
 *  Rectified linear unit
 */
class Relu extends Activation {
  apply(x) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu(x);
  }
}
/** @nocollapse */
Relu.className = 'relu';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Relu);
/**
 * Rectified linear unit activation maxing out at 6.0.
 */
class Relu6 extends Activation {
  apply(x) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.minimum(6.0, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu(x)));
  }
}
/** @nocollapse */
Relu6.className = 'relu6';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Relu6);
//* Linear activation (no-op) */
class Linear extends Activation {
  apply(x) {
    return x;
  }
}
/** @nocollapse */
Linear.className = 'linear';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Linear);
/**
 * Sigmoid activation function.
 */
class Sigmoid extends Activation {
  apply(x) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sigmoid(x);
  }
}
/** @nocollapse */
Sigmoid.className = 'sigmoid';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Sigmoid);
/**
 * Segment-wise linear approximation of sigmoid.
 */
class HardSigmoid extends Activation {
  apply(x) {
    return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.hardSigmoid(x);
  }
}
/** @nocollapse */
HardSigmoid.className = 'hardSigmoid';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(HardSigmoid);
/**
 * Softplus activation function.
 */
class Softplus extends Activation {
  apply(x) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softplus(x);
  }
}
/** @nocollapse */
Softplus.className = 'softplus';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Softplus);
/**
 * Softsign activation function.
 */
class Softsign extends Activation {
  apply(x) {
    return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.softsign(x);
  }
}
/** @nocollapse */
Softsign.className = 'softsign';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Softsign);
/**
 * Hyperbolic tangent function.
 */
class Tanh extends Activation {
  apply(x) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tanh(x);
  }
}
/** @nocollapse */
Tanh.className = 'tanh';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Tanh);
/**
 * Softmax activation function
 */
class Softmax extends Activation {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(x, axis = -1) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softmax(x, axis);
  }
}
/** @nocollapse */
Softmax.className = 'softmax';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Softmax);
/**
 * Log softmax activation function
 */
class LogSoftmax extends Activation {
  /**
   * Calculate the activation function of log softmax:
   * log( exp(x_i) / sum(exp(x)) )
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(x, axis = -1) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logSoftmax(x, axis);
  }
}
/** @nocollapse */
LogSoftmax.className = 'logSoftmax';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LogSoftmax);
/**
 * Swish activation function
 */
class Swish extends Activation {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param alpha Scaling factor for the sigmoid function.
   * @returns a Tensor of the same shape as x
   */
  apply(x, alpha = 1) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sigmoid(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(x, alpha)), x));
  }
}
/** @nocollapse */
Swish.className = 'swish';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Swish);
/**
 * Mish activation function
 */
class Mish extends Activation {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @returns a Tensor of the same shape as x
   */
  apply(x) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(x, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tanh(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softplus(x))));
  }
}
/** @nocollapse */
Mish.className = 'mish';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Mish);
function serializeActivation(activation) {
  return activation.getClassName();
}
function deserializeActivation(config, customObjects = {}) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__.deserializeKerasObject)(config, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');
}
function getActivation(identifier) {
  if (identifier == null) {
    const config = {};
    config['className'] = 'linear';
    config['config'] = {};
    return deserializeActivation(config);
  }
  if (typeof identifier === 'string') {
    const config = {};
    config['className'] = identifier;
    config['config'] = {};
    return deserializeActivation(config);
  } else if (identifier instanceof Activation) {
    return identifier;
  } else {
    return deserializeActivation(identifier);
  }
}

/***/ }),

/***/ 44906:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "epsilon": () => (/* binding */ epsilon),
/* harmony export */   "imageDataFormat": () => (/* binding */ imageDataFormat),
/* harmony export */   "setEpsilon": () => (/* binding */ setEpsilon)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */

let _epsilon;
/**
 * Returns the value of the fuzz factor used in numeric expressions.
 */
function epsilon() {
  if (_epsilon == null) {
    _epsilon = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend)().epsilon();
  }
  return _epsilon;
}
/**
 * Sets the value of the fuzz factor used in numeric expressions.
 * @param e New value of epsilon.
 */
function setEpsilon(e) {
  _epsilon = e;
}
/**
 * Returns the default image data format convention.
 */
function imageDataFormat() {
  return 'channelsLast';
}

/***/ }),

/***/ 37947:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/backend/random_seed.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RandomSeed": () => (/* binding */ RandomSeed)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Keeps track of seed and handles pseudorandomness
 * Instance created in BaseRandomLayer class
 * Utilized for random preprocessing layers
 */
class RandomSeed {
  constructor(seed) {
    this.seed = seed;
  }
  next() {
    if (this.seed === undefined) {
      return undefined;
    }
    return this.seed++;
  }
}
RandomSeed.className = 'RandomSeed';

/***/ }),

/***/ 6337:
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/backend/state.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getNextUniqueTensorId": () => (/* binding */ getNextUniqueTensorId),
/* harmony export */   "getUid": () => (/* binding */ getUid)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Utilities related to persistent state in the backend.
 */
/**
 * An ID to track `tf.SymbolicTensor`s and derived classes.
 * Required in different places in engine/topology.ts to identify unique
 * tensors.
 */
let _nextUniqueTensorId = 0;
function getNextUniqueTensorId() {
  return _nextUniqueTensorId++;
}
const _uidPrefixes = {};
/**
 * Provides a unique UID given a string prefix.
 *
 * @param prefix
 */
function getUid(prefix = '') {
  if (!(prefix in _uidPrefixes)) {
    _uidPrefixes[prefix] = 0;
  }
  _uidPrefixes[prefix] += 1;
  return prefix + _uidPrefixes[prefix].toString();
}

/***/ }),

/***/ 81579:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchFlatten": () => (/* binding */ batchFlatten),
/* harmony export */   "biasAdd": () => (/* binding */ biasAdd),
/* harmony export */   "cast": () => (/* binding */ cast),
/* harmony export */   "concatAlongFirstAxis": () => (/* binding */ concatAlongFirstAxis),
/* harmony export */   "concatenate": () => (/* binding */ concatenate),
/* harmony export */   "countParams": () => (/* binding */ countParams),
/* harmony export */   "dot": () => (/* binding */ dot),
/* harmony export */   "dropout": () => (/* binding */ dropout),
/* harmony export */   "elu": () => (/* binding */ elu),
/* harmony export */   "expandDims": () => (/* binding */ expandDims),
/* harmony export */   "flatten": () => (/* binding */ flatten),
/* harmony export */   "gather": () => (/* binding */ gather),
/* harmony export */   "getBackend": () => (/* binding */ getBackend),
/* harmony export */   "hardSigmoid": () => (/* binding */ hardSigmoid),
/* harmony export */   "inTrainPhase": () => (/* binding */ inTrainPhase),
/* harmony export */   "isBackendSymbolic": () => (/* binding */ isBackendSymbolic),
/* harmony export */   "oneHot": () => (/* binding */ oneHot),
/* harmony export */   "pow": () => (/* binding */ pow),
/* harmony export */   "randomNormal": () => (/* binding */ randomNormal),
/* harmony export */   "repeat": () => (/* binding */ repeat),
/* harmony export */   "setBackend": () => (/* binding */ setBackend),
/* harmony export */   "sign": () => (/* binding */ sign),
/* harmony export */   "sliceAlongAxis": () => (/* binding */ sliceAlongAxis),
/* harmony export */   "sliceAlongFirstAxis": () => (/* binding */ sliceAlongFirstAxis),
/* harmony export */   "sliceAlongLastAxis": () => (/* binding */ sliceAlongLastAxis),
/* harmony export */   "softsign": () => (/* binding */ softsign),
/* harmony export */   "square": () => (/* binding */ square),
/* harmony export */   "tile": () => (/* binding */ tile)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/math_utils */ 96821);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common */ 44906);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * deeplearn.js backend.
 */






// tslint:enable
/* Setting and getting backend from deeplearn.js. */
// Default deeplearn.js backend is WebGL (GPU).
let backend = 'webgl';
function setBackend(requestedBackend) {
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.setBackend(requestedBackend);
  backend = requestedBackend;
}
function getBackend() {
  return backend;
}
/**
 * Indicates whether the backend is operating symbolically.
 *
 * This function will be used to determine how to interpret user code. If
 * it returns true, calls to the backend construct a symbolic graph; if
 * it returns false, calls to the backend execute immediately.
 */
function isBackendSymbolic() {
  return false;
}
/**
 * Get the number of elements in a Tensor.
 * @param x The Tensor.
 * @return Number of elements in `x`.
 */
function countParams(x) {
  const shape = x.shape;
  if (shape.length > 0) {
    return shape.reduce((a, b) => a * b);
  } else {
    // Scalar.
    return 1;
  }
}
/**
 * Casts a tensor to a different dtype and returns it.
 * @param x Input tensor.
 * @param dtype String: 'float32'|'int32'|'bool'.
 * @returns Tensor of the specified `dtype`.
 */
function cast(x, dtype) {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(x, dtype);
}
/**
 * Adds a 1-sized dimension at index "axis".
 * @param x Input tensor.
 * @param axis Position where to add the new axis.
 * @returns Result of the dimension expansion.
 */
function expandDims(x, axis = -1) {
  const outShape = x.shape.slice();
  if (axis < 0) {
    axis = outShape.length + axis + 1;
  }
  outShape.splice(axis, 0, 1);
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(x, outShape);
}
/**
 * Repeats a 2D tensor.
 *
 * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output
 * will have shape `[samples, 2, dim]`.
 *
 * @param x Input tensor.
 * @param n Integer, number of times to repeat.
 * @returns The result of the repeat operation.
 * @throws ValueError: If input tensor is not 2D.
 */
function repeat(x, n) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (x.shape.length !== 2) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`repeat() expects a rank-2 tensor, but received a ` + `rank-${x.shape.length} tensor.`);
    }
    const y = expandDims(x, 1);
    return tile(y, [1, n, 1]);
  });
}
/**
 * Flatten a Tensor into 1D.
 * @param x Input tensor.
 * @return The result of the flattening `x`.
 */
function flatten(x) {
  const newShape = [_utils_math_utils__WEBPACK_IMPORTED_MODULE_3__.arrayProd(x.shape)];
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(x, newShape);
}
/**
 * Turn a nD tensor into a 2D tensor with same 0th dimension.
 * In other words, it flattens each data samples of a batch.
 *
 * @param x The tensor to flatten. The rank of this tensor is required to be 2
 *   or higher.
 * @return The result of the flattening.
 */
function batchFlatten(x) {
  if (x.rank <= 1) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);
  }
  const newShape = [x.shape[0], _utils_math_utils__WEBPACK_IMPORTED_MODULE_3__.arrayProd(x.shape, 1)];
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(x, newShape);
}
/**
 * Do slicing along the first axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size size of the slice along the first axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */
function sliceAlongFirstAxis(array, start, size) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    switch (array.rank) {
      case 1:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice1d(array, start, size);
      case 2:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice2d(array, [start, 0], [size, array.shape[1]]);
      case 3:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);
      case 4:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);
      case 5:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice(array, [start, 0, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]]);
      case 6:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice(array, [start, 0, 0, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3], array.shape[4], array.shape[5]]);
      default:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ` + `${array.rank}`);
    }
  });
}
/**
 * Do slicing along the last axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size size of the slice along the last axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */
function sliceAlongLastAxis(array, start, size) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    switch (array.rank) {
      case 1:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice1d(array, start, size);
      case 2:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice2d(array, [0, start], [array.shape[0], size]);
      case 3:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);
      case 4:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);
      default:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);
    }
  });
}
/**
 * Do slicing along the sepcified axis.
 * @param array input `tf.Tensor`.
 * @param start starting index, inclusive.
 * @param size of the slice along the chosen axis.
 * @param choose an axis.
 * @returns result of the slicing.
 * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.
 */
function sliceAlongAxis(array, start, size, axis) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    switch (array.rank) {
      case 1:
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice1d(array, start, size);
      case 2:
        switch (axis) {
          case 1:
            return sliceAlongFirstAxis(array, start, size);
          case 2:
            return sliceAlongLastAxis(array, start, size);
          default:
            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);
        }
      case 3:
        switch (axis) {
          case 1:
            return sliceAlongFirstAxis(array, start, size);
          case 2:
            return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);
          case 3:
            return sliceAlongLastAxis(array, start, size);
          default:
            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);
        }
      case 4:
        switch (axis) {
          case 1:
            return sliceAlongFirstAxis(array, start, size);
          case 2:
            return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);
          case 3:
            return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);
          case 4:
            return sliceAlongLastAxis(array, start, size);
          default:
            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`The axis is not within the rank of the tensor ` + `${axis}`);
        }
      default:
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` + `${array.rank}`);
    }
  });
}
/**
 * Concatenates a list of tensors alongside the specified axis.
 * @param tensors `Array` of tensors to concatenate.
 * @param axis Concatenation axis.
 * @returns The result of the concatenation.
 */
function concatenate(tensors, axis = -1) {
  let rank;
  if (axis < 0) {
    rank = tensors[0].rank;
    if (rank !== 0) {
      axis = rank;
    } else {
      axis = 0;
    }
  }
  if (axis === tensors[0].rank) {
    // Porting Note: This is necessary because tfc.concat() requires axis to be
    //   in the interval [-rank, rank).
    axis = -1;
  }
  // Porting Note: Sparse concat is not supported yet.
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat(tensors, axis);
}
/**
 * Concatenate two arrays along the first dimension.
 * @param a The 1st `tf.Tensor` to concatenate.
 * @param b The 2nd `tf.Tensor` to concatenate.
 * @returns Result of the concatenation.
 * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.
 */
function concatAlongFirstAxis(a, b) {
  switch (a.rank) {
    case 1:
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat1d([a, b]);
    case 2:
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat2d([a, b], 0);
    case 3:
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat3d([a, b], 0);
    case 4:
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat4d([a, b], 0);
    default:
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`concatAlongFirstAxis() received an unsupported ` + `tensor rank: ${a.rank}`);
  }
}
/**
 * Creates a tensor by tiling `x` by `n`.
 * @param x A tensor.
 * @param n An Array of integers or a single integer. If an Array, the length
 *   must be the same as the number of dimensions in `x`. If a single integer,
 *   it will be treated as an Array of length 1.
 */
function tile(x, n) {
  if (!Array.isArray(n)) {
    n = [n];
  }
  if (x.rank !== n.length) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`The length of input n (${n.length}) does not match ` + `the number of dimensions in input x (${x.rank})`);
  }
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tile(x, n);
}
/* Creation of random tensors. */
/**
 * Get a tensor with normal distribution of values.
 *
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @return The normal tensor.
 */
function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomNormal(shape, mean, stddev, dtype, seed);
}
/* Linear Algebra */
/**
 * Multiply two tensors and returns the result as a tensor.
 *
 * For 2D tensors, this is equivalent to matrix multiplication (matMul).
 * For tensors of higher ranks, it follows the Theano behavior,
 * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:
 *
 * For N dimensions it is a sum product over the last axis of x and the
 * second-to-last of y:
 *
 * @param a A tensor of at least rank 2.
 * @param b A tensor of at least rank 2.
 * @param activation (optional) A string identifying the activation
 *   function.
 * @return Result of the dot operation.
 */
function dot(a, b, activation, bias) {
  if (a.rank < 2 || b.rank < 2) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.NotImplementedError(`dot requires both inputs to be rank >= 2` + ` but got x shape = ${a.shape} and y shape = ${b.shape}`);
  }
  if (b.rank >= 3) {
    const xLastDim = a.shape.slice(-1)[0];
    const ySecondLastDim = b.shape.slice(-2)[0];
    if (xLastDim !== ySecondLastDim) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.NotImplementedError(`If rank y >= 3, then the second last dim` + ` of y must equal the last dim of x but got x shape = ${a.shape} and ` + ` y shape = ${b.shape}`);
    }
  }
  // Handle basic 2D x 2D case.
  if (a.rank === 2 && b.rank === 2) {
    const transposeA = false;
    const transposeB = false;
    // tfc.fused.matMul only fuses certain activation functions. Unsupported
    // activation functions are treated as 'linear' activations, which is
    // equivalent to a no-op.
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fused.matMul({
      a,
      b: b,
      transposeA,
      transposeB,
      bias: bias ? reshapeBias(a.rank, bias, (0,_common__WEBPACK_IMPORTED_MODULE_4__.imageDataFormat)()) : null,
      activation
    });
  } else {
    // Reshape x into the analogous 2D Tensor.
    const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.
    const aLastDim = aFirstDims.pop();
    a = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(a, [-1, aLastDim]);
    // Reshape y into the analogous 2D Tensor, and keep track of the
    // required dimensions to reproduce the output shape.
    const bShape = b.shape.slice();
    const bLastDim = bShape.pop();
    const ySecondLastDim = bShape.pop();
    const yOtherDims = [...bShape, bLastDim];
    // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]
    // where r is the rank of y.
    const perm = Array.from({
      length: b.rank
    }, (_, i) => {
      if (i === 0) {
        return b.rank - 2;
      } else if (i <= b.rank - 2) {
        return i - 1;
      }
      return i;
    });
    b = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(b, perm), [ySecondLastDim, -1]);
    // Multiply x and y as 2D Tensors, and then reshape back to original.
    const outputShape = [...aFirstDims, ...yOtherDims];
    const transposeA = false;
    const transposeB = false;
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fused.matMul({
      a,
      b,
      transposeA,
      transposeB,
      bias: bias ? reshapeBias(a.rank, bias, (0,_common__WEBPACK_IMPORTED_MODULE_4__.imageDataFormat)()) : null,
      activation
    }), outputShape);
  }
}
/**
 * Compute the sign Tensor of an input Tensor.
 *
 * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.
 * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.
 * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.
 *
 * @param x Input `tf.Tensor`.
 * @return The sign `tf.Tensor`.
 */
function sign(x) {
  // TODO(cais): Move to the core.
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const zerosLikeX = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zerosLike)(x);
    const onesLikeX = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike)(x);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.where)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(x, zerosLikeX), zerosLikeX, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.where)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greater(x, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zerosLike)(x)), onesLikeX, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(-1, onesLikeX)));
  });
}
/**
 * Computes the one-hot representation of an integer tensor.
 * @param indices nD integer tensor of shape
 *   `(batch_size, dim1, dim2, ... dim(n-1))`
 * @param numClasses Integer, number of classes to consider.
 * @returns (n + 1)D one hot representation of the input
 *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`
 */
function oneHot(indices, numClasses) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (indices.rank !== 1) {
      throw new Error('Only 1D one-hot tensors are supported in the ' + 'deeplearn backend, at present.');
    }
    indices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(indices, 'int32');
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.oneHot(indices, numClasses), 'float32');
  });
}
/* Elementary math functions. */
/**
 * Retrieves the elements of indices `indices` in the tensor `reference`.
 * @param reference A tensor.
 * @param indices An integer tensor of indices or an `Array` of integers.
 * @param axis Axis along which to perform the gather operation.
 * @returns The result of the gathering as a tensor.
 */
function gather(reference, indices, axis) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (Array.isArray(indices)) {
      indices = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor1d)(indices, 'int32');
    } else {
      indices = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(indices, 'int32');
    }
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gather(reference, indices, axis);
  });
}
/**
 * Element-wise square.
 * @param x Input tensor.
 * @return element-wise x^2
 */
function square(x) {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(x, x);
}
/**
 * Element-wise exponentiation.
 *
 * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which
 *   takes advatnage of the backend's (e.g., TensorFlow's) automatic
 * conversion to tensor. Here we allow `a` to be either a number or a tensor.
 *
 * @param x The base tensor.
 * @param a The exponent, tensor or number. If a number, it is rounded to the
 *   nearest integer and converted to a tensor.
 * @returns A tensor of the same shape as `x`.
 */
function pow(x, a) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (typeof a === 'number') {
      a = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(Math.round(a), 'int32');
    }
    if (a.dtype !== 'int32') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.NotImplementedError(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);
    }
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pow(x, a);
  });
}
/**
 * Reshapes bias tensor according to rank of x.
 */
function reshapeBias(xRank, bias, dataFormat) {
  const biasShape = bias.shape;
  if (bias.rank !== 1 && bias.rank !== xRank) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Unexpected bias dimensions: ${bias.rank}` + `; expected it to be 1 or ${xRank}`);
  }
  if (xRank === 5) {
    if (dataFormat === 'channelsFirst') {
      if (biasShape.length === 1) {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, biasShape[0], 1, 1, 1]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);
      }
    } else if (dataFormat === 'channelsLast') {
      if (biasShape.length === 1) {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, 1, 1, 1, biasShape[0]]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1].concat(biasShape));
      }
    }
  } else if (xRank === 4) {
    if (dataFormat === 'channelsFirst') {
      if (biasShape.length === 1) {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, biasShape[0], 1, 1]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);
      }
    } else if (dataFormat === 'channelsLast') {
      if (biasShape.length === 1) {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, 1, 1, biasShape[0]]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1].concat(biasShape));
      }
    }
  } else if (xRank === 3) {
    if (dataFormat === 'channelsFirst') {
      if (biasShape.length === 1) {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, biasShape[0], 1]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, biasShape[1], biasShape[0]]);
      }
    } else if (dataFormat === 'channelsLast') {
      if (biasShape.length === 1) {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1, 1, biasShape[0]]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(bias, [1].concat(biasShape));
      }
    }
  } else if (xRank < 3) {
    return bias;
  }
  throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);
}
/* Neural-network operations. */
/**
 * Add a bias to a tensor.
 *
 * @param x The tensor to add the bias to.
 * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.
 * @return Result of the bias adding.
 * @throws ValueError: If the rank of `bias` is incorrect.
 */
function biasAdd(x, bias, dataFormat) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (dataFormat == null) {
      dataFormat = (0,_common__WEBPACK_IMPORTED_MODULE_4__.imageDataFormat)();
    }
    (0,_common__WEBPACK_IMPORTED_MODULE_1__.checkDataFormat)(dataFormat);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(x, reshapeBias(x.rank, bias, dataFormat));
  });
}
/**
 * Exponential linear unit (ELU).
 * @param x A tensor or variable to compute the activation function for.
 * @param alpha: A scalar, a scaling factor for the negative section.
 * @return Output of the ELU operation.
 */
function elu(x, alpha = 1) {
  // TODO(cais): Add support for alpha values other than 1.
  if (alpha !== 1) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented ` + `yet.`);
  }
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.elu(x);
}
/**
 * Softsign of a tensor.
 *
 * Defined as x / (abs(x) + 1), element-wise.
 *
 * @param x: Input.
 * @returns Output.
 */
function softsign(x) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(x, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs(x), 1)));
}
/**
 * Sets entries in `x` to zero at random, while scaling the entire tensor.
 *
 * @param x input tensor.
 * @param level fraction of the entries in the tensor that will be set to 0.
 * @param noiseShape shape of randomly generated keep/drop flags, must be
 *   broadcastable to the shape of `x`. Optional.
 * @param seed random seed to ensure determinism. Optional.
 * @returns Result of the dropout operation.
 */
function dropout(x, level, noiseShape, seed) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dropout(x, level, noiseShape, seed));
}
/**
 * Element-wise, segment-wise linear approximation of sigmoid.
 *
 * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.
 * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.
 *
 * @param x Input tensor.
 * @returns Output tensor.
 */
function hardSigmoid(x) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(.5, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(.2, x));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(y, 0, 1);
  });
}
/**
 * Invoke `x` in the training phase, and `alt` otherwise.
 *
 * Porting Note: We do not create placeholder tensors for the `training`
 * boolean flag here, because there is no such thing in the TF.js imperative
 * backend.
 *
 * @param x The function to invoke iff `training` is `true`.
 * @param alt The function to invoke iff `training` is `false`.
 * @param training Boolean flag for whether training phase is active.
 * @returns The return value of `x()` if `training` is `true`, or the return
 *   value of `alt()` if `training` is `false`.
 */
function inTrainPhase(x, alt, training = false) {
  return training ? x() : alt();
}

/***/ }),

/***/ 52043:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseCallback": () => (/* binding */ BaseCallback),
/* harmony export */   "BaseLogger": () => (/* binding */ BaseLogger),
/* harmony export */   "CallbackConstructorRegistry": () => (/* binding */ CallbackConstructorRegistry),
/* harmony export */   "CallbackList": () => (/* binding */ CallbackList),
/* harmony export */   "CustomCallback": () => (/* binding */ CustomCallback),
/* harmony export */   "DEFAULT_YIELD_EVERY_MS": () => (/* binding */ DEFAULT_YIELD_EVERY_MS),
/* harmony export */   "History": () => (/* binding */ History),
/* harmony export */   "ModelLoggingVerbosity": () => (/* binding */ ModelLoggingVerbosity),
/* harmony export */   "configureCallbacks": () => (/* binding */ configureCallbacks),
/* harmony export */   "standardizeCallbacks": () => (/* binding */ standardizeCallbacks)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ 22802);
/* harmony import */ var _logs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logs */ 15878);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original source: keras/callbacks.py */




/** Verbosity logging level when fitting a model. */
var ModelLoggingVerbosity;
(function (ModelLoggingVerbosity) {
  ModelLoggingVerbosity[ModelLoggingVerbosity["SILENT"] = 0] = "SILENT";
  ModelLoggingVerbosity[ModelLoggingVerbosity["VERBOSE"] = 1] = "VERBOSE";
})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));
/** How often to yield to the main thread when training (in ms). */
const DEFAULT_YIELD_EVERY_MS = 125;
/**
 * Abstract base class used to build new callbacks.
 *
 * The `logs` dictionary that callback methods take as argument will contain
 * keys for quantities relevant to the current batch or epoch.
 *
 * Currently, the `.fit()` method of the `Sequential` model class
 * will include the following quantities in the `logs` that
 * it passes to its callbacks:
 *
 * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`
 *   (if validation is enabled in `fit`), and `valAcc` (if validation and
 *   accuracy monitoring are enabled).
 * onBatchBegin: Logs include `size`, the number of samples in the current
 *   batch.
 * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring
 *   is enabled).
 */
class BaseCallback {
  constructor() {
    // TODO(michaelterry): This type is a best guess.
    this.validationData = null;
  }
  setParams(params) {
    this.params = params;
  }
  onEpochBegin(epoch, logs) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {})();
  }
  onEpochEnd(epoch, logs) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {})();
  }
  onBatchBegin(batch, logs) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {})();
  }
  onBatchEnd(batch, logs) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {})();
  }
  onTrainBegin(logs) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {})();
  }
  onTrainEnd(logs) {
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {})();
  }
  // LayersModel needs to call Callback.setModel(), but cannot actually depend
  // on Callback because that creates a cyclic dependency.  Providing this no-op
  // method on BaseCallback breaks the cycle: this way LayersModel can depend on
  // BaseCallback but not on Callback.  The argument is typed as `Container`
  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
  // overrides this method and enforces that the argument is really a
  // LayersModel.
  setModel(model) {
    // Do nothing. Use Callback instead of BaseCallback to track the model.
  }
}
/**
 * Container abstracting a list of callbacks.
 */
class CallbackList {
  // TODO(cais): When the need arises, uncomment the following lines and
  // implement the queue for time values.
  // private deltaTBatch: number;
  // private deltaTsBatchBegin: Array<number>;
  // private deltaTsBatchEnd: Array<number>;
  /**
   * Constructor of CallbackList.
   * @param callbacks Array of `Callback` instances.
   * @param queueLength Queue length for keeping running statistics over
   *   callback execution time.
   */
  constructor(callbacks, queueLength = 10) {
    // TODO(cais): Make use of queueLength when implementing the queue for time
    // values.
    if (callbacks == null) {
      callbacks = [];
    }
    this.callbacks = callbacks;
    this.queueLength = queueLength;
  }
  append(callback) {
    this.callbacks.push(callback);
  }
  setParams(params) {
    for (const callback of this.callbacks) {
      callback.setParams(params);
    }
  }
  setModel(model) {
    for (const callback of this.callbacks) {
      callback.setModel(model);
    }
  }
  /**
   * Called at the start of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  onEpochBegin(epoch, logs) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      for (const callback of _this.callbacks) {
        yield callback.onEpochBegin(epoch, logs);
      }
    })();
  }
  /**
   * Called at the end of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  onEpochEnd(epoch, logs) {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      for (const callback of _this2.callbacks) {
        yield callback.onEpochEnd(epoch, logs);
      }
    })();
  }
  /**
   * Called  right before processing a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  onBatchBegin(batch, logs) {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      for (const callback of _this3.callbacks) {
        yield callback.onBatchBegin(batch, logs);
      }
    })();
  }
  /**
   * Called at the end of a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  onBatchEnd(batch, logs) {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      for (const callback of _this4.callbacks) {
        yield callback.onBatchEnd(batch, logs);
      }
    })();
  }
  /**
   * Called at the beginning of training.
   * @param logs Dictionary of logs.
   */
  onTrainBegin(logs) {
    var _this5 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      for (const callback of _this5.callbacks) {
        yield callback.onTrainBegin(logs);
      }
    })();
  }
  /**
   * Called at the end of training.
   * @param logs Dictionary of logs.
   */
  onTrainEnd(logs) {
    var _this6 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      for (const callback of _this6.callbacks) {
        yield callback.onTrainEnd(logs);
      }
    })();
  }
}
/**
 * Callback that accumulates epoch averages of metrics.
 *
 * This callback is automatically applied to every LayersModel.
 */
class BaseLogger extends BaseCallback {
  constructor() {
    super();
  }
  onEpochBegin(epoch) {
    var _this7 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this7.seen = 0;
      _this7.totals = {};
    })();
  }
  onBatchEnd(batch, logs) {
    var _this8 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      const batchSize = logs['size'] == null ? 0 : logs['size'];
      _this8.seen += batchSize;
      for (const key in logs) {
        const value = logs[key];
        if (typeof value === 'number') {
          if (!_this8.totals.hasOwnProperty(key)) {
            _this8.totals[key] = 0;
          }
          _this8.totals[key] = _this8.totals[key] + value * batchSize;
        } else {
          let oldTotalsToDispose;
          if (key in _this8.totals) {
            oldTotalsToDispose = _this8.totals[key];
          } else {
            _this8.totals[key] = 0;
          }
          const total = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add)(_this8.totals[key], (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)(value, batchSize)));
          _this8.totals[key] = total;
          if (oldTotalsToDispose != null) {
            oldTotalsToDispose.dispose();
          }
        }
      }
    })();
  }
  onEpochEnd(epoch, logs) {
    var _this9 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs != null) {
        for (const key of _this9.params['metrics']) {
          if (_this9.totals[key] == null) {
            continue;
          }
          if (typeof _this9.totals[key] === 'number') {
            logs[key] = _this9.totals[key] / _this9.seen;
          } else {
            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
              const log = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div)(1, _this9.seen), _this9.totals[key]);
              logs[key] = log;
              _this9.totals[key].dispose();
              (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep)(logs[key]);
            });
          }
        }
      }
    })();
  }
}
/**
 * Callback that records events into a `History` object. This callback is
 * automatically applied to every TF.js Layers model. The `History` object
 * gets returned by the `fit` method of models.
 */
class History extends BaseCallback {
  onTrainBegin(logs) {
    var _this10 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this10.epoch = [];
      _this10.history = {};
    })();
  }
  onEpochEnd(epoch, logs) {
    var _this11 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (logs == null) {
        logs = {};
      }
      _this11.epoch.push(epoch);
      for (const key in logs) {
        if (_this11.history[key] == null) {
          _this11.history[key] = [];
        }
        _this11.history[key].push(logs[key]);
      }
    })();
  }
  /**
   * Await the values of all losses and metrics.
   */
  syncData() {
    var _this12 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const promises = [];
      const keys = [];
      const indices = [];
      for (const key in _this12.history) {
        const valueArray = _this12.history[key];
        for (let i = 0; i < valueArray.length; ++i) {
          if (typeof valueArray[i] !== 'number') {
            const valueScalar = valueArray[i];
            promises.push(valueScalar.data());
            keys.push(key);
            indices.push(i);
          }
        }
      }
      const values = yield Promise.all(promises);
      for (let n = 0; n < values.length; ++n) {
        const tensorToDispose = _this12.history[keys[n]][indices[n]];
        tensorToDispose.dispose();
        _this12.history[keys[n]][indices[n]] = values[n][0];
      }
    })();
  }
}
/**
 * Custom callback for training.
 */
class CustomCallback extends BaseCallback {
  constructor(args, yieldEvery) {
    super();
    this.currentEpoch = 0;
    this.nowFunc = args.nowFunc;
    this.nextFrameFunc = args.nextFrameFunc || _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.nextFrame;
    this.yieldEvery = yieldEvery || 'auto';
    if (this.yieldEvery === 'auto') {
      this.yieldEvery = DEFAULT_YIELD_EVERY_MS;
    }
    if (this.yieldEvery === 'never' && args.onYield != null) {
      throw new Error('yieldEvery is `never` but you provided an `onYield` callback. ' + 'Either change `yieldEvery` or remove the callback');
    }
    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isNumber(this.yieldEvery)) {
      // Decorate `maybeWait` so it will be called at most once every
      // `yieldEvery` ms.
      this.maybeWait = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.debounce(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc);
    }
    this.trainBegin = args.onTrainBegin;
    this.trainEnd = args.onTrainEnd;
    this.epochBegin = args.onEpochBegin;
    this.epochEnd = args.onEpochEnd;
    this.batchBegin = args.onBatchBegin;
    this.batchEnd = args.onBatchEnd;
    this.yield = args.onYield;
  }
  maybeWait(epoch, batch, logs) {
    var _this13 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const ps = [];
      if (_this13.yield != null) {
        yield (0,_logs__WEBPACK_IMPORTED_MODULE_3__.resolveScalarsInLogs)(logs);
        ps.push(_this13.yield(epoch, batch, logs));
      }
      ps.push(_this13.nextFrameFunc());
      yield Promise.all(ps);
    })();
  }
  onEpochBegin(epoch, logs) {
    var _this14 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this14.currentEpoch = epoch;
      if (_this14.epochBegin != null) {
        yield (0,_logs__WEBPACK_IMPORTED_MODULE_3__.resolveScalarsInLogs)(logs);
        yield _this14.epochBegin(epoch, logs);
      }
    })();
  }
  onEpochEnd(epoch, logs) {
    var _this15 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const ps = [];
      if (_this15.epochEnd != null) {
        yield (0,_logs__WEBPACK_IMPORTED_MODULE_3__.resolveScalarsInLogs)(logs);
        ps.push(_this15.epochEnd(epoch, logs));
      }
      if (_this15.yieldEvery === 'epoch') {
        ps.push(_this15.nextFrameFunc());
      }
      yield Promise.all(ps);
    })();
  }
  onBatchBegin(batch, logs) {
    var _this16 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this16.batchBegin != null) {
        yield (0,_logs__WEBPACK_IMPORTED_MODULE_3__.resolveScalarsInLogs)(logs);
        yield _this16.batchBegin(batch, logs);
      }
    })();
  }
  onBatchEnd(batch, logs) {
    var _this17 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const ps = [];
      if (_this17.batchEnd != null) {
        yield (0,_logs__WEBPACK_IMPORTED_MODULE_3__.resolveScalarsInLogs)(logs);
        ps.push(_this17.batchEnd(batch, logs));
      }
      if (_this17.yieldEvery === 'batch') {
        ps.push(_this17.nextFrameFunc());
      } else if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isNumber(_this17.yieldEvery)) {
        ps.push(_this17.maybeWait(_this17.currentEpoch, batch, logs));
      }
      yield Promise.all(ps);
    })();
  }
  onTrainBegin(logs) {
    var _this18 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this18.trainBegin != null) {
        yield (0,_logs__WEBPACK_IMPORTED_MODULE_3__.resolveScalarsInLogs)(logs);
        yield _this18.trainBegin(logs);
      }
    })();
  }
  onTrainEnd(logs) {
    var _this19 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this19.trainEnd != null) {
        yield (0,_logs__WEBPACK_IMPORTED_MODULE_3__.resolveScalarsInLogs)(logs);
        yield _this19.trainEnd(logs);
      }
    })();
  }
}
/**
 * Standardize callbacks or configurations of them to an Array of callbacks.
 */
function standardizeCallbacks(callbacks, yieldEvery) {
  if (callbacks == null) {
    callbacks = {};
  }
  if (callbacks instanceof BaseCallback) {
    return [callbacks];
  }
  if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {
    return callbacks;
  }
  // Convert custom callback configs to custom callback objects.
  const callbackConfigs = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(callbacks);
  return callbackConfigs.map(callbackConfig => new CustomCallback(callbackConfig, yieldEvery));
}
/**
 * A global registry for callback constructors to be used during
 * LayersModel.fit().
 */
class CallbackConstructorRegistry {
  /**
   * Blocks public access to constructor.
   */
  constructor() {}
  /**
   * Register a tf.LayersModel.fit() callback constructor.
   *
   * The registered callback constructor will be used to instantiate
   * callbacks for every tf.LayersModel.fit() call afterwards.
   *
   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
   *   is to be reigstered.
   * @param callbackConstructor A no-arg constructor for `tf.Callback`.
   * @throws Error, if the same callbackConstructor has been registered before,
   *   either at the same or a different `verbosityLevel`.
   */
  static registerCallbackConstructor(verbosityLevel, callbackConstructor) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), () => `Verbosity level is expected to be an integer >= 0, ` + `but got ${verbosityLevel}`);
    CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);
    if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {
      CallbackConstructorRegistry.constructors[verbosityLevel] = [];
    }
    CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);
  }
  static checkForDuplicate(callbackConstructor) {
    for (const levelName in CallbackConstructorRegistry.constructors) {
      const constructors = CallbackConstructorRegistry.constructors[+levelName];
      constructors.forEach(ctor => {
        if (ctor === callbackConstructor) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Duplicate callback constructor.');
        }
      });
    }
  }
  /**
   * Clear all registered callback constructors.
   */
  static clear() {
    CallbackConstructorRegistry.constructors = {};
  }
  /**
   * Create callbacks using the registered callback constructors.
   *
   * Given `verbosityLevel`, all constructors registered at that level or above
   * will be called and the instantiated callbacks will be used.
   *
   * @param verbosityLevel: Level of verbosity.
   */
  static createCallbacks(verbosityLevel) {
    const constructors = [];
    for (const levelName in CallbackConstructorRegistry.constructors) {
      const level = +levelName;
      if (verbosityLevel >= level) {
        constructors.push(...CallbackConstructorRegistry.constructors[level]);
      }
    }
    return constructors.map(ctor => new ctor());
  }
}
CallbackConstructorRegistry.constructors = {};
function configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {
  const history = new History();
  const actualCallbacks = [new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)];
  if (callbacks != null) {
    actualCallbacks.push(...callbacks);
  }
  actualCallbacks.push(history);
  const callbackList = new CallbackList(actualCallbacks);
  // TODO(cais): Figure out when this LayersModel instance can have a
  // dynamically
  //   set property called 'callback_model' as in PyKeras.
  callbackList.setParams({
    epochs,
    initialEpoch,
    samples: numTrainSamples,
    steps: stepsPerEpoch,
    batchSize,
    verbose,
    doValidation,
    metrics: callbackMetrics
  });
  return {
    callbackList,
    history
  };
}

/***/ }),

/***/ 79926:
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Callback": () => (/* binding */ Callback),
/* harmony export */   "EarlyStopping": () => (/* binding */ EarlyStopping),
/* harmony export */   "callbacks": () => (/* binding */ callbacks),
/* harmony export */   "earlyStopping": () => (/* binding */ earlyStopping)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _base_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base_callbacks */ 52043);
/* harmony import */ var _engine_training__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine/training */ 64970);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ 22802);
/* harmony import */ var _logs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logs */ 15878);

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original source: keras/callbacks.py */




class Callback extends _base_callbacks__WEBPACK_IMPORTED_MODULE_1__.BaseCallback {
  constructor() {
    super(...arguments);
    /** Instance of `keras.models.Model`. Reference of the model being trained. */
    this.model = null;
  }
  setModel(model) {
    if (!(model instanceof _engine_training__WEBPACK_IMPORTED_MODULE_2__.LayersModel)) {
      throw new Error('model must be a LayersModel, not some other Container');
    }
    this.model = model;
  }
}
function less(currVal, prevVal) {
  return currVal < prevVal;
}
function greater(currVal, prevVal) {
  return currVal > prevVal;
}
/**
 * A Callback that stops training when a monitored quantity has stopped
 * improving.
 */
class EarlyStopping extends Callback {
  constructor(args) {
    super();
    if (args == null) {
      args = {};
    }
    if (args.restoreBestWeights) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');
    }
    this.monitor = args.monitor || 'val_loss';
    this.minDelta = Math.abs(args.minDelta || 0);
    this.patience = args.patience || 0;
    this.verbose = args.verbose || 0;
    this.mode = args.mode || 'auto';
    this.baseline = args.baseline;
    if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {
      console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` + `Falling back to mode 'auto'.`);
      this.mode = 'auto';
    }
    if (this.mode === 'min') {
      this.monitorFunc = less;
    } else if (this.mode === 'max') {
      this.monitorFunc = greater;
    } else {
      // For mode === 'auto'.
      if (this.monitor.indexOf('acc') !== -1) {
        this.monitorFunc = greater;
      } else {
        this.monitorFunc = less;
      }
    }
    if (this.monitorFunc === less) {
      this.minDelta *= -1;
    }
  }
  onTrainBegin(logs) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.wait = 0;
      _this.stoppedEpoch = 0;
      if (_this.baseline != null) {
        _this.best = _this.baseline;
      } else {
        _this.best = _this.monitorFunc === less ? Infinity : -Infinity;
      }
    })();
  }
  onEpochEnd(epoch, logs) {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield (0,_logs__WEBPACK_IMPORTED_MODULE_4__.resolveScalarsInLogs)(logs);
      const current = _this2.getMonitorValue(logs);
      if (current == null) {
        return;
      }
      if (_this2.monitorFunc(current - _this2.minDelta, _this2.best)) {
        _this2.best = current;
        _this2.wait = 0;
        // TODO(cais): Logic for restoreBestWeights.
      } else {
        _this2.wait++;
        if (_this2.wait >= _this2.patience) {
          _this2.stoppedEpoch = epoch;
          _this2.model.stopTraining = true;
        }
        // TODO(cais): Logic for restoreBestWeights.
      }
    })();
  }

  onTrainEnd(logs) {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this3.stoppedEpoch > 0 && _this3.verbose) {
        console.log(`Epoch ${_this3.stoppedEpoch}: early stopping.`);
      }
    })();
  }
  getMonitorValue(logs) {
    if (logs == null) {
      logs = {};
    }
    const monitorValue = logs[this.monitor];
    if (monitorValue == null) {
      console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` + `Available metrics are: ${Object.keys(logs)}`);
    }
    return monitorValue;
  }
}
/**
 * Factory function for a Callback that stops training when a monitored
 * quantity has stopped improving.
 *
 * Early stopping is a type of regularization, and protects model against
 * overfitting.
 *
 * The following example based on fake data illustrates how this callback
 * can be used during `tf.LayersModel.fit()`:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense({
 *   units: 3,
 *   activation: 'softmax',
 *   kernelInitializer: 'ones',
 *   inputShape: [2]
 * }));
 * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);
 * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);
 * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);
 * model.compile(
 *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});
 *
 * // Without the EarlyStopping callback, the val_acc value would be:
 * //   0.5, 0.5, 0.5, 0.5, ...
 * // With val_acc being monitored, training should stop after the 2nd epoch.
 * const history = await model.fit(xs, ys, {
 *   epochs: 10,
 *   validationData: [xsVal, ysVal],
 *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})
 * });
 *
 * // Expect to see a length-2 array.
 * console.log(history.history.val_acc);
 * ```
 *
 * @doc {
 *   heading: 'Callbacks',
 *   namespace: 'callbacks'
 * }
 */
function earlyStopping(args) {
  return new EarlyStopping(args);
}
const callbacks = {
  earlyStopping
};

/***/ }),

/***/ 9878:
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/common.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkDataFormat": () => (/* binding */ checkDataFormat),
/* harmony export */   "checkInterpolationFormat": () => (/* binding */ checkInterpolationFormat),
/* harmony export */   "checkPaddingMode": () => (/* binding */ checkPaddingMode),
/* harmony export */   "checkPoolMode": () => (/* binding */ checkPoolMode),
/* harmony export */   "getScopedTensorName": () => (/* binding */ getScopedTensorName),
/* harmony export */   "getUniqueTensorName": () => (/* binding */ getUniqueTensorName),
/* harmony export */   "isValidTensorName": () => (/* binding */ isValidTensorName),
/* harmony export */   "nameScope": () => (/* binding */ nameScope)
/* harmony export */ });
/* harmony import */ var _keras_format_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keras_format/common */ 8125);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Common functions for TensorFlow.js Layers.
 */


// A map from the requested scoped name of a Tensor to the number of Tensors
// wanting that name so far.  This allows enforcing name uniqueness by appending
// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.
const nameMap = new Map();
function checkDataFormat(value) {
  (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_1__.checkStringTypeUnionValue)(_keras_format_common__WEBPACK_IMPORTED_MODULE_0__.VALID_DATA_FORMAT_VALUES, 'DataFormat', value);
}
function checkInterpolationFormat(value) {
  (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_1__.checkStringTypeUnionValue)(_keras_format_common__WEBPACK_IMPORTED_MODULE_0__.VALID_INTERPOLATION_FORMAT_VALUES, 'InterpolationFormat', value);
}
function checkPaddingMode(value) {
  (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_1__.checkStringTypeUnionValue)(_keras_format_common__WEBPACK_IMPORTED_MODULE_0__.VALID_PADDING_MODE_VALUES, 'PaddingMode', value);
}
function checkPoolMode(value) {
  (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_1__.checkStringTypeUnionValue)(_keras_format_common__WEBPACK_IMPORTED_MODULE_0__.VALID_POOL_MODE_VALUES, 'PoolMode', value);
}
const _nameScopeStack = [];
const _nameScopeDivider = '/';
/**
 * Enter namescope, which can be nested.
 */
function nameScope(name, fn) {
  _nameScopeStack.push(name);
  try {
    const val = fn();
    _nameScopeStack.pop();
    return val;
  } catch (e) {
    _nameScopeStack.pop();
    throw e;
  }
}
/**
 * Get the current namescope as a flat, concatenated string.
 */
function currentNameScopePrefix() {
  if (_nameScopeStack.length === 0) {
    return '';
  } else {
    return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
  }
}
/**
 * Get the name a Tensor (or Variable) would have if not uniqueified.
 * @param tensorName
 * @return Scoped name string.
 */
function getScopedTensorName(tensorName) {
  if (!isValidTensorName(tensorName)) {
    throw new Error('Not a valid tensor name: \'' + tensorName + '\'');
  }
  return currentNameScopePrefix() + tensorName;
}
/**
 * Get unique names for Tensors and Variables.
 * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by
 *  `getScopedTensorName()`.
 * @return A unique version of the given fully scoped name.
 *   If this is the first time that the scoped name is seen in this session,
 *   then the given `scopedName` is returned unaltered.  If the same name is
 *   seen again (producing a collision), an incrementing suffix is added to the
 *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.
 */
function getUniqueTensorName(scopedName) {
  if (!isValidTensorName(scopedName)) {
    throw new Error('Not a valid tensor name: \'' + scopedName + '\'');
  }
  if (!nameMap.has(scopedName)) {
    nameMap.set(scopedName, 0);
  }
  const index = nameMap.get(scopedName);
  nameMap.set(scopedName, nameMap.get(scopedName) + 1);
  if (index > 0) {
    const result = `${scopedName}_${index}`;
    // Mark the composed name as used in case someone wants
    // to call getUniqueTensorName("name_1").
    nameMap.set(result, 1);
    return result;
  } else {
    return scopedName;
  }
}
const tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
/**
 * Determine whether a string is a valid tensor name.
 * @param name
 * @returns A Boolean indicating whether `name` is a valid tensor name.
 */
function isValidTensorName(name) {
  return !!name.match(tensorNameRegex);
}

/***/ }),

/***/ 57529:
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/constraints.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP": () => (/* binding */ CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP),
/* harmony export */   "Constraint": () => (/* binding */ Constraint),
/* harmony export */   "MaxNorm": () => (/* binding */ MaxNorm),
/* harmony export */   "MinMaxNorm": () => (/* binding */ MinMaxNorm),
/* harmony export */   "NonNeg": () => (/* binding */ NonNeg),
/* harmony export */   "UnitNorm": () => (/* binding */ UnitNorm),
/* harmony export */   "deserializeConstraint": () => (/* binding */ deserializeConstraint),
/* harmony export */   "getConstraint": () => (/* binding */ getConstraint),
/* harmony export */   "serializeConstraint": () => (/* binding */ serializeConstraint)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/common */ 44906);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original source: keras/contraints.py */




/**
 * Helper function used by many of the Constraints to find the L2Norms.
 */
function calcL2Norms(w, axis) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sqrt(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(w, w), axis, true)));
}
/**
 * Base class for functions that impose constraints on weight values
 *
 * @doc {
 *   heading: 'Constraints',
 *   subheading: 'Classes',
 *   namespace: 'constraints'
 * }
 */
class Constraint extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.Serializable {
  getConfig() {
    return {};
  }
}
class MaxNorm extends Constraint {
  constructor(args) {
    super();
    this.defaultMaxValue = 2;
    this.defaultAxis = 0;
    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;
    this.axis = args.axis != null ? args.axis : this.defaultAxis;
  }
  apply(w) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const norms = calcL2Norms(w, this.axis);
      const desired = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(norms, 0, this.maxValue);
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(w, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(desired, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add((0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), norms)));
    });
  }
  getConfig() {
    return {
      maxValue: this.maxValue,
      axis: this.axis
    };
  }
}
/** @nocollapse */
MaxNorm.className = 'MaxNorm';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(MaxNorm);
class UnitNorm extends Constraint {
  constructor(args) {
    super();
    this.defaultAxis = 0;
    this.axis = args.axis != null ? args.axis : this.defaultAxis;
  }
  apply(w) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(w, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add((0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), calcL2Norms(w, this.axis))));
  }
  getConfig() {
    return {
      axis: this.axis
    };
  }
}
/** @nocollapse */
UnitNorm.className = 'UnitNorm';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(UnitNorm);
class NonNeg extends Constraint {
  apply(w) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu(w);
  }
}
/** @nocollapse */
NonNeg.className = 'NonNeg';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(NonNeg);
class MinMaxNorm extends Constraint {
  constructor(args) {
    super();
    this.defaultMinValue = 0.0;
    this.defaultMaxValue = 1.0;
    this.defaultRate = 1.0;
    this.defaultAxis = 0;
    this.minValue = args.minValue != null ? args.minValue : this.defaultMinValue;
    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;
    this.rate = args.rate != null ? args.rate : this.defaultRate;
    this.axis = args.axis != null ? args.axis : this.defaultAxis;
  }
  apply(w) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const norms = calcL2Norms(w, this.axis);
      const desired = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(this.rate, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(norms, this.minValue, this.maxValue)), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(1.0 - this.rate, norms));
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(w, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(desired, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add((0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), norms)));
    });
  }
  getConfig() {
    return {
      minValue: this.minValue,
      maxValue: this.maxValue,
      rate: this.rate,
      axis: this.axis
    };
  }
}
/** @nocollapse */
MinMaxNorm.className = 'MinMaxNorm';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(MinMaxNorm);
// Maps the JavaScript-like identifier keys to the corresponding registry
// symbols.
const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
  'maxNorm': 'MaxNorm',
  'minMaxNorm': 'MinMaxNorm',
  'nonNeg': 'NonNeg',
  'unitNorm': 'UnitNorm'
};
function serializeConstraint(constraint) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__.serializeKerasObject)(constraint);
}
function deserializeConstraint(config, customObjects = {}) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__.deserializeKerasObject)(config, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');
}
function getConstraint(identifier) {
  if (identifier == null) {
    return null;
  }
  if (typeof identifier === 'string') {
    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
    const config = {
      className,
      config: {}
    };
    return deserializeConstraint(config);
  } else if (identifier instanceof Constraint) {
    return identifier;
  } else {
    return deserializeConstraint(identifier);
  }
}

/***/ }),

/***/ 41488:
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/base_random_layer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseRandomLayer": () => (/* binding */ BaseRandomLayer)
/* harmony export */ });
/* harmony import */ var _topology__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./topology */ 59996);
/* harmony import */ var _backend_random_seed__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/random_seed */ 37947);
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */


class BaseRandomLayer extends _topology__WEBPACK_IMPORTED_MODULE_0__.Layer {
  constructor(args) {
    super(args);
    this.randomGenerator = new _backend_random_seed__WEBPACK_IMPORTED_MODULE_1__.RandomSeed(args.seed);
  }
  getConfig() {
    const config = {
      'seed': this.randomGenerator.seed
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
// A layer handle the random number creation and savemodel behavior.
/** @nocollapse */
BaseRandomLayer.className = 'BaseRandomLayer';

/***/ }),

/***/ 75227:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/container.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Container": () => (/* binding */ Container)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/state */ 6337);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _layers_serialization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../layers/serialization */ 49796);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_serialization_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/serialization_utils */ 83903);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../variables */ 22414);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../version */ 21378);
/* harmony import */ var _executor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./executor */ 10598);
/* harmony import */ var _input_layer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./input_layer */ 45367);
/* harmony import */ var _topology__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./topology */ 59996);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original source: keras/engine/topology.py */












/**
 * A Container is a directed acyclic graph of layers.
 *
 * It is the topological form of a "model". A LayersModel
 * is simply a Container with added training routines.
 *
 */
class Container extends _topology__WEBPACK_IMPORTED_MODULE_11__.Layer {
  constructor(args) {
    // No args passed to super's constructor.
    super({});
    this.containerNodes = new Set();
    this.name = args.name;
    if (this.name == null) {
      const prefix = this.getClassName().toLowerCase();
      this.name = (0,_backend_state__WEBPACK_IMPORTED_MODULE_1__.getUid)(prefix);
    }
    this.supportsMasking = false;
    this.trainable_ = true;
    // TODO(michaelterry): Initialize perInputLosses/Updates here.
    // Container-specific properties.
    if (Array.isArray(args.inputs)) {
      this.inputs = args.inputs.slice();
    } else {
      this.inputs = [args.inputs];
    }
    if (Array.isArray(args.outputs)) {
      this.outputs = args.outputs.slice();
    } else {
      this.outputs = [args.outputs];
    }
    // Check for redundancy in inputs.
    if (_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.unique(this.inputs).length !== this.inputs.length) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('The list of inputs passed to the model is ' + 'redundant. All inputs should only appear once. Found: ' + `${this.inputs.map(x => x.name)}`);
    }
    // Check for redundancy in outputs.
    if (_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.unique(this.outputs).length !== this.outputs.length) {
      console.warn('The list of outputs passed to the model is redundant. ' + 'All outputs should only appear once. Found: ' + `${this.outputs.map(x => x.name)}`);
    }
    /*
      List of initial layers (1 to 1 mapping with this.inputs, hence the same
      layer might appear twice)
    */
    this.inputLayers = [];
    this.inputLayersNodeIndices = [];
    this.inputLayersTensorIndices = [];
    /*
      List of layers (1 to 1 mapping with this.outputs, hence the same layer
      might appear twice)
    */
    this.outputLayers = [];
    this.outputLayersNodeIndices = [];
    this.outputLayersTensorIndices = [];
    /*
      All layers in order of horizontal graph traversal. Entries are unique.
      Includes input and output layers.
    */
    this.layers = [];
    /*
      References to container layers that were constructed internally. We need
      these to properly dispose of tensors from nested containers.
    */
    this.internalContainerRefs = [];
    // TODO(michaelterry): Determine if caching still needed with eager
    // backend.
    /*
      This is for performance optimization when calling the Container on new
      inputs. Every time the Container is called on a set on input tensors,
      we compute the output tensors, output masks and output shapes in one pass,
      then cache them here. When one of these outputs is queried later,
      we retrieve it from there instead of recomputing it.
    */
    // this.outputTensorCache = {};
    // this.outputShapeCache = {};
    // Build this.outputLayers:
    for (const x of this.outputs) {
      const layer = x.sourceLayer;
      const nodeIndex = x.nodeIndex;
      const tensorIndex = x.tensorIndex;
      this.outputLayers.push(layer);
      this.outputLayersNodeIndices.push(nodeIndex);
      this.outputLayersTensorIndices.push(tensorIndex);
    }
    // TODO(michaelterry): Add output mask cache code.
    // Build this.inputLayers:
    for (const x of this.inputs) {
      const layer = x.sourceLayer;
      const nodeIndex = x.nodeIndex;
      const tensorIndex = x.tensorIndex;
      /*
        It's supposed to be an input layer, so only one node
        and one tensor output.
      */
      _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.assert(nodeIndex === 0, 'input layer has >1 nodes');
      _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.assert(tensorIndex === 0, 'input layer has >1 tensors');
      this.inputLayers.push(layer);
      this.inputLayersNodeIndices.push(nodeIndex);
      this.inputLayersTensorIndices.push(tensorIndex);
    }
    // Build this.inputNames and this.outputNames.
    this.inputNames = [];
    this.outputNames = [];
    this.feedInputShapes = [];
    this.feedInputNames = [];
    this.feedOutputNames = [];
    for (let i = 0; i < this.inputLayers.length; i++) {
      const layer = this.inputLayers[i];
      // Check that layer is an InputLayer.
      if (!(layer instanceof _input_layer__WEBPACK_IMPORTED_MODULE_10__.InputLayer)) {
        throw new TypeError('Input layers to a LayersModel must be InputLayer objects. ' + `Received inputs: ${args.inputs}. ` + `Input ${i} (0-based) originates ` + `from layer type ${layer.getClassName()}.`);
      }
      this.inputNames.push(layer.name);
      this.feedInputShapes.push(layer.batchInputShape);
      this.feedInputNames.push(layer.name);
    }
    for (const layer of this.outputLayers) {
      this.outputNames.push(layer.name);
    }
    this.internalInputShapes = this.inputs.map(x => x.shape);
    this.internalOutputShapes = this.outputs.map(x => x.shape);
    /*
      Container_nodes: set of nodes included in the graph (not all nodes
      included in the layers are relevant to the current graph).
    */
    // ids of all nodes relevant to the Container:
    const nodesDepths = {};
    // To recover nodes from their ID.
    const nodeIDToNode = {};
    const layersDepths = {};
    // To layers from their ID.
    const layerIDToLayer = {};
    const layerIndices = {};
    const nodesInDecreasingDepth = [];
    /**
     * Builds a map of the graph of layers.
     *
     * This recursively updates the map `layerIndices`,
     * the list `nodesInDecreasingDepth` and the set `containerNodes`.
     *
     * @param tensor Some tensor in a graph.
     * @param finishedNodes Set of nodes whose subgraphs have been traversed
     *         completely. Useful to prevent duplicated work.
     * @param nodesInProgress Set of nodes that are currently active on the
     *         recursion stack. Useful to detect cycles.
     * @param layer Layer from which `tensor` comes from. If not provided,
     *   will be obtained from tensor.sourceLayer.
     * @param nodeIndex Node index from which `tensor` comes from.
     * @param tensorIndex TensorIndex from which `tensor` comes from.
     *
     * @exception RuntimeError if a cycle is detected.
     */
    const buildMapOfGraph = (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) => {
      if (layer == null || nodeIndex == null || tensorIndex == null) {
        layer = tensor.sourceLayer;
        nodeIndex = tensor.nodeIndex;
        tensorIndex = tensor.tensorIndex;
      }
      const node = layer.inboundNodes[nodeIndex];
      // Prevent cycles.
      if (nodesInProgress.indexOf(node) !== -1) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.RuntimeError(`The tensor ${tensor.name} at layer "${layer.name}" ` + 'is part of a cycle.');
      }
      // Don't repeat work for shared subgraphs
      if (finishedNodes.indexOf(node) !== -1) {
        return;
      }
      // Update containerNodes.
      this.containerNodes.add(Container.nodeKey(layer, nodeIndex));
      // Store the traversal order for layer sorting.
      if (!(layer.id in layerIndices)) {
        layerIndices[layer.id] = Object.keys(layerIndices).length;
      }
      if (nodesInProgress.indexOf(node) === -1) {
        nodesInProgress.push(node);
      }
      // Propagate to all previous tensors connected to this node.
      const numInboundLayers = node.inboundLayers.length;
      for (let i = 0; i < numInboundLayers; i++) {
        const x = node.inputTensors[i];
        const layer = node.inboundLayers[i];
        const nodeIndex = node.nodeIndices[i];
        const tensorIndex = node.tensorIndices[i];
        buildMapOfGraph(x, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex);
      }
      finishedNodes.push(node);
      while (nodesInProgress.indexOf(node) >= 0) {
        nodesInProgress.splice(nodesInProgress.indexOf(node), 1);
      }
      nodesInDecreasingDepth.push(node);
    };
    const finishedNodes = [];
    const nodesInProgress = [];
    for (const x of this.outputs) {
      buildMapOfGraph(x, finishedNodes, nodesInProgress);
    }
    const reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();
    for (const node of reversedNodesInDecreasingDepth) {
      nodeIDToNode[node.id] = node;
      // If the depth is not set, the node has no outbound nodes (depth 0).
      if (!(node.id in nodesDepths)) {
        nodesDepths[node.id] = 0;
      }
      let depth = nodesDepths[node.id];
      // Update the depth of the corresponding layer
      const previousDepth = layersDepths[node.outboundLayer.id] == null ? 0 : layersDepths[node.outboundLayer.id];
      /*
        If we've seen this layer before at a higher depth, we should use that
        depth instead of the node depth.  This is necessary for shared layers
        that have inputs at different depth levels in the graph.
      */
      depth = Math.max(depth, previousDepth);
      layersDepths[node.outboundLayer.id] = depth;
      layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;
      nodesDepths[node.id] = depth;
      // Update the depth of inbound nodes.
      for (let i = 0; i < node.inboundLayers.length; i++) {
        const inboundLayer = node.inboundLayers[i];
        const nodeIndex = node.nodeIndices[i];
        const inboundNode = inboundLayer.inboundNodes[nodeIndex];
        const previousDepth = nodesDepths[inboundNode.id] == null ? 0 : nodesDepths[inboundNode.id];
        nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth);
        nodeIDToNode[inboundNode.id] = inboundNode;
      }
    }
    // Build a dict {depth: list of nodes with this depth}
    const nodesByDepth = {};
    for (const nodeID in nodesDepths) {
      const depth = nodesDepths[nodeID];
      if (!(depth in nodesByDepth)) {
        nodesByDepth[depth] = [];
      }
      nodesByDepth[depth].push(nodeIDToNode[nodeID]);
    }
    // Build a dict {depth: list of layers with this depth}
    const layersByDepth = {};
    for (const layerID in layersDepths) {
      const depth = layersDepths[layerID];
      if (!(depth in layersByDepth)) {
        layersByDepth[depth] = [];
      }
      layersByDepth[depth].push(layerIDToLayer[layerID]);
    }
    // Get sorted list of layer depths.
    let depthKeys = Object.keys(layersByDepth).map(x => parseInt(x, 10)).sort(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.reverseNumberCompare);
    // Set this.layers and this.layersByDepth.
    this.layers = [];
    for (const depth of depthKeys) {
      const layersForDepth = layersByDepth[depth];
      // Container.layers needs to have a deterministic order:
      // here we order them by traversal order.
      layersForDepth.sort((a, b) => {
        const aIndex = layerIndices[a.id];
        const bIndex = layerIndices[b.id];
        if (aIndex < bIndex) {
          return -1;
        }
        if (aIndex > bIndex) {
          return 1;
        }
        return 0;
      });
      for (const layer of layersForDepth) {
        if (layer instanceof Container) {
          this.internalContainerRefs.push(layer);
        }
        this.layers.push(layer);
      }
    }
    this.layersByDepth = layersByDepth;
    // Get sorted list of node depths;
    depthKeys = Object.keys(nodesByDepth).map(x => parseInt(x, 10)).sort(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.reverseNumberCompare);
    // Check that all tensors required are computable.
    // computable_tensors: all tensors in the graph
    // that can be computed from the inputs provided.
    const computableTensors = this.inputs.slice();
    // To provide a better error msg.
    const layersWithCompleteInput = [];
    for (const depth of depthKeys) {
      for (const node of nodesByDepth[depth]) {
        const layer = node.outboundLayer;
        if (layer != null) {
          for (const x of node.inputTensors) {
            if (computableTensors.indexOf(x) === -1) {
              throw new _errors__WEBPACK_IMPORTED_MODULE_2__.RuntimeError(`Graph disconnected: cannot obtain value for tensor ${x}` + ` at layer "${layer.name}". ` + 'The following previous layers were accessed without ' + `issue: ${layersWithCompleteInput}`);
            }
          }
          for (const x of node.outputTensors) {
            computableTensors.push(x);
          }
          layersWithCompleteInput.push(layer.name);
        }
      }
    }
    // Set this.containerNodes and this.nodesByDepth.
    this.nodesByDepth = nodesByDepth;
    // Ensure name unicity, which will be crucial for serialization
    // (since serialized nodes refer to layers by their name).
    const allNames = this.layers.map(x => x.name);
    for (const name of allNames) {
      const numOccurrences = allNames.filter(x => x === name).length;
      if (numOccurrences !== 1) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.RuntimeError(`The name "${name}" is used ${numOccurrences} times ` + 'in the model. All layer names should be unique. Layer names: ' + JSON.stringify(allNames));
      }
    }
    // Layer parameters.
    // The new container starts with a single inbound node
    // for its inputs, and no outbound nodes.
    // Will be appended to by future calls to apply().
    this.outboundNodes = [];
    // Will be appended to below, and by future calls to apply().
    this.inboundNodes = [];
    // Create the node linking internal inputs to internal outputs.
    // (This call has side effects.)
    // tslint:disable-next-line:no-unused-expression
    new _topology__WEBPACK_IMPORTED_MODULE_11__.Node({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: this.inputs,
      outputTensors: this.outputs,
      inputMasks: this.inputs.map(x => null),
      outputMasks: this.outputs.map(x => null),
      inputShapes: this.inputs.map(x => x.shape),
      outputShapes: this.outputs.map(x => x.shape)
    });
    this.built = true;
    this._refCount = 1; // The ref count of a container always start at 1.
  }

  assertNotDisposed() {
    if (this._refCount === 0) {
      throw new Error(`Container '${this.name}' is already disposed.`);
    }
  }
  /**
   * Attempt to dispose a LayersModel's weights.
   *
   * This method decrease the reference count of the LayersModel object by 1.
   *
   * A LayersModel is reference-counted. Its reference count is incremented by 1
   * when it is first constructed and when it is used as a Layer of another
   * LayersModel.
   *
   * If the reference count of a LayersModel becomes 0, the `dispose` method of
   * all its constituent `Layer`s will be called.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * `dispose` method of its constituent `Layer`s will *not* be called.
   *
   * After a LayersModel is disposed, it cannot be used in calls such as
   * 'predict`, `evaluate` or `fit` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the LayersModel after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the LayersModel has
   *   already been disposed.
   */
  dispose() {
    this.assertNotDisposed();
    const result = {
      refCountAfterDispose: null,
      numDisposedVariables: 0
    };
    if (--this._refCount === 0) {
      for (const layer of this.layers) {
        result.numDisposedVariables += layer.dispose().numDisposedVariables;
      }
      // Call dispose on each internally created container layer again to ensure
      // their refCounts hit zero and their tensors are subsequently deleted.
      for (const container of this.internalContainerRefs) {
        result.numDisposedVariables += container.dispose().numDisposedVariables;
      }
    }
    result.refCountAfterDispose = this._refCount;
    return result;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(trainable) {
    this.layers.forEach(layer => {
      // tslint:disable-next-line:no-any
      layer._trainableWeights.forEach(w => w.trainable = trainable);
    });
    this.trainable_ = trainable;
  }
  get trainableWeights() {
    // Porting Note: This check below is to prevent errors where the
    //   _trainableWeights inherited from the parent class (Layer) gets
    //   inadvertently used.
    if (this._trainableWeights.length > 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Container instance unexpectedly contains _trainableWeights.' + 'The trainable weights of a Container are a union of the ' + 'trainable weights of its consituent Layers. Its own ' + '_trainableWeights must remain an empty Array.');
    }
    if (!this.trainable) {
      return [];
    }
    let weights = [];
    for (const layer of this.layers) {
      weights = weights.concat(layer.trainableWeights);
    }
    return weights;
  }
  get nonTrainableWeights() {
    const weights = [];
    for (const layer of this.layers) {
      weights.push(...layer.nonTrainableWeights);
    }
    if (!this.trainable) {
      const trainableWeights = [];
      for (const layer of this.layers) {
        trainableWeights.push(...layer.trainableWeights);
      }
      return trainableWeights.concat(weights);
    }
    return weights;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  /**
   * Loads all layer weights from a JSON object.
   *
   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
   *   TypeScript. The utility script at `scripts/pykeras.py` offers means
   *   to convert them into JSON strings compatible with this method.
   * Porting Note: TensorFlow.js Layers supports only loading by name currently.
   *
   * @param weights A JSON mapping weight names to weight values as nested
   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
   *   names to `tf.Tensor` objects.
   * @param strict Require that the provided weights exactly match those
   *   required by the container.  Default: `true`.  Passing `false` means that
   *   extra weights and missing weights will be silently ignored.
   */
  loadWeights(weights, strict = true) {
    const nameToWeight = {};
    let totalWeightsCount = 0;
    for (const layer of this.layers) {
      for (const weight of layer.weights) {
        if (nameToWeight[weight.originalName] != null) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Duplicate weight name: ${weight.originalName}`);
        }
        nameToWeight[weight.originalName] = weight;
        totalWeightsCount++;
      }
    }
    const weightValueTuples = [];
    for (const name in weights) {
      // TF 2.2.0 added cell name to the weight name in the format of
      // layer_name/cell_name/weight_name, we need to remove
      // the inner cell name.
      let validatedName = name;
      if (nameToWeight[name] == null) {
        const tokens = name.split('/');
        const shortenNameArray = tokens.slice(0, -2).concat([tokens[tokens.length - 1]]);
        validatedName = shortenNameArray.join('/');
      }
      if (nameToWeight[validatedName] != null) {
        weightValueTuples.push([nameToWeight[validatedName], weights[name]]);
      } else if (strict) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Provided weight data has no target variable: ${name}`);
      }
      delete nameToWeight[validatedName];
    }
    if (strict) {
      // Check that all weights are set.
      const unsetNames = [];
      for (const name in nameToWeight) {
        unsetNames.push(name);
      }
      if (unsetNames.length > 0) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`${unsetNames.length} of ${totalWeightsCount} weights are not set: ` + `${unsetNames}`);
      }
    }
    (0,_variables__WEBPACK_IMPORTED_MODULE_7__.batchSetValue)(weightValueTuples);
  }
  /**
   * Util shared between different serialization methods.
   * @returns LayersModel config with Keras version information added.
   */
  updatedConfig() {
    const theConfig = this.getConfig();
    const modelConfig = {};
    modelConfig['className'] = this.getClassName();
    modelConfig['config'] = theConfig;
    modelConfig['kerasVersion'] = `tfjs-layers ${_version__WEBPACK_IMPORTED_MODULE_8__.version}`;
    // TODO(nielsene): Replace something like K.backend() once
    // possible.
    modelConfig['backend'] = 'TensorFlow.js';
    return modelConfig;
  }
  /**
   * Returns a JSON string containing the network configuration.
   *
   * To load a network from a JSON save file, use
   * models.modelFromJSON(jsonString);
   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
   * @param returnString Whether the return value should be stringified
   *    (default: `true`).
   * @returns a JSON string if `returnString` (default), or a JSON object if
   *   `!returnString`.
   */
  // tslint:disable-next-line:no-any
  toJSON(unused, returnString = true) {
    const modelConfig = (0,_utils_serialization_utils__WEBPACK_IMPORTED_MODULE_5__.convertTsToPythonic)(this.updatedConfig());
    return returnString ? JSON.stringify(modelConfig) : modelConfig;
  }
  /**
   * Call the model on new inputs.
   *
   * In this case `call` just reapplies all ops in the graph to the new inputs
   * (e.g. build a new computational graph from the provided inputs).
   *
   * @param inputs A tensor or list of tensors.
   * @param mask A mask or list of masks. A mask can be either a tensor or null
   *   (no mask).
   *
   * @return A tensor if there is a single output, or a list of tensors if there
   *   are more than one outputs.
   */
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(inputs);
      const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_9__.FeedDict();
      for (let i = 0; i < this.inputs.length; ++i) {
        feedDict.add(this.inputs[i], inputs[i]);
      }
      return (0,_executor__WEBPACK_IMPORTED_MODULE_9__.execute)(this.outputs, feedDict, kwargs);
    });
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(inputs, mask) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(inputs);
      let masks;
      if (mask == null) {
        masks = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.pyListRepeat(null, inputs.length);
      } else {
        masks = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(mask);
      }
      // TODO(michaelterry): Add support for mask caching.
      return this.runInternalGraph(inputs, masks)[1];
    });
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   */
  computeOutputShape(inputShape) {
    const inputShapes = _utils_types_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeShapeList(inputShape);
    if (inputShapes.length !== this.inputLayers.length) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Invalid inputShape argument ${inputShape}: ` + `model has ${this.inputLayers.length} tensor inputs.`);
    }
    // TODO(michaelterry): Add caching
    const layersToOutputShapes = {};
    for (let i = 0; i < inputShapes.length; i++) {
      const layer = this.inputLayers[i];
      const inputShape = inputShapes[i];
      // It's an input layer: computeOutputShape is identity,
      // and there is only one node and one tensor output.
      const shapeKey = layer.name + '_0_0';
      layersToOutputShapes[shapeKey] = inputShape;
    }
    const depthKeys = Object.keys(this.nodesByDepth).map(x => parseInt(x, 10)).sort(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.reverseNumberCompare);
    // Iterate over nodes, by depth level.
    if (depthKeys.length > 1) {
      for (const depth of depthKeys) {
        const nodes = this.nodesByDepth[depth];
        for (const node of nodes) {
          // This is always a single layer, never a list.
          const layer = node.outboundLayer;
          if (this.inputLayers.map(x => x.id).indexOf(layer.id) !== -1) {
            // We've already covered the input layers a few lines above.
            continue;
          }
          // Potentially redundant list, same size of node.inputTensors.
          const inputShapes = [];
          for (let j = 0; j < node.inboundLayers.length; j++) {
            const inboundLayer = node.inboundLayers[j];
            const nodeIndex = node.nodeIndices[j];
            const tensorIndex = node.tensorIndices[j];
            const shapeKey = `${inboundLayer.name}_${nodeIndex}_${tensorIndex}`;
            const inputShape = layersToOutputShapes[shapeKey];
            inputShapes.push(inputShape);
          }
          const outputShape = layer.computeOutputShape(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.singletonOrArray(inputShapes));
          const outputShapes = _utils_types_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeShapeList(outputShape);
          const nodeIndex = layer.inboundNodes.indexOf(node);
          for (let j = 0; j < outputShapes.length; j++) {
            const shapeKey = `${layer.name}_${nodeIndex}_${j}`;
            layersToOutputShapes[shapeKey] = outputShapes[j];
          }
        }
      }
    }
    // Read final output shapes from layersToOutputShapes.
    const outputShapes = [];
    const outputShapeKeys = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const layer = this.outputLayers[i];
      const nodeIndex = this.outputLayersNodeIndices[i];
      const tensorIndex = this.outputLayersTensorIndices[i];
      const shapeKey = `${layer.name}_${nodeIndex}_${tensorIndex}`;
      outputShapeKeys.push(shapeKey);
    }
    for (let i = 0; i < outputShapeKeys.length; i++) {
      const key = outputShapeKeys[i];
      _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.assert(key in layersToOutputShapes);
      outputShapes.push(layersToOutputShapes[key]);
    }
    // TODO(michaelterry): Update cache
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.singletonOrArray(outputShapes);
  }
  /**
   * Computes output tensors for new inputs.
   *
   * Note:
   *   - Expects `inputs` to be a list (potentially with 1 element).
   *
   * @param inputs List of tensors
   * @param masks List of masks (tensors or null).
   * @return Three lists: outputTensors, outputMasks, outputShapes
   */
  runInternalGraph(inputs, masks) {
    if (masks == null) {
      masks = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.pyListRepeat(null, inputs.length);
    }
    // Dictionary mapping reference tensors to tuples
    // (computed tensor, compute mask)
    // we assume a 1:1 mapping from tensor to mask
    // TODO: raise exception when a `.computeMask()` call
    // does not return a list the same size as `call`
    const tensorMap = {};
    for (let i = 0; i < this.inputs.length; ++i) {
      const x = this.inputs[i];
      const y = inputs[i];
      const mask = masks[i];
      tensorMap[x.id] = [y, mask];
    }
    const depthKeys = Object.keys(this.nodesByDepth).map(x => parseInt(x, 10)).sort(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.reverseNumberCompare);
    for (const depth of depthKeys) {
      const nodes = this.nodesByDepth[depth];
      for (const node of nodes) {
        // This is always a single layer, never a list.
        const layer = node.outboundLayer;
        const referenceInputTensors = node.inputTensors;
        const referenceOutputTensors = node.outputTensors;
        // If all previous input tensors are available in tensorMap,
        // then call node.inboundLayer on them.
        // List of tuples [input, mask]:
        const computedData = new Array();
        for (const x of referenceInputTensors) {
          if (x.id in tensorMap) {
            computedData.push(tensorMap[x.id]);
          }
        }
        if (computedData.length === referenceInputTensors.length) {
          // TODO(michaelterry): Add K.name_scope here, if we need it.
          let kwargs = {};
          let computedTensors;
          let computedMasks;
          let outputTensors;
          let outputMasks;
          // call layer
          if (node.callArgs != null) {
            kwargs = node.callArgs;
          }
          if (computedData.length === 1) {
            const [computedTensor, computedMask] = computedData[0];
            if (kwargs['mask'] == null) {
              kwargs['mask'] = computedMask;
            }
            outputTensors = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(layer.call(computedTensor, kwargs));
            outputMasks = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(layer.computeMask(computedTensor, computedMask));
            computedTensors = [computedTensor];
            computedMasks = [computedMask];
          } else {
            computedTensors = computedData.map(x => x[0]);
            computedMasks = computedData.map(x => x[1]);
            if (kwargs['mask'] == null) {
              kwargs['mask'] = computedMasks;
            }
            outputTensors = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(layer.call(computedTensors, kwargs));
            outputMasks = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.toList(layer.computeMask(computedTensors, computedMasks));
          }
          if (layer.activityRegularizer) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.NotImplementedError('LayersModel invocation with concrete Tensor value(s) in the ' + 'presence of activity regularizer(s) is not supported yet.');
          }
          // TODO(michaelterry): Add model updates and losses
          // Update tensor map.
          for (let i = 0; i < referenceOutputTensors.length; ++i) {
            const x = referenceOutputTensors[i];
            const y = outputTensors[i];
            const mask = outputMasks[i];
            tensorMap[x.id] = [y, mask];
          }
        }
      }
    }
    const outputTensors = [];
    const outputMasks = [];
    const outputShapes = [];
    for (const x of this.outputs) {
      _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.assert(x.id in tensorMap, `Could not compute output ${x.name} : ${x.id}`);
      const [tensor, mask] = tensorMap[x.id];
      outputShapes.push(tensor.shape);
      outputTensors.push(tensor);
      outputMasks.push(mask);
    }
    // TODO(michaelterry): Add support for caches.
    return [outputTensors, outputMasks, outputShapes];
  }
  /**
   * Builds a map of internal node keys to node ordering.
   * Used in serializaion a node orderings may change as unused nodes are
   * dropped. Porting Note:  This helper method was pulled out of getConfig to
   * improve readability.
   * @param layers An array of Layers in the model.
   * @returns Map of Node Keys to index order within the layer.
   */
  buildNodeConversionMap(layers) {
    const nodeConversionMap = {};
    let keptNodes;
    for (const layer of this.layers) {
      keptNodes = layer instanceof Container ? 1 : 0;
      for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {
        const nodeKey = Container.nodeKey(layer, originalNodeIndex);
        if (this.containerNodes.has(nodeKey)) {
          // i.e. we mark it to be saved
          nodeConversionMap[nodeKey] = keptNodes;
          keptNodes += 1;
        }
      }
    }
    return nodeConversionMap;
  }
  /**
   * Retrieves a layer based on either its name (unique) or index.
   *
   * Indices are based on order of horizontal graph traversal (bottom-up).
   *
   * If both `name` and `index` are specified, `index` takes precedence.
   *
   * @param name Name of layer.
   * @param index Index of layer.
   * @returns A Layer instance.
   * @throws ValueError: In case of invalid layer name or index.
   *
   * @doc {
   *    heading: 'Layers',
   *    subheading: 'Classes',
   *    namespace: 'layers',
   *    subclasses: ['LayersModel']
   * }
   */
  getLayer(name, index) {
    if (index != null) {
      if (this.layers.length <= index) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Was asked to retrieve layer at index ${index}, but model only ` + `has ${this.layers.length} layer(s).`);
      } else {
        return this.layers[index];
      }
    } else {
      if (name == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Provide either a layer name or layer index');
      }
    }
    for (const layer of this.layers) {
      if (layer.name === name) {
        return layer;
      }
    }
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`No such layer: ${name}`);
  }
  /**
   * Retrieves the Container's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    // Porting Node: This is an augmentation to Container.loss in PyKeras.
    //   In PyKeras, Container.loss returns symbolic tensors. Here a concrete
    //   Tensor (specifically Scalar) values are returned. This is due to the
    //   imperative backend.
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const losses = [];
      for (const layer of this.layers) {
        for (let nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {
          const nodeKey = Container.nodeKey(layer, nodeIndex);
          if (this.containerNodes.has(nodeKey)) {
            losses.push(...layer.calculateLosses());
          }
        }
      }
      // TODO(cais): Add any unconditional model-level losses?
      return losses;
    });
  }
  getConfig() {
    const config = {
      name: this.name
    };
    // Build a map from layer unique name (self._node_key)
    // to the index of the nodes that are saved in the config.
    // Only nodes in container_nodes are saved.
    const nodeConversionMap = this.buildNodeConversionMap(this.layers);
    // Serialize and save the layers in layerConfigs
    const layerConfigs = [];
    for (const layer of this.layers) {
      const layerClassName = layer.getClassName();
      const layerConfig = layer.getConfig();
      const filteredInboundNodes = [];
      for (let originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {
        const node = layer.inboundNodes[originalNodeIndex];
        const nodeKey = Container.nodeKey(layer, originalNodeIndex);
        let kwargs = {};
        if (this.containerNodes.has(nodeKey)) {
          // The node is relevant to the model:
          // add to filteredInboundNodes.
          if (node.callArgs) {
            try {
              JSON.stringify(node.callArgs);
              kwargs = node.callArgs;
            } catch (err) {
              console.warn(`Layer ${layer.name} was passed ` + `non-serializable keyword arguments: ` + `${node.callArgs}. They will not be included ` + `in the serialized model (and thus will be ` + `missing at deserialization time).`);
              kwargs = {};
            }
          }
          if (node.inboundLayers.length > 0) {
            const nodeData = [];
            for (let i = 0; i < node.inboundLayers.length; i++) {
              const inboundLayer = node.inboundLayers[i];
              const nodeIndex = node.nodeIndices[i];
              const tensorIndex = node.tensorIndices[i];
              const nodeKey = Container.nodeKey(inboundLayer, nodeIndex);
              let newNodeIndex = nodeConversionMap[nodeKey];
              if (newNodeIndex == null) {
                newNodeIndex = 0;
              }
              nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);
            }
            filteredInboundNodes.push(nodeData);
          }
        }
      }
      const dict = {};
      dict['name'] = layer.name;
      dict['className'] = layerClassName;
      dict['config'] = layerConfig;
      dict['inboundNodes'] = filteredInboundNodes;
      layerConfigs.push(dict);
    }
    config['layers'] = layerConfigs;
    // Gather info about inputs and outputs
    const modelInputs = [];
    for (let i = 0; i < this.inputLayers.length; i++) {
      const layer = this.inputLayers[i];
      const nodeIndex = this.inputLayersNodeIndices[i];
      const nodeKey = Container.nodeKey(layer, nodeIndex);
      if (!this.containerNodes.has(nodeKey)) {
        continue;
      }
      let newNodeIndex = nodeConversionMap[nodeKey];
      if (newNodeIndex === null || newNodeIndex === undefined) {
        newNodeIndex = 0;
      }
      const tensorIndex = this.inputLayersTensorIndices[i];
      modelInputs.push([layer.name, newNodeIndex, tensorIndex]);
    }
    config['inputLayers'] = modelInputs;
    const modelOutputs = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const layer = this.outputLayers[i];
      const nodeIndex = this.outputLayersNodeIndices[i];
      const nodeKey = Container.nodeKey(layer, nodeIndex);
      if (!this.containerNodes.has(nodeKey)) {
        continue;
      }
      let newNodeIndex = nodeConversionMap[nodeKey];
      if (newNodeIndex === null || newNodeIndex === undefined) {
        newNodeIndex = 0;
      }
      const tensorIndex = this.outputLayersTensorIndices[i];
      modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);
    }
    config['outputLayers'] = modelOutputs;
    return config;
  }
  /**
   * Instantiates a LayersModel from its config (output of `get_config()`).
   * @param cls the class to create
   * @param config LayersModel config dictionary.
   * @param customObjects An optional dictionary of custom objects.
   * @param fastWeightInit Optional flag to use fast weight initialization
   *   during deserialization. This is applicable to cases in which
   *   the initialization will be immediately overwritten by loaded weight
   *   values. Default: `false`.
   * @returns A LayersModel instance.
   * @throws ValueError: In case of improperly formatted config dict.
   */
  /** @nocollapse */
  static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {
    // Layer instances created during
    // the graph reconstruction process
    const createdLayers = {};
    // Dictionary mapping layer instances to
    // node data that specifies a layer call.
    // It acts as a queue that maintains any unprocessed
    // layer call until it becomes possible to process it
    // (i.e. until the input tensors to the call all exist).
    const unprocessedNodes = {};
    function addUnprocessedNode(layer, nodeData) {
      if (!(layer.name in unprocessedNodes)) {
        unprocessedNodes[layer.name] = [nodeData];
      } else {
        unprocessedNodes[layer.name].push(nodeData);
      }
    }
    function processNode(layer, nodeData) {
      const inputTensors = [];
      let kwargs;
      for (const inputData of nodeData) {
        const inboundLayerName = inputData[0];
        const inboundNodeIndex = inputData[1];
        const inboundTensorIndex = inputData[2];
        kwargs = inputData[3] == null ? {} : inputData[3];
        if (!(inboundLayerName in createdLayers)) {
          addUnprocessedNode(layer, nodeData);
          return;
        }
        const inboundLayer = createdLayers[inboundLayerName];
        if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {
          addUnprocessedNode(layer, nodeData);
          return;
        }
        const inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];
        inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);
      }
      // Call layer on its inputs, thus creating the node
      // and building the layer if needed.
      // Note: This has Eager vs Graph Implications.
      if (inputTensors.length > 0) {
        layer.apply(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.singletonOrArray(inputTensors), kwargs); // was ** kwargs
      }
    }
    /**
     * Deserialize a layer, then call it on appropriate inputs.
     * @param layerData: layer config dict.
     * @throws ValueError: In case of improperly formatted `layer_data`
     * dict.
     */
    function processLayer(layerData) {
      const layerName = layerData['name'];
      // Instantiate layer.
      const layer = (0,_layers_serialization__WEBPACK_IMPORTED_MODULE_3__.deserialize)(layerData, config['customObjects'] != null ? config['customObjects'] : {});
      layer.setFastWeightInitDuringBuild(fastWeightInit);
      createdLayers[layerName] = layer;
      // Gather layer inputs.
      const inboundNodesData = layerData['inboundNodes'];
      inboundNodesData.forEach(nodeData => {
        if (!(nodeData instanceof Array)) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Corrupted configuration, expected array for nodeData: ${nodeData}`);
        }
        // We don't process nodes (i.e. make layer calls)
        // on the fly because the inbound node may not yet exist,
        // in case of layer shared at different topological depths
        // (e.g.a model such as A(B(A(B(x)))))
        addUnprocessedNode(layer, nodeData);
      });
    }
    // First, we create all layers and enqueue nodes to be processed.
    const name = config['name'];
    const layersFromConfig = config['layers'];
    for (const layerData of layersFromConfig) {
      processLayer(layerData);
    }
    // Then we process nodes in order of layer depth.
    // Nodes that cannot yet be processed(if the inbound node
    // does not yet exist) are re - enqueued, and the process
    // is repeated until all nodes are processed.
    while (!_utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.isObjectEmpty(unprocessedNodes)) {
      for (const layerData of layersFromConfig) {
        const layer = createdLayers[layerData['name']];
        if (layer.name in unprocessedNodes) {
          const currentUnprocessedNodesForLayer = unprocessedNodes[layer.name];
          delete unprocessedNodes[layer.name];
          for (const nodeData of currentUnprocessedNodesForLayer) {
            processNode(layer, nodeData);
          }
        }
      }
    }
    const inputTensors = [];
    const outputTensors = [];
    const inputLayersFromConfig = config['inputLayers'];
    for (const layerData of inputLayersFromConfig) {
      const layerName = layerData[0];
      const nodeIndex = layerData[1];
      const tensorIndex = layerData[2];
      _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.assert(layerName in createdLayers);
      const layer = createdLayers[layerName];
      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;
      inputTensors.push(layerOutputTensors[tensorIndex]);
    }
    const outputLayersFromConfig = config['outputLayers'];
    for (const layerData of outputLayersFromConfig) {
      const layerName = layerData[0];
      const nodeIndex = layerData[1];
      const tensorIndex = layerData[2];
      _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.assert(layerName in createdLayers);
      const layer = createdLayers[layerName];
      const layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;
      outputTensors.push(layerOutputTensors[tensorIndex]);
    }
    return new cls({
      inputs: inputTensors,
      outputs: outputTensors,
      name
    });
  }
  /**
   * Determine whether the container is stateful.
   *
   * Porting Note: this is the equivalent of the stateful @property of
   *   the Container class in PyKeras.
   */
  get stateful() {
    // Porting Note: This check is to prevent inadvertent setting of the
    //   _stateful property of the Container instance.
    if (this._stateful) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Container instance unexpectedly has _stateful = true. The ' + 'statefulness of a Container is determined by the Layers it ' + 'contains. Its _stateful property must remain the default false.');
    }
    for (const layer of this.layers) {
      if (layer.stateful) {
        return true;
      }
    }
    return false;
  }
  /**
   * Reset the state of all stateful constituent layers (if any).
   *
   * Examples of stateful layers include RNN layers whose `stateful` property
   * is set as `true`.
   */
  resetStates() {
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.layers.forEach(layer => {
        // tslint:disable:no-any
        if (layer.stateful) {
          layer.resetStates();
        }
        // tslint:enable:no-any
      });
    });
  }
}

/***/ }),

/***/ 10598:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FeedDict": () => (/* binding */ FeedDict),
/* harmony export */   "cachedRecipientCounts": () => (/* binding */ cachedRecipientCounts),
/* harmony export */   "cachedSorted": () => (/* binding */ cachedSorted),
/* harmony export */   "execute": () => (/* binding */ execute),
/* harmony export */   "getTopologicalSortAndRecipientCountsForOneFetch": () => (/* binding */ getTopologicalSortAndRecipientCountsForOneFetch),
/* harmony export */   "updateCacheMaxEntries": () => (/* binding */ updateCacheMaxEntries)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _utils_executor_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/executor_utils */ 18156);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _input_layer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./input_layer */ 45367);
/* harmony import */ var _topology__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./topology */ 59996);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Executor: Evaluates SymbolicTensor based on feeds.
 */






/**
 * Helper function to check the dtype and shape compatibility of a feed value.
 */
function assertFeedCompatibility(key, val) {
  // Check dtype compatibility.
  if (key.dtype == null || key.dtype === val.dtype) {
    //  a.  If types match, return val tensor as is.
    return val;
  }
  try {
    //  b. Attempt to convert to expected type.
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast)(val, key.dtype);
  } catch (err) {
    //  c. If conversion fails, return helpful error.
    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`The dtype of the feed (${val.dtype}) can not be cast to the dtype ` + `of the key '${key.name}' (${key.dtype}).`);
  }
}
/**
 * FeedDict: A mapping from unique SymbolicTensors to feed values for them.
 * A feed value is a concrete value represented as an `Tensor`.
 */
class FeedDict {
  /**
   * Constructor, optionally does copy-construction.
   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
   *   copy-construction will be performed.
   */
  constructor(feeds) {
    this.id2Value = {};
    this.id2Mask = {};
    this.name2Id = {};
    if (feeds instanceof FeedDict) {
      for (const id in feeds.id2Value) {
        this.id2Value[id] = feeds.id2Value[id];
        if (id in feeds.id2Mask) {
          this.id2Mask[id] = feeds.id2Mask[id];
        }
      }
    } else {
      if (feeds == null) {
        return;
      }
      for (const feed of feeds) {
        this.add(feed.key, feed.value);
      }
    }
  }
  /**
   * Add a key-value pair to the FeedDict.
   *
   * @param key The key of the feed.
   * @param value The value of the tensor feed.
   * @param mask The value of the mask feed (optional).
   * @returns This `FeedDict`.
   * @throws ValueError: If the key `SymbolicTensor` already exists in the
   *   `FeedDict`.
   */
  add(key, value, mask) {
    if (this.id2Value[key.id] == null) {
      this.id2Value[key.id] = assertFeedCompatibility(key, value);
      this.name2Id[key.name] = key.id;
      if (mask != null) {
        this.id2Mask[key.id] = mask;
      }
    } else {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);
    }
    return this;
  }
  /**
   * Add a Feed to the FeedDict.
   * @param feed The new `Feed` to add.
   * @returns This `FeedDict`.
   */
  addFeed(feed) {
    this.add(feed.key, feed.value);
  }
  /**
   * Probe whether a key already exists in the FeedDict.
   * @param key
   */
  hasKey(key) {
    return this.id2Value[key.id] != null;
  }
  /**
   * Get all the SymbolicTensor available in this FeedDict.
   */
  names() {
    return Object.keys(this.name2Id);
  }
  /**
   * Get the feed value for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed value.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getValue(key) {
    if (key instanceof _topology__WEBPACK_IMPORTED_MODULE_5__.SymbolicTensor) {
      if (this.id2Value[key.id] == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Nonexistent key: ${key.name}`);
      } else {
        return this.id2Value[key.id];
      }
    } else {
      const id = this.name2Id[key];
      if (id == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Feed dict has no SymbolicTensor name: ${key}`);
      }
      return this.id2Value[id];
    }
  }
  /**
   * Get the feed mask for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed mask.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getMask(key) {
    if (key instanceof _topology__WEBPACK_IMPORTED_MODULE_5__.SymbolicTensor) {
      if (this.id2Value[key.id] == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Nonexistent key: ${key.name}`);
      } else {
        return this.id2Mask[key.id];
      }
    } else {
      const id = this.name2Id[key];
      if (id == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Feed dict has no SymbolicTensor name: ${key}`);
      }
      return this.id2Mask[id];
    }
  }
  /** Dispose all mask Tensors held by this object. */
  disposeMasks() {
    if (this.id2Mask != null) {
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose)(this.id2Mask);
    }
  }
}
// Cache for topologically sorted SymbolicTensors for given execution
// targets (i.e., fetches).
const cachedSorted = new _utils_executor_utils__WEBPACK_IMPORTED_MODULE_2__.LruCache();
// Cache for recipient count maps for given execution targets (i.e., fetches).
const cachedRecipientCounts = new _utils_executor_utils__WEBPACK_IMPORTED_MODULE_2__.LruCache();
function updateCacheMaxEntries(maxEntries) {
  if (cachedSorted != null) {
    cachedSorted.setMaxEntries(maxEntries);
  }
  if (cachedRecipientCounts != null) {
    cachedRecipientCounts.setMaxEntries(maxEntries);
  }
}
/**
 * Execute a SymbolicTensor by using concrete feed values.
 *
 * A `SymbolicTensor` object is a node in a computation graph of TF.js
 * Layers. The object is backed by a source layer and input
 * `SymbolicTensor`s to the source layer. This method evaluates
 * the `call()` method of the source layer, using concrete values of the
 * inputs obtained from either
 * * `feedDict`, if the input key exists in `feedDict`, or else,
 * * a recursive call to `execute()` itself.
 *
 * @param x: The `SymbolicTensor` to execute.
 * @param feedDict: The feed values, as base condition of the recursion.
 *   execution.
 * @param kwargs: Optional keyword arguments.
 * @param probe: A probe object (of interface `ExecutionProbe`) used for
 *   testing memory footprint of `execute` calls.
 * @returns Result of the execution.
 * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s
 *   encountered during the execution lacks a feed value in `feedDict`.
 */
function execute(fetches, feedDict, kwargs, probe) {
  const training = kwargs == null ? false : kwargs['training'];
  const arrayFetches = Array.isArray(fetches);
  const fetchArray = arrayFetches ? fetches : [fetches];
  const outputNames = fetchArray.map(t => t.name);
  const finalOutputs = [];
  const feedNames = feedDict.names();
  for (const outputName of outputNames) {
    if (feedNames.indexOf(outputName) !== -1) {
      finalOutputs.push(feedDict.getValue(outputName));
    } else {
      finalOutputs.push(null);
    }
  }
  if (probe != null) {
    // For optional probing of memory footprint during execution.
    probe.maxNumTensors = -Infinity;
    probe.minNumTensors = Infinity;
  }
  // Check cache.
  const fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().sort().join(',');
  let sorted = cachedSorted.get(fetchAndFeedKey);
  let recipientCounts;
  if (sorted == null) {
    // Cache doesn't contain the desired combination of fetches. Compute
    // topological sort for the combination for the first time.
    const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);
    sorted = out.sorted;
    recipientCounts = out.recipientCounts;
    // Store results in cache for future use.
    cachedSorted.put(fetchAndFeedKey, sorted);
    cachedRecipientCounts.put(fetchAndFeedKey, recipientCounts);
  }
  recipientCounts = {};
  if (!training) {
    Object.assign(recipientCounts, cachedRecipientCounts.get(fetchAndFeedKey));
  }
  const internalFeedDict = new FeedDict(feedDict);
  // Start iterative execution on the topologically-sorted SymbolicTensors.
  for (let i = 0; i < sorted.length; ++i) {
    if (probe != null) {
      // For optional probing of memory usage during execution.
      const numTensors = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.memory)().numTensors;
      if (numTensors > probe.maxNumTensors) {
        probe.maxNumTensors = numTensors;
      }
      if (numTensors < probe.minNumTensors) {
        probe.minNumTensors = numTensors;
      }
    }
    const symbolic = sorted[i];
    const srcLayer = symbolic.sourceLayer;
    if (srcLayer instanceof _input_layer__WEBPACK_IMPORTED_MODULE_4__.InputLayer) {
      continue;
    }
    const inputValues = [];
    const inputMasks = [];
    const tensorsToDispose = [];
    let maskExists = false;
    for (const input of symbolic.inputs) {
      const value = internalFeedDict.getValue(input);
      const mask = internalFeedDict.getMask(input);
      inputValues.push(value);
      inputMasks.push(mask);
      if (mask != null) {
        maskExists = true;
      }
      if (!training) {
        recipientCounts[input.name]--;
        if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) && outputNames.indexOf(input.name) === -1 && !value.isDisposed && input.sourceLayer.stateful !== true) {
          tensorsToDispose.push(value);
        }
      }
    }
    if (maskExists) {
      kwargs = kwargs || {};
      kwargs['mask'] = inputMasks[0];
    }
    const outputTensors = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_3__.toList)(srcLayer.apply(inputValues, kwargs));
    let outputMask = null;
    if (srcLayer.supportsMasking) {
      outputMask = srcLayer.computeMask(inputValues, inputMasks);
    }
    const layerOutputs = getNodeOutputs(symbolic);
    const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];
    for (let i = 0; i < outputSymbolicTensors.length; ++i) {
      if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {
        internalFeedDict.add(outputSymbolicTensors[i], outputTensors[i], Array.isArray(outputMask) ? outputMask[0] : outputMask);
      }
      const index = outputNames.indexOf(outputSymbolicTensors[i].name);
      if (index !== -1) {
        finalOutputs[index] = outputTensors[i];
      }
    }
    if (!training) {
      // Clean up Tensors that are no longer needed.
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose)(tensorsToDispose);
    }
  }
  // NOTE(cais): Unlike intermediate tensors, we don't discard mask
  // tensors as we go, because these tensors are sometimes passed over a
  // series of mutliple layers, i.e., not obeying the immediate input
  // relations in the graph. If this becomes a memory-usage concern,
  // we can improve this in the future.
  internalFeedDict.disposeMasks();
  return arrayFetches ? finalOutputs : finalOutputs[0];
}
/**
 * Sort the `SymbolicTensor`s topologically, for an array of fetches.
 *
 * This function calls getTopologicalSortAndRecipientCountsForOneFetch and
 * merges their results.
 *
 * @param fetch The array of fetches requested. Must be a non-empty array.
 * @param feedDict The dictionary of fed values.
 * @returns sorted: Topologically-sorted array of SymbolicTensors.
 *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.
 */
function getTopologicalSortAndRecipientCounts(fetches, feedDict) {
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(fetches != null && fetches.length > 0, () => `Expected at least one fetch, got none`);
  let finalSorted = [];
  let finalRecipientMap = {};
  if (fetches.length === 1) {
    // Special-casing 1 fetch for efficiency.
    const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);
    finalSorted = out.sorted;
    finalRecipientMap = out.recipientMap;
  } else {
    const visited = new Set();
    for (const fetch of fetches) {
      const {
        sorted,
        recipientMap
      } = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);
      // Merge sorted SymbolicTensor Arrays.
      for (const symbolicTensor of sorted) {
        if (!visited.has(symbolicTensor.name)) {
          finalSorted.push(symbolicTensor);
          visited.add(symbolicTensor.name);
        }
      }
      // Merge recipient maps.
      for (const name in recipientMap) {
        if (finalRecipientMap[name] == null) {
          finalRecipientMap[name] = new Set();
        }
        recipientMap[name].forEach(recipient => finalRecipientMap[name].add(recipient));
      }
    }
  }
  return {
    sorted: finalSorted,
    recipientCounts: recipientMap2Counts(finalRecipientMap)
  };
}
function recipientMap2Counts(recipientMap) {
  const recipientCounts = {};
  for (const name in recipientMap) {
    recipientCounts[name] = recipientMap[name].size;
  }
  return recipientCounts;
}
/**
 * Sort the `SymbolicTensor`s topologically, for a single fetch.
 *
 * This helper function processes the upstream SymbolicTensors of a single
 * fetch.
 *
 * @param fetch The single fetch requested.
 * @param feedDict The dictionary of fed values.
 * @returns sorted: Topologically-sorted array of SymbolicTensors.
 *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.
 */
function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {
  const visited = new Set();
  const sorted = [];
  const recipientMap = {};
  // Put keys of the feedDict into visited first, so they don't have to be
  // walked. This is needed in case where there are feeds for intermediate
  // SymbolicTensors of the graph.
  for (const key of feedDict.names()) {
    visited.add(key);
  }
  const stack = [];
  const marks = [];
  // Initial population of stack and marks.
  stack.push(fetch);
  while (stack.length > 0) {
    const top = stack[stack.length - 1];
    if (visited.has(top.name)) {
      stack.pop();
      continue;
    }
    const topIsMarked = marks[marks.length - 1] === stack.length - 1;
    if (top.inputs.length === 0 || topIsMarked) {
      // Input SymbolicTensor or all children have been visited.
      stack.pop();
      sorted.push(top);
      visited.add(top.name);
      if (topIsMarked) {
        marks.pop();
      }
    } else {
      // A non-input SymbolicTensor whose upstream SymbolicTensors haven't
      // been visited yet. Push them onto the stack.
      marks.push(stack.length - 1);
      for (const input of top.inputs) {
        // Increment the recipient count. Note that this needs to happen
        // regardless of whether the SymbolicTensor has been visited before.
        if (recipientMap[input.name] == null) {
          recipientMap[input.name] = new Set();
        }
        recipientMap[input.name].add(top.name);
        if (visited.has(input.name)) {
          continue; // Avoid repeated visits to the same SymbolicTensor.
        }

        stack.push(input);
      }
    }
  }
  return {
    sorted,
    recipientMap
  };
}
/**
 * Get the symbolic output tensors of the node to which a given fetch belongs.
 * @param fetch The fetched symbolic tensor.
 * @returns The Array of symbolic tensors output by the node to which `fetch`
 *   belongs.
 */
function getNodeOutputs(fetch) {
  let layerOutputs;
  if (fetch.sourceLayer.inboundNodes.length === 1) {
    layerOutputs = fetch.sourceLayer.output;
  } else {
    let nodeIndex = null;
    for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {
      for (const outputTensor of fetch.sourceLayer.inboundNodes[i].outputTensors) {
        if (outputTensor.id === fetch.id) {
          nodeIndex = i;
          break;
        }
      }
    }
    layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);
  }
  return layerOutputs;
}

/***/ }),

/***/ 45367:
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Input": () => (/* binding */ Input),
/* harmony export */   "InputLayer": () => (/* binding */ InputLayer)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/state */ 6337);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _topology__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./topology */ 59996);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */




class InputLayer extends _topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super({
      dtype: args.dtype,
      name: args.name != null ? args.name : (0,_backend_state__WEBPACK_IMPORTED_MODULE_1__.getUid)('input').toString()
    });
    // Normalize config.batchSize and config.sparse
    if (args.batchSize == null) {
      args.batchSize = null;
    }
    if (args.sparse == null) {
      args.sparse = false;
    }
    this.trainable = false;
    this.built = true;
    this.sparse = args.sparse;
    if (args.inputShape != null && args.batchInputShape != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Only provide the inputShape OR ' + 'batchInputShape argument to inputLayer, not both at the same time.');
    }
    let batchInputShape = args.batchInputShape;
    if (batchInputShape == null) {
      if (args.inputShape == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('An InputLayer should be passed either a ' + '`batchInputShape` or an `inputShape`.');
      } else {
        batchInputShape = [args.batchSize].concat(args.inputShape);
      }
    } else {
      // TODO(michaelterry): Backport to PyKeras
      if (args.batchSize != null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Cannot specify batchSize if batchInputShape is ' + 'specified when creating an InputLayer.');
      }
    }
    const dtype = args.dtype || 'float32';
    this.batchInputShape = batchInputShape;
    this.dtype = dtype;
    // TODO(michaelterry): Backport this to PyKeras?
    this.inputSpec = [{
      shape: batchInputShape
    }];
    const inputTensor = new _topology__WEBPACK_IMPORTED_MODULE_3__.SymbolicTensor(this.dtype, this.batchInputShape, this, [], {}, this.name);
    inputTensor.nodeIndex = 0;
    inputTensor.tensorIndex = 0;
    // Create an input node to add to this.outboundNode.
    // (This call has side effects.)
    // tslint:disable-next-line:no-unused-expression
    new _topology__WEBPACK_IMPORTED_MODULE_3__.Node({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: [inputTensor],
      outputTensors: [inputTensor],
      inputMasks: [null],
      outputMasks: [null],
      inputShapes: [batchInputShape],
      outputShapes: [batchInputShape]
    });
  }
  apply(inputs, kwargs) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Cannot pass any input to an ' + `InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    // dispose() for InputLayer is overridden as no-op.
    return {
      refCountAfterDispose: this._refCount,
      numDisposedVariables: 0
    };
  }
  getConfig() {
    return {
      batchInputShape: this.batchInputShape,
      dtype: this.dtype,
      sparse: this.sparse,
      name: this.name
    };
  }
}
/** @nocollapse */
InputLayer.className = 'InputLayer';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(InputLayer);
function Input(config) {
  if (config.batchShape == null && config.shape == null) {
    throw new Error('Please provide to Input either a `shape`' + ' or a `batchShape` argument. Note that ' + '`shape` does not include the batch ' + 'dimension.');
  }
  if (config.batchShape != null && config.shape != null) {
    // TODO(michaelterry): Backport to PyKeras.
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError('Please provide either a `shape` or `batchShape` ' + 'argument to Input, but not both.');
  }
  let batchShape = config.batchShape;
  if (config.shape != null && batchShape == null) {
    batchShape = [null].concat(config.shape);
  }
  let dtype = config.dtype;
  if (dtype == null) {
    dtype = 'float32';
  }
  const inputLayer = new InputLayer({
    batchInputShape: batchShape,
    name: config.name,
    dtype,
    sparse: config.sparse
  });
  const outputs = inputLayer.inboundNodes[0].outputTensors;
  return outputs[0];
}

/***/ }),

/***/ 59996:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputSpec": () => (/* binding */ InputSpec),
/* harmony export */   "Layer": () => (/* binding */ Layer),
/* harmony export */   "Node": () => (/* binding */ Node),
/* harmony export */   "SymbolicTensor": () => (/* binding */ SymbolicTensor),
/* harmony export */   "getSourceInputs": () => (/* binding */ getSourceInputs)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/state */ 6337);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/* harmony import */ var _utils_variable_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/variable_utils */ 83260);
/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../variables */ 22414);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original source: keras/engine/topology.py */









/**
 * Specifies the ndim, dtype and shape of every input to a layer.
 *
 * Every layer should expose (if appropriate) an `inputSpec` attribute:
 * a list of instances of InputSpec (one per input tensor).
 *
 * A null entry in a shape is compatible with any dimension,
 * a null shape is compatible with any shape.
 */
class InputSpec {
  constructor(args) {
    this.dtype = args.dtype;
    this.shape = args.shape;
    /*
      TODO(michaelterry): Could throw error if ndim and shape are both defined
        (then backport).
    */
    if (args.shape != null) {
      this.ndim = args.shape.length;
    } else {
      this.ndim = args.ndim;
    }
    this.maxNDim = args.maxNDim;
    this.minNDim = args.minNDim;
    this.axes = args.axes || {};
  }
}
/**
 * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.
 *
 * They are most often encountered when building a graph of `Layer`s for a
 * `tf.LayersModel` and the input data's shape, but not values are known.
 *
 * @doc {heading: 'Models', 'subheading': 'Classes'}
 */
class SymbolicTensor {
  /**
   *
   * @param dtype
   * @param shape
   * @param sourceLayer The Layer that produced this symbolic tensor.
   * @param inputs The inputs passed to sourceLayer's __call__() method.
   * @param nodeIndex
   * @param tensorIndex
   * @param callArgs The keyword arguments passed to the __call__() method.
   * @param name
   * @param outputTensorIndex The index of this tensor in the list of outputs
   *   returned by apply().
   */
  constructor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {
    this.dtype = dtype;
    this.shape = shape;
    this.sourceLayer = sourceLayer;
    this.inputs = inputs;
    this.callArgs = callArgs;
    this.outputTensorIndex = outputTensorIndex;
    this.id = (0,_backend_state__WEBPACK_IMPORTED_MODULE_1__.getNextUniqueTensorId)();
    if (name != null) {
      this.originalName = (0,_common__WEBPACK_IMPORTED_MODULE_2__.getScopedTensorName)(name);
      this.name = (0,_common__WEBPACK_IMPORTED_MODULE_2__.getUniqueTensorName)(this.originalName);
    }
    this.rank = shape.length;
  }
}
let _nextNodeID = 0;
/**
 * A `Node` describes the connectivity between two layers.
 *
 * Each time a layer is connected to some new input,
 * a node is added to `layer.inboundNodes`.
 *
 * Each time the output of a layer is used by another layer,
 * a node is added to `layer.outboundNodes`.
 *
 * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates
 * describing the origin of the `inputTensors`, verifying the following:
 *
 * `inputTensors[i] ==
 * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[
 *   tensorIndices[i]]`
 *
 * A node from layer A to layer B is added to:
 *     A.outboundNodes
 *     B.inboundNodes
 */
class Node {
  constructor(args,
  // TODO(michaelterry): Define actual type for this.
  callArgs) {
    this.callArgs = callArgs;
    this.id = _nextNodeID++;
    /*
      Layer instance (NOT a list).
      this is the layer that takes a list of input tensors
      and turns them into a list of output tensors.
      the current node will be added to
      the inboundNodes of outboundLayer.
    */
    this.outboundLayer = args.outboundLayer;
    /*
        The following 3 properties describe where
        the input tensors come from: which layers,
        and for each layer, which node and which
        tensor output of each node.
    */
    // List of layer instances.
    this.inboundLayers = args.inboundLayers;
    // List of integers, 1:1 mapping with inboundLayers.
    this.nodeIndices = args.nodeIndices;
    // List of integers, 1:1 mapping with inboundLayers.
    this.tensorIndices = args.tensorIndices;
    /*
        Following 2 properties:
        tensor inputs and outputs of outboundLayer.
    */
    // List of tensors. 1:1 mapping with inboundLayers.
    this.inputTensors = args.inputTensors;
    // List of tensors, created by outboundLayer.call().
    this.outputTensors = args.outputTensors;
    /*
        Following 2 properties: input and output masks.
        List of tensors, 1:1 mapping with inputTensor.
    */
    this.inputMasks = args.inputMasks;
    // List of tensors, created by outboundLayer.computeMask().
    this.outputMasks = args.outputMasks;
    // Following 2 properties: input and output shapes.
    // List of shape tuples, shapes of inputTensors.
    this.inputShapes = args.inputShapes;
    // List of shape tuples, shapes of outputTensors.
    this.outputShapes = args.outputShapes;
    // Add nodes to all layers involved.
    for (const layer of args.inboundLayers) {
      if (layer != null) {
        layer.outboundNodes.push(this);
      }
    }
    args.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const inboundNames = [];
    for (const layer of this.inboundLayers) {
      if (layer != null) {
        inboundNames.push(layer.name);
      } else {
        inboundNames.push(null);
      }
    }
    return {
      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
      inboundLayers: inboundNames,
      nodeIndices: this.nodeIndices,
      tensorIndices: this.tensorIndices
    };
  }
}
let _nextLayerID = 0;
/**
 * A layer is a grouping of operations and weights that can be composed to
 * create a `tf.LayersModel`.
 *
 * Layers are constructed by using the functions under the
 * [tf.layers](#Layers-Basic) namespace.
 *
 * @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'}
 */
class Layer extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.Serializable {
  constructor(args = {}) {
    super();
    this._callHook = null;
    this._addedWeightNames = [];
    // Porting Notes: PyKeras does not have this property in this base Layer
    //   class. Instead lets Layer subclass set it dynamically and checks the
    //   value with `hasattr`. In tfjs-layers, we let this be a member of this
    //   base class.
    this._stateful = false;
    this.id = _nextLayerID++;
    this.activityRegularizer = null;
    this.inputSpec = null;
    this.supportsMasking = false;
    // These properties will be set upon call of this.build()
    this._trainableWeights = [];
    this._nonTrainableWeights = [];
    this._losses = [];
    this._updates = [];
    this._built = false;
    /*
      These lists will be filled via successive calls
      to this.addInboundNode().
     */
    this.inboundNodes = [];
    this.outboundNodes = [];
    let name = args.name;
    if (!name) {
      const prefix = this.getClassName();
      name = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toSnakeCase(prefix) + '_' + (0,_backend_state__WEBPACK_IMPORTED_MODULE_1__.getUid)(prefix);
    }
    this.name = name;
    this.trainable_ = args.trainable == null ? true : args.trainable;
    if (args.inputShape != null || args.batchInputShape != null) {
      /*
        In this case we will later create an input layer
        to insert before the current layer
       */
      let batchInputShape;
      if (args.batchInputShape != null) {
        batchInputShape = args.batchInputShape;
      } else if (args.inputShape != null) {
        let batchSize = null;
        if (args.batchSize != null) {
          batchSize = args.batchSize;
        }
        batchInputShape = [batchSize].concat(args.inputShape);
      }
      this.batchInputShape = batchInputShape;
      // Set dtype.
      let dtype = args.dtype;
      if (dtype == null) {
        dtype = args.inputDType;
      }
      if (dtype == null) {
        dtype = 'float32';
      }
      this.dtype = dtype;
    }
    if (args.weights != null) {
      this.initialWeights = args.weights;
    } else {
      this.initialWeights = null;
    }
    // The value of `_refCount` is initialized to null. When the layer is used
    // in a symbolic way for the first time, it will be set to 1.
    this._refCount = null;
    this.fastWeightInitDuringBuild = false;
  }
  /**
   * Converts a layer and its index to a unique (immutable type) name.
   * This function is used internally with `this.containerNodes`.
   * @param layer The layer.
   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
   *   nodes.
   *
   * @returns The unique name.
   */
  static nodeKey(layer, nodeIndex) {
    return layer.name + '_ib-' + nodeIndex.toString();
  }
  /**
   * Returns this.inboundNode at index nodeIndex.
   *
   * Porting note: This is a replacement for _get_node_attribute_at_index()
   * @param nodeIndex
   * @param attrName The name of the attribute related to request for this node.
   */
  getNodeAtIndex(nodeIndex, attrName) {
    if (this.inboundNodes.length === 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.RuntimeError('The layer has never been called ' + `and thus has no defined ${attrName}.`);
    }
    if (this.inboundNodes.length <= nodeIndex) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Asked to get ${attrName} at node ${nodeIndex}, ` + `but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    }
    return this.inboundNodes[nodeIndex];
  }
  /**
   * Retrieves the input tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple inputs).
   */
  getInputAt(nodeIndex) {
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple outputs).
   */
  getOutputAt(nodeIndex) {
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);
  }
  // Properties
  /**
   * Retrieves the input tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Input tensor or list of input tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get input() {
    if (this.inboundNodes.length > 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.AttributeError(`Layer ${this.name}` + ' has multiple inbound nodes, ' + 'hence the notion of "layer input" ' + 'is ill-defined. ' + 'Use `getInputAt(nodeIndex)` instead.');
    } else if (this.inboundNodes.length === 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.AttributeError(`Layer ${this.name}` + ' is not connected, no input to return.');
    }
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Output tensor or list of output tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get output() {
    if (this.inboundNodes.length === 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.AttributeError(`Layer ${this.name}` + ' has no inbound nodes.');
    }
    if (this.inboundNodes.length > 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.AttributeError(`Layer ${this.name}` + ' has multiple inbound nodes, ' + 'hence the notion of "layer output" ' + 'is ill-defined. ' + 'Use `getOutputAt(nodeIndex)` instead.');
    }
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);
  }
  get losses() {
    return this._losses;
  }
  /**
   * Retrieves the Layer's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    // Porting Node: This is an augmentation to Layer.loss in PyKeras.
    //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete
    //   Tensor (specifically Scalar) values are returned. This is due to the
    //   imperative backend.
    return this.losses.map(lossFn => lossFn());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(built) {
    this._built = built;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(trainable) {
    this._trainableWeights.forEach(w => w.trainable = trainable);
    this.trainable_ = trainable;
  }
  get trainableWeights() {
    if (this.trainable_) {
      return this._trainableWeights.filter(w => w.trainable);
    } else {
      return [];
    }
  }
  set trainableWeights(weights) {
    this._trainableWeights = weights;
  }
  get nonTrainableWeights() {
    if (this.trainable) {
      return this._trainableWeights.filter(w => !w.trainable).concat(this._nonTrainableWeights);
    } else {
      return this._trainableWeights.concat(this._nonTrainableWeights);
    }
  }
  set nonTrainableWeights(weights) {
    this._nonTrainableWeights = weights;
  }
  /**
   * The concatenation of the lists trainableWeights and nonTrainableWeights
   * (in this order).
   */
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  /**
   * Reset the states of the layer.
   *
   * This method of the base Layer class is essentially a no-op.
   * Subclasses that are stateful (e.g., stateful RNNs) should override this
   * method.
   */
  resetStates() {
    if (!this.stateful) {
      throw new Error('Cannot call the resetStates() method of a non-stateful Layer ' + 'object.');
    }
  }
  /**
   * Checks compatibility between the layer and provided inputs.
   *
   * This checks that the tensor(s) `input`
   * verify the input assumptions of the layer
   * (if any). If not, exceptions are raised.
   *
   * @param inputs Input tensor or list of input tensors.
   *
   * @exception ValueError in case of mismatch between
   *   the provided inputs and the expectations of the layer.
   */
  assertInputCompatibility(inputs) {
    inputs = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputs);
    if (this.inputSpec == null || this.inputSpec.length === 0) {
      return;
    }
    const inputSpec = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(this.inputSpec);
    if (inputs.length !== inputSpec.length) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Layer ${this.name} expects ${inputSpec.length} inputs, ` + `but it received ${inputs.length} input tensors. ` + `Input received: ${inputs}`);
    }
    for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {
      const x = inputs[inputIndex];
      const spec = inputSpec[inputIndex];
      if (spec == null) {
        continue;
      }
      // Check ndim.
      const ndim = x.rank;
      if (spec.ndim != null) {
        if (ndim !== spec.ndim) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}: ` + `expected ndim=${spec.ndim}, found ndim=${ndim}`);
        }
      }
      if (spec.maxNDim != null) {
        if (ndim > spec.maxNDim) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}` + `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);
        }
      }
      if (spec.minNDim != null) {
        if (ndim < spec.minNDim) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Input ${inputIndex} is incompatible with layer ${this.name}` + `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);
        }
      }
      // Check dtype.
      if (spec.dtype != null) {
        if (x.dtype !== spec.dtype) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Input ${inputIndex} is incompatible with layer ${this.name} ` + `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);
        }
      }
      // Check specific shape axes.
      if (spec.axes) {
        const xShape = x.shape;
        for (const key in spec.axes) {
          const axis = Number(key);
          const value = spec.axes[key];
          // Perform Python-style slicing in case axis < 0;
          // TODO(cais): Use https://github.com/alvivi/typescript-underscore to
          // ensure type safety through Underscore calls.
          const xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];
          if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Input ${inputIndex} is incompatible with layer ` + `${this.name}: expected axis ${axis} of input shape to ` + `have value ${value} but got shape ${xShape}.`);
          }
        }
      }
      // Check shape.
      if (spec.shape != null) {
        for (let i = 0; i < spec.shape.length; ++i) {
          const specDim = spec.shape[i];
          const dim = x.shape[i];
          if (specDim != null && dim != null) {
            if (specDim !== dim) {
              throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Input ${inputIndex} is incompatible with layer ` + `${this.name}: expected shape=${spec.shape}, ` + `found shape=${x.shape}.`);
            }
          }
        }
      }
    }
  }
  /**
   * This is where the layer's logic lives.
   *
   * @param inputs Input tensor, or list/tuple of input tensors.
   * @param kwargs Additional keyword arguments.
   *
   * @return A tensor or list/tuple of tensors.
   */
  call(inputs, kwargs) {
    return inputs;
  }
  invokeCallHook(inputs, kwargs) {
    if (this._callHook != null) {
      this._callHook(inputs, kwargs);
    }
  }
  /**
   * Set call hook.
   * This is currently used for testing only.
   * @param callHook
   */
  setCallHook(callHook) {
    this._callHook = callHook;
  }
  /**
   * Clear call hook.
   * This is currently used for testing only.
   */
  clearCallHook() {
    this._callHook = null;
  }
  /**
   * Builds or executes a `Layer`'s logic.
   *
   * When called with `tf.Tensor`(s), execute the `Layer`'s computation and
   * return Tensor(s). For example:
   *
   * ```js
   * const denseLayer = tf.layers.dense({
   *   units: 1,
   *   kernelInitializer: 'zeros',
   *   useBias: false
   * });
   *
   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
   * // numeric values).
   * const input = tf.ones([2, 2]);
   * const output = denseLayer.apply(input);
   *
   * // The output's value is expected to be [[0], [0]], due to the fact that
   * // the dense layer has a kernel initialized to all-zeros and does not have
   * // a bias.
   * output.print();
   * ```
   *
   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
   * future execution.  This entails internal book-keeping on shapes of
   * expected Tensors, wiring layers together, and initializing weights.
   *
   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
   * building of non-`tf.Sequential` models. For example:
   *
   * ```js
   * const flattenLayer = tf.layers.flatten();
   * const denseLayer = tf.layers.dense({units: 1});
   *
   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
   * const input = tf.input({shape: [2, 2]});
   * const output1 = flattenLayer.apply(input);
   *
   * // output1.shape is [null, 4]. The first dimension is the undetermined
   * // batch size. The second dimension comes from flattening the [2, 2]
   * // shape.
   * console.log(JSON.stringify(output1.shape));
   *
   * // The output SymbolicTensor of the flatten layer can be used to call
   * // the apply() of the dense layer:
   * const output2 = denseLayer.apply(output1);
   *
   * // output2.shape is [null, 1]. The first dimension is the undetermined
   * // batch size. The second dimension matches the number of units of the
   * // dense layer.
   * console.log(JSON.stringify(output2.shape));
   *
   * // The input and output can be used to construct a model that consists
   * // of the flatten and dense layers.
   * const model = tf.model({inputs: input, outputs: output2});
   * ```
   *
   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
   * @param kwargs Additional keyword arguments to be passed to `call()`.
   *
   * @return Output of the layer's `call` method.
   *
   * @exception ValueError error in case the layer is missing shape information
   *   for its `build` call.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  // Porting Note: This is a replacement for __call__() in Python.
  apply(inputs, kwargs) {
    kwargs = kwargs || {};
    this.assertNotDisposed();
    // Ensure inputs are all the same type.
    const inputsList = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputs);
    let allAreSymbolic = true;
    for (const input of inputsList) {
      if (!(input instanceof SymbolicTensor)) {
        allAreSymbolic = false;
        break;
      }
    }
    let noneAreSymbolic = true;
    for (const input of inputsList) {
      if (input instanceof SymbolicTensor) {
        noneAreSymbolic = false;
        break;
      }
    }
    if (allAreSymbolic === noneAreSymbolic) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('Arguments to apply() must be all ' + 'SymbolicTensors or all Tensors');
    }
    // TODO(michaelterry): nameScope() may not be necessary.
    return (0,_common__WEBPACK_IMPORTED_MODULE_2__.nameScope)(this.name, () => {
      // Handle laying building (weight creating, input spec locking).
      if (!this.built) {
        /*
          Throw exceptions in case the input is not compatible
          with the inputSpec specified in the layer constructor.
         */
        this.assertInputCompatibility(inputs);
        // Collect input shapes to build layer.
        const inputShapes = [];
        for (const xElem of _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputs)) {
          inputShapes.push(xElem.shape);
        }
        this.build(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray(inputShapes));
        this.built = true;
        // Load weights that were specified at layer instantiation.
        if (this.initialWeights) {
          this.setWeights(this.initialWeights);
        }
        if (this._refCount === null && noneAreSymbolic) {
          // The first use of this layer is a non-symbolic call, set ref count
          // to 1 so the Layer can be properly disposed if its dispose() method
          // is called.
          this._refCount = 1;
        }
      }
      /*
        Throw exceptions in case the input is not compatible
        with the inputSpec set at build time.
      */
      this.assertInputCompatibility(inputs);
      // Handle mask propagation.
      // TODO(michaelterry): Mask propagation not currently implemented.
      // Actually call the layer, collecting output(s), mask(s), and shape(s).
      if (noneAreSymbolic) {
        let output = this.call(inputs, kwargs);
        // TODO(michaelterry): Compute the outputMask
        // If the layer returns tensors from its inputs, unmodified,
        // we copy them to avoid loss of tensor metadata.
        const outputList = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(output);
        const outputListCopy = [];
        // TODO(michaelterry): This copying may not be necessary given our eager
        // backend.
        for (let x of outputList) {
          if (inputsList.indexOf(x) !== -1) {
            x = x.clone();
          }
          outputListCopy.push(x);
        }
        output = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray(outputListCopy);
        if (this.activityRegularizer != null) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('Layer invocation in the presence of activity ' + 'regularizer(s) is not supported yet.');
        }
        // TODO(michaelterry): Call addInboundNode()?
        return output;
      } else {
        const inputShape = collectInputShape(inputs);
        const outputShape = this.computeOutputShape(inputShape);
        let output;
        const outputDType = guessOutputDType(inputs);
        this.warnOnIncompatibleInputShape(Array.isArray(inputs) ? inputShape[0] : inputShape);
        if (outputShape != null && outputShape.length > 0 && Array.isArray(outputShape[0])) {
          // We have multiple output shapes. Create multiple output tensors.
          output = outputShape.map((shape, index) => new SymbolicTensor(outputDType, shape, this, _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputs), kwargs, this.name, index));
        } else {
          output = new SymbolicTensor(outputDType, outputShape, this, _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputs), kwargs, this.name);
        }
        /*
          Add an inbound node to the layer, so that it keeps track
          of the call and of all new variables created during the call.
          This also updates the layer history of the output tensor(s).
          If the input tensor(s) had no previous history,
          this does nothing.
        */
        this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);
        this._refCount++;
        if (this.activityRegularizer != null) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('Layer invocation in the presence of activity ' + 'regularizer(s) is not supported yet.');
        }
        return output;
      }
    });
  }
  /**
   * Check compatibility between input shape and this layer's batchInputShape.
   *
   * Print warning if any incompatibility is found.
   *
   * @param inputShape Input shape to be checked.
   */
  warnOnIncompatibleInputShape(inputShape) {
    if (this.batchInputShape == null) {
      return;
    } else if (inputShape.length !== this.batchInputShape.length) {
      console.warn(`The rank of the input tensor provided (shape: ` + `${JSON.stringify(inputShape)}) does not match that of the ` + `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` + `of the layer ${this.name}`);
    } else {
      let dimMismatch = false;
      this.batchInputShape.forEach((dimension, i) => {
        if (dimension != null && inputShape[i] != null && inputShape[i] !== dimension) {
          dimMismatch = true;
        }
      });
      if (dimMismatch) {
        console.warn(`The shape of the input tensor ` + `(${JSON.stringify(inputShape)}) does not ` + `match the expectation of layer ${this.name}: ` + `${JSON.stringify(this.batchInputShape)}`);
      }
    }
  }
  /**
   * Retrieves the output shape(s) of a layer.
   *
   * Only applicable if the layer has only one inbound node, or if all inbound
   * nodes have the same output shape.
   *
   * @returns Output shape or shapes.
   * @throws AttributeError: if the layer is connected to more than one incoming
   *   nodes.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.AttributeError(`The layer ${this.name} has never been called and thus has no ` + `defined output shape.`);
    }
    const allOutputShapes = [];
    for (const node of this.inboundNodes) {
      const shapeString = JSON.stringify(node.outputShapes);
      if (allOutputShapes.indexOf(shapeString) === -1) {
        allOutputShapes.push(shapeString);
      }
    }
    if (allOutputShapes.length === 1) {
      const outputShapes = this.inboundNodes[0].outputShapes;
      if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) && outputShapes.length === 1) {
        return outputShapes[0];
      } else {
        return outputShapes;
      }
    } else {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.AttributeError(`The layer ${this.name} has multiple inbound nodes with different ` + `output shapes. Hence the notion of "output shape" is ill-defined ` + `for the layer.`);
      // TODO(cais): Implement getOutputShapeAt().
    }
  }
  /**
   * Counts the total number of numbers (e.g., float32, int32) in the
   * weights.
   *
   * @returns An integer count.
   * @throws RuntimeError: If the layer is not built yet (in which case its
   *   weights are not defined yet.)
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  countParams() {
    if (!this.built) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.RuntimeError(`You tried to call countParams() on ${this.name}, ` + `but the layer is not built yet. Build it first by calling ` + `build(batchInputShape).`);
    }
    return _utils_variable_utils__WEBPACK_IMPORTED_MODULE_7__.countParamsInWeights(this.weights);
  }
  /**
   * Creates the layer weights.
   *
   * Must be implemented on all layers that have weights.
   *
   * Called when apply() is called to construct the weights.
   *
   * @param inputShape A `Shape` or array of `Shape` (unused).
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  build(inputShape) {
    this.built = true;
  }
  /**
   * Returns the current values of the weights of the layer.
   *
   * @param trainableOnly Whether to get the values of only trainable weights.
   * @returns Weight values as an `Array` of `tf.Tensor`s.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getWeights(trainableOnly = false) {
    return (0,_variables__WEBPACK_IMPORTED_MODULE_8__.batchGetValue)(trainableOnly ? this.trainableWeights : this.weights);
  }
  /**
   * Sets the weights of the layer, from Tensors.
   *
   * @param weights a list of Tensors. The number of arrays and their shape
   *   must match number of the dimensions of the weights of the layer (i.e.
   *   it should match the output of `getWeights`).
   *
   * @exception ValueError If the provided weights list does not match the
   *   layer's specifications.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  setWeights(weights) {
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const params = this.weights;
      if (params.length !== weights.length) {
        // TODO(cais): Restore the following and use `providedWeights`, instead
        // of `weights` in the error message, once the deeplearn.js bug is
        // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const
        // providedWeights = JSON.stringify(weights).slice(0, 50);
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`You called setWeights(weights) on layer "${this.name}" ` + `with a weight list of length ${weights.length}, ` + `but the layer was expecting ${params.length} weights. ` + `Provided weights: ${weights}...`);
      }
      if (params.length === 0) {
        return;
      }
      const weightValueTuples = [];
      const paramValues = (0,_variables__WEBPACK_IMPORTED_MODULE_8__.batchGetValue)(params);
      for (let i = 0; i < paramValues.length; ++i) {
        const pv = paramValues[i];
        const p = params[i];
        const w = weights[i];
        if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(pv.shape, w.shape)) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Layer weight shape ${pv.shape} ` + `not compatible with provided weight shape ${w.shape}`);
        }
        weightValueTuples.push([p, w]);
      }
      (0,_variables__WEBPACK_IMPORTED_MODULE_8__.batchSetValue)(weightValueTuples);
    });
  }
  /**
   * Adds a weight variable to the layer.
   *
   * @param name Name of the new weight variable.
   * @param shape The shape of the weight.
   * @param dtype The dtype of the weight.
   * @param initializer An initializer instance.
   * @param regularizer A regularizer instance.
   * @param trainable Whether the weight should be trained via backprop or not
   *   (assuming that the layer itself is also trainable).
   * @param constraint An optional trainable.
   * @return The created weight variable.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addWeight(name, shape, dtype, initializer, regularizer, trainable, constraint, getInitializerFunc) {
    // Reject duplicate weight names.
    if (this._addedWeightNames.indexOf(name) !== -1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Duplicate weight name ${name} for layer ${this.name}`);
    }
    this._addedWeightNames.push(name);
    if (dtype == null) {
      dtype = 'float32';
    }
    if (this.fastWeightInitDuringBuild) {
      initializer = getInitializerFunc != null ? getInitializerFunc() : (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.getInitializer)('zeros');
    }
    const initValue = initializer.apply(shape, dtype);
    const weight = new _variables__WEBPACK_IMPORTED_MODULE_8__.LayerVariable(initValue, dtype, name, trainable, constraint);
    initValue.dispose();
    // Request backend not to dispose the weights of the model on scope() exit.
    if (regularizer != null) {
      this.addLoss(() => regularizer.apply(weight.read()));
    }
    if (trainable == null) {
      trainable = true;
    }
    if (trainable) {
      this._trainableWeights.push(weight);
    } else {
      this._nonTrainableWeights.push(weight);
    }
    return weight;
  }
  /**
   * Set the fast-weight-initialization flag.
   *
   * In cases where the initialized weight values will be immediately
   * overwritten by loaded weight values during model loading, setting
   * the flag to `true` saves unnecessary calls to potentially expensive
   * initializers and speeds up the loading process.
   *
   * @param value Target value of the flag.
   */
  setFastWeightInitDuringBuild(value) {
    this.fastWeightInitDuringBuild = value;
  }
  /**
   * Add losses to the layer.
   *
   * The loss may potentially be conditional on some inputs tensors,
   * for instance activity losses are conditional on the layer's inputs.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addLoss(losses) {
    if (losses == null || Array.isArray(losses) && losses.length === 0) {
      return;
    }
    // Update this.losses
    losses = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(losses);
    if (this._losses !== undefined && this._losses !== null) {
      this.losses.push(...losses);
    }
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  computeOutputShape(inputShape) {
    return inputShape;
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(inputs, mask) {
    if (!this.supportsMasking) {
      if (mask != null) {
        if (Array.isArray(mask)) {
          mask.forEach(maskElement => {
            if (maskElement != null) {
              throw new TypeError(`Layer ${this.name} does not support masking, ` + 'but was passed an inputMask.');
            }
          });
        } else {
          throw new TypeError(`Layer ${this.name} does not support masking, ` + 'but was passed an inputMask.');
        }
      }
      // masking not explicitly supported: return null as mask
      return null;
    }
    // if masking is explictly supported, by default
    // carry over the input mask
    return mask;
  }
  /**
   * Internal method to create an inbound node for the layer.
   *
   * @param inputTensors List of input tensors.
   * @param outputTensors List of output tensors.
   * @param inputMasks List of input masks (a mask can be a tensor, or null).
   * @param outputMasks List of output masks (a mask can be a tensor, or null).
   * @param inputShapes List of input shape tuples.
   * @param outputShapes List of output shape tuples.
   * @param kwargs Dictionary of keyword arguments that were passed to the
   *   `call` method of the layer at the call that created the node.
   */
  addInboundNode(inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs = null) {
    const inputTensorList = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputTensors);
    outputTensors = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(outputTensors);
    inputMasks = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputMasks);
    outputMasks = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(outputMasks);
    inputShapes = _utils_types_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeShapeList(inputShapes);
    outputShapes = _utils_types_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeShapeList(outputShapes);
    // Collect input tensor(s) coordinates.
    const inboundLayers = [];
    const nodeIndices = [];
    const tensorIndices = [];
    for (const x of inputTensorList) {
      /*
       * TODO(michaelterry): Keras adds this value to tensors; it's not
       * clear whether we'll use this or not.
       */
      inboundLayers.push(x.sourceLayer);
      nodeIndices.push(x.nodeIndex);
      tensorIndices.push(x.tensorIndex);
    }
    // Create node, add it to inbound nodes.
    // (This call has side effects.)
    // tslint:disable-next-line:no-unused-expression
    new Node({
      outboundLayer: this,
      inboundLayers,
      nodeIndices,
      tensorIndices,
      inputTensors: inputTensorList,
      outputTensors,
      inputMasks,
      outputMasks,
      inputShapes,
      outputShapes
    }, kwargs);
    // Update tensor history
    for (let i = 0; i < outputTensors.length; i++) {
      // TODO(michaelterry: _uses_learning_phase not tracked.
      outputTensors[i].sourceLayer = this;
      outputTensors[i].nodeIndex = this.inboundNodes.length - 1;
      outputTensors[i].tensorIndex = i;
    }
  }
  /**
   * Returns the config of the layer.
   *
   * A layer config is a TS dictionary (serializable)
   * containing the configuration of a layer.
   * The same layer can be reinstantiated later
   * (without its trained weights) from this configuration.
   *
   * The config of a layer does not include connectivity
   * information, nor the layer class name.  These are handled
   * by 'Container' (one layer of abstraction above).
   *
   * Porting Note: The TS dictionary follows TS naming standards for
   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
   * should use a helper function to convert to the pythonic storage
   * standard. (see serialization_utils.convertTsToPythonic)
   *
   * @returns TS dictionary of configuration.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getConfig() {
    const config = {
      name: this.name,
      trainable: this.trainable
    };
    if (this.batchInputShape != null) {
      config['batchInputShape'] = this.batchInputShape;
    }
    if (this.dtype != null) {
      config['dtype'] = this.dtype;
    }
    return config;
  }
  /**
   * Dispose the weight variables that this Layer instance holds.
   *
   * @returns {number} Number of disposed variables.
   */
  disposeWeights() {
    this.weights.forEach(weight => weight.dispose());
    return this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0) {
      throw new Error(`Layer '${this.name}' is already disposed.`);
    }
  }
  /**
   * Attempt to dispose layer's weights.
   *
   * This method decreases the reference count of the Layer object by 1.
   *
   * A Layer is reference-counted. Its reference count is incremented by 1
   * the first item its `apply()` method is called and when it becomes a part
   * of a new `Node` (through calling the `apply()` method on a
   * `tf.SymbolicTensor`).
   *
   * If the reference count of a Layer becomes 0, all the weights will be
   * disposed and the underlying memory (e.g., the textures allocated in WebGL)
   * will be freed.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * weights of the Layer will *not* be disposed.
   *
   * After a Layer is disposed, it cannot be used in calls such as `apply()`,
   * `getWeights()` or `setWeights()` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the Container after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the layer has already
   *   been disposed.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  dispose() {
    if (!this.built) {
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been ` + `built yet.`);
    }
    if (this._refCount === null) {
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used ` + `yet.`);
    }
    this.assertNotDisposed();
    let numDisposedVariables = 0;
    if (--this._refCount === 0) {
      numDisposedVariables = this.disposeWeights();
    }
    return {
      refCountAfterDispose: this._refCount,
      numDisposedVariables
    };
  }
}
/**
 * Collects the input shape(s) of a list of `tf.Tensor`s or
 * `tf.SymbolicTensor`s.
 *
 * TODO(michaelterry): Update PyKeras docs (backport).
 *
 * @param inputTensors List of input tensors (or single input tensor).
 *
 * @return List of shape tuples (or single tuple), one tuple per input.
 */
function collectInputShape(inputTensors) {
  inputTensors = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList(inputTensors);
  const shapes = [];
  for (const x of inputTensors) {
    shapes.push(x.shape);
  }
  return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray(shapes);
}
/**
 * Guesses output dtype based on inputs.
 *
 * At present, just returns 'float32' for any input.
 *
 * @param inputTensors List of input tensors (or single input tensor).
 *
 * @return The guessed DType. At present, always returns 'float32'.
 */
function guessOutputDType(inputTensors) {
  return 'float32';
}
/**
 * Returns the list of input tensors necessary to compute `tensor`.
 *
 * Output will always be a list of tensors (potentially with 1 element).
 *
 * @param tensor The tensor to start from.
 * @param layer Origin layer of the tensor.
 * @param nodeIndex Origin node index of the tensor.
 *
 * @return Array of input tensors.
 */
function getSourceInputs(tensor, layer, nodeIndex) {
  if (layer == null || nodeIndex != null && nodeIndex > 0) {
    layer = tensor.sourceLayer;
    nodeIndex = tensor.nodeIndex;
  }
  if (layer.inboundNodes.length === 0) {
    return [tensor];
  } else {
    const node = layer.inboundNodes[nodeIndex];
    if (node.inboundLayers.length === 0) {
      return node.inputTensors;
    } else {
      const sourceTensors = [];
      for (let i = 0; i < node.inboundLayers.length; i++) {
        const x = node.inputTensors[i];
        const layer = node.inboundLayers[i];
        const nodeIndex = node.nodeIndices[i];
        const previousSources = getSourceInputs(x, layer, nodeIndex);
        // Avoid input redundancy.
        for (const x of previousSources) {
          if (sourceTensors.indexOf(x) === -1) {
            sourceTensors.push(x);
          }
        }
      }
      return sourceTensors;
    }
  }
}

/***/ }),

/***/ 64970:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Functional": () => (/* binding */ Functional),
/* harmony export */   "LayersModel": () => (/* binding */ LayersModel),
/* harmony export */   "checkArrayLengths": () => (/* binding */ checkArrayLengths),
/* harmony export */   "collectMetrics": () => (/* binding */ collectMetrics),
/* harmony export */   "isDataArray": () => (/* binding */ isDataArray),
/* harmony export */   "isDataDict": () => (/* binding */ isDataDict),
/* harmony export */   "isDataTensor": () => (/* binding */ isDataTensor),
/* harmony export */   "standardizeInputData": () => (/* binding */ standardizeInputData)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _base_callbacks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base_callbacks */ 52043);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _layers_serialization__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../layers/serialization */ 49796);
/* harmony import */ var _logs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../logs */ 15878);
/* harmony import */ var _losses__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../losses */ 56648);
/* harmony import */ var _metrics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../metrics */ 69384);
/* harmony import */ var _optimizers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../optimizers */ 9478);
/* harmony import */ var _user_defined_metadata__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../user_defined_metadata */ 15360);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_layer_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/layer_utils */ 46246);
/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/math_utils */ 96821);
/* harmony import */ var _utils_serialization_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/serialization_utils */ 83903);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../version */ 21378);
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./container */ 75227);
/* harmony import */ var _executor__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./executor */ 10598);
/* harmony import */ var _training_dataset__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./training_dataset */ 44580);
/* harmony import */ var _training_tensors__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./training_tensors */ 83880);
/* harmony import */ var _training_utils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./training_utils */ 55029);

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original Source: engine/training.py */






















/**
 * Helper function for polymorphic input data: 1. singleton Tensor.
 */
function isDataTensor(x) {
  return x instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor;
}
/**
 * Helper function for polymorphic input data: 2. Array of Tensor.
 */
function isDataArray(x) {
  return Array.isArray(x);
}
/**
 * Helper function for polymorphic input data: 3. "dict" of Tensor.
 */
function isDataDict(x) {
  return !isDataTensor(x) && !isDataArray(x);
}
/**
 * Normalizes inputs and targets provided by users.
 * @param data User-provided input data (polymorphic).
 * @param names An Array of expected Tensor names.
 * @param shapes Optional Array of expected Tensor shapes.
 * @param checkBatchAxis Whether to check that the batch axis of the arrays
 *   match  the expected value found in `shapes`.
 * @param exceptionPrefix String prefix used for exception formatting.
 * @returns List of standardized input Tensors (one Tensor per model input).
 * @throws ValueError: in case of improperly formatted user data.
 */
function standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {
  if (names == null || names.length === 0) {
    // Check for the case where the model expected no data, but some data got
    // sent.
    if (data != null) {
      let gotUnexpectedData = false;
      if (isDataArray(data) && data.length > 0) {
        gotUnexpectedData = true;
      } else if (isDataDict(data)) {
        for (const key in data) {
          if (data.hasOwnProperty(key)) {
            gotUnexpectedData = true;
            break;
          }
        }
      } else {
        // `data` is a singleton Tensor in this case.
        gotUnexpectedData = true;
      }
      if (gotUnexpectedData) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Error when checking model ${exceptionPrefix} expected no data, ` + `but got ${data}`);
      }
    }
    return [];
  }
  if (data == null) {
    return names.map(name => null);
  }
  let arrays;
  if (isDataDict(data)) {
    data = data;
    arrays = [];
    for (const name of names) {
      if (data[name] == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`No data provided for "${name}". Need data for each key in: ` + `${names}`);
      }
      arrays.push(data[name]);
    }
  } else if (isDataArray(data)) {
    data = data;
    if (data.length !== names.length) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `model expected. Expected to see ${names.length} Tensor(s), but ` + `instead got the following list of Tensor(s): ${data}`);
    }
    arrays = data;
  } else {
    data = data;
    if (names.length > 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` + `but only received one Tensor. Found: Tensor with shape ${data.shape}`);
    }
    arrays = [data];
  }
  arrays = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.ensureTensorsRank2OrHigher)(arrays);
  // Check shape compatibility.
  if (shapes != null) {
    for (let i = 0; i < names.length; ++i) {
      if (shapes[i] == null) {
        continue;
      }
      const array = arrays[i];
      if (array.shape.length !== shapes[i].length) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s). but got array with ` + `shape ${array.shape}`);
      }
      for (let j = 0; j < shapes[i].length; ++j) {
        if (j === 0 && !checkBatchAxis) {
          // Skip the first (batch) axis.
          continue;
        }
        const dim = array.shape[j];
        const refDim = shapes[i][j];
        if (refDim != null && refDim >= 0 && dim !== refDim) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`${exceptionPrefix} expected a batch of elements where each ` + `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` + `(i.e.,tensor shape [*,${shapes[i].slice(1, shapes[i].length)}])` + ` but the ${exceptionPrefix} received an input with ${array.shape[0]}` + ` examples, each with shape [${array.shape.slice(1, array.shape.length)}]` + ` (tensor shape [${array.shape}])`);
        }
      }
    }
  }
  return arrays;
}
/**
 * User input validation for Tensors.
 * @param inputs `Array` of `tf.Tensor`s for inputs.
 * @param targets `Array` of `tf.Tensor`s for targets.
 * @param weights Optional `Array` of `tf.Tensor`s for sample weights.
 * @throws ValueError: in case of incorrectly formatted data.
 */
function checkArrayLengths(inputs, targets, weights) {
  const setX = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.unique)(inputs.map(input => input.shape[0]));
  setX.sort();
  const setY = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.unique)(targets.map(target => target.shape[0]));
  setY.sort();
  // TODO(cais): Check `weights` as well.
  if (setX.length > 1) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`All input Tensors (x) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(inputs.map(input => input.shape))}`);
  }
  if (setY.length > 1) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`All target Tensors (y) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(targets.map(target => target.shape))}`);
  }
  if (setX.length > 0 && setY.length > 0 && !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.arraysEqual(setX, setY)) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Input Tensors should have the same number of samples as target ` + `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` + `sample(s).`);
  }
}
/**
 * Validation on the compatibility of targes and loss functions.
 *
 * This helps prevent users from using loss functions incorrectly.
 *
 * @param targets `Array` of `tf.Tensor`s of targets.
 * @param lossFns `Array` of loss functions.
 * @param outputShapes `Array` of shapes of model outputs.
 */
function checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {
  // TODO(cais): Dedicated test coverage?
  const keyLosses = [_losses__WEBPACK_IMPORTED_MODULE_8__.meanSquaredError, _losses__WEBPACK_IMPORTED_MODULE_8__.binaryCrossentropy, _losses__WEBPACK_IMPORTED_MODULE_8__.categoricalCrossentropy];
  for (let i = 0; i < targets.length; ++i) {
    const y = targets[i];
    const loss = lossFns[i];
    const shape = outputShapes[i];
    if (loss == null) {
      continue;
    }
    if (loss === _losses__WEBPACK_IMPORTED_MODULE_8__.categoricalCrossentropy) {
      if (y.shape[y.shape.length - 1] === 1) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`You are passing a target array of shape ${y.shape} while using ` + `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` + `expects targets to be binary matrices (1s and 0s) of shape ` + `[samples, classes].`);
        // TODO(cais): Example code in error message.
      }
    }

    if (keyLosses.indexOf(loss) !== -1) {
      const slicedYShape = y.shape.slice(1);
      const slicedShape = shape.slice(1);
      for (let j = 0; j < slicedYShape.length; ++j) {
        const targetDim = slicedYShape[j];
        const outDim = slicedShape[j];
        if (outDim != null && targetDim !== outDim) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`A target Tensor with shape ${y.shape} was passed for an ` + `output of shape ${shape}, while using a loss function that ` + `expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
/**
 * Check inputs provided by the user.
 *
 * Porting Note: This corresponds to _standardize_input_data() in Python
 *   Keras. Because of the strong typing in TF.js, we do not need to convert
 *   the data. Specifically:
 *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for
 *      example. We don't need to worry about that here because there is no
 *      widely popular javascript/typesdcript equivalent of pandas (so far).
 *      If one becomes available in the future, we can add support.
 *   2) in PyKeras, inputs can be Python dict. But here we are stipulating
 * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We
 * may add support for `Object` data inputs in the future when the need
 * arises.
 *
 * Instead, we perform basic checks for number of parameters and shapes.
 *
 * @param data: The input data.
 * @param names: Name for the inputs, from the model.
 * @param shapes: Expected shapes for the input data, from the model.
 * @param checkBatchAxis: Whether the size along the batch axis (i.e., the
 *   first dimension) will be checked for matching.
 * @param exceptionPrefix: Execption prefix message, used in generating error
 *   messages.
 * @throws ValueError: on incorrect number of inputs or mismatches in shapes.
 */
function checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {
  let arrays;
  if (Array.isArray(data)) {
    if (data.length !== names.length) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `the model expected. Expected to see ${names.length} Tensor(s),` + ` but instead got ${data.length} Tensors(s).`);
    }
    arrays = data;
  } else {
    if (names.length > 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` + `but only received one Tensor. Found: array with shape ` + `${JSON.stringify(data.shape)}.`);
    }
    arrays = [data];
  }
  if (shapes != null) {
    for (let i = 0; i < names.length; ++i) {
      if (shapes[i] == null) {
        continue;
      }
      const array = arrays[i];
      if (array.shape.length !== shapes[i].length) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s), but got array with ` + `shape ${JSON.stringify(array.shape)}`);
      }
      for (let j = 0; j < shapes[i].length; ++j) {
        if (j === 0 && !checkBatchAxis) {
          continue;
        }
        const dim = array.shape[j];
        const refDim = shapes[i][j];
        if (refDim != null) {
          if (refDim !== dim) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Error when checking ${exceptionPrefix}: expected ` + `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` + `got array with shape ${JSON.stringify(array.shape)}.`);
          }
        }
      }
    }
  }
}
/**
 * Maps metric functions to model outputs.
 * @param metrics An shortcut strings name, metric function, `Array` or dict
 *   (`Object`) of metric functions.
 * @param outputNames An `Array` of the names of model outputs.
 * @returns An `Array` (one entry per model output) of `Array` of metric
 *   functions. For instance, if the model has 2 outputs, and for the first
 *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,
 *   and just `binaryAccuracy` for the second output, the `Array` would look
 *   like:
 *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`
 * @throws TypeError: incompatible metrics format.
 */
function collectMetrics(metrics, outputNames) {
  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {
    return outputNames.map(name => []);
  }
  let wrappedMetrics;
  if (typeof metrics === 'string' || typeof metrics === 'function') {
    wrappedMetrics = [metrics];
  } else if (Array.isArray(metrics) || typeof metrics === 'object') {
    wrappedMetrics = metrics;
  } else {
    throw new TypeError('Type of metrics argument not understood. Expected an string,' + `function, Array, or Object, found: ${metrics}`);
  }
  if (Array.isArray(wrappedMetrics)) {
    // We then apply all metrics to all outputs.
    return outputNames.map(name => wrappedMetrics);
  } else {
    // In this case, metrics is a dict.
    const nestedMetrics = [];
    for (const name of outputNames) {
      let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];
      if (!Array.isArray(outputMetrics)) {
        outputMetrics = [outputMetrics];
      }
      nestedMetrics.push(outputMetrics);
    }
    return nestedMetrics;
  }
}
const LAYERS_MODEL_FORMAT_NAME = 'layers-model';
/**
 * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods
 * for training, evaluation, prediction and saving.
 *
 * `tf.LayersModel` is the basic unit of training, inference and evaluation in
 * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.
 *
 * See also:
 *   `tf.Sequential`, `tf.loadLayersModel`.
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */
class LayersModel extends _container__WEBPACK_IMPORTED_MODULE_17__.Container {
  constructor(args) {
    super(args);
    this.isTraining = false;
  }
  /**
   * Print a text summary of the model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - If the model has non-sequential-like topology, the inputs each layer
   *   receives
   * - The total number of trainable and non-trainable parameters of the model.
   *
   * ```js
   * const input1 = tf.input({shape: [10]});
   * const input2 = tf.input({shape: [20]});
   * const dense1 = tf.layers.dense({units: 4}).apply(input1);
   * const dense2 = tf.layers.dense({units: 8}).apply(input2);
   * const concat = tf.layers.concatenate().apply([dense1, dense2]);
   * const output =
   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
   *
   * const model = tf.model({inputs: [input1, input2], outputs: output});
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(lineLength, positions, printFn = console.log) {
    if (!this.built) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`This model has never been called, thus its weights have not been ` + `created yet. So no summary can be displayed. Build the model ` + `first (e.g., by calling it on some test data).`);
    }
    (0,_utils_layer_utils__WEBPACK_IMPORTED_MODULE_13__.printSummary)(this, lineLength, positions, printFn);
  }
  /**
   * Configures and prepares the model for training and evaluation.  Compiling
   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
   * or `evaluate` on an un-compiled model will throw an error.
   *
   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
   * metrics to be used for fitting and evaluating this model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  compile(args) {
    if (args.loss == null) {
      args.loss = [];
    }
    this.loss = args.loss;
    if (typeof args.optimizer === 'string') {
      this.optimizer_ = _optimizers__WEBPACK_IMPORTED_MODULE_10__.getOptimizer(args.optimizer);
      this.isOptimizerOwned = true;
    } else {
      if (!(args.optimizer instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Optimizer)) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`User-defined optimizer must be an instance of tf.Optimizer.`);
      }
      this.optimizer_ = args.optimizer;
      this.isOptimizerOwned = false;
    }
    // TODO(cais): Add lossWeights.
    // TODO(cais): Add sampleWeightMode.
    // Prepare loss functions.
    let lossFunctions = [];
    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' && typeof args.loss !== 'function') {
      args.loss = args.loss;
      for (const name in args.loss) {
        if (this.outputNames.indexOf(name) === -1) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Unknown entry in loss dictionary: "${name}". ` + `Only expected the following keys: ${this.outputNames}`);
        }
      }
      for (const name of this.outputNames) {
        if (args.loss[name] == null) {
          console.warn(`Output "${name}" is missing from loss dictionary. We assume ` + `this was done on purpose, and we will not be expecting data ` + `to be passed to ${name} during training`);
        }
        lossFunctions.push(_losses__WEBPACK_IMPORTED_MODULE_8__.get(args.loss[name]));
      }
    } else if (Array.isArray(args.loss)) {
      if (args.loss.length !== this.outputs.length) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`When passing an Array as loss, it should have one entry per ` + `model output. The model has ${this.outputs.length} output(s), ` + `but you passed loss=${args.loss}.`);
      }
      const theLosses = args.loss;
      lossFunctions = theLosses.map(l => _losses__WEBPACK_IMPORTED_MODULE_8__.get(l));
    } else {
      const lossFunction = _losses__WEBPACK_IMPORTED_MODULE_8__.get(args.loss);
      this.outputs.forEach(_ => {
        lossFunctions.push(lossFunction);
      });
    }
    this.lossFunctions = lossFunctions;
    this.feedOutputNames = [];
    this.feedOutputShapes = [];
    this.feedLossFns = [];
    for (let i = 0; i < this.outputs.length; ++i) {
      // TODO(cais): Logic for skipping target(s).
      const shape = this.internalOutputShapes[i];
      const name = this.outputNames[i];
      this.feedOutputNames.push(name);
      this.feedOutputShapes.push(shape);
      this.feedLossFns.push(this.lossFunctions[i]);
    }
    // TODO(cais): Add logic for output masks.
    // TODO(cais): Add logic for sample weights.
    const skipTargetIndices = [];
    // Prepare metrics.
    this.metrics = args.metrics;
    // TODO(cais): Add weightedMetrics.
    this.metricsNames = ['loss'];
    this.metricsTensors = [];
    // Compute total loss.
    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.
    //   Here, metricsTensors are TypeScript functions. This difference is due
    //   to the difference in symbolic/imperative property of the backends.
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.nameScope)('loss', () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (skipTargetIndices.indexOf(i) !== -1) {
          continue;
        }
        // TODO(cais): Add weightedLoss, sampleWeight and mask.
        //   The following line should be weightedLoss
        const weightedLoss = this.lossFunctions[i];
        if (this.outputs.length > 1) {
          this.metricsTensors.push([weightedLoss, i]);
          this.metricsNames.push(this.outputNames[i] + '_loss');
        }
      }
      // Porting Note: Due to the imperative nature of the backend, we calculate
      //   the regularizer penalties in the totalLossFunction, instead of here.
    });

    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);
    // TODO(cais): Add nestedWeightedMetrics.
    /**
     * Helper function used in loop below.
     */
    const appendMetric = (outputIndex, metricName, metricTensor) => {
      if (this.outputNames.length > 1) {
        metricName = this.outputNames[outputIndex] + '_' + metricName;
      }
      this.metricsNames.push(metricName);
      this.metricsTensors.push([metricTensor, outputIndex]);
    };
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.nameScope)('metric', () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (skipTargetIndices.indexOf(i) !== -1) {
          continue;
        }
        const outputMetrics = nestedMetrics[i];
        // TODO(cais): Add weights and outputWeightedMetrics.
        // TODO(cais): Add optional arg `weights` to the following function.
        const handleMetrics = metrics => {
          const metricNamePrefix = '';
          let metricName;
          let accFn;
          let weightedMetricFn;
          //  TODO(cais): Use 'weights_' for weighted metrics.
          for (const metric of metrics) {
            if (typeof metric === 'string' && ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !== -1) {
              const outputShape = this.internalOutputShapes[i];
              if (outputShape[outputShape.length - 1] === 1 || this.lossFunctions[i] === _losses__WEBPACK_IMPORTED_MODULE_8__.binaryCrossentropy) {
                // case: binary accuracy/crossentropy.
                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                  accFn = _metrics__WEBPACK_IMPORTED_MODULE_9__.binaryAccuracy;
                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                  accFn = _metrics__WEBPACK_IMPORTED_MODULE_9__.binaryCrossentropy;
                }
              } else if (this.lossFunctions[i] === _losses__WEBPACK_IMPORTED_MODULE_8__.sparseCategoricalCrossentropy) {
                // case: categorical accuracy / crossentropy with sparse
                // targets.
                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                  accFn = _metrics__WEBPACK_IMPORTED_MODULE_9__.sparseCategoricalAccuracy;
                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                  accFn = _metrics__WEBPACK_IMPORTED_MODULE_9__.sparseCategoricalCrossentropy;
                }
              } else {
                // case: categorical accuracy / crossentropy.
                if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                  accFn = _metrics__WEBPACK_IMPORTED_MODULE_9__.categoricalAccuracy;
                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                  accFn = _metrics__WEBPACK_IMPORTED_MODULE_9__.categoricalCrossentropy;
                }
              }
              let suffix;
              if (['accuracy', 'acc'].indexOf(metric) !== -1) {
                suffix = 'acc';
              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {
                suffix = 'ce';
              }
              // TODO(cais): Add weighting actually.
              weightedMetricFn = accFn;
              metricName = metricNamePrefix + suffix;
            } else {
              const metricFn = _metrics__WEBPACK_IMPORTED_MODULE_9__.get(metric);
              // TODO(cais): Add weighting actually.
              weightedMetricFn = metricFn;
              metricName = metricNamePrefix + _metrics__WEBPACK_IMPORTED_MODULE_9__.getLossOrMetricName(metric);
            }
            // TODO(cais): Add weighting and masking to metricResult.
            let metricResult;
            (0,_common__WEBPACK_IMPORTED_MODULE_4__.nameScope)(metricName, () => {
              metricResult = weightedMetricFn;
            });
            appendMetric(i, metricName, metricResult);
          }
        };
        handleMetrics(outputMetrics);
        // TODO(cais): Call handleMetrics with weights.
      }
    });
    // Porting Notes: Given the imperative backend of tfjs-core,
    //   there is no need for constructing the symbolic graph and placeholders.
    this.collectedTrainableWeights = this.trainableWeights;
  }
  /**
   * Check trainable weights count consistency.
   *
   * This will raise a warning if `this.trainableWeights` and
   * `this.collectedTrainableWeights` are inconsistent (i.e., have different
   * numbers of parameters).
   * Inconsistency will typically arise when one modifies `model.trainable`
   * without calling `model.compile()` again.
   */
  checkTrainableWeightsConsistency() {
    if (this.collectedTrainableWeights == null) {
      return;
    }
    if (this.trainableWeights.length !== this.collectedTrainableWeights.length) {
      console.warn('Discrepancy between trainableweights and collected trainable ' + 'weights. Did you set `model.trainable` without calling ' + '`model.compile()` afterwards?');
    }
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(
   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateArgs`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(x, y, args = {}) {
    const batchSize = args.batchSize == null ? 32 : args.batchSize;
    (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.checkBatchSize)(batchSize);
    // TODO(cais): Standardize `config.sampleWeights` as well.
    // Validate user data.
    const checkBatchAxis = true;
    const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);
    try {
      // TODO(cais): If uses `useLearningPhase`, set the corresponding element
      // of the input to 0.
      const ins = standardizedOuts[0].concat(standardizedOuts[1]);
      this.makeTestFunction();
      const f = this.testFunction;
      const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);
      return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.singletonOrArray)(testOuts);
    } finally {
      (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(standardizedOuts[0], x);
      (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(standardizedOuts[1], y);
    }
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluateDataset(dataset, args) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.makeTestFunction();
      return (0,_training_dataset__WEBPACK_IMPORTED_MODULE_19__.evaluateDataset)(_this, dataset, args);
    })();
  }
  /**
   * Get number of samples provided for training, evaluation or prediction.
   *
   * @param ins Input `tf.Tensor`.
   * @param batchSize Integer batch size, optional.
   * @param steps Total number of steps (batches of samples) before
   * declaring loop finished. Optional.
   * @param stepsName The public API's parameter name for `steps`.
   * @returns Number of samples provided.
   */
  checkNumSamples(ins, batchSize, steps, stepsName = 'steps') {
    let numSamples;
    if (steps != null) {
      numSamples = null;
      if (batchSize != null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`If ${stepsName} is set, batchSize must be null or undefined.` + `Got batchSize = ${batchSize}`);
      }
    } else if (ins != null) {
      if (Array.isArray(ins)) {
        numSamples = ins[0].shape[0];
      } else {
        numSamples = ins.shape[0];
      }
    } else {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Either the input data should have a defined shape, or ` + `${stepsName} shoud be specified.`);
    }
    return numSamples;
  }
  /**
   * Execute internal tensors of the model with input data feed.
   * @param inputs Input data feed. Must match the inputs of the model.
   * @param outputs Names of the output tensors to be fetched. Must match
   *   names of the SymbolicTensors that belong to the graph.
   * @returns Fetched values for `outputs`.
   */
  execute(inputs, outputs) {
    if (Array.isArray(outputs) && outputs.length === 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError('`outputs` is an empty Array, which is not allowed.');
    }
    const outputsIsArray = Array.isArray(outputs);
    const outputNames = outputsIsArray ? outputs : [outputs];
    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);
    // Format the input into a FeedDict.
    const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_18__.FeedDict();
    if (inputs instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
      inputs = [inputs];
    }
    if (Array.isArray(inputs)) {
      if (inputs.length !== this.inputs.length) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`The number of inputs provided (${inputs.length}) ` + `does not match the number of inputs of this model ` + `(${this.inputs.length}).`);
      }
      for (let i = 0; i < this.inputs.length; ++i) {
        feedDict.add(this.inputs[i], inputs[i]);
      }
    } else {
      for (const input of this.inputs) {
        const tensorValue = inputs[input.name];
        if (tensorValue == null) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`No value is provided for the model's input ${input.name}`);
        }
        feedDict.add(input, tensorValue);
      }
    }
    // Run execution.
    const executeOutputs = (0,_executor__WEBPACK_IMPORTED_MODULE_18__.execute)(outputSymbolicTensors, feedDict);
    return outputsIsArray ? executeOutputs : executeOutputs[0];
  }
  /**
   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
   */
  retrieveSymbolicTensors(symbolicTensorNames) {
    const outputSymbolicTensors = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.pyListRepeat)(null, symbolicTensorNames.length);
    let outputsRemaining = symbolicTensorNames.length;
    for (const layer of this.layers) {
      const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];
      const layerOutputNames = layerOutputs.map(output => output.name);
      for (let i = 0; i < symbolicTensorNames.length; ++i) {
        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);
        if (index !== -1) {
          outputSymbolicTensors[i] = layerOutputs[index];
          outputsRemaining--;
        }
        if (outputsRemaining === 0) {
          break;
        }
      }
      if (outputsRemaining === 0) {
        break;
      }
    }
    if (outputsRemaining > 0) {
      const remainingNames = [];
      outputSymbolicTensors.forEach((tensor, i) => {
        if (tensor == null) {
          remainingNames.push(symbolicTensorNames[i]);
        }
      });
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Cannot find SymbolicTensors for output name(s): ` + `${JSON.stringify(remainingNames)}`);
    }
    return outputSymbolicTensors;
  }
  /**
   * Helper method to loop over some data in batches.
   *
   * Porting Note: Not using the functional approach in the Python equivalent
   *   due to the imperative backend.
   * Porting Note: Does not support step mode currently.
   *
   * @param ins: input data
   * @param batchSize: integer batch size.
   * @param verbose: verbosity model
   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
   *   `tf.Tensor` (if multipe outputs).
   */
  predictLoop(ins, batchSize = 32, verbose = false) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => {
      const numSamples = this.checkNumSamples(ins);
      if (verbose) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError('Verbose predictLoop() is not implemented yet.');
      }
      // Sample-based predictions.
      // Porting Note: Tensor currently does not support sliced assignments as
      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while
      //   iterating over the batches.
      const batches = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.makeBatches)(numSamples, batchSize);
      const outsBatches = this.outputs.map(output => []);
      // TODO(cais): Can the scope() be pushed down inside the for loop?
      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {
        const batchOuts = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => {
          const batchStart = batches[batchIndex][0];
          const batchEnd = batches[batchIndex][1];
          // TODO(cais): Take care of the case of the last element is a flag for
          //   training/test.
          const insBatch = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.sliceArrays)(ins, batchStart, batchEnd);
          // Construct the feeds for execute();
          const feeds = [];
          if (Array.isArray(insBatch)) {
            for (let i = 0; i < insBatch.length; ++i) {
              feeds.push({
                key: this.inputs[i],
                value: insBatch[i]
              });
            }
          } else {
            feeds.push({
              key: this.inputs[0],
              value: insBatch
            });
          }
          const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_18__.FeedDict(feeds);
          return (0,_executor__WEBPACK_IMPORTED_MODULE_18__.execute)(this.outputs, feedDict);
        });
        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));
      }
      return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.singletonOrArray)(outsBatches.map(batches => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.concat(batches, 0)));
    });
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param args A `ModelPredictArgs` object containing optional fields.
   *
   * @return Prediction results as a `tf.Tensor`(s).
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(x, args = {}) {
    const xsRank2OrHigher = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.ensureTensorsRank2OrHigher)(x);
    checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);
    try {
      // TODO(cais): Take care of stateful models.
      //   if (this.stateful) ...
      // TODO(cais): Take care of the learning_phase boolean flag.
      //   if (this.useLearningPhase) ...
      const batchSize = args.batchSize == null ? 32 : args.batchSize;
      (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.checkBatchSize)(batchSize);
      return this.predictLoop(xsRank2OrHigher, batchSize);
    } finally {
      (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(xsRank2OrHigher, x);
    }
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predictOnBatch(tf.ones([8, 10])).print();
   * ```
   * @param x: Input samples, as a Tensor (for models with exactly one
   *   input) or an array of Tensors (for models with more than one input).
   * @return Tensor(s) of predictions
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predictOnBatch(x) {
    checkInputData(x, this.inputNames, this.feedInputShapes, true);
    // TODO(cais): Take care of the learning_phase boolean flag.
    //   if (this.useLearningPhase) ...
    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];
    return this.predictLoop(x, batchSize);
  }
  standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {
    // TODO(cais): Add sampleWeight, classWeight
    if (this.optimizer_ == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.RuntimeError('You must compile a model before training/testing. Use ' + 'LayersModel.compile(modelCompileArgs).');
    }
    const outputShapes = [];
    for (let i = 0; i < this.feedOutputShapes.length; ++i) {
      const outputShape = this.feedOutputShapes[i];
      const lossFn = this.feedLossFns[i];
      if (lossFn === _losses__WEBPACK_IMPORTED_MODULE_8__.sparseCategoricalCrossentropy) {
        outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));
      } else {
        // Porting Note: Because of strong typing `lossFn` must be a function.
        outputShapes.push(outputShape);
      }
    }
    x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');
    y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');
    // TODO(cais): Standardize sampleWeights & classWeights.
    checkArrayLengths(x, y, null);
    // TODO(cais): Check sampleWeights as well.
    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);
    if (this.stateful && batchSize != null && batchSize > 0) {
      if (x[0].shape[0] % batchSize !== 0) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`In a stateful network, you should only pass inputs with a ` + `number of samples that is divisible by the batch size ` + `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);
      }
    }
    return [x, y];
  }
  standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const [standardXs, standardYs] = _this2.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);
      // TODO(cais): Handle sampleWeights.
      if (sampleWeight != null) {
        throw new Error('sample weight is not supported yet.');
      }
      let standardSampleWeights = null;
      if (classWeight != null) {
        const classWeights = (0,_training_utils__WEBPACK_IMPORTED_MODULE_21__.standardizeClassWeights)(classWeight, _this2.outputNames);
        standardSampleWeights = [];
        for (let i = 0; i < classWeights.length; ++i) {
          standardSampleWeights.push(yield (0,_training_utils__WEBPACK_IMPORTED_MODULE_21__.standardizeWeights)(standardYs[i], null, classWeights[i]));
        }
      }
      // TODO(cais): Deal with the case of model.stateful == true.
      return [standardXs, standardYs, standardSampleWeights];
    })();
  }
  /**
   * Loop over some test data in batches.
   * @param f A Function returning a list of tensors.
   * @param ins Array of tensors to be fed to `f`.
   * @param batchSize Integer batch size or `null` / `undefined`.
   * @param verbose verbosity mode.
   * @param steps Total number of steps (batches of samples) before
   * declaring test finished. Ignored with the default value of `null` /
   * `undefined`.
   * @returns Array of Scalars.
   */
  testLoop(f, ins, batchSize, verbose = 0, steps) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => {
      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');
      const outs = [];
      if (verbose > 0) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError('Verbose mode is not implemented yet.');
      }
      // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.
      if (steps != null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError('steps mode in testLoop() is not implemented yet');
      } else {
        const batches = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.makeBatches)(numSamples, batchSize);
        const indexArray = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor1d)((0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_14__.range)(0, numSamples));
        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {
          const batchStart = batches[batchIndex][0];
          const batchEnd = batches[batchIndex][1];
          const batchIds = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);
          // TODO(cais): In ins, train flag can be a number, instead of an
          //   Tensor? Do we need to handle this in tfjs-layers?
          const insBatch = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.sliceArraysByIndices)(ins, batchIds);
          const batchOuts = f(insBatch);
          if (batchIndex === 0) {
            for (let i = 0; i < batchOuts.length; ++i) {
              outs.push((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.scalar)(0));
            }
          }
          for (let i = 0; i < batchOuts.length; ++i) {
            const batchOut = batchOuts[i];
            outs[i] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add(outs[i], _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul(batchEnd - batchStart, batchOut));
          }
        }
        for (let i = 0; i < outs.length; ++i) {
          outs[i] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div(outs[i], numSamples);
        }
      }
      return outs;
    });
  }
  getDedupedMetricsNames() {
    const outLabels = this.metricsNames;
    // Rename duplicated metrics names (can happen with an output layer
    // shared among multiple dataflows).
    const dedupedOutLabels = [];
    for (let i = 0; i < outLabels.length; ++i) {
      const label = outLabels[i];
      let newLabel = label;
      if ((0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.count)(outLabels, label) > 1) {
        const dupIndex = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.count)(outLabels.slice(0, i), label);
        newLabel += `_${dupIndex}`;
      }
      dedupedOutLabels.push(newLabel);
    }
    return dedupedOutLabels;
  }
  /**
   * Creates a function that performs the following actions:
   *
   * 1. computes the losses
   * 2. sums them to get the total loss
   * 3. call the optimizer computes the gradients of the LayersModel's
   *    trainable weights w.r.t. the total loss and update the variables
   * 4. calculates the metrics
   * 5. returns the values of the losses and metrics.
   */
  makeTrainFunction() {
    return data => {
      const lossValues = [];
      const inputs = data.slice(0, this.inputs.length);
      const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);
      const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);
      const metricsValues = [];
      // Create a function that computes the total loss based on the
      // inputs. This function is used for obtaining gradients through
      // backprop.
      const totalLossFunction = () => {
        const feeds = [];
        for (let i = 0; i < this.inputs.length; ++i) {
          feeds.push({
            key: this.inputs[i],
            value: inputs[i]
          });
        }
        const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_18__.FeedDict(feeds);
        const outputs = (0,_executor__WEBPACK_IMPORTED_MODULE_18__.execute)(this.outputs, feedDict, {
          'training': true
        });
        // TODO(cais): Take care of the case of multiple outputs from a
        //   single layer?
        let totalLoss;
        for (let i = 0; i < this.lossFunctions.length; ++i) {
          const lossFunction = this.lossFunctions[i];
          let loss = lossFunction(targets[i], outputs[i]);
          if (sampleWeights[i] != null) {
            loss = (0,_training_utils__WEBPACK_IMPORTED_MODULE_21__.computeWeightedLoss)(loss, sampleWeights[i]);
          }
          // TODO(cais): push Scalar instead.
          const meanLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mean(loss);
          // TODO(cais): Use a scope() instead, to avoid ownership.
          lossValues.push(meanLoss);
          if (i === 0) {
            totalLoss = loss;
          } else {
            totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add(totalLoss, loss);
          }
        }
        // Compute the metrics.
        // TODO(cais): These should probably be calculated outside
        //   totalLossFunction to benefit speed?
        for (let i = 0; i < this.metricsTensors.length; ++i) {
          let weightedMetric;
          if (this.outputs.length > 1 && i < this.outputs.length) {
            weightedMetric = lossValues[i];
          } else {
            const metric = this.metricsTensors[i][0];
            const outputIndex = this.metricsTensors[i][1];
            weightedMetric = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mean(metric(targets[outputIndex], outputs[outputIndex]));
          }
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep(weightedMetric);
          // TODO(cais): Use a scope() instead, to avoid ownership.
          metricsValues.push(weightedMetric);
        }
        totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mean(totalLoss);
        // Add regularizer penalties.
        this.calculateLosses().forEach(regularizerLoss => {
          totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add(totalLoss, regularizerLoss);
        });
        return totalLoss;
      };
      const variables = this.collectedTrainableWeights.map(param => param.read());
      const returnCost = true;
      const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);
      return [totalLossValue].concat(metricsValues);
    };
  }
  /**
   * Create a function which, when invoked with an array of `tf.Tensor`s as a
   * batch of inputs, returns the prespecified loss and metrics of the model
   * under the batch of input data.
   */
  makeTestFunction() {
    this.testFunction = data => {
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => {
        const valOutputs = [];
        let totalLoss;
        const inputs = data.slice(0, this.inputs.length);
        const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);
        const feeds = [];
        for (let i = 0; i < this.inputs.length; ++i) {
          feeds.push({
            key: this.inputs[i],
            value: inputs[i]
          });
        }
        const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_18__.FeedDict(feeds);
        const outputs = (0,_executor__WEBPACK_IMPORTED_MODULE_18__.execute)(this.outputs, feedDict);
        // Compute total loss.
        for (let i = 0; i < this.lossFunctions.length; ++i) {
          const lossFunction = this.lossFunctions[i];
          // TODO(cais): Add sample weighting and replace the simple
          // averaging.
          const loss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mean(lossFunction(targets[i], outputs[i]));
          if (i === 0) {
            totalLoss = loss;
          } else {
            totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add(totalLoss, loss);
          }
          valOutputs.push(totalLoss);
        }
        // Compute the metrics.
        for (let i = 0; i < this.metricsTensors.length; ++i) {
          const metric = this.metricsTensors[i][0];
          const outputIndex = this.metricsTensors[i][1];
          // TODO(cais): Replace K.mean() with a proper weighting function.
          const meanMetric = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mean(metric(targets[outputIndex], outputs[outputIndex]));
          valOutputs.push(meanMetric);
        }
        return valOutputs;
      });
    };
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a
   * dataset).
   *
   * ```js
   * const model = tf.sequential({
   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * for (let i = 1; i < 5 ; ++i) {
   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *       batchSize: 4,
   *       epochs: 3
   *   });
   *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
   * }
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you
   * can also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named,
   * you can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args A `ModelFitArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input
   * data and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  fit(x, y, args = {}) {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this3.isTraining) {
        throw new Error('Cannot start training because another fit() call is ongoing.');
      }
      _this3.isTraining = true;
      let inputs;
      let targets;
      let originalInputs;
      let originalTargets;
      let inputValX;
      let inputValY;
      let valX;
      let valY;
      let sampleWeights;
      try {
        const batchSize = args.batchSize == null ? 32 : args.batchSize;
        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.checkBatchSize)(batchSize);
        // Validate user data.
        // TODO(cais): Support sampleWeight.
        const checkBatchAxis = false;
        const standardizedOuts = yield _this3.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);
        inputs = standardizedOuts[0];
        targets = standardizedOuts[1];
        sampleWeights = standardizedOuts[2];
        // Prepare validation data.
        let doValidation = false;
        let valIns;
        if (args.validationData != null && args.validationData.length > 0) {
          doValidation = true;
          if (args.validationData.length === 2) {
            // config.validationData consists of valX and valY.
            inputValX = args.validationData[0];
            inputValY = args.validationData[1];
          } else if (args.validationData.length === 3) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError('validationData including sample weights is not supported yet.');
          } else {
            throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`When passing validation data, it must contain 2 (valX, valY) ` + `or 3 (valX, valY, valSampleWeight) items; ` + `${args.validationData} is invalid.`);
          }
          const checkBatchAxis = true;
          const valStandardized = yield _this3.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */null, /** Unused class weights. */checkBatchAxis, batchSize);
          valX = valStandardized[0];
          valY = valStandardized[1];
          valIns = valX.concat(valY);
          // TODO(cais): Add useLearningPhase data properly.
        } else if (args.validationSplit != null && args.validationSplit > 0 && args.validationSplit < 1) {
          doValidation = true;
          // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.
          const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));
          const originalBatchSize = inputs[0].shape[0];
          valX = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.sliceArrays)(inputs, splitAt, originalBatchSize);
          originalInputs = inputs;
          inputs = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.sliceArrays)(inputs, 0, splitAt);
          valY = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.sliceArrays)(targets, splitAt, originalBatchSize);
          originalTargets = targets;
          targets = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.sliceArrays)(targets, 0, splitAt);
          // TODO(cais): Once sampleWeights becomes available, slice it to get
          //   valSampleWeights.
          valIns = valX.concat(valY);
          // TODO(cais): Add useLearningPhase data properly.
        } else if (args.validationSteps != null) {
          doValidation = true;
          // TODO(cais): Add useLearningPhase.
        }

        const ins = inputs.concat(targets).concat(sampleWeights);
        _this3.checkTrainableWeightsConsistency();
        // TODO(cais): Handle use_learning_phase and learning_phase?
        // Porting Note: Here we see a key deviation of tfjs-layers from
        // Keras.
        //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),
        //  we do not construct symbolic computation graphs to embody the
        //  training process. Instead, we define a function that performs the
        //  training action. In PyKeras, the data (inputs and targets) are fed
        //  through graph placeholders. In tfjs-layers, the data are fed as
        //  function arguments. Since the function are defined below in the
        //  scope, we don't have equivalents of PyKeras's
        //  `_make_train_funciton`.
        const trainFunction = _this3.makeTrainFunction();
        const outLabels = _this3.getDedupedMetricsNames();
        let valFunction;
        let callbackMetrics;
        if (doValidation) {
          _this3.makeTestFunction();
          valFunction = _this3.testFunction;
          callbackMetrics = outLabels.slice().concat(outLabels.map(n => 'val_' + n));
        } else {
          valFunction = null;
          valIns = [];
          callbackMetrics = outLabels.slice();
        }
        const callbacks = (0,_base_callbacks__WEBPACK_IMPORTED_MODULE_3__.standardizeCallbacks)(args.callbacks, args.yieldEvery);
        const out = yield _this3.fitLoop(trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);
        return out;
      } finally {
        _this3.isTraining = false;
        // Memory clean up.
        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(inputs, x);
        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(targets, y);
        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(originalInputs, x);
        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(originalTargets, y);
        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(valX, inputValX);
        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(valY, inputValY);
        if (sampleWeights != null) {
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(sampleWeights);
        }
      }
      // TODO(cais): Add value to outLabels.
    })();
  }
  /**
   * Abstract fit function for `f(ins)`.
   * @param f A Function returning a list of tensors. For training, this
   *   function is expected to perform the updates to the variables.
   * @param ins List of tensors to be fed to `f`.
   * @param outLabels List of strings, display names of the outputs of `f`.
   * @param batchSize Integer batch size or `== null` if unknown. Default : 32.
   * @param epochs Number of times to iterate over the data. Default : 1.
   * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.
   * @param callbacks List of callbacks to be called during training.
   * @param valF Function to call for validation.
   * @param valIns List of tensors to be fed to `valF`.
   * @param shuffle Whether to shuffle the data at the beginning of every
   * epoch. Default : true.
   * @param callbackMetrics List of strings, the display names of the metrics
   *   passed to the callbacks. They should be the concatenation of the
   *   display names of the outputs of `f` and the list of display names
   *   of the outputs of `valF`.
   * @param initialEpoch Epoch at which to start training (useful for
   *   resuming a previous training run). Default : 0.
   * @param stepsPerEpoch Total number of steps (batches on samples) before
   *   declaring one epoch finished and starting the next epoch. Ignored with
   *   the default value of `undefined` or `null`.
   * @param validationSteps Number of steps to run validation for (only if
   *   doing validation from data tensors). Not applicable for tfjs-layers.
   * @returns A `History` object.
   */
  fitLoop(f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (batchSize == null) {
        batchSize = 32;
      }
      if (epochs == null) {
        epochs = 1;
      }
      if (shuffle == null) {
        shuffle = true;
      }
      if (initialEpoch == null) {
        initialEpoch = 0;
      }
      // TODO(cais): Change const to let below when implementing validation.
      let doValidation = false;
      if (valF != null && valIns != null) {
        doValidation = true;
        // TODO(cais): verbose message.
      }

      if (validationSteps != null) {
        doValidation = true;
        if (stepsPerEpoch == null) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError('Can only use `validationSteps` when doing step-wise training, ' + 'i.e., `stepsPerEpoch` must be set.');
        }
      }
      const numTrainSamples = _this4.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');
      let indexArray;
      if (numTrainSamples != null) {
        indexArray = (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_14__.range)(0, numTrainSamples);
      }
      if (verbose == null) {
        verbose = 1;
      }
      const {
        callbackList,
        history
      } = (0,_base_callbacks__WEBPACK_IMPORTED_MODULE_3__.configureCallbacks)(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);
      callbackList.setModel(_this4);
      _this4.history = history;
      yield callbackList.onTrainBegin();
      _this4.stopTraining_ = false;
      // TODO(cais): Take care of callbacks.validation_data as in PyKeras.
      // TODO(cais): Pre-convert feeds for performance as in PyKeras.
      for (let epoch = initialEpoch; epoch < epochs; ++epoch) {
        yield callbackList.onEpochBegin(epoch);
        const epochLogs = {};
        if (stepsPerEpoch != null) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError('stepsPerEpoch mode is not implemented yet.');
        } else {
          if (shuffle === 'batch') {
            throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError('batch shuffling is not implemneted' + ' yet');
          } else if (shuffle) {
            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.shuffle(indexArray);
          }
          // Convert the potentially shuffled indices to Tensor1D, to avoid the
          // cost of repeated creation of Array1Ds later on.
          const epochIndexArray1D = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor1d)(indexArray);
          const batches = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.makeBatches)(numTrainSamples, batchSize);
          for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {
            const batchLogs = {};
            yield callbackList.onBatchBegin(batchIndex, batchLogs);
            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => {
              const batchStart = batches[batchIndex][0];
              const batchEnd = batches[batchIndex][1];
              const batchIds = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);
              batchLogs['batch'] = batchIndex;
              batchLogs['size'] = batchEnd - batchStart;
              // TODO(cais): In ins, train flag can be a number, instead of an
              //   Tensor? Do we need to handle this in tfjs-layers?
              const insBatch = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.sliceArraysByIndices)(ins, batchIds);
              const outs = f(insBatch);
              for (let i = 0; i < outLabels.length; ++i) {
                const label = outLabels[i];
                const out = outs[i];
                batchLogs[label] = out;
                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep(out);
                // TODO(cais): Use scope() to avoid ownership.
              }

              if (batchIndex === batches.length - 1) {
                // Last batch.
                if (doValidation) {
                  const valOuts = _this4.testLoop(valF, valIns, batchSize);
                  // Porting Notes: In tfjs-layers, valOuts is always an Array.
                  for (let i = 0; i < outLabels.length; ++i) {
                    const label = outLabels[i];
                    const out = valOuts[i];
                    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep(out);
                    // TODO(cais): Use scope() to avoid ownership.
                    epochLogs['val_' + label] = out;
                  }
                }
              }
            });
            yield callbackList.onBatchEnd(batchIndex, batchLogs);
            (0,_logs__WEBPACK_IMPORTED_MODULE_7__.disposeTensorsInLogs)(batchLogs);
            if (_this4.stopTraining_) {
              break;
            }
            // TODO(cais): return outs as list of Tensor.
          }

          epochIndexArray1D.dispose();
        }
        // TODO(cais): Run validation at the end of the epoch.
        yield callbackList.onEpochEnd(epoch, epochLogs);
        if (_this4.stopTraining_) {
          break;
        }
      }
      yield callbackList.onTrainEnd();
      yield _this4.history.syncData();
      return _this4.history;
    })();
  }
  // TODO(cais): Add code snippet below when it's possible to instantiate
  //   actual dataset objects.
  /**
   * Trains the model using a dataset object.
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for training. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs.
   *   Of the two items in the array, the first is the input feature(s) and
   *   the second is the output target(s).
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  fitDataset(dataset, args) {
    var _this5 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return (0,_training_dataset__WEBPACK_IMPORTED_MODULE_19__.fitDataset)(_this5, dataset, args);
    })();
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  trainOnBatch(x, y) {
    var _this6 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // TODO(cais): Support sampleWeight and classWeight.
      // TODO(cais): Support Dataset objects.
      const standardizeOut = yield _this6.standardizeUserData(x, y);
      const inputs = standardizeOut[0];
      const targets = standardizeOut[1];
      const trainFunction = _this6.makeTrainFunction();
      const losses = trainFunction(inputs.concat(targets));
      const lossValues = [];
      for (const loss of losses) {
        const v = yield loss.data();
        lossValues.push(v[0]);
      }
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(losses);
      (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(standardizeOut[0], x);
      (0,_training_tensors__WEBPACK_IMPORTED_MODULE_20__.disposeNewTensors)(standardizeOut[1], y);
      return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.singletonOrArray)(lossValues);
    })();
  }
  /**
   * Extract weight values of the model.
   *
   * @param config: An instance of `io.SaveConfig`, which specifies
   * model-saving options such as whether only trainable weights are to be
   * saved.
   * @returns A `NamedTensorMap` mapping original weight names (i.e.,
   *   non-uniqueified weight names) to their values.
   */
  getNamedWeights(config) {
    const namedWeights = [];
    const trainableOnly = config != null && config.trainableOnly;
    const weights = trainableOnly ? this.trainableWeights : this.weights;
    const weightValues = this.getWeights(trainableOnly);
    for (let i = 0; i < weights.length; ++i) {
      if (trainableOnly && !weights[i].trainable) {
        // Optionally skip non-trainable weights.
        continue;
      }
      namedWeights.push({
        name: weights[i].originalName,
        tensor: weightValues[i]
      });
    }
    return namedWeights;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const input = tf.input({shape: [10]});
   * const output = tf.layers.dense({units: 1}).apply(input);
   * const model = tf.model({inputs: [input], outputs: [output]});
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10
   * values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(stop) {
    this.stopTraining_ = stop;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(optimizer) {
    if (this.optimizer_ !== optimizer) {
      this.optimizer_ = optimizer;
      this.isOptimizerOwned = false;
    }
  }
  dispose() {
    const result = super.dispose();
    if (result.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const numTensorsBeforeOptmizerDisposal = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.memory().numTensors;
      this.optimizer_.dispose();
      result.numDisposedVariables += numTensorsBeforeOptmizerDisposal - _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.memory().numTensors;
    }
    return result;
  }
  getLossIdentifiers() {
    let lossNames;
    if (typeof this.loss === 'string') {
      lossNames = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toSnakeCase)(this.loss);
    } else if (Array.isArray(this.loss)) {
      for (const loss of this.loss) {
        if (typeof loss !== 'string') {
          throw new Error('Serialization of non-string loss is not supported.');
        }
      }
      lossNames = this.loss.map(name => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toSnakeCase)(name));
    } else {
      const outputNames = Object.keys(this.loss);
      lossNames = {};
      const losses = this.loss;
      for (const outputName of outputNames) {
        if (typeof losses[outputName] === 'string') {
          lossNames[outputName] = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toSnakeCase)(losses[outputName]);
        } else {
          throw new Error('Serialization of non-string loss is not supported.');
        }
      }
    }
    return lossNames;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics === 'string' || typeof this.metrics === 'function') {
      return [(0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toSnakeCase)(_metrics__WEBPACK_IMPORTED_MODULE_9__.getLossOrMetricName(this.metrics))];
    } else if (Array.isArray(this.metrics)) {
      return this.metrics.map(metric => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toSnakeCase)(_metrics__WEBPACK_IMPORTED_MODULE_9__.getLossOrMetricName(metric)));
    } else {
      const metricsIdentifiers = {};
      for (const key in this.metrics) {
        metricsIdentifiers[key] = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toSnakeCase)(_metrics__WEBPACK_IMPORTED_MODULE_9__.getLossOrMetricName(this.metrics[key]));
      }
      return metricsIdentifiers;
    }
  }
  getTrainingConfig() {
    return {
      loss: this.getLossIdentifiers(),
      metrics: this.getMetricIdentifiers(),
      optimizer_config: {
        class_name: this.optimizer.getClassName(),
        config: this.optimizer.getConfig()
      }
    };
    // TODO(cais): Add weight_metrics when they are supported.
    // TODO(cais): Add sample_weight_mode when it's supported.
    // TODO(cais): Add loss_weights when it's supported.
  }

  loadTrainingConfig(trainingConfig) {
    if (trainingConfig.weighted_metrics != null) {
      throw new Error('Loading weight_metrics is not supported yet.');
    }
    if (trainingConfig.loss_weights != null) {
      throw new Error('Loading loss_weights is not supported yet.');
    }
    if (trainingConfig.sample_weight_mode != null) {
      throw new Error('Loading sample_weight_mode is not supported yet.');
    }
    const tsConfig = (0,_utils_serialization_utils__WEBPACK_IMPORTED_MODULE_15__.convertPythonicToTs)(trainingConfig.optimizer_config);
    const optimizer = (0,_layers_serialization__WEBPACK_IMPORTED_MODULE_6__.deserialize)(tsConfig);
    let loss;
    if (typeof trainingConfig.loss === 'string') {
      loss = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toCamelCase)(trainingConfig.loss);
    } else if (Array.isArray(trainingConfig.loss)) {
      loss = trainingConfig.loss.map(lossEntry => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toCamelCase)(lossEntry));
    } else if (trainingConfig.loss != null) {
      loss = {};
      for (const key in trainingConfig.loss) {
        loss[key] = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toCamelCase)(trainingConfig.loss[key]);
      }
    }
    let metrics;
    if (Array.isArray(trainingConfig.metrics)) {
      metrics = trainingConfig.metrics.map(metric => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toCamelCase)(metric));
    } else if (trainingConfig.metrics != null) {
      metrics = {};
      for (const key in trainingConfig.metrics) {
        metrics[key] = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_12__.toCamelCase)(trainingConfig.metrics[key]);
      }
    }
    this.compile({
      loss,
      metrics,
      optimizer
    });
  }
  /**
   * Save the configuration and/or weights of the LayersModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 2. Saving `model`'s topology and weights to browser
   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('indexeddb://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 3. Saving `model`'s topology and weights as two files
   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
   * browser.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('downloads://my-model-1');
   * ```
   *
   * Example 4. Send  `model`'s topology and weights to an HTTP server.
   * See the documentation of `tf.io.http` for more details
   * including specifying request parameters and implementation of the
   * server.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('http://my-server/model/upload');
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  save(handlerOrURL, config) {
    var _this7 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (typeof handlerOrURL === 'string') {
        const handlers = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.getSaveHandlers(handlerOrURL);
        if (handlers.length === 0) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Cannot find any save handlers for URL '${handlerOrURL}'`);
        } else if (handlers.length > 1) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);
        }
        handlerOrURL = handlers[0];
      }
      if (handlerOrURL.save == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError('LayersModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');
      }
      const weightDataAndSpecs = yield _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.encodeWeights(_this7.getNamedWeights(config));
      const returnString = false;
      const unusedArg = null;
      const modelConfig = _this7.toJSON(unusedArg, returnString);
      const modelArtifacts = {
        modelTopology: modelConfig,
        format: LAYERS_MODEL_FORMAT_NAME,
        generatedBy: `TensorFlow.js tfjs-layers v${_version__WEBPACK_IMPORTED_MODULE_16__.version}`,
        convertedBy: null
      };
      const includeOptimizer = config == null ? false : config.includeOptimizer;
      if (includeOptimizer && _this7.optimizer != null) {
        modelArtifacts.trainingConfig = _this7.getTrainingConfig();
        const weightType = 'optimizer';
        const {
          data: optimizerWeightData,
          specs: optimizerWeightSpecs
        } = yield _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.encodeWeights(yield _this7.optimizer.getWeights(), weightType);
        weightDataAndSpecs.specs.push(...optimizerWeightSpecs);
        weightDataAndSpecs.data = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);
      }
      if (_this7.userDefinedMetadata != null) {
        // Check serialized size of user-defined metadata.
        const checkSize = true;
        (0,_user_defined_metadata__WEBPACK_IMPORTED_MODULE_11__.checkUserDefinedMetadata)(_this7.userDefinedMetadata, _this7.name, checkSize);
        modelArtifacts.userDefinedMetadata = _this7.userDefinedMetadata;
      }
      modelArtifacts.weightData = weightDataAndSpecs.data;
      modelArtifacts.weightSpecs = weightDataAndSpecs.specs;
      return handlerOrURL.save(modelArtifacts);
    })();
  }
  /**
   * Set user-defined metadata.
   *
   * The set metadata will be serialized together with the topology
   * and weights of the model during `save()` calls.
   *
   * @param setUserDefinedMetadata
   */
  setUserDefinedMetadata(userDefinedMetadata) {
    (0,_user_defined_metadata__WEBPACK_IMPORTED_MODULE_11__.checkUserDefinedMetadata)(userDefinedMetadata, this.name);
    this.userDefinedMetadata = userDefinedMetadata;
  }
  /**
   * Get user-defined metadata.
   *
   * The metadata is supplied via one of the two routes:
   *   1. By calling `setUserDefinedMetadata()`.
   *   2. Loaded during model loading (if the model is constructed
   *      via `tf.loadLayersModel()`.)
   *
   * If no user-defined metadata is available from either of the
   * two routes, this function will return `undefined`.
   */
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
// The class name is 'Model' rather than 'LayersModel' for backwards
// compatibility since this class name shows up in the serialization format.
/** @nocollapse */
LayersModel.className = 'Model';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.serialization.registerClass(LayersModel);
/**
 * A `tf.Functional` is an alias to `tf.LayersModel`.
 *
 * See also:
 *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.
 */
/** @doc {heading: 'Models', subheading: 'Classes'} */
class Functional extends LayersModel {}
Functional.className = 'Functional';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.serialization.registerClass(Functional);

/***/ }),

/***/ 44580:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/training_dataset.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "evaluateDataset": () => (/* binding */ evaluateDataset),
/* harmony export */   "fitDataset": () => (/* binding */ fitDataset)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _base_callbacks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base_callbacks */ 52043);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _logs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../logs */ 15878);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _training_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./training_utils */ 55029);

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Interfaces and methods for training models using TensorFlow.js datasets.
 */







// Default batch size used during tensor-based validation.
const DEFAULT_VALIDATION_BATCH_SIZE = 32;
/**
 * Standardize the output of a dataset iterator for use by
 * LayersModel.fitDataset().
 *
 * @param model: A `tf.LayersModel` object.
 * @param iteratorOut The output of a dataset iterator. It is required to be
 *   an object of the form `{xs: TensorOrArrayOrMap, ys:
 * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,
 * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.
 * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s
 *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided
 *   as a map, the order in the resulting array is taken from the `inputNames`
 *   and `outputNames` of the model.
 */
function standardizeDataIteratorOutput(
// Type `model` as `any` here to avoid circular dependency w/
// training.ts.
// tslint:disable-next-line:no-any
model, iteratorOut) {
  let xs;
  let ys;
  const iteratorOutObj = iteratorOut;
  xs = iteratorOutObj['xs'];
  ys = iteratorOutObj['ys'];
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(xs != null && ys != null, () => 'A Dataset iterator for fitDataset() is expected to generate ' + 'objects of the form `{xs: xVal, ys: yVal}`, where the two ' + 'values may be `tf.Tensor`, an array of Tensors, or a map of ' + 'string to Tensor.  The provided Dataset instead generates ' + `${iteratorOut}`);
  const flattenedXs = flattenTensorOrArrayOrMap('input', model.inputNames, xs);
  const flattenedYs = flattenTensorOrArrayOrMap('output', model.outputNames, ys);
  const batchSize = flattenedXs[0].shape[0];
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(flattenedXs.length === model.inputs.length, () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` + `provides ${flattenedXs.length} inputs.  (Expected input keys: ` + `${JSON.stringify(model.inputNames)})`);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(flattenedYs.length === model.outputs.length, () => `LayersModel has ${model.outputs.length} outputs, but the dataset ` + `provides ${flattenedYs.length} outputs.  (Expected output keys: ` + `${JSON.stringify(model.outputNames)})`);
  for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(flattenedXs[xIndex].shape[0] === batchSize, () => `Batch size mismatch: input ` + `${model.inputNames[xIndex]} has ${flattenedXs[xIndex].shape[0]}; ` + `expected  ${batchSize} based on input ${model.inputNames[0]}.`);
  }
  for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(flattenedYs[yIndex].shape[0] === batchSize, () => `Batch size mismatch: output ` + `${model.outputNames[yIndex]} has ${flattenedYs[yIndex].shape[0]}; ` + `expected  ${batchSize} based on input ${model.inputNames[0]}.`);
  }
  return {
    xs: flattenedXs,
    ys: flattenedYs
  };
}
function flattenTensorOrArrayOrMap(inputOrOutput, names, values) {
  if (values instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
    return [values];
  } else if (Array.isArray(values)) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(values.length === names.length, () => `Received an array of ${values.length} Tensors, but expected ${names.length} to match the ${inputOrOutput} keys ${names}.`);
    return values;
  } else {
    const result = [];
    // Check that all the required keys are available.
    for (const name of names) {
      if (values[name] == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`The feature data generated by the dataset lacks the required ` + `${inputOrOutput} key '${name}'.`);
      }
      result.push(values[name]);
    }
    return result;
  }
}
function standardizeTensorValidationData(data) {
  if (data.length === 3) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('Validation with sample weights is not implemented yet.');
  }
  return {
    xs: data[0],
    ys: data[1]
  };
}
function fitDataset(_x, _x2, _x3) {
  return _fitDataset.apply(this, arguments);
}
/** Helper function that determines number of steps (batches) per epoch. */
function _fitDataset() {
  _fitDataset = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (
  // Type `model` as `any` here to avoid circular dependency w/
  // training.ts.
  // tslint:disable-next-line:no-any
  model, dataset, args) {
    const hasBatchesPerEpoch = args.batchesPerEpoch != null;
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(model.optimizer != null, () => 'You must compile a model before training/testing. Use ' + 'LayersModel.compile(modelCompileConfig).');
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(args != null, () => `For fitDataset(), the 2nd argument (config) is required, ` + `but it is not provided in this call.`);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs), () => `For fitDataset(), config.epochs is expected to be a positive ` + `integer, but got ${args.epochs}`);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(!hasBatchesPerEpoch || args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` + `positive integer if specified, but got ${args.batchesPerEpoch}`);
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(
    // tslint:disable-next-line:no-any
    args['validationSplit'] == null, () => '`validationSplit` is not supported by `fitDataset()`. ' + 'Use validationData instead.');
    if (model.isTraining) {
      throw new Error('Cannot start training because another fit() call is ongoing.');
    }
    model.isTraining = true;
    try {
      const doValidation = args.validationData != null;
      let valXs;
      let valYs;
      if (doValidation) {
        if (isDatasetObject(args.validationData)) {
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(args.validationBatches == null || args.validationBatches > 0 && Number.isInteger(args.validationBatches), () => `For fitDataset() with dataset-based validation, ` + `config.validationBatches is expected not to be provided, ` + `or to be a positive integer, ` + `but got ${args.validationBatches}`);
        } else {
          const validationData = standardizeTensorValidationData(args.validationData);
          valXs = validationData.xs;
          valYs = validationData.ys;
        }
      }
      const trainFunction = model.makeTrainFunction();
      const outLabels = model.getDedupedMetricsNames();
      let callbackMetrics;
      if (doValidation) {
        callbackMetrics = outLabels.slice().concat(outLabels.map(n => 'val_' + n));
      } else {
        callbackMetrics = outLabels.slice();
      }
      const callbacks = (0,_base_callbacks__WEBPACK_IMPORTED_MODULE_2__.standardizeCallbacks)(args.callbacks, args.yieldEvery);
      const verbose = args.verbose == null ? 1 : args.verbose;
      const {
        callbackList,
        history
      } = (0,_base_callbacks__WEBPACK_IMPORTED_MODULE_2__.configureCallbacks)(callbacks, verbose, args.epochs, null, null, getStepsPerEpoch(dataset, args), null,
      // Batch size determined by the dataset itself.
      doValidation, callbackMetrics);
      callbackList.setModel(model);
      model.history = history;
      yield callbackList.onTrainBegin();
      model.stopTraining_ = false;
      let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;
      let dataIterator = yield dataset.iterator();
      while (epoch < args.epochs) {
        const epochLogs = {};
        yield callbackList.onEpochBegin(epoch);
        let stepsDone = 0;
        let batchIndex = 0;
        if (!hasBatchesPerEpoch) {
          dataIterator = yield dataset.iterator();
        }
        while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {
          const iteratorOut = yield dataIterator.next();
          // If `batchesPerEpoch` is specified, the dataset should not be
          // exhausted until all epoches are done.
          if (hasBatchesPerEpoch && iteratorOut.done) {
            console.warn('You provided `batchesPerEpoch` as ' + `${args.batchesPerEpoch}, ` + 'but your dataset iterator ran out of data after ' + `${stepsDone} batches; ` + 'interrupting training. Make sure that your ' + 'dataset can generate at least `batchesPerEpoch * epochs` ' + 'batches (in this case, ' + `${args.batchesPerEpoch * args.epochs} batches). ` + 'You may need to use the repeat() function when building ' + 'your dataset.');
            break;
          }
          if (iteratorOut.value != null) {
            const {
              xs,
              ys
            } = standardizeDataIteratorOutput(model, iteratorOut.value);
            const batchLogs = {};
            batchLogs['batch'] = batchIndex;
            batchLogs['size'] = xs[0].shape[0];
            yield callbackList.onBatchBegin(batchIndex, batchLogs);
            const sampleWeights = [];
            if (args.classWeight != null) {
              const standardClassWeights = (0,_training_utils__WEBPACK_IMPORTED_MODULE_6__.standardizeClassWeights)(args.classWeight, model.outputNames);
              for (let i = 0; i < standardClassWeights.length; ++i) {
                sampleWeights.push(yield (0,_training_utils__WEBPACK_IMPORTED_MODULE_6__.standardizeWeights)(ys[i], null, standardClassWeights[i]));
              }
            }
            // Train on batch.
            const ins = xs.concat(ys).concat(sampleWeights);
            const outs = trainFunction(ins);
            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(ins);
            for (let i = 0; i < outLabels.length; ++i) {
              const label = outLabels[i];
              const out = outs[i];
              batchLogs[label] = out;
              _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep(out);
            }
            yield callbackList.onBatchEnd(batchIndex, batchLogs);
            (0,_logs__WEBPACK_IMPORTED_MODULE_4__.disposeTensorsInLogs)(batchLogs);
            batchIndex++;
            stepsDone++;
          }
          if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch : iteratorOut.done) {
            // Epoch finished. Perform validation.
            if (doValidation) {
              let valOuts;
              if (isDatasetObject(args.validationData)) {
                valOuts = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList)(yield model.evaluateDataset(args.validationData, {
                  batches: args.validationBatches
                }));
              } else {
                valOuts = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.toList)(model.evaluate(valXs, valYs, {
                  batchSize: args.validationBatchSize == null ? DEFAULT_VALIDATION_BATCH_SIZE : args.validationBatchSize,
                  verbose: 0
                }));
              }
              for (let i = 0; i < model.metricsNames.length; ++i) {
                epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];
              }
            }
            // Call `break` to exit one epoch lopp after validation is done. If
            // config.batchesPerEpoch is specified, an epoch while loop will
            // stop when `stepsDone >= config.batchesPerEpoch`. When
            // config.batchesPerEpoch is not provided, the following `break` is
            // required to exit the while lopp after dataset is exhausted.
            break;
          }
          if (model.stopTraining_) {
            break;
          }
        }
        yield callbackList.onEpochEnd(epoch, epochLogs);
        epoch++;
        if (model.stopTraining_) {
          break;
        }
      }
      yield callbackList.onTrainEnd();
      yield model.history.syncData();
      return model.history;
    } finally {
      model.isTraining = false;
    }
  });
  return _fitDataset.apply(this, arguments);
}
function getStepsPerEpoch(dataset, args) {
  // Attempt to determine # of batches in an epoch.
  let stepsPerEpoch = null;
  if (args.batchesPerEpoch != null) {
    stepsPerEpoch = args.batchesPerEpoch;
  } else if (Number.isFinite(dataset.size)) {
    stepsPerEpoch = dataset.size;
  }
  return stepsPerEpoch;
}
// Check if provided object is a Dataset object by checking its .iterator
// element.
function isDatasetObject(dataset) {
  return typeof dataset.iterator === 'function';
}
// Check if provided object is a LazyIterator object by checking it's .next
// element.
function isLazyIteratorObject(iterator) {
  return typeof iterator.next === 'function';
}
function evaluateDataset(_x4, _x5, _x6) {
  return _evaluateDataset.apply(this, arguments);
}
function _evaluateDataset() {
  _evaluateDataset = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (
  // Type `model` as `any` here to avoid circular dependency w/
  // training.ts.
  // tslint:disable-next-line:no-any
  model, dataset, args) {
    args = args || {};
    const hasBatches = args.batches != null;
    const f = model.testFunction;
    let outs = [];
    if (args.verbose > 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('Verbose mode is not implemented yet.');
    }
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(!hasBatches || args.batches > 0 && Number.isInteger(args.batches), () => 'Test loop expects `batches` to be a positive integer, but ' + `received ${JSON.stringify(args.batches)}`);
    const dataIterator = isLazyIteratorObject(dataset) ? dataset : yield dataset.iterator();
    // Keeps track of number of examples used in this evaluation.
    let numExamples = 0;
    let batch = 0;
    while (hasBatches ? batch < args.batches : true) {
      const iteratorOut = yield dataIterator.next();
      outs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => {
        if (iteratorOut.value) {
          // TODO(cais): Once real dataset is available, use
          //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.
          const {
            xs,
            ys
          } = standardizeDataIteratorOutput(model, iteratorOut.value);
          const xsAndYs = xs.concat(ys);
          const batchOuts = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => f(xsAndYs));
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(xsAndYs);
          if (batch === 0) {
            for (let i = 0; i < batchOuts.length; ++i) {
              outs.push((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.scalar)(0));
            }
          }
          const batchSize = xsAndYs[0].shape[0];
          for (let i = 0; i < batchOuts.length; ++i) {
            const batchOut = batchOuts[i];
            const oldScalar = outs[i];
            outs[i] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add(outs[i], _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul(batchSize, batchOut)));
            if (batch > 0) {
              _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(oldScalar);
            }
          }
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(batchOuts);
          numExamples += batchSize;
          ++batch;
        }
        return outs;
      });
      if (iteratorOut.done) {
        if (hasBatches) {
          console.warn('Your dataset iterator ran out of data during evaluateDataset(). ' + 'Interrupting evalution. Make sure that your ' + 'dataset can generate at least `batches` ' + `batches (in this case, ${args.batches} batches). ` + 'You may need to use the repeat() function when building ' + 'your dataset.');
        }
        break;
      }
    }
    for (let i = 0; i < outs.length; ++i) {
      const oldScalar = outs[i];
      outs[i] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div(outs[i], numExamples);
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose(oldScalar);
    }
    return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.singletonOrArray)(outs);
  });
  return _evaluateDataset.apply(this, arguments);
}

/***/ }),

/***/ 83880:
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/training_tensors.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkBatchSize": () => (/* binding */ checkBatchSize),
/* harmony export */   "disposeNewTensors": () => (/* binding */ disposeNewTensors),
/* harmony export */   "ensureTensorsRank2OrHigher": () => (/* binding */ ensureTensorsRank2OrHigher),
/* harmony export */   "makeBatches": () => (/* binding */ makeBatches),
/* harmony export */   "sliceArrays": () => (/* binding */ sliceArrays),
/* harmony export */   "sliceArraysByIndices": () => (/* binding */ sliceArraysByIndices)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Interfaces and methods for training models using tf.Tensor objects.
 */



function checkBatchSize(batchSize) {
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(batchSize > 0 && Number.isInteger(batchSize), () => `batchSize is required to be a positive integer, but got ${batchSize}`);
}
/**
 * Slice a Tensor or an Array of Tensors, by start and stop indices.
 *
 * Porting Note: The `_slice_arrays` function in PyKeras is covered by this
 *   function and `sliceArraysByIndices()` together.
 *
 * @param arrays: the input.
 * @param start: the starting index (inclusive).
 * @param stop: the stopping index (exclusive).
 * @returns The result of the slicing. If `arrays` is an `Array` of
 *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`
 *   in the same way.
 */
function sliceArrays(arrays, start, stop) {
  if (arrays == null) {
    return [null];
  } else if (Array.isArray(arrays)) {
    return arrays.map(array => (0,_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.sliceAlongFirstAxis)(array, start, stop - start));
  } else {
    // Tensor.
    return (0,_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.sliceAlongFirstAxis)(arrays, start, stop - start);
  }
}
/**
 * Slice a Tensor or an Array of Tensors, by random-order indices.
 *
 * Porting Note: The `_slice_arrays` function in PyKeras is covered by this
 *   function and `sliceArrays()` together.
 *
 * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.
 *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the
 *   same fashion.
 * @param indices The indices to use for slicing along the first (batch)
 *   dimension.
 * @returns Result(s) of the slicing.
 */
function sliceArraysByIndices(arrays, indices) {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
    if (arrays == null) {
      return null;
    } else if (Array.isArray(arrays)) {
      return arrays.map(array => sliceArraysByIndices(array, indices));
    } else {
      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid
      //   tensor1d() calls.
      return (0,_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.gather)(arrays, indices.dtype === 'int32' ? indices : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(indices, 'int32'));
    }
  });
}
/**
 * Returns a list of batch indices (tuples of indices).
 * @param size: Integer, total size of the data to slice into batches.
 * @param batchSize: Integer, batch size.
 * @returns An Array of [batchStart, batchEnd] tuples. batchStart is
 *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x
 *   that satisfy batchStart <= x < batchEnd.
 */
function makeBatches(size, batchSize) {
  const output = [];
  let batchStart = 0;
  let batchEnd = null;
  while (batchStart < size) {
    batchEnd = batchStart + batchSize;
    if (batchEnd >= size) {
      batchEnd = size;
    }
    output.push([batchStart, batchEnd]);
    batchStart = batchEnd;
  }
  return output;
}
/**
 * Ensure tensors all have a rank of at least 2.
 *
 * If a tensor has a rank of 1, it is dimension-expanded to rank 2.
 * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.
 */
function ensureTensorsRank2OrHigher(tensors) {
  const outs = [];
  if (tensors instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor) {
    tensors = [tensors];
  }
  // Make Tensors at least 2D.
  for (let i = 0; i < tensors.length; ++i) {
    const tensor = tensors[i];
    if (tensor.rank === 1) {
      outs.push((0,_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.expandDims)(tensor, 1));
    } else if (tensor.rank === 0) {
      throw new Error('Expected tensor to be at least 1D, but received a 0D tensor ' + '(scalar).');
    } else {
      outs.push(tensor);
    }
  }
  return outs;
}
/**
 * Compare a set of tensors with a reference (old) set, discard the ones
 * in the new set that are not present in the reference set.
 *
 * This method is used for memory clenaup during calls such as
 * LayersModel.fit().
 *
 * @param tensors New set which may contain Tensors not present in
 *   `refTensors`.
 * @param refTensors Reference Tensor set.
 */
// TODO(cais, kangyizhang): Deduplicate with tfjs-data.
function disposeNewTensors(tensors, refTensors) {
  if (tensors == null) {
    return;
  }
  const oldTensorIds = [];
  if (refTensors instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor) {
    oldTensorIds.push(refTensors.id);
  } else if (Array.isArray(refTensors)) {
    refTensors.forEach(t => oldTensorIds.push(t.id));
  } else if (refTensors != null) {
    // `oldTensors` is a map from string name to Tensor.
    for (const name in refTensors) {
      const oldTensor = refTensors[name];
      oldTensorIds.push(oldTensor.id);
    }
  }
  const tensorsToDispose = [];
  if (tensors instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor) {
    if (oldTensorIds.indexOf(tensors.id) === -1) {
      tensorsToDispose.push(tensors);
    }
  } else if (Array.isArray(tensors)) {
    tensors.forEach(t => {
      if (oldTensorIds.indexOf(t.id) === -1) {
        tensorsToDispose.push(t);
      }
    });
  } else if (tensors != null) {
    // `oldTensors` is a map from string name to Tensor.
    for (const name in tensors) {
      const tensor = tensors[name];
      if (oldTensorIds.indexOf(tensor.id) === -1) {
        tensorsToDispose.push(tensor);
      }
    }
  }
  tensorsToDispose.forEach(t => {
    if (!t.isDisposed) {
      t.dispose();
    }
  });
}

/***/ }),

/***/ 55029:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/training_utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "computeWeightedLoss": () => (/* binding */ computeWeightedLoss),
/* harmony export */   "standardizeClassWeights": () => (/* binding */ standardizeClassWeights),
/* harmony export */   "standardizeSampleWeights": () => (/* binding */ standardizeSampleWeights),
/* harmony export */   "standardizeWeights": () => (/* binding */ standardizeWeights)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */

function standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {
  const numOutputs = outputNames.length;
  if (xWeight == null || Array.isArray(xWeight) && xWeight.length === 0) {
    return outputNames.map(name => null);
  }
  if (numOutputs === 1) {
    if (Array.isArray(xWeight) && xWeight.length === 1) {
      return xWeight;
    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {
      return [xWeight[outputNames[0]]];
    } else {
      return [xWeight];
    }
  }
  if (Array.isArray(xWeight)) {
    if (xWeight.length !== numOutputs) {
      throw new Error(`Provided ${weightType} is an array of ${xWeight.length} ` + `element(s), but the model has ${numOutputs} outputs. ` + `Make sure a set of weights is provided for each model output.`);
    }
    return xWeight;
  } else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 && typeof xWeight[Object.keys(xWeight)[0]] === 'object') {
    const output = [];
    outputNames.forEach(outputName => {
      if (outputName in xWeight) {
        output.push(xWeight[outputName]);
      } else {
        output.push(null);
      }
    });
    return output;
  } else {
    throw new Error(`The model has multiple (${numOutputs}) outputs, ` + `so ${weightType} must be either an array with ` + `${numOutputs} elements or an object with ${outputNames} keys. ` + `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);
  }
}
/**
 * Standardize class weighting objects.
 *
 * This function takes a single class-weighting object, an array of them,
 * or a map from output name to class-weighting object. It compares it to the
 * output name(s) of the model, base on which it outputs an array of
 * class-weighting objects of which the length matches the number of outputs.
 *
 * @param classWeight Input class-weighting object(s).
 * @param outputNames All output name(s) of the model.
 * @return An array of class-weighting objects. The length of the array matches
 *   the model's number of outputs.
 */
function standardizeClassWeights(classWeight, outputNames) {
  return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');
}
function standardizeSampleWeights(classWeight, outputNames) {
  return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');
}
/**
 * Standardize by-sample and/or by-class weights for training.
 *
 * Note that this function operates on one model output at a time. For a model
 * with multiple outputs, you must call this function multiple times.
 *
 * @param y The target tensor that the by-sample and/or by-class weight is for.
 *     The values of y are assumed to encode the classes, either directly
 *     as an integer index, or as one-hot encoding.
 * @param sampleWeight By-sample weights.
 * @param classWeight By-class weights: an object mapping class indices
 *     (integers) to a weight (float) to apply to the model's loss for the
 *     samples from this class during training. This can be useful to tell the
 *     model to "pay more attention" to samples from an under-represented class.
 * @param sampleWeightMode The mode for the sample weights.
 * @return A Promise of weight tensor, of which the size of the first dimension
 *     matches that of `y`.
 */
function standardizeWeights(_x, _x2, _x3, _x4) {
  return _standardizeWeights.apply(this, arguments);
}
/**
 * Apply per-sample weights on the loss values from a number of samples.
 *
 * @param losses Loss tensor of shape `[batchSize]`.
 * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.
 * @returns Tensor of the same shape as`losses`.
 */
function _standardizeWeights() {
  _standardizeWeights = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (y, sampleWeight, classWeight, sampleWeightMode) {
    if (sampleWeight != null || sampleWeightMode != null) {
      // TODO(cais): Once 'temporal' mode is implemented, document it in the doc
      // string.
      throw new Error('Support sampleWeight is not implemented yet');
    }
    if (classWeight != null) {
      // Apply class weights per sample.
      const yClasses = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
        if (y.shape.length === 1) {
          // Assume class indices.
          return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.clone)(y);
        } else if (y.shape.length === 2) {
          if (y.shape[1] > 1) {
            // Assume one-hot encoding of classes.
            const axis = 1;
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.argMax)(y, axis);
          } else if (y.shape[1] === 1) {
            // Class index.
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.reshape)(y, [y.shape[0]]);
          } else {
            throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) ` + `during handling of class weights. The size is expected to be ` + `>= 1.`);
          }
        } else {
          throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during ` + `handling of class weights. The rank is expected to be 1 or 2.`);
        }
      });
      const yClassIndices = Array.from(yield yClasses.data());
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose)(yClasses);
      const classSampleWeight = [];
      yClassIndices.forEach(classIndex => {
        if (classWeight[classIndex] == null) {
          throw new Error(`classWeight must contain all classes in the training data. ` + `The class ${classIndex} exists in the data but not in ` + `classWeight`);
        } else {
          classSampleWeight.push(classWeight[classIndex]);
        }
      });
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor1d)(classSampleWeight, 'float32');
    } else {
      return null;
    }
  });
  return _standardizeWeights.apply(this, arguments);
}
function computeWeightedLoss(losses, sampleWeights) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)(losses, sampleWeights);
}

/***/ }),

/***/ 22802:
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/errors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssertionError": () => (/* binding */ AssertionError),
/* harmony export */   "AttributeError": () => (/* binding */ AttributeError),
/* harmony export */   "IndexError": () => (/* binding */ IndexError),
/* harmony export */   "NotImplementedError": () => (/* binding */ NotImplementedError),
/* harmony export */   "RuntimeError": () => (/* binding */ RuntimeError),
/* harmony export */   "ValueError": () => (/* binding */ ValueError)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Explicit error types.
 *
 * See the following link for more information about why the code includes
 * calls to setPrototypeOf:
 *
 * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
 */
// tslint:enable
/**
 * Equivalent of Python's AttributeError.
 */
class AttributeError extends Error {
  constructor(message) {
    super(message);
    // Set the prototype explicitly.
    Object.setPrototypeOf(this, AttributeError.prototype);
  }
}
/**
 * Equivalent of Python's RuntimeError.
 */
class RuntimeError extends Error {
  constructor(message) {
    super(message);
    // Set the prototype explicitly.
    Object.setPrototypeOf(this, RuntimeError.prototype);
  }
}
/**
 * Equivalent of Python's ValueError.
 */
class ValueError extends Error {
  constructor(message) {
    super(message);
    // Set the prototype explicitly.
    Object.setPrototypeOf(this, ValueError.prototype);
  }
}
/**
 * Equivalent of Python's NotImplementedError.
 */
class NotImplementedError extends Error {
  constructor(message) {
    super(message);
    // Set the prototype explicitly.
    Object.setPrototypeOf(this, NotImplementedError.prototype);
  }
}
/**
 * Equivalent of Python's AssertionError.
 */
class AssertionError extends Error {
  constructor(message) {
    super(message);
    // Set the prototype explicitly.
    Object.setPrototypeOf(this, AssertionError.prototype);
  }
}
/**
 * Equivalent of Python's IndexError.
 */
class IndexError extends Error {
  constructor(message) {
    super(message);
    // Set the prototype explicitly.
    Object.setPrototypeOf(this, IndexError.prototype);
  }
}

/***/ }),

/***/ 46897:
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "input": () => (/* binding */ input),
/* harmony export */   "loadLayersModel": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.loadLayersModel),
/* harmony export */   "model": () => (/* binding */ model),
/* harmony export */   "registerCallbackConstructor": () => (/* binding */ registerCallbackConstructor),
/* harmony export */   "sequential": () => (/* binding */ sequential)
/* harmony export */ });
/* harmony import */ var _base_callbacks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base_callbacks */ 52043);
/* harmony import */ var _engine_input_layer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine/input_layer */ 45367);
/* harmony import */ var _engine_training__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine/training */ 64970);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models */ 45207);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Exported functions.
 */





// TODO(cais): Add doc string to all the public static functions in this
//   class; include exectuable JavaScript code snippets where applicable
//   (b/74074458).
// LayersModel and related factory methods.
/**
 * A model is a data structure that consists of `Layers` and defines inputs
 * and outputs.
 *
 * The key difference between `tf.model` and `tf.sequential` is that
 * `tf.model` is more generic, supporting an arbitrary graph (without
 * cycles) of layers. `tf.sequential` is less generic and supports only a linear
 * stack of layers.
 *
 * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers
 * are used to wire input(s) to output(s).
 *
 * For example, the following code snippet defines a model consisting of
 * two `dense` layers, with 10 and 4 units, respectively.
 *
 * ```js
 * // Define input, which has a size of 5 (not including batch dimension).
 * const input = tf.input({shape: [5]});
 *
 * // First dense layer uses relu activation.
 * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});
 * // Second dense layer uses softmax activation.
 * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});
 *
 * // Obtain the output symbolic tensor by applying the layers on the input.
 * const output = denseLayer2.apply(denseLayer1.apply(input));
 *
 * // Create the model based on the inputs.
 * const model = tf.model({inputs: input, outputs: output});
 *
 * // The model can be used for training, evaluation and prediction.
 * // For example, the following line runs prediction with the model on
 * // some fake data.
 * model.predict(tf.ones([2, 5])).print();
 * ```
 * See also:
 *   `tf.sequential`, `tf.loadLayersModel`.
 *
 * @doc {heading: 'Models', subheading: 'Creation'}
 */
function model(args) {
  return new _engine_training__WEBPACK_IMPORTED_MODULE_2__.LayersModel(args);
}
/**
 * Creates a `tf.Sequential` model.  A sequential model is any model where the
 * outputs of one layer are the inputs to the next layer, i.e. the model
 * topology is a simple 'stack' of layers, with no branching or skipping.
 *
 * This means that the first layer passed to a `tf.Sequential` model should have
 * a defined input shape. What that means is that it should have received an
 * `inputShape` or `batchInputShape` argument, or for some type of layers
 * (recurrent, Dense...) an `inputDim` argument.
 *
 * The key difference between `tf.model` and `tf.sequential` is that
 * `tf.sequential` is less generic, supporting only a linear stack of layers.
 * `tf.model` is more generic and supports an arbitrary graph (without
 * cycles) of layers.
 *
 * Examples:
 *
 * ```js
 * const model = tf.sequential();
 *
 * // First layer must have an input shape defined.
 * model.add(tf.layers.dense({units: 32, inputShape: [50]}));
 * // Afterwards, TF.js does automatic shape inference.
 * model.add(tf.layers.dense({units: 4}));
 *
 * // Inspect the inferred shape of the model's output, which equals
 * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the
 * // 2nd is the output size of the model's last layer.
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * It is also possible to specify a batch size (with potentially undetermined
 * batch dimension, denoted by "null") for the first layer using the
 * `batchInputShape` key. The following example is equivalent to the above:
 *
 * ```js
 * const model = tf.sequential();
 *
 * // First layer must have a defined input shape
 * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));
 * // Afterwards, TF.js does automatic shape inference.
 * model.add(tf.layers.dense({units: 4}));
 *
 * // Inspect the inferred shape of the model's output.
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * You can also use an `Array` of already-constructed `Layer`s to create
 * a `tf.Sequential` model:
 *
 * ```js
 * const model = tf.sequential({
 *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),
 *            tf.layers.dense({units: 4})]
 * });
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * @doc {heading: 'Models', subheading: 'Creation'}
 */
function sequential(config) {
  return new _models__WEBPACK_IMPORTED_MODULE_3__.Sequential(config);
}
/**
 * Used to instantiate an input to a model as a `tf.SymbolicTensor`.
 *
 * Users should call the `input` factory function for
 * consistency with other generator functions.
 *
 * Example:
 *
 * ```js
 * // Defines a simple logistic regression model with 32 dimensional input
 * // and 3 dimensional output.
 * const x = tf.input({shape: [32]});
 * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);
 * const model = tf.model({inputs: x, outputs: y});
 * model.predict(tf.ones([2, 32])).print();
 * ```
 *
 * Note: `input` is only necessary when using `model`. When using
 * `sequential`, specify `inputShape` for the first layer or use `inputLayer`
 * as the first layer.
 *
 * @doc {heading: 'Models', subheading: 'Inputs'}
 */
function input(config) {
  return (0,_engine_input_layer__WEBPACK_IMPORTED_MODULE_1__.Input)(config);
}
function registerCallbackConstructor(verbosityLevel, callbackConstructor) {
  _base_callbacks__WEBPACK_IMPORTED_MODULE_0__.CallbackConstructorRegistry.registerCallbackConstructor(verbosityLevel, callbackConstructor);
}

/***/ }),

/***/ 61865:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports_constraints.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxNorm": () => (/* binding */ maxNorm),
/* harmony export */   "minMaxNorm": () => (/* binding */ minMaxNorm),
/* harmony export */   "nonNeg": () => (/* binding */ nonNeg),
/* harmony export */   "unitNorm": () => (/* binding */ unitNorm)
/* harmony export */ });
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constraints */ 57529);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
// tslint:disable-next-line:max-line-length

/**
 * MaxNorm weight constraint.
 *
 * Constrains the weights incident to each hidden unit
 * to have a norm less than or equal to a desired value.
 *
 * References
 *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting
 * Srivastava, Hinton, et al.
 * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)
 *
 * @doc {heading: 'Constraints',namespace: 'constraints'}
 */
function maxNorm(args) {
  return new _constraints__WEBPACK_IMPORTED_MODULE_0__.MaxNorm(args);
}
/**
 * Constrains the weights incident to each hidden unit to have unit norm.
 *
 * @doc {heading: 'Constraints', namespace: 'constraints'}
 */
function unitNorm(args) {
  return new _constraints__WEBPACK_IMPORTED_MODULE_0__.UnitNorm(args);
}
/**
 * Constrains the weight to be non-negative.
 *
 * @doc {heading: 'Constraints', namespace: 'constraints'}
 */
function nonNeg() {
  return new _constraints__WEBPACK_IMPORTED_MODULE_0__.NonNeg();
}
/** @doc {heading: 'Constraints', namespace: 'constraints'} */
function minMaxNorm(config) {
  return new _constraints__WEBPACK_IMPORTED_MODULE_0__.MinMaxNorm(config);
}

/***/ }),

/***/ 41063:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports_initializers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "constant": () => (/* binding */ constant),
/* harmony export */   "glorotNormal": () => (/* binding */ glorotNormal),
/* harmony export */   "glorotUniform": () => (/* binding */ glorotUniform),
/* harmony export */   "heNormal": () => (/* binding */ heNormal),
/* harmony export */   "heUniform": () => (/* binding */ heUniform),
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "leCunNormal": () => (/* binding */ leCunNormal),
/* harmony export */   "leCunUniform": () => (/* binding */ leCunUniform),
/* harmony export */   "ones": () => (/* binding */ ones),
/* harmony export */   "orthogonal": () => (/* binding */ orthogonal),
/* harmony export */   "randomNormal": () => (/* binding */ randomNormal),
/* harmony export */   "randomUniform": () => (/* binding */ randomUniform),
/* harmony export */   "truncatedNormal": () => (/* binding */ truncatedNormal),
/* harmony export */   "varianceScaling": () => (/* binding */ varianceScaling),
/* harmony export */   "zeros": () => (/* binding */ zeros)
/* harmony export */ });
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initializers */ 1024);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
// tslint:disable-next-line:max-line-length

/**
 * Initializer that generates tensors initialized to 0.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function zeros() {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.Zeros();
}
/**
 * Initializer that generates tensors initialized to 1.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function ones() {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.Ones();
}
/**
 * Initializer that generates values initialized to some constant.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function constant(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.Constant(args);
}
/**
 * Initializer that generates random values initialized to a uniform
 * distribution.
 *
 * Values will be distributed uniformly between the configured minval and
 * maxval.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function randomUniform(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.RandomUniform(args);
}
/**
 * Initializer that generates random values initialized to a normal
 * distribution.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function randomNormal(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.RandomNormal(args);
}
/**
 * Initializer that generates random values initialized to a truncated normal
 * distribution.
 *
 * These values are similar to values from a `RandomNormal` except that values
 * more than two standard deviations from the mean are discarded and re-drawn.
 * This is the recommended initializer for neural network weights and filters.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function truncatedNormal(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.TruncatedNormal(args);
}
/**
 * Initializer that generates the identity matrix.
 * Only use for square 2D matrices.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function identity(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.Identity(args);
}
/**
 * Initializer capable of adapting its scale to the shape of weights.
 * With distribution=NORMAL, samples are drawn from a truncated normal
 * distribution centered on zero, with `stddev = sqrt(scale / n)` where n is:
 *   - number of input units in the weight tensor, if mode = FAN_IN.
 *   - number of output units, if mode = FAN_OUT.
 *   - average of the numbers of input and output units, if mode = FAN_AVG.
 * With distribution=UNIFORM,
 * samples are drawn from a uniform distribution
 * within [-limit, limit], with `limit = sqrt(3 * scale / n)`.
 *
 * @doc {heading: 'Initializers',namespace: 'initializers'}
 */
function varianceScaling(config) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.VarianceScaling(config);
}
/**
 * Glorot uniform initializer, also called Xavier uniform initializer.
 * It draws samples from a uniform distribution within [-limit, limit]
 * where `limit` is `sqrt(6 / (fan_in + fan_out))`
 * where `fan_in` is the number of input units in the weight tensor
 * and `fan_out` is the number of output units in the weight tensor
 *
 * Reference:
 *   Glorot & Bengio, AISTATS 2010
 *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function glorotUniform(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.GlorotUniform(args);
}
/**
 * Glorot normal initializer, also called Xavier normal initializer.
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(2 / (fan_in + fan_out))`
 * where `fan_in` is the number of input units in the weight tensor
 * and `fan_out` is the number of output units in the weight tensor.
 *
 * Reference:
 *   Glorot & Bengio, AISTATS 2010
 *       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function glorotNormal(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.GlorotNormal(args);
}
/**
 * He normal initializer.
 *
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(2 / fanIn)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * Reference:
 *     He et al., http://arxiv.org/abs/1502.01852
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function heNormal(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.HeNormal(args);
}
/**
 * He uniform initializer.
 *
 * It draws samples from a uniform distribution within [-limit, limit]
 * where `limit` is `sqrt(6 / fan_in)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * Reference:
 *     He et al., http://arxiv.org/abs/1502.01852
 *
 * @doc {heading: 'Initializers',namespace: 'initializers'}
 */
function heUniform(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.HeUniform(args);
}
/**
 * LeCun normal initializer.
 *
 * It draws samples from a truncated normal distribution centered on 0
 * with `stddev = sqrt(1 / fanIn)`
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * References:
 *   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 *   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function leCunNormal(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.LeCunNormal(args);
}
/**
 * LeCun uniform initializer.
 *
 * It draws samples from a uniform distribution in the interval
 * `[-limit, limit]` with `limit = sqrt(3 / fanIn)`,
 * where `fanIn` is the number of input units in the weight tensor.
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function leCunUniform(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.LeCunUniform(args);
}
/**
 * Initializer that generates a random orthogonal matrix.
 *
 * Reference:
 * [Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)
 *
 * @doc {heading: 'Initializers', namespace: 'initializers'}
 */
function orthogonal(args) {
  return new _initializers__WEBPACK_IMPORTED_MODULE_0__.Orthogonal(args);
}

/***/ }),

/***/ 40152:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Layer": () => (/* reexport safe */ _engine_topology__WEBPACK_IMPORTED_MODULE_1__.Layer),
/* harmony export */   "RNN": () => (/* reexport safe */ _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.RNN),
/* harmony export */   "RNNCell": () => (/* reexport safe */ _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.RNNCell),
/* harmony export */   "activation": () => (/* binding */ activation),
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "alphaDropout": () => (/* binding */ alphaDropout),
/* harmony export */   "average": () => (/* binding */ average),
/* harmony export */   "averagePooling1d": () => (/* binding */ averagePooling1d),
/* harmony export */   "averagePooling2d": () => (/* binding */ averagePooling2d),
/* harmony export */   "averagePooling3d": () => (/* binding */ averagePooling3d),
/* harmony export */   "avgPool1d": () => (/* binding */ avgPool1d),
/* harmony export */   "avgPool2d": () => (/* binding */ avgPool2d),
/* harmony export */   "avgPool3d": () => (/* binding */ avgPool3d),
/* harmony export */   "avgPooling1d": () => (/* binding */ avgPooling1d),
/* harmony export */   "avgPooling2d": () => (/* binding */ avgPooling2d),
/* harmony export */   "avgPooling3d": () => (/* binding */ avgPooling3d),
/* harmony export */   "batchNormalization": () => (/* binding */ batchNormalization),
/* harmony export */   "bidirectional": () => (/* binding */ bidirectional),
/* harmony export */   "categoryEncoding": () => (/* binding */ categoryEncoding),
/* harmony export */   "centerCrop": () => (/* binding */ centerCrop),
/* harmony export */   "concatenate": () => (/* binding */ concatenate),
/* harmony export */   "conv1d": () => (/* binding */ conv1d),
/* harmony export */   "conv2d": () => (/* binding */ conv2d),
/* harmony export */   "conv2dTranspose": () => (/* binding */ conv2dTranspose),
/* harmony export */   "conv3d": () => (/* binding */ conv3d),
/* harmony export */   "conv3dTranspose": () => (/* binding */ conv3dTranspose),
/* harmony export */   "convLstm2d": () => (/* binding */ convLstm2d),
/* harmony export */   "convLstm2dCell": () => (/* binding */ convLstm2dCell),
/* harmony export */   "cropping2D": () => (/* binding */ cropping2D),
/* harmony export */   "dense": () => (/* binding */ dense),
/* harmony export */   "depthwiseConv2d": () => (/* binding */ depthwiseConv2d),
/* harmony export */   "dot": () => (/* binding */ dot),
/* harmony export */   "dropout": () => (/* binding */ dropout),
/* harmony export */   "elu": () => (/* binding */ elu),
/* harmony export */   "embedding": () => (/* binding */ embedding),
/* harmony export */   "flatten": () => (/* binding */ flatten),
/* harmony export */   "gaussianDropout": () => (/* binding */ gaussianDropout),
/* harmony export */   "gaussianNoise": () => (/* binding */ gaussianNoise),
/* harmony export */   "globalAveragePooling1d": () => (/* binding */ globalAveragePooling1d),
/* harmony export */   "globalAveragePooling2d": () => (/* binding */ globalAveragePooling2d),
/* harmony export */   "globalMaxPool1d": () => (/* binding */ globalMaxPool1d),
/* harmony export */   "globalMaxPool2d": () => (/* binding */ globalMaxPool2d),
/* harmony export */   "globalMaxPooling1d": () => (/* binding */ globalMaxPooling1d),
/* harmony export */   "globalMaxPooling2d": () => (/* binding */ globalMaxPooling2d),
/* harmony export */   "gru": () => (/* binding */ gru),
/* harmony export */   "gruCell": () => (/* binding */ gruCell),
/* harmony export */   "input": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_2__.input),
/* harmony export */   "inputLayer": () => (/* binding */ inputLayer),
/* harmony export */   "layerNormalization": () => (/* binding */ layerNormalization),
/* harmony export */   "leakyReLU": () => (/* binding */ leakyReLU),
/* harmony export */   "lstm": () => (/* binding */ lstm),
/* harmony export */   "lstmCell": () => (/* binding */ lstmCell),
/* harmony export */   "masking": () => (/* binding */ masking),
/* harmony export */   "maxPool1d": () => (/* binding */ maxPool1d),
/* harmony export */   "maxPool2d": () => (/* binding */ maxPool2d),
/* harmony export */   "maxPooling1d": () => (/* binding */ maxPooling1d),
/* harmony export */   "maxPooling2d": () => (/* binding */ maxPooling2d),
/* harmony export */   "maxPooling3d": () => (/* binding */ maxPooling3d),
/* harmony export */   "maximum": () => (/* binding */ maximum),
/* harmony export */   "minimum": () => (/* binding */ minimum),
/* harmony export */   "multiply": () => (/* binding */ multiply),
/* harmony export */   "permute": () => (/* binding */ permute),
/* harmony export */   "prelu": () => (/* binding */ prelu),
/* harmony export */   "randomWidth": () => (/* binding */ randomWidth),
/* harmony export */   "reLU": () => (/* binding */ reLU),
/* harmony export */   "repeatVector": () => (/* binding */ repeatVector),
/* harmony export */   "rescaling": () => (/* binding */ rescaling),
/* harmony export */   "reshape": () => (/* binding */ reshape),
/* harmony export */   "resizing": () => (/* binding */ resizing),
/* harmony export */   "rnn": () => (/* binding */ rnn),
/* harmony export */   "separableConv2d": () => (/* binding */ separableConv2d),
/* harmony export */   "simpleRNN": () => (/* binding */ simpleRNN),
/* harmony export */   "simpleRNNCell": () => (/* binding */ simpleRNNCell),
/* harmony export */   "softmax": () => (/* binding */ softmax),
/* harmony export */   "spatialDropout1d": () => (/* binding */ spatialDropout1d),
/* harmony export */   "stackedRNNCells": () => (/* binding */ stackedRNNCells),
/* harmony export */   "thresholdedReLU": () => (/* binding */ thresholdedReLU),
/* harmony export */   "timeDistributed": () => (/* binding */ timeDistributed),
/* harmony export */   "upSampling2d": () => (/* binding */ upSampling2d),
/* harmony export */   "zeroPadding2d": () => (/* binding */ zeroPadding2d)
/* harmony export */ });
/* harmony import */ var _engine_input_layer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine/input_layer */ 45367);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine/topology */ 59996);
/* harmony import */ var _exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./exports */ 46897);
/* harmony import */ var _layers_advanced_activations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./layers/advanced_activations */ 9489);
/* harmony import */ var _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./layers/convolutional */ 52684);
/* harmony import */ var _layers_convolutional_depthwise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layers/convolutional_depthwise */ 45957);
/* harmony import */ var _layers_convolutional_recurrent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./layers/convolutional_recurrent */ 99729);
/* harmony import */ var _layers_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./layers/core */ 60298);
/* harmony import */ var _layers_embeddings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./layers/embeddings */ 72409);
/* harmony import */ var _layers_merge__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./layers/merge */ 56125);
/* harmony import */ var _layers_noise__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./layers/noise */ 19735);
/* harmony import */ var _layers_normalization__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./layers/normalization */ 29428);
/* harmony import */ var _layers_padding__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./layers/padding */ 95877);
/* harmony import */ var _layers_pooling__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./layers/pooling */ 53239);
/* harmony import */ var _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./layers/recurrent */ 29998);
/* harmony import */ var _layers_wrappers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./layers/wrappers */ 64088);
/* harmony import */ var _layers_preprocessing_image_preprocessing__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./layers/preprocessing/image_preprocessing */ 7139);
/* harmony import */ var _layers_preprocessing_center_crop__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./layers/preprocessing/center_crop */ 199);
/* harmony import */ var _layers_preprocessing_category_encoding__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./layers/preprocessing/category_encoding */ 45408);
/* harmony import */ var _layers_preprocessing_image_resizing__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./layers/preprocessing/image_resizing */ 57411);
/* harmony import */ var _layers_preprocessing_random_width__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./layers/preprocessing/random_width */ 47882);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */





















// TODO(cais): Add doc string to all the public static functions in this
//   class; include exectuable JavaScript code snippets where applicable
//   (b/74074458).
// Input Layer.
/**
 * An input layer is an entry point into a `tf.LayersModel`.
 *
 * `InputLayer` is generated automatically for `tf.Sequential` models by
 * specifying the `inputshape` or `batchInputShape` for the first layer.  It
 * should not be specified explicitly. However, it can be useful sometimes,
 * e.g., when constructing a sequential model from a subset of another
 * sequential model's layers. Like the code snippet below shows.
 *
 * ```js
 * // Define a model which simply adds two inputs.
 * const model1 = tf.sequential();
 * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));
 * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
 * model1.summary();
 * model1.predict(tf.zeros([1, 4])).print();
 *
 * // Construct another model, reusing the second layer of `model1` while
 * // not using the first layer of `model1`. Note that you cannot add the second
 * // layer of `model` directly as the first layer of the new sequential model,
 * // because doing so will lead to an error related to the fact that the layer
 * // is not an input layer. Instead, you need to create an `inputLayer` and add
 * // it to the new sequential model before adding the reused layer.
 * const model2 = tf.sequential();
 * // Use an inputShape that matches the input shape of `model1`'s second
 * // layer.
 * model2.add(tf.layers.inputLayer({inputShape: [3]}));
 * model2.add(model1.layers[1]);
 * model2.summary();
 * model2.predict(tf.zeros([1, 3])).print();
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'}
 */
function inputLayer(args) {
  return new _engine_input_layer__WEBPACK_IMPORTED_MODULE_0__.InputLayer(args);
}
// Advanced Activation Layers.
/**
 * Exponential Linear Unit (ELU).
 *
 * It follows:
 * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,
 * `f(x) = x for x >= 0`.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * References:
 *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units
 * (ELUs)](https://arxiv.org/abs/1511.07289v1)
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */
function elu(args) {
  return new _layers_advanced_activations__WEBPACK_IMPORTED_MODULE_3__.ELU(args);
}
/**
 * Rectified Linear Unit activation function.
 *
 * Input shape:
 *   Arbitrary. Use the config field `inputShape` (Array of integers, does
 *   not include the sample axis) when using this layer as the first layer
 *   in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */
function reLU(args) {
  return new _layers_advanced_activations__WEBPACK_IMPORTED_MODULE_3__.ReLU(args);
}
/**
 * Leaky version of a rectified linear unit.
 *
 * It allows a small gradient when the unit is not active:
 * `f(x) = alpha * x for x < 0.`
 * `f(x) = x for x >= 0.`
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */
function leakyReLU(args) {
  return new _layers_advanced_activations__WEBPACK_IMPORTED_MODULE_3__.LeakyReLU(args);
}
/**
 * Parameterized version of a leaky rectified linear unit.
 *
 * It follows
 * `f(x) = alpha * x for x < 0.`
 * `f(x) = x for x >= 0.`
 * wherein `alpha` is a trainable weight.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */
function prelu(args) {
  return new _layers_advanced_activations__WEBPACK_IMPORTED_MODULE_3__.PReLU(args);
}
/**
 * Softmax activation layer.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */
function softmax(args) {
  return new _layers_advanced_activations__WEBPACK_IMPORTED_MODULE_3__.Softmax(args);
}
/**
 * Thresholded Rectified Linear Unit.
 *
 * It follows:
 * `f(x) = x for x > theta`,
 * `f(x) = 0 otherwise`.
 *
 * Input shape:
 *   Arbitrary. Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 * Output shape:
 *   Same shape as the input.
 *
 * References:
 *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting
 * Features](http://arxiv.org/abs/1402.3337)
 *
 * @doc {
 *   heading: 'Layers',
 *   subheading: 'Advanced Activation',
 *   namespace: 'layers'
 * }
 */
function thresholdedReLU(args) {
  return new _layers_advanced_activations__WEBPACK_IMPORTED_MODULE_3__.ThresholdedReLU(args);
}
// Convolutional Layers.
/**
 * 1D convolution layer (e.g., temporal convolution).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input over a single spatial (or temporal) dimension
 * to produce a tensor of outputs.
 *
 * If `use_bias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model, provide an
 * `inputShape` argument `Array` or `null`.
 *
 * For example, `inputShape` would be:
 * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors
 * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}
 */
function conv1d(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.Conv1D(args);
}
/**
 * 2D convolution layer (e.g. spatial convolution over images).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input to produce a tensor of outputs.
 *
 * If `useBias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model,
 * provide the keyword argument `inputShape`
 * (Array of integers, does not include the sample axis),
 * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures
 * in `dataFormat='channelsLast'`.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */
function conv2d(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.Conv2D(args);
}
/**
 * Transposed convolutional layer (sometimes called Deconvolution).
 *
 * The need for transposed convolutions generally arises
 * from the desire to use a transformation going in the opposite direction of
 * a normal convolution, i.e., from something that has the shape of the output
 * of some convolution to something that has the shape of its input while
 * maintaining a connectivity pattern that is compatible with said
 * convolution.
 *
 * When using this layer as the first layer in a model, provide the
 * configuration `inputShape` (`Array` of integers, does not include the
 * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in
 * `dataFormat: 'channelsLast'`.
 *
 * Input shape:
 *   4D tensor with shape:
 *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.
 *   or 4D tensor with shape
 *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast'`.
 *
 * Output shape:
 *   4D tensor with shape:
 *   `[batch, filters, newRows, newCols]` if `dataFormat` is
 * `'channelsFirst'`. or 4D tensor with shape:
 *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.
 *
 * References:
 *   - [A guide to convolution arithmetic for deep
 * learning](https://arxiv.org/abs/1603.07285v1)
 *   - [Deconvolutional
 * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */
function conv2dTranspose(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.Conv2DTranspose(args);
}
/**
 * 3D convolution layer (e.g. spatial convolution over volumes).
 *
 * This layer creates a convolution kernel that is convolved
 * with the layer input to produce a tensor of outputs.
 *
 * If `useBias` is True, a bias vector is created and added to the outputs.
 *
 * If `activation` is not `null`, it is applied to the outputs as well.
 *
 * When using this layer as the first layer in a model,
 * provide the keyword argument `inputShape`
 * (Array of integers, does not include the sample axis),
 * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes
 * in `dataFormat='channelsLast'`.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */
function conv3d(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.Conv3D(args);
}
function conv3dTranspose(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.Conv3DTranspose(args);
}
/**
 * Depthwise separable 2D convolution.
 *
 * Separable convolution consists of first performing
 * a depthwise spatial convolution
 * (which acts on each input channel separately)
 * followed by a pointwise convolution which mixes together the resulting
 * output channels. The `depthMultiplier` argument controls how many
 * output channels are generated per input channel in the depthwise step.
 *
 * Intuitively, separable convolutions can be understood as
 * a way to factorize a convolution kernel into two smaller kernels,
 * or as an extreme version of an Inception block.
 *
 * Input shape:
 *   4D tensor with shape:
 *     `[batch, channels, rows, cols]` if data_format='channelsFirst'
 *   or 4D tensor with shape:
 *     `[batch, rows, cols, channels]` if data_format='channelsLast'.
 *
 * Output shape:
 *   4D tensor with shape:
 *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'
 *   or 4D tensor with shape:
 *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.
 *     `rows` and `cols` values might have changed due to padding.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */
function separableConv2d(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.SeparableConv2D(args);
}
/**
 * Cropping layer for 2D input (e.g., image).
 *
 * This layer can crop an input
 * at the top, bottom, left and right side of an image tensor.
 *
 * Input shape:
 *   4D tensor with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, rows, cols, channels]`
 *   - If `data_format` is `"channels_first"`:
 *     `[batch, channels, rows, cols]`.
 *
 * Output shape:
 *   4D with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, croppedRows, croppedCols, channels]`
 *    - If `dataFormat` is `"channelsFirst"`:
 *     `[batch, channels, croppedRows, croppedCols]`.
 *
 * Examples
 * ```js
 *
 * const model = tf.sequential();
 * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],
 *                                inputShape: [128, 128, 3]}));
 * //now output shape is [batch, 124, 124, 3]
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */
function cropping2D(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.Cropping2D(args);
}
/**
 * Upsampling layer for 2D inputs.
 *
 * Repeats the rows and columns of the data
 * by size[0] and size[1] respectively.
 *
 *
 * Input shape:
 *    4D tensor with shape:
 *     - If `dataFormat` is `"channelsLast"`:
 *         `[batch, rows, cols, channels]`
 *     - If `dataFormat` is `"channelsFirst"`:
 *        `[batch, channels, rows, cols]`
 *
 * Output shape:
 *     4D tensor with shape:
 *     - If `dataFormat` is `"channelsLast"`:
 *        `[batch, upsampledRows, upsampledCols, channels]`
 *     - If `dataFormat` is `"channelsFirst"`:
 *         `[batch, channels, upsampledRows, upsampledCols]`
 *
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */
function upSampling2d(args) {
  return new _layers_convolutional__WEBPACK_IMPORTED_MODULE_4__.UpSampling2D(args);
}
// Convolutional(depthwise) Layers.
/**
 * Depthwise separable 2D convolution.
 *
 * Depthwise Separable convolutions consists in performing just the first step
 * in a depthwise spatial convolution (which acts on each input channel
 * separately). The `depthMultiplier` argument controls how many output channels
 * are generated per input channel in the depthwise step.
 *
 * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}
 */
function depthwiseConv2d(args) {
  return new _layers_convolutional_depthwise__WEBPACK_IMPORTED_MODULE_5__.DepthwiseConv2D(args);
}
// Basic Layers.
/**
 * Applies an activation function to an output.
 *
 * This layer applies element-wise activation function.  Other layers, notably
 * `dense` can also apply activation functions.  Use this isolated activation
 * function to extract the values before and after the
 * activation. For instance:
 *
 * ```js
 * const input = tf.input({shape: [5]});
 * const denseLayer = tf.layers.dense({units: 1});
 * const activationLayer = tf.layers.activation({activation: 'relu6'});
 *
 * // Obtain the output symbolic tensors by applying the layers in order.
 * const denseOutput = denseLayer.apply(input);
 * const activationOutput = activationLayer.apply(denseOutput);
 *
 * // Create the model based on the inputs.
 * const model = tf.model({
 *     inputs: input,
 *     outputs: [denseOutput, activationOutput]
 * });
 *
 * // Collect both outputs and print separately.
 * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));
 * denseOut.print();
 * activationOut.print();
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function activation(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.Activation(args);
}
/**
 * Creates a dense (fully connected) layer.
 *
 * This layer implements the operation:
 *   `output = activation(dot(input, kernel) + bias)`
 *
 * `activation` is the element-wise activation function
 *   passed as the `activation` argument.
 *
 * `kernel` is a weights matrix created by the layer.
 *
 * `bias` is a bias vector created by the layer (only applicable if `useBias`
 * is `true`).
 *
 * **Input shape:**
 *
 *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.
 *
 *   The most common situation would be
 *   a 2D input with shape `(batchSize, inputDim)`.
 *
 * **Output shape:**
 *
 *   nD tensor with shape: `(batchSize, ..., units)`.
 *
 *   For instance, for a 2D input with shape `(batchSize, inputDim)`,
 *   the output would have shape `(batchSize, units)`.
 *
 * Note: if the input to the layer has a rank greater than 2, then it is
 * flattened prior to the initial dot product with the kernel.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function dense(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.Dense(args);
}
/**
 * Applies
 * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to
 * the input.
 *
 * Dropout consists in randomly setting a fraction `rate` of input units to 0 at
 * each update during training time, which helps prevent overfitting.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function dropout(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.Dropout(args);
}
/**
 * Spatial 1D version of Dropout.
 *
 * This Layer type performs the same function as the Dropout layer, but it drops
 * entire 1D feature maps instead of individual elements. For example, if an
 * input example consists of 3 timesteps and the feature map for each timestep
 * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps
 * of the 1st timesteps and 2nd timesteps completely while sparing all feature
 * elements of the 3rd timestep.
 *
 * If adjacent frames (timesteps) are strongly correlated (as is normally the
 * case in early convolution layers), regular dropout will not regularize the
 * activation and will otherwise just result in merely an effective learning
 * rate decrease. In this case, `spatialDropout1d` will help promote
 * independence among feature maps and should be used instead.
 *
 * **Arguments:**
 *   rate: A floating-point number >=0 and <=1. Fraction of the input elements
 *     to drop.
 *
 * **Input shape:**
 *   3D tensor with shape `(samples, timesteps, channels)`.
 *
 * **Output shape:**
 *   Same as the input shape.
 *
 * References:
 *   - [Efficient Object Localization Using Convolutional
 *      Networks](https://arxiv.org/abs/1411.4280)
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function spatialDropout1d(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.SpatialDropout1D(args);
}
/**
 * Flattens the input. Does not affect the batch size.
 *
 * A `Flatten` layer flattens each batch in its inputs to 1D (making the output
 * 2D).
 *
 * For example:
 *
 * ```js
 * const input = tf.input({shape: [4, 3]});
 * const flattenLayer = tf.layers.flatten();
 * // Inspect the inferred output shape of the flatten layer, which
 * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the
 * // flattening. (The 1st dimension is the undermined batch size.)
 * console.log(JSON.stringify(flattenLayer.apply(input).shape));
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function flatten(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.Flatten(args);
}
/**
 * Repeats the input n times in a new dimension.
 *
 * ```js
 *  const model = tf.sequential();
 *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));
 *  const x = tf.tensor2d([[10, 20]]);
 *  // Use the model to do inference on a data point the model hasn't seen
 *  model.predict(x).print();
 *  // output shape is now [batch, 2, 4]
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function repeatVector(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.RepeatVector(args);
}
/**
 * Reshapes an input to a certain shape.
 *
 * ```js
 * const input = tf.input({shape: [4, 3]});
 * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});
 * // Inspect the inferred output shape of the Reshape layer, which
 * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)
 * console.log(JSON.stringify(reshapeLayer.apply(input).shape));
 * ```
 *
 * Input shape:
 *   Arbitrary, although all dimensions in the input shape must be fixed.
 *   Use the configuration `inputShape` when using this layer as the
 *   first layer in a model.
 *
 *
 * Output shape:
 *   [batchSize, targetShape[0], targetShape[1], ...,
 *    targetShape[targetShape.length - 1]].
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function reshape(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.Reshape(args);
}
/**
 * Permutes the dimensions of the input according to a given pattern.
 *
 * Useful for, e.g., connecting RNNs and convnets together.
 *
 * Example:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.permute({
 *   dims: [2, 1],
 *   inputShape: [10, 64]
 * }));
 * console.log(model.outputShape);
 * // Now model's output shape is [null, 64, 10], where null is the
 * // unpermuted sample (batch) dimension.
 * ```
 *
 * Input shape:
 *   Arbitrary. Use the configuration field `inputShape` when using this
 *   layer as the first layer in a model.
 *
 * Output shape:
 *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,
 *   permuted) according to the `dims` configuration of this layer.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function permute(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.Permute(args);
}
/**
 * Maps positive integers (indices) into dense vectors of fixed size.
 * E.g. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]
 *
 * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.
 *
 * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,
 * outputDim]`.
 *
 * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}
 */
function embedding(args) {
  return new _layers_embeddings__WEBPACK_IMPORTED_MODULE_8__.Embedding(args);
}
// Merge Layers.
/**
 * Layer that performs element-wise addition on an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). The inputs are specified as an
 * `Array` when the `apply` method of the `Add` layer instance is called. For
 * example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const addLayer = tf.layers.add();
 * const sum = addLayer.apply([input1, input2]);
 * console.log(JSON.stringify(sum.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */
function add(args) {
  return new _layers_merge__WEBPACK_IMPORTED_MODULE_9__.Add(args);
}
/**
 * Layer that performs element-wise averaging on an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const averageLayer = tf.layers.average();
 * const average = averageLayer.apply([input1, input2]);
 * console.log(JSON.stringify(average.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */
function average(args) {
  return new _layers_merge__WEBPACK_IMPORTED_MODULE_9__.Average(args);
}
/**
 * Layer that concatenates an `Array` of inputs.
 *
 * It takes a list of tensors, all of the same shape except for the
 * concatenation axis, and returns a single tensor, the concatenation
 * of all inputs. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 3]});
 * const concatLayer = tf.layers.concatenate();
 * const output = concatLayer.apply([input1, input2]);
 * console.log(JSON.stringify(output.shape));
 * // You get [null, 2, 5], with the first dimension as the undetermined batch
 * // dimension. The last dimension (5) is the result of concatenating the
 * // last dimensions of the inputs (2 and 3).
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */
function concatenate(args) {
  return new _layers_merge__WEBPACK_IMPORTED_MODULE_9__.Concatenate(args);
}
/**
 * Layer that computes the element-wise maximum of an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const maxLayer = tf.layers.maximum();
 * const max = maxLayer.apply([input1, input2]);
 * console.log(JSON.stringify(max.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */
function maximum(args) {
  return new _layers_merge__WEBPACK_IMPORTED_MODULE_9__.Maximum(args);
}
/**
 * Layer that computes the element-wise minimum of an `Array` of inputs.
 *
 * It takes as input a list of tensors, all of the same shape, and returns a
 * single tensor (also of the same shape). For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const minLayer = tf.layers.minimum();
 * const min = minLayer.apply([input1, input2]);
 * console.log(JSON.stringify(min.shape));
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */
function minimum(args) {
  return new _layers_merge__WEBPACK_IMPORTED_MODULE_9__.Minimum(args);
}
/**
 * Layer that multiplies (element-wise) an `Array` of inputs.
 *
 * It takes as input an Array of tensors, all of the same
 * shape, and returns a single tensor (also of the same shape).
 * For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const input3 = tf.input({shape: [2, 2]});
 * const multiplyLayer = tf.layers.multiply();
 * const product = multiplyLayer.apply([input1, input2, input3]);
 * console.log(product.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */
function multiply(args) {
  return new _layers_merge__WEBPACK_IMPORTED_MODULE_9__.Multiply(args);
}
/**
 * Layer that computes a dot product between samples in two tensors.
 *
 * E.g., if applied to a list of two tensors `a` and `b` both of shape
 * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,
 * where each entry at index `[i, 0]` will be the dot product between
 * `a[i, :]` and `b[i, :]`.
 *
 * Example:
 *
 * ```js
 * const dotLayer = tf.layers.dot({axes: -1});
 * const x1 = tf.tensor2d([[10, 20], [30, 40]]);
 * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);
 *
 * // Invoke the layer's apply() method in eager (imperative) mode.
 * const y = dotLayer.apply([x1, x2]);
 * y.print();
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}
 */
function dot(args) {
  return new _layers_merge__WEBPACK_IMPORTED_MODULE_9__.Dot(args);
}
// Normalization Layers.
/**
 * Batch normalization layer (Ioffe and Szegedy, 2014).
 *
 * Normalize the activations of the previous layer at each batch,
 * i.e. applies a transformation that maintains the mean activation
 * close to 0 and the activation standard deviation close to 1.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does
 *   not include the sample axis) when calling the constructor of this class,
 *   if this layer is used as a first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Batch Normalization: Accelerating Deep Network Training by Reducing
 * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)
 *
 * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}
 */
function batchNormalization(args) {
  return new _layers_normalization__WEBPACK_IMPORTED_MODULE_11__.BatchNormalization(args);
}
/**
 * Layer-normalization layer (Ba et al., 2016).
 *
 * Normalizes the activations of the previous layer for each given example in a
 * batch independently, instead of across a batch like in `batchNormalization`.
 * In other words, this layer applies a transformation that maintains the mean
 * activation within each example close to 0 and activation variance close to 1.
 *
 * Input shape:
 *   Arbitrary. Use the argument `inputShape` when using this layer as the first
 *   layer in a model.
 *
 * Output shape:
 *   Same as input.
 *
 * References:
 *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)
 *
 * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}
 */
function layerNormalization(args) {
  return new _layers_normalization__WEBPACK_IMPORTED_MODULE_11__.LayerNormalization(args);
}
// Padding Layers.
/**
 * Zero-padding layer for 2D input (e.g., image).
 *
 * This layer can add rows and columns of zeros
 * at the top, bottom, left and right side of an image tensor.
 *
 * Input shape:
 *   4D tensor with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, rows, cols, channels]`
 *   - If `data_format` is `"channels_first"`:
 *     `[batch, channels, rows, cols]`.
 *
 * Output shape:
 *   4D with shape:
 *   - If `dataFormat` is `"channelsLast"`:
 *     `[batch, paddedRows, paddedCols, channels]`
 *    - If `dataFormat` is `"channelsFirst"`:
 *     `[batch, channels, paddedRows, paddedCols]`.
 *
 * @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'}
 */
function zeroPadding2d(args) {
  return new _layers_padding__WEBPACK_IMPORTED_MODULE_12__.ZeroPadding2D(args);
}
// Pooling Layers.
/**
 * Average pooling operation for spatial data.
 *
 * Input shape: `[batchSize, inLength, channels]`
 *
 * Output shape: `[batchSize, pooledLength, channels]`
 *
 * `tf.avgPool1d` is an alias.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function averagePooling1d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.AveragePooling1D(args);
}
function avgPool1d(args) {
  return averagePooling1d(args);
}
// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
function avgPooling1d(args) {
  return averagePooling1d(args);
}
/**
 * Average pooling operation for spatial data.
 *
 * Input shape:
 *  - If `dataFormat === CHANNEL_LAST`:
 *      4D tensor with shape:
 *      `[batchSize, rows, cols, channels]`
 *  - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *      `[batchSize, channels, rows, cols]`
 *
 * Output shape
 *  - If `dataFormat === CHANNEL_LAST`:
 *      4D tensor with shape:
 *      `[batchSize, pooledRows, pooledCols, channels]`
 *  - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *      `[batchSize, channels, pooledRows, pooledCols]`
 *
 * `tf.avgPool2d` is an alias.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function averagePooling2d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.AveragePooling2D(args);
}
function avgPool2d(args) {
  return averagePooling2d(args);
}
// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
function avgPooling2d(args) {
  return averagePooling2d(args);
}
/**
 * Average pooling operation for 3D data.
 *
 * Input shape
 *   - If `dataFormat === channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, depths, rows, cols, channels]`
 *   - If `dataFormat === channelsFirst`:
 *      4D tensor with shape:
 *       `[batchSize, channels, depths, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=channelsFirst`:
 *       5D tensor with shape:
 *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function averagePooling3d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.AveragePooling3D(args);
}
function avgPool3d(args) {
  return averagePooling3d(args);
}
// For backwards compatibility.
// See https://github.com/tensorflow/tfjs/issues/152
function avgPooling3d(args) {
  return averagePooling3d(args);
}
/**
 * Global average pooling operation for temporal data.
 *
 * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.
 *
 * Output Shape: 2D tensor with shape: `[batchSize, features]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function globalAveragePooling1d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.GlobalAveragePooling1D(args);
}
/**
 * Global average pooling operation for spatial data.
 *
 * Input shape:
 *   - If `dataFormat` is `CHANNEL_LAST`:
 *       4D tensor with shape: `[batchSize, rows, cols, channels]`.
 *   - If `dataFormat` is `CHANNEL_FIRST`:
 *       4D tensor with shape: `[batchSize, channels, rows, cols]`.
 *
 * Output shape:
 *   2D tensor with shape: `[batchSize, channels]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function globalAveragePooling2d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.GlobalAveragePooling2D(args);
}
/**
 * Global max pooling operation for temporal data.
 *
 * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.
 *
 * Output Shape: 2D tensor with shape: `[batchSize, features]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function globalMaxPooling1d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.GlobalMaxPooling1D(args);
}
/**
 * Global max pooling operation for spatial data.
 *
 * Input shape:
 *   - If `dataFormat` is `CHANNEL_LAST`:
 *       4D tensor with shape: `[batchSize, rows, cols, channels]`.
 *   - If `dataFormat` is `CHANNEL_FIRST`:
 *       4D tensor with shape: `[batchSize, channels, rows, cols]`.
 *
 * Output shape:
 *   2D tensor with shape: `[batchSize, channels]`.
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function globalMaxPooling2d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.GlobalMaxPooling2D(args);
}
/**
 * Max pooling operation for temporal data.
 *
 * Input shape:  `[batchSize, inLength, channels]`
 *
 * Output shape: `[batchSize, pooledLength, channels]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function maxPooling1d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.MaxPooling1D(args);
}
/**
 * Max pooling operation for spatial data.
 *
 * Input shape
 *   - If `dataFormat === CHANNEL_LAST`:
 *       4D tensor with shape:
 *       `[batchSize, rows, cols, channels]`
 *   - If `dataFormat === CHANNEL_FIRST`:
 *      4D tensor with shape:
 *       `[batchSize, channels, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=CHANNEL_LAST`:
 *       4D tensor with shape:
 *       `[batchSize, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=CHANNEL_FIRST`:
 *       4D tensor with shape:
 *       `[batchSize, channels, pooledRows, pooledCols]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function maxPooling2d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.MaxPooling2D(args);
}
/**
 * Max pooling operation for 3D data.
 *
 * Input shape
 *   - If `dataFormat === channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, depths, rows, cols, channels]`
 *   - If `dataFormat === channelsFirst`:
 *      5D tensor with shape:
 *       `[batchSize, channels, depths, rows, cols]`
 *
 * Output shape
 *   - If `dataFormat=channelsLast`:
 *       5D tensor with shape:
 *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`
 *   - If `dataFormat=channelsFirst`:
 *       5D tensor with shape:
 *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`
 *
 * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}
 */
function maxPooling3d(args) {
  return new _layers_pooling__WEBPACK_IMPORTED_MODULE_13__.MaxPooling3D(args);
}
// Recurrent Layers.
/**
 * Gated Recurrent Unit - Cho et al. 2014.
 *
 * This is an `RNN` layer consisting of one `GRUCell`. However, unlike
 * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const rnn = tf.layers.gru({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `GRUCell`'s number of units.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function gru(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.GRU(args);
}
/**
 * Cell class for `GRU`.
 *
 * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `GRU` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.gruCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.gruCell({units: 4}),
 *   tf.layers.gruCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `gruCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `GRUCell`, use the
 * `tf.layers.gru`.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function gruCell(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.GRUCell(args);
}
/**
 * Long-Short Term Memory layer - Hochreiter 1997.
 *
 * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike
 * the underlying `LSTMCell`, the `apply` method of `LSTM` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const lstm = tf.layers.lstm({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = lstm.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `LSTMCell`'s number of units.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function lstm(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.LSTM(args);
}
/**
 * Cell class for `LSTM`.
 *
 * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `LSTM` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.lstmCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.lstmCell({units: 4}),
 *   tf.layers.lstmCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `lstmCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `LSTMCell`, use the
 * `tf.layers.lstm`.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function lstmCell(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.LSTMCell(args);
}
/**
 * Fully-connected RNN where the output is to be fed back to input.
 *
 * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike
 * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates
 * on a sequence of inputs. The shape of the input (not including the first,
 * batch dimension) needs to be at least 2-D, with the first dimension being
 * time steps. For example:
 *
 * ```js
 * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});
 *
 * // Create an input with 10 time steps.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the `SimpleRNNCell`'s number of units.
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function simpleRNN(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.SimpleRNN(args);
}
/**
 * Cell class for `SimpleRNN`.
 *
 * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its
 * `apply` method takes the input data of only a single time step and returns
 * the cell's output at the time step, while `SimpleRNN` takes the input data
 * over a number of time steps. For example:
 *
 * ```js
 * const cell = tf.layers.simpleRNNCell({units: 2});
 * const input = tf.input({shape: [10]});
 * const output = cell.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10]: This is the cell's output at a single time step. The 1st
 * // dimension is the unknown batch size.
 * ```
 *
 * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The
 * most typical use of this workflow is to combine a number of cells into a
 * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an
 * RNN. For example:
 *
 * ```js
 * const cells = [
 *   tf.layers.simpleRNNCell({units: 4}),
 *   tf.layers.simpleRNNCell({units: 8}),
 * ];
 * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});
 *
 * // Create an input with 10 time steps and a length-20 vector at each step.
 * const input = tf.input({shape: [10, 20]});
 * const output = rnn.apply(input);
 *
 * console.log(JSON.stringify(output.shape));
 * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the
 * // same as the sequence length of `input`, due to `returnSequences`: `true`;
 * // 3rd dimension is the last `SimpleRNNCell`'s number of units.
 * ```
 *
 * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the
 * `tf.layers.simpleRNN`.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function simpleRNNCell(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.SimpleRNNCell(args);
}
/**
 * Convolutional LSTM layer - Xingjian Shi 2015.
 *
 * This is a `ConvRNN2D` layer consisting of one `ConvLSTM2DCell`. However,
 * unlike the underlying `ConvLSTM2DCell`, the `apply` method of `ConvLSTM2D`
 * operates on a sequence of inputs. The shape of the input (not including the
 * first, batch dimension) needs to be 4-D, with the first dimension being time
 * steps. For example:
 *
 * ```js
 * const filters = 3;
 * const kernelSize = 3;
 *
 * const batchSize = 4;
 * const sequenceLength = 2;
 * const size = 5;
 * const channels = 3;
 *
 * const inputShape = [batchSize, sequenceLength, size, size, channels];
 * const input = tf.ones(inputShape);
 *
 * const layer = tf.layers.convLstm2d({filters, kernelSize});
 *
 * const output = layer.apply(input);
 * ```
 */
/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */
function convLstm2d(args) {
  return new _layers_convolutional_recurrent__WEBPACK_IMPORTED_MODULE_6__.ConvLSTM2D(args);
}
/**
 * Cell class for `ConvLSTM2D`.
 *
 * `ConvLSTM2DCell` is distinct from the `ConvRNN2D` subclass `ConvLSTM2D` in
 * that its `call` method takes the input data of only a single time step and
 * returns the cell's output at the time step, while `ConvLSTM2D` takes the
 * input data over a number of time steps. For example:
 *
 * ```js
 * const filters = 3;
 * const kernelSize = 3;
 *
 * const sequenceLength = 1;
 * const size = 5;
 * const channels = 3;
 *
 * const inputShape = [sequenceLength, size, size, channels];
 * const input = tf.ones(inputShape);
 *
 * const cell = tf.layers.convLstm2dCell({filters, kernelSize});
 *
 * cell.build(input.shape);
 *
 * const outputSize = size - kernelSize + 1;
 * const outShape = [sequenceLength, outputSize, outputSize, filters];
 *
 * const initialH = tf.zeros(outShape);
 * const initialC = tf.zeros(outShape);
 *
 * const [o, h, c] = cell.call([input, initialH, initialC], {});
 * ```
 */
/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */
function convLstm2dCell(args) {
  return new _layers_convolutional_recurrent__WEBPACK_IMPORTED_MODULE_6__.ConvLSTM2DCell(args);
}
/**
 * Base class for recurrent layers.
 *
 * Input shape:
 *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.
 *
 * Output shape:
 *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first
 *     tensor is the output. The remaining tensors are the states at the
 *     last time step, each with shape `[batchSize, units]`.
 *   - if `returnSequences`, the output will have shape
 *     `[batchSize, timeSteps, units]`.
 *   - else, the output will have shape `[batchSize, units]`.
 *
 * Masking:
 *   This layer supports masking for input data with a variable number
 *   of timesteps. To introduce masks to your data,
 *   use an embedding layer with the `mask_zero` parameter
 *   set to `True`.
 *
 * Notes on using statefulness in RNNs:
 *   You can set RNN layers to be 'stateful', which means that the states
 *   computed for the samples in one batch will be reused as initial states
 *   for the samples in the next batch. This assumes a one-to-one mapping
 *   between samples in different successive batches.
 *
 *   To enable statefulness:
 *     - specify `stateful: true` in the layer constructor.
 *     - specify a fixed batch size for your model, by passing
 *       if sequential model:
 *         `batchInputShape=[...]` to the first layer in your model.
 *       else for functional model with 1 or more Input layers:
 *         `batchShape=[...]` to all the first layers in your model.
 *       This is the expected shape of your inputs *including the batch size*.
 *       It should be a tuple of integers, e.g. `(32, 10, 100)`.
 *     - specify `shuffle=False` when calling fit().
 *
 *   To reset the states of your model, call `.resetStates()` on either
 *   a specific layer, or on your entire model.
 *
 * Note on specifying the initial state of RNNs
 *   You can specify the initial state of RNN layers symbolically by
 *   calling them with the option `initialState`. The value of
 *   `initialState` should be a tensor or list of tensors representing
 *   the initial state of the RNN layer.
 *
 *   You can specify the initial state of RNN layers numerically by
 *   calling `resetStates` with the keyword argument `states`. The value of
 *   `states` should be a numpy array or list of numpy arrays representing
 *   the initial state of the RNN layer.
 *
 * Note on passing external constants to RNNs
 *   You can pass "external" constants to the cell using the `constants`
 *   keyword argument of `RNN.call` method. This requires that the `cell.call`
 *   method accepts the same keyword argument `constants`. Such constants
 *   can be used to condition the cell transformation on additional static
 *   inputs (not changing over time), a.k.a. an attention mechanism.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function rnn(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.RNN(args);
}
/**
 * Wrapper allowing a stack of RNN cells to behave as a single cell.
 *
 * Used to implement efficient stacked RNNs.
 *
 * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}
 */
function stackedRNNCells(args) {
  return new _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.StackedRNNCells(args);
}
// Wrapper Layers.
/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */
function bidirectional(args) {
  return new _layers_wrappers__WEBPACK_IMPORTED_MODULE_15__.Bidirectional(args);
}
/**
 * This wrapper applies a layer to every temporal slice of an input.
 *
 * The input should be at least 3D,  and the dimension of the index `1` will be
 * considered to be the temporal dimension.
 *
 * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors
 * of 16 dimensions. The batch input shape of the layer is then `[32,  10,
 * 16]`, and the `inputShape`, not including the sample dimension, is
 * `[10, 16]`.
 *
 * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10
 * timesteps, independently:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.timeDistributed({
 *   layer: tf.layers.dense({units: 8}),
 *   inputShape: [10, 16],
 * }));
 *
 * // Now model.outputShape = [null, 10, 8].
 * // The output will then have shape `[32, 10, 8]`.
 *
 * // In subsequent layers, there is no need for `inputShape`:
 * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));
 * console.log(JSON.stringify(model.outputs[0].shape));
 * // Now model.outputShape = [null, 10, 32].
 * ```
 *
 * The output will then have shape `[32, 10, 32]`.
 *
 * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for
 * instance a `Conv2D` layer.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.timeDistributed({
 *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),
 *   inputShape: [10, 299, 299, 3],
 * }));
 * console.log(JSON.stringify(model.outputs[0].shape));
 * ```
 *
 * @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'}
 */
function timeDistributed(args) {
  return new _layers_wrappers__WEBPACK_IMPORTED_MODULE_15__.TimeDistributed(args);
}
// Aliases for pooling.
const globalMaxPool1d = globalMaxPooling1d;
const globalMaxPool2d = globalMaxPooling2d;
const maxPool1d = maxPooling1d;
const maxPool2d = maxPooling2d;

/**
 * Apply additive zero-centered Gaussian noise.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * This is useful to mitigate overfitting
 * (you could see it as a form of random data augmentation).
 * Gaussian Noise (GS) is a natural choice as corruption process
 * for real valued inputs.
 *
 * # Arguments
 * stddev: float, standard deviation of the noise distribution.
 *
 * # Input shape
 * Arbitrary. Use the keyword argument `input_shape`
 * (tuple of integers, does not include the samples axis)
 * when using this layer as the first layer in a model.
 *
 * # Output shape
 * Same shape as input.
 *
 * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}
 */
function gaussianNoise(args) {
  return new _layers_noise__WEBPACK_IMPORTED_MODULE_10__.GaussianNoise(args);
}
/**
 * Apply multiplicative 1-centered Gaussian noise.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](
 *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)
 *
 * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}
 */
function gaussianDropout(args) {
  return new _layers_noise__WEBPACK_IMPORTED_MODULE_10__.GaussianDropout(args);
}
/**
 * Applies Alpha Dropout to the input.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs
 * to their original values, in order to ensure the self-normalizing property
 * even after this dropout.
 * Alpha Dropout fits well to Scaled Exponential Linear Units
 * by randomly setting activations to the negative saturation value.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the
 *     shape for randomly generated keep/drop flags.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 *
 * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}
 */
function alphaDropout(args) {
  return new _layers_noise__WEBPACK_IMPORTED_MODULE_10__.AlphaDropout(args);
}
/**
 * Masks a sequence by using a mask value to skip timesteps.
 *
 * If all features for a given sample timestep are equal to `mask_value`,
 * then the sample timestep will be masked (skipped) in all downstream layers
 * (as long as they support masking).
 *
 * If any downstream layer does not support masking yet receives such
 * an input mask, an exception will be raised.
 *
 * Arguments:
 *   - `maskValue`: Either None or mask value to skip.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'}
 */
function masking(args) {
  return new _layers_core__WEBPACK_IMPORTED_MODULE_7__.Masking(args);
}
/**
 * A preprocessing layer which rescales input values to a new range.
 *
 * This layer rescales every value of an input (often an image) by multiplying
 * by `scale` and adding `offset`.
 *
 * For instance:
 * 1. To rescale an input in the ``[0, 255]`` range
 * to be in the `[0, 1]` range, you would pass `scale=1/255`.
 * 2. To rescale an input in the ``[0, 255]`` range to be in the `[-1, 1]`
 * range, you would pass `scale=1./127.5, offset=-1`.
 * The rescaling is applied both during training and inference. Inputs can be
 * of integer or floating point dtype, and by default the layer will output
 * floats.
 *
 * Arguments:
 *   - `scale`: Float, the scale to apply to the inputs.
 *   - `offset`: Float, the offset to apply to the inputs.
 *
 * Input shape:
 *   Arbitrary.
 *
 * Output shape:
 *   Same as input.
 *
 * @doc {heading: 'Layers', subheading: 'Rescaling', namespace: 'layers'}
 */
function rescaling(args) {
  return new _layers_preprocessing_image_preprocessing__WEBPACK_IMPORTED_MODULE_16__.Rescaling(args);
}
/**
 *  A preprocessing layer which center crops images.
 *
 *   This layers crops the central portion of the images to a target size. If an
 *   image is smaller than the target size, it will be resized and cropped so as
 *   to return the largest possible window in the image that matches the target
 *   aspect ratio.
 *
 *   Input pixel values can be of any range (e.g. `[0., 1.)` or `[0, 255]`) and
 *   of integer or floating point dtype.
 *
 *   If the input height/width is even and the target height/width is odd (or
 *   inversely), the input image is left-padded by 1 pixel.
 *
 *   Arguments:
 *     `height`: Integer, the height of the output shape.
 *     `width`: Integer, the width of the output shape.
 *
 *   Input shape:
 *     3D (unbatched) or 4D (batched) tensor with shape:
 *     `(..., height, width, channels)`, in `channelsLast` format.
 *
 *   Output shape:
 *     3D (unbatched) or 4D (batched) tensor with shape:
 *     `(..., targetHeight, targetWidth, channels)`.
 *
 *
 *  @doc {heading: 'Layers', subheading: 'CenterCrop', namespace: 'layers'}
 */
function centerCrop(args) {
  return new _layers_preprocessing_center_crop__WEBPACK_IMPORTED_MODULE_17__.CenterCrop(args);
}
/**
 * A preprocessing layer which resizes images.
 * This layer resizes an image input to a target height and width. The input
 * should be a 4D (batched) or 3D (unbatched) tensor in `"channels_last"`
 * format.  Input pixel values can be of any range (e.g. `[0., 1.)` or `[0,
 * 255]`) and of interger or floating point dtype. By default, the layer will
 * output floats.
 *
 * Arguments:
 *   - `height`: number, the height for the output tensor.
 *   - `width`: number, the width for the output tensor.
 *   - `interpolation`: string, the method for image resizing interpolation.
 *   - `cropToAspectRatio`: boolean, whether to keep image aspect ratio.
 *
 * Input shape:
 *   Arbitrary.
 *
 * Output shape:
 *   height, width, num channels.
 *
 * @doc {heading: 'Layers', subheading: 'Resizing', namespace: 'layers'}
 */
function resizing(args) {
  return new _layers_preprocessing_image_resizing__WEBPACK_IMPORTED_MODULE_19__.Resizing(args);
}
/**
 * A preprocessing layer which encodes integer features.
 *
 * This layer provides options for condensing data into a categorical encoding
 * when the total number of tokens are known in advance. It accepts integer
 * values as inputs, and it outputs a dense representation of those
 * inputs.
 *
 * Arguments:
 *
 * numTokens: The total number of tokens the layer should support. All
 *  inputs to the layer must integers in the range `0 <= value <
 *  numTokens`, or an error will be thrown.
 *
 * outputMode: Specification for the output of the layer.
 *  Defaults to `multiHot`. Values can be `oneHot`, `multiHot` or
 *  `count`, configuring the layer as follows:
 *
 *    oneHot: Encodes each individual element in the input into an
 *      array of `numTokens` size, containing a 1 at the element index. If
 *      the last dimension is size 1, will encode on that dimension. If the
 *      last dimension is not size 1, will append a new dimension for the
 *      encoded output.
 *
 *    multiHot: Encodes each sample in the input into a single array
 *     of `numTokens` size, containing a 1 for each vocabulary term
 *     present in the sample. Treats the last dimension as the sample
 *     dimension, if input shape is `(..., sampleLength)`, output shape
 *     will be `(..., numTokens)`.
 *
 *    count: Like `multiHot`, but the int array contains a count of
 *     the number of times the token at that index appeared in the sample.
 *
 *  For all output modes, currently only output up to rank 2 is supported.
 *   Call arguments:
 *    inputs: A 1D or 2D tensor of integer inputs.
 *    countWeights: A tensor in the same shape as `inputs` indicating the
 *    weight for each sample value when summing up in `count` mode. Not used
 *    in `multiHot` or `oneHot` modes.
 *
 *
 * @doc {heading: 'Layers', subheading: 'CategoryEncoding', namespace: 'layers'}
 */
function categoryEncoding(args) {
  return new _layers_preprocessing_category_encoding__WEBPACK_IMPORTED_MODULE_18__.CategoryEncoding(args);
}
/**
 * A preprocessing layer which randomly varies image width during training.
 *
 * This layer will randomly adjusts the width of a batch of images of a batch
 * of images by a random factor.
 *
 * The input should be a 3D (unbatched) or 4D (batched) tensor in
 * the `"channels_last"` image data format. Input pixel values can be of any
 * range (e.g. `[0., 1.)` or `[0, 255]`) and of integer or floating point
 * dtype. By default, the layer will output floats. By default, this layer is
 * inactive during inference. For an overview and full list of preprocessing
 * layers, see the preprocessing [guide]
 * (https://www.tensorflow.org/guide/keras/preprocessing_layers).
 *
 * Arguments:
 *
 * factor:
 *   A positive float (fraction of original width), or a tuple of size 2
 *   representing lower and upper bound for resizing vertically.
 *   When represented as a single float, this value is used for both the upper
 *   and lower bound. For instance, `factor=(0.2, 0.3)` results in an output
 *   with width changed by a random amount in the range `[20%, 30%]`.
 *   `factor=(-0.2, 0.3)` results in an output with width changed by a random
 *   amount in the range `[-20%, +30%]`. `factor=0.2` results in an output
 *   with width changed by a random amount in the range `[-20%, +20%]`.
 * interpolation:
 *   String, the interpolation method.
 *   Defaults to `bilinear`.
 *   Supports `"bilinear"`, `"nearest"`.
 *   The tf methods `"bicubic"`, `"area"`, `"lanczos3"`, `"lanczos5"`,
 *   `"gaussian"`, `"mitchellcubic"` are unimplemented in tfjs.
 * seed:
 *   Integer. Used to create a random seed.
 *
 * Input shape:
 *     3D (unbatched) or 4D (batched) tensor with shape:
 *     `(..., height, width, channels)`, in `"channels_last"` format.
 * Output shape:
 *     3D (unbatched) or 4D (batched) tensor with shape:
 *     `(..., height, random_width, channels)`.
 *
 *
 * @doc {heading: 'Layers', subheading: 'RandomWidth', namespace: 'layers'}
 */
function randomWidth(args) {
  return new _layers_preprocessing_random_width__WEBPACK_IMPORTED_MODULE_20__.RandomWidth(args);
}

/***/ }),

/***/ 81862:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports_metrics.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAPE": () => (/* binding */ MAPE),
/* harmony export */   "MSE": () => (/* binding */ MSE),
/* harmony export */   "binaryAccuracy": () => (/* binding */ binaryAccuracy),
/* harmony export */   "binaryCrossentropy": () => (/* binding */ binaryCrossentropy),
/* harmony export */   "categoricalAccuracy": () => (/* binding */ categoricalAccuracy),
/* harmony export */   "categoricalCrossentropy": () => (/* binding */ categoricalCrossentropy),
/* harmony export */   "cosineProximity": () => (/* binding */ cosineProximity),
/* harmony export */   "mape": () => (/* binding */ mape),
/* harmony export */   "meanAbsoluteError": () => (/* binding */ meanAbsoluteError),
/* harmony export */   "meanAbsolutePercentageError": () => (/* binding */ meanAbsolutePercentageError),
/* harmony export */   "meanSquaredError": () => (/* binding */ meanSquaredError),
/* harmony export */   "mse": () => (/* binding */ mse),
/* harmony export */   "precision": () => (/* binding */ precision),
/* harmony export */   "recall": () => (/* binding */ recall),
/* harmony export */   "sparseCategoricalAccuracy": () => (/* binding */ sparseCategoricalAccuracy)
/* harmony export */ });
/* harmony import */ var _losses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./losses */ 56648);
/* harmony import */ var _metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./metrics */ 69384);


/**
 * Binary accuracy metric function.
 *
 * `yTrue` and `yPred` can have 0-1 values. Example:
 * ```js
 * const x = tf.tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);
 * const y = tf.tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);
 * const accuracy = tf.metrics.binaryAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * `yTrue` and `yPred` can also have floating-number values between 0 and 1, in
 * which case the values will be thresholded at 0.5 to yield 0-1 values (i.e.,
 * a value >= 0.5 and <= 1.0 is interpreted as 1).
 *
 * Example:
 * ```js
 * const x = tf.tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);
 * const y = tf.tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);
 * const accuracy = tf.metrics.binaryAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth.
 * @param yPred Binary Tensor of prediction.
 * @return Accuracy Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function binaryAccuracy(yTrue, yPred) {
  return _metrics__WEBPACK_IMPORTED_MODULE_1__.binaryAccuracy(yTrue, yPred);
}
/**
 * Binary crossentropy metric function.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d([[0], [1], [1], [1]]);
 * const y = tf.tensor2d([[0], [0], [0.5], [1]]);
 * const crossentropy = tf.metrics.binaryCrossentropy(x, y);
 * crossentropy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth.
 * @param yPred Binary Tensor of prediction, probabilities for the `1` case.
 * @return Accuracy Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function binaryCrossentropy(yTrue, yPred) {
  return _metrics__WEBPACK_IMPORTED_MODULE_1__.binaryCrossentropy(yTrue, yPred);
}
/**
 * Sparse categorical accuracy metric function.
 *
 * Example:
 * ```js
 *
 * const yTrue = tf.tensor1d([1, 1, 2, 2, 0]);
 * const yPred = tf.tensor2d(
 *      [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);
 * const crossentropy = tf.metrics.sparseCategoricalAccuracy(yTrue, yPred);
 * crossentropy.print();
 * ```
 *
 * @param yTrue True labels: indices.
 * @param yPred Predicted probabilities or logits.
 * @returns Accuracy tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function sparseCategoricalAccuracy(yTrue, yPred) {
  return _metrics__WEBPACK_IMPORTED_MODULE_1__.sparseCategoricalAccuracy(yTrue, yPred);
}
/**
 * Categorical accuracy metric function.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);
 * const y = tf.tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);
 * const accuracy = tf.metrics.categoricalAccuracy(x, y);
 * accuracy.print();
 * ```
 *
 * @param yTrue Binary Tensor of truth: one-hot encoding of categories.
 * @param yPred Binary Tensor of prediction: probabilities or logits for the
 *   same categories as in `yTrue`.
 * @return Accuracy Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function categoricalAccuracy(yTrue, yPred) {
  return _metrics__WEBPACK_IMPORTED_MODULE_1__.categoricalAccuracy(yTrue, yPred);
}
/**
 * Categorical crossentropy between an output tensor and a target tensor.
 *
 * @param target A tensor of the same shape as `output`.
 * @param output A tensor resulting from a softmax (unless `fromLogits` is
 *  `true`, in which case `output` is expected to be the logits).
 * @param fromLogits Boolean, whether `output` is the result of a softmax, or is
 *   a tensor of logits.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function categoricalCrossentropy(yTrue, yPred) {
  return _metrics__WEBPACK_IMPORTED_MODULE_1__.categoricalCrossentropy(yTrue, yPred);
}
/**
 * Computes the precision of the predictions with respect to the labels.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d(
 *    [
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [1, 0, 0, 0],
 *      [0, 0, 1, 0]
 *    ]
 * );
 *
 * const y = tf.tensor2d(
 *    [
 *      [0, 0, 1, 0],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 1, 0, 0]
 *    ]
 * );
 *
 * const precision = tf.metrics.precision(x, y);
 * precision.print();
 * ```
 *
 * @param yTrue The ground truth values. Expected to contain only 0-1 values.
 * @param yPred The predicted values. Expected to contain only 0-1 values.
 * @return Precision Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function precision(yTrue, yPred) {
  return _metrics__WEBPACK_IMPORTED_MODULE_1__.precision(yTrue, yPred);
}
/**
 * Computes the recall of the predictions with respect to the labels.
 *
 * Example:
 * ```js
 * const x = tf.tensor2d(
 *    [
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [1, 0, 0, 0],
 *      [0, 0, 1, 0]
 *    ]
 * );
 *
 * const y = tf.tensor2d(
 *    [
 *      [0, 0, 1, 0],
 *      [0, 1, 0, 0],
 *      [0, 0, 0, 1],
 *      [0, 1, 0, 0],
 *      [0, 1, 0, 0]
 *    ]
 * );
 *
 * const recall = tf.metrics.recall(x, y);
 * recall.print();
 * ```
 *
 * @param yTrue The ground truth values. Expected to contain only 0-1 values.
 * @param yPred The predicted values. Expected to contain only 0-1 values.
 * @return Recall Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function recall(yTrue, yPred) {
  return _metrics__WEBPACK_IMPORTED_MODULE_1__.recall(yTrue, yPred);
}
/**
 * Loss or metric function: Cosine proximity.
 *
 * Mathematically, cosine proximity is defined as:
 *   `-sum(l2Normalize(yTrue) * l2Normalize(yPred))`,
 * wherein `l2Normalize()` normalizes the L2 norm of the input to 1 and `*`
 * represents element-wise multiplication.
 *
 * ```js
 * const yTrue = tf.tensor2d([[1, 0], [1, 0]]);
 * const yPred = tf.tensor2d([[1 / Math.sqrt(2), 1 / Math.sqrt(2)], [0, 1]]);
 * const proximity = tf.metrics.cosineProximity(yTrue, yPred);
 * proximity.print();
 * ```
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Cosine proximity Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function cosineProximity(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.cosineProximity(yTrue, yPred);
}
/**
 * Loss or metric function: Mean absolute error.
 *
 * Mathematically, mean absolute error is defined as:
 *   `mean(abs(yPred - yTrue))`,
 * wherein the `mean` is applied over feature dimensions.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [0, 0], [2, 3]]);
 * const yPred = tf.tensor2d([[0, 1], [0, 1], [-2, -3]]);
 * const mse = tf.metrics.meanAbsoluteError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean absolute error Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function meanAbsoluteError(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.meanAbsoluteError(yTrue, yPred);
}
/**
 * Loss or metric function: Mean absolute percentage error.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [10, 20]]);
 * const yPred = tf.tensor2d([[0, 1], [11, 24]]);
 * const mse = tf.metrics.meanAbsolutePercentageError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * Aliases: `tf.metrics.MAPE`, `tf.metrics.mape`.
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean absolute percentage error Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function meanAbsolutePercentageError(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.meanAbsolutePercentageError(yTrue, yPred);
}
function MAPE(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.meanAbsolutePercentageError(yTrue, yPred);
}
function mape(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.meanAbsolutePercentageError(yTrue, yPred);
}
/**
 * Loss or metric function: Mean squared error.
 *
 * ```js
 * const yTrue = tf.tensor2d([[0, 1], [3, 4]]);
 * const yPred = tf.tensor2d([[0, 1], [-3, -4]]);
 * const mse = tf.metrics.meanSquaredError(yTrue, yPred);
 * mse.print();
 * ```
 *
 * Aliases: `tf.metrics.MSE`, `tf.metrics.mse`.
 *
 * @param yTrue Truth Tensor.
 * @param yPred Prediction Tensor.
 * @return Mean squared error Tensor.
 *
 * @doc {heading: 'Metrics', namespace: 'metrics'}
 */
function meanSquaredError(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.meanSquaredError(yTrue, yPred);
}
function MSE(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.meanSquaredError(yTrue, yPred);
}
function mse(yTrue, yPred) {
  return _losses__WEBPACK_IMPORTED_MODULE_0__.meanSquaredError(yTrue, yPred);
}

/***/ }),

/***/ 66768:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports_models.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "modelFromJSON": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_0__.modelFromJSON)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models */ 45207);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */


/***/ }),

/***/ 81827:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports_regularizers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "l1": () => (/* binding */ l1),
/* harmony export */   "l1l2": () => (/* binding */ l1l2),
/* harmony export */   "l2": () => (/* binding */ l2)
/* harmony export */ });
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regularizers */ 97436);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */

// tslint:disable-next-line:max-line-length

/**
 * Regularizer for L1 and L2 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l1 * abs(x)) + sum(l2 * x^2)
 *
 * @doc {heading: 'Regularizers', namespace: 'regularizers'}
 */
function l1l2(config) {
  return new _regularizers__WEBPACK_IMPORTED_MODULE_0__.L1L2(config);
}
/**
 * Regularizer for L1 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l1 * abs(x))
 * @param args l1 config.
 *
 * @doc {heading: 'Regularizers', namespace: 'regularizers'}
 */
function l1(config) {
  return _regularizers__WEBPACK_IMPORTED_MODULE_0__.l1(config);
}
/**
 * Regularizer for L2 regularization.
 *
 * Adds a term to the loss to penalize large weights:
 * loss += sum(l2 * x^2)
 * @param args l2 config.
 *
 * @doc {heading: 'Regularizers', namespace: 'regularizers'}
 */
function l2(config) {
  return _regularizers__WEBPACK_IMPORTED_MODULE_0__.l2(config);
}

/***/ }),

/***/ 46695:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/flags_layers.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ENV": () => (/* binding */ ENV)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _engine_executor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine/executor */ 10598);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ENV = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)();
/** The max number of entries for the caches of layers' topological sort. */
ENV.registerFlag('TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES', () => 100, _engine_executor__WEBPACK_IMPORTED_MODULE_1__.updateCacheMaxEntries);

/***/ }),

/***/ 75537:
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Callback": () => (/* reexport safe */ _callbacks__WEBPACK_IMPORTED_MODULE_10__.Callback),
/* harmony export */   "CallbackList": () => (/* reexport safe */ _base_callbacks__WEBPACK_IMPORTED_MODULE_9__.CallbackList),
/* harmony export */   "CustomCallback": () => (/* reexport safe */ _base_callbacks__WEBPACK_IMPORTED_MODULE_9__.CustomCallback),
/* harmony export */   "EarlyStopping": () => (/* reexport safe */ _callbacks__WEBPACK_IMPORTED_MODULE_10__.EarlyStopping),
/* harmony export */   "History": () => (/* reexport safe */ _base_callbacks__WEBPACK_IMPORTED_MODULE_9__.History),
/* harmony export */   "InputSpec": () => (/* reexport safe */ _engine_topology__WEBPACK_IMPORTED_MODULE_11__.InputSpec),
/* harmony export */   "LayerVariable": () => (/* reexport safe */ _variables__WEBPACK_IMPORTED_MODULE_16__.LayerVariable),
/* harmony export */   "LayersModel": () => (/* reexport safe */ _engine_training__WEBPACK_IMPORTED_MODULE_12__.LayersModel),
/* harmony export */   "RNN": () => (/* reexport safe */ _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__.RNN),
/* harmony export */   "Sequential": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_15__.Sequential),
/* harmony export */   "SymbolicTensor": () => (/* reexport safe */ _engine_topology__WEBPACK_IMPORTED_MODULE_11__.SymbolicTensor),
/* harmony export */   "callbacks": () => (/* reexport safe */ _callbacks__WEBPACK_IMPORTED_MODULE_10__.callbacks),
/* harmony export */   "constraints": () => (/* reexport module object */ _exports_constraints__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "initializers": () => (/* reexport module object */ _exports_initializers__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "input": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_13__.input),
/* harmony export */   "layers": () => (/* reexport module object */ _exports_layers__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "loadLayersModel": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_13__.loadLayersModel),
/* harmony export */   "metrics": () => (/* reexport module object */ _exports_metrics__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   "model": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_13__.model),
/* harmony export */   "models": () => (/* reexport module object */ _exports_models__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   "registerCallbackConstructor": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_13__.registerCallbackConstructor),
/* harmony export */   "regularizers": () => (/* reexport module object */ _exports_regularizers__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   "sequential": () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_13__.sequential),
/* harmony export */   "version_layers": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_17__.version)
/* harmony export */ });
/* harmony import */ var _flags_layers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flags_layers */ 46695);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _tensorflow_tfjs_core_dist_register_all_gradients__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/register_all_gradients */ 16394);
/* harmony import */ var _exports_constraints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./exports_constraints */ 61865);
/* harmony import */ var _exports_initializers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exports_initializers */ 41063);
/* harmony import */ var _exports_layers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./exports_layers */ 40152);
/* harmony import */ var _exports_metrics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./exports_metrics */ 81862);
/* harmony import */ var _exports_models__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exports_models */ 66768);
/* harmony import */ var _exports_regularizers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./exports_regularizers */ 81827);
/* harmony import */ var _base_callbacks__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base_callbacks */ 52043);
/* harmony import */ var _callbacks__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./callbacks */ 79926);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./engine/topology */ 59996);
/* harmony import */ var _engine_training__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./engine/training */ 64970);
/* harmony import */ var _exports__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./exports */ 46897);
/* harmony import */ var _layers_recurrent__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./layers/recurrent */ 29998);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./models */ 45207);
/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./variables */ 22414);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./version */ 21378);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */


// tslint:disable-next-line: no-imports-from-dist

// This file lists all exports of TensorFlow.js Layers

















/***/ }),

/***/ 1024:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/initializers.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Constant": () => (/* binding */ Constant),
/* harmony export */   "GlorotNormal": () => (/* binding */ GlorotNormal),
/* harmony export */   "GlorotUniform": () => (/* binding */ GlorotUniform),
/* harmony export */   "HeNormal": () => (/* binding */ HeNormal),
/* harmony export */   "HeUniform": () => (/* binding */ HeUniform),
/* harmony export */   "INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP": () => (/* binding */ INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP),
/* harmony export */   "Identity": () => (/* binding */ Identity),
/* harmony export */   "Initializer": () => (/* binding */ Initializer),
/* harmony export */   "LeCunNormal": () => (/* binding */ LeCunNormal),
/* harmony export */   "LeCunUniform": () => (/* binding */ LeCunUniform),
/* harmony export */   "Ones": () => (/* binding */ Ones),
/* harmony export */   "Orthogonal": () => (/* binding */ Orthogonal),
/* harmony export */   "RandomNormal": () => (/* binding */ RandomNormal),
/* harmony export */   "RandomUniform": () => (/* binding */ RandomUniform),
/* harmony export */   "TruncatedNormal": () => (/* binding */ TruncatedNormal),
/* harmony export */   "VarianceScaling": () => (/* binding */ VarianceScaling),
/* harmony export */   "Zeros": () => (/* binding */ Zeros),
/* harmony export */   "checkDistribution": () => (/* binding */ checkDistribution),
/* harmony export */   "checkFanMode": () => (/* binding */ checkFanMode),
/* harmony export */   "getInitializer": () => (/* binding */ getInitializer),
/* harmony export */   "serializeInitializer": () => (/* binding */ serializeInitializer)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/tfjs_backend */ 81579);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ 9878);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ 22802);
/* harmony import */ var _keras_format_initializer_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keras_format/initializer_config */ 39463);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);
/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/math_utils */ 96821);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */







function checkFanMode(value) {
  (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.checkStringTypeUnionValue)(_keras_format_initializer_config__WEBPACK_IMPORTED_MODULE_4__.VALID_FAN_MODE_VALUES, 'FanMode', value);
}
function checkDistribution(value) {
  (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.checkStringTypeUnionValue)(_keras_format_initializer_config__WEBPACK_IMPORTED_MODULE_4__.VALID_DISTRIBUTION_VALUES, 'Distribution', value);
}
/**
 * Initializer base class.
 *
 * @doc {
 *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}
 */
class Initializer extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.Serializable {
  fromConfigUsesCustomObjects() {
    return false;
  }
  getConfig() {
    return {};
  }
}
class Zeros extends Initializer {
  apply(shape, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros)(shape, dtype);
  }
}
/** @nocollapse */
Zeros.className = 'Zeros';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Zeros);
class Ones extends Initializer {
  apply(shape, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ones)(shape, dtype);
  }
}
/** @nocollapse */
Ones.className = 'Ones';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Ones);
class Constant extends Initializer {
  constructor(args) {
    super();
    if (typeof args !== 'object') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Expected argument of type ConstantConfig but got ${args}`);
    }
    if (args.value === undefined) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`config must have value set but got ${args}`);
    }
    this.value = args.value;
  }
  apply(shape, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(this.value), (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ones)(shape, dtype)));
  }
  getConfig() {
    return {
      value: this.value
    };
  }
}
/** @nocollapse */
Constant.className = 'Constant';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Constant);
class RandomUniform extends Initializer {
  constructor(args) {
    super();
    this.DEFAULT_MINVAL = -0.05;
    this.DEFAULT_MAXVAL = 0.05;
    this.minval = args.minval || this.DEFAULT_MINVAL;
    this.maxval = args.maxval || this.DEFAULT_MAXVAL;
    this.seed = args.seed;
  }
  apply(shape, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniform)(shape, this.minval, this.maxval, dtype, this.seed);
  }
  getConfig() {
    return {
      minval: this.minval,
      maxval: this.maxval,
      seed: this.seed
    };
  }
}
/** @nocollapse */
RandomUniform.className = 'RandomUniform';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(RandomUniform);
class RandomNormal extends Initializer {
  constructor(args) {
    super();
    this.DEFAULT_MEAN = 0.;
    this.DEFAULT_STDDEV = 0.05;
    this.mean = args.mean || this.DEFAULT_MEAN;
    this.stddev = args.stddev || this.DEFAULT_STDDEV;
    this.seed = args.seed;
  }
  apply(shape, dtype) {
    dtype = dtype || 'float32';
    if (dtype !== 'float32' && dtype !== 'int32') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError(`randomNormal does not support dType ${dtype}.`);
    }
    return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);
  }
  getConfig() {
    return {
      mean: this.mean,
      stddev: this.stddev,
      seed: this.seed
    };
  }
}
/** @nocollapse */
RandomNormal.className = 'RandomNormal';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(RandomNormal);
class TruncatedNormal extends Initializer {
  constructor(args) {
    super();
    this.DEFAULT_MEAN = 0.;
    this.DEFAULT_STDDEV = 0.05;
    this.mean = args.mean || this.DEFAULT_MEAN;
    this.stddev = args.stddev || this.DEFAULT_STDDEV;
    this.seed = args.seed;
  }
  apply(shape, dtype) {
    dtype = dtype || 'float32';
    if (dtype !== 'float32' && dtype !== 'int32') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);
    }
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.truncatedNormal)(shape, this.mean, this.stddev, dtype, this.seed);
  }
  getConfig() {
    return {
      mean: this.mean,
      stddev: this.stddev,
      seed: this.seed
    };
  }
}
/** @nocollapse */
TruncatedNormal.className = 'TruncatedNormal';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(TruncatedNormal);
class Identity extends Initializer {
  constructor(args) {
    super();
    this.gain = args.gain != null ? args.gain : 1.0;
  }
  apply(shape, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (shape.length !== 2 || shape[0] !== shape[1]) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');
      } else {
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(this.gain, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.eye)(shape[0]));
      }
    });
  }
  getConfig() {
    return {
      gain: this.gain
    };
  }
}
/** @nocollapse */
Identity.className = 'Identity';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Identity);
/**
 * Computes the number of input and output units for a weight shape.
 * @param shape Shape of weight.
 * @param dataFormat data format to use for convolution kernels.
 *   Note that all kernels in Keras are standardized on the
 *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).
 * @return An length-2 array: fanIn, fanOut.
 */
function computeFans(shape, dataFormat = 'channelsLast') {
  let fanIn;
  let fanOut;
  (0,_common__WEBPACK_IMPORTED_MODULE_2__.checkDataFormat)(dataFormat);
  if (shape.length === 2) {
    fanIn = shape[0];
    fanOut = shape[1];
  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {
    if (dataFormat === 'channelsFirst') {
      const receptiveFieldSize = (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_6__.arrayProd)(shape, 2);
      fanIn = shape[1] * receptiveFieldSize;
      fanOut = shape[0] * receptiveFieldSize;
    } else if (dataFormat === 'channelsLast') {
      const receptiveFieldSize = (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_6__.arrayProd)(shape, 0, shape.length - 2);
      fanIn = shape[shape.length - 2] * receptiveFieldSize;
      fanOut = shape[shape.length - 1] * receptiveFieldSize;
    }
  } else {
    const shapeProd = (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_6__.arrayProd)(shape);
    fanIn = Math.sqrt(shapeProd);
    fanOut = Math.sqrt(shapeProd);
  }
  return [fanIn, fanOut];
}
class VarianceScaling extends Initializer {
  /**
   * Constructor of VarianceScaling.
   * @throws ValueError for invalid value in scale.
   */
  constructor(args) {
    super();
    if (args.scale < 0.0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`scale must be a positive float. Got: ${args.scale}`);
    }
    this.scale = args.scale == null ? 1.0 : args.scale;
    this.mode = args.mode == null ? 'fanIn' : args.mode;
    checkFanMode(this.mode);
    this.distribution = args.distribution == null ? 'normal' : args.distribution;
    checkDistribution(this.distribution);
    this.seed = args.seed;
  }
  apply(shape, dtype) {
    const fans = computeFans(shape);
    const fanIn = fans[0];
    const fanOut = fans[1];
    let scale = this.scale;
    if (this.mode === 'fanIn') {
      scale /= Math.max(1, fanIn);
    } else if (this.mode === 'fanOut') {
      scale /= Math.max(1, fanOut);
    } else {
      scale /= Math.max(1, (fanIn + fanOut) / 2);
    }
    if (this.distribution === 'normal') {
      const stddev = Math.sqrt(scale);
      dtype = dtype || 'float32';
      if (dtype !== 'float32' && dtype !== 'int32') {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);
      }
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.truncatedNormal)(shape, 0, stddev, dtype, this.seed);
    } else {
      const limit = Math.sqrt(3 * scale);
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniform)(shape, -limit, limit, dtype, this.seed);
    }
  }
  getConfig() {
    return {
      scale: this.scale,
      mode: this.mode,
      distribution: this.distribution,
      seed: this.seed
    };
  }
}
/** @nocollapse */
VarianceScaling.className = 'VarianceScaling';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(VarianceScaling);
class GlorotUniform extends VarianceScaling {
  /**
   * Constructor of GlorotUniform
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(args) {
    super({
      scale: 1.0,
      mode: 'fanAvg',
      distribution: 'uniform',
      seed: args == null ? null : args.seed
    });
  }
  getClassName() {
    // In Python Keras, GlorotUniform is not a class, but a helper method
    // that creates a VarianceScaling object. Use 'VarianceScaling' as
    // class name to be compatible with that.
    return VarianceScaling.className;
  }
}
/** @nocollapse */
GlorotUniform.className = 'GlorotUniform';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GlorotUniform);
class GlorotNormal extends VarianceScaling {
  /**
   * Constructor of GlorotNormal.
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(args) {
    super({
      scale: 1.0,
      mode: 'fanAvg',
      distribution: 'normal',
      seed: args == null ? null : args.seed
    });
  }
  getClassName() {
    // In Python Keras, GlorotNormal is not a class, but a helper method
    // that creates a VarianceScaling object. Use 'VarianceScaling' as
    // class name to be compatible with that.
    return VarianceScaling.className;
  }
}
/** @nocollapse */
GlorotNormal.className = 'GlorotNormal';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GlorotNormal);
class HeNormal extends VarianceScaling {
  constructor(args) {
    super({
      scale: 2.0,
      mode: 'fanIn',
      distribution: 'normal',
      seed: args == null ? null : args.seed
    });
  }
  getClassName() {
    // In Python Keras, HeNormal is not a class, but a helper method
    // that creates a VarianceScaling object. Use 'VarianceScaling' as
    // class name to be compatible with that.
    return VarianceScaling.className;
  }
}
/** @nocollapse */
HeNormal.className = 'HeNormal';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(HeNormal);
class HeUniform extends VarianceScaling {
  constructor(args) {
    super({
      scale: 2.0,
      mode: 'fanIn',
      distribution: 'uniform',
      seed: args == null ? null : args.seed
    });
  }
  getClassName() {
    // In Python Keras, HeUniform is not a class, but a helper method
    // that creates a VarianceScaling object. Use 'VarianceScaling' as
    // class name to be compatible with that.
    return VarianceScaling.className;
  }
}
/** @nocollapse */
HeUniform.className = 'HeUniform';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(HeUniform);
class LeCunNormal extends VarianceScaling {
  constructor(args) {
    super({
      scale: 1.0,
      mode: 'fanIn',
      distribution: 'normal',
      seed: args == null ? null : args.seed
    });
  }
  getClassName() {
    // In Python Keras, LeCunNormal is not a class, but a helper method
    // that creates a VarianceScaling object. Use 'VarianceScaling' as
    // class name to be compatible with that.
    return VarianceScaling.className;
  }
}
/** @nocollapse */
LeCunNormal.className = 'LeCunNormal';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LeCunNormal);
class LeCunUniform extends VarianceScaling {
  constructor(args) {
    super({
      scale: 1.0,
      mode: 'fanIn',
      distribution: 'uniform',
      seed: args == null ? null : args.seed
    });
  }
  getClassName() {
    // In Python Keras, LeCunUniform is not a class, but a helper method
    // that creates a VarianceScaling object. Use 'VarianceScaling' as
    // class name to be compatible with that.
    return VarianceScaling.className;
  }
}
/** @nocollapse */
LeCunUniform.className = 'LeCunUniform';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LeCunUniform);
class Orthogonal extends Initializer {
  constructor(args) {
    super();
    this.DEFAULT_GAIN = 1;
    this.ELEMENTS_WARN_SLOW = 2000;
    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;
    this.seed = args.seed;
  }
  apply(shape, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (shape.length < 2) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('Shape must be at least 2D.');
      }
      if (dtype !== 'int32' && dtype !== 'float32' && dtype !== undefined) {
        throw new TypeError(`Unsupported data type ${dtype}.`);
      }
      dtype = dtype;
      // flatten the input shape with the last dimension remaining its
      // original shape so it works for conv2d
      const numRows = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.sizeFromShape(shape.slice(0, -1));
      const numCols = shape[shape.length - 1];
      const numElements = numRows * numCols;
      if (numElements > this.ELEMENTS_WARN_SLOW) {
        console.warn(`Orthogonal initializer is being called on a matrix with more ` + `than ${this.ELEMENTS_WARN_SLOW} (${numElements}) elements: ` + `Slowness may result.`);
      }
      const flatShape = [Math.max(numCols, numRows), Math.min(numCols, numRows)];
      // Generate a random matrix
      const randNormalMat = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.randomNormal(flatShape, 0, 1, dtype, this.seed);
      // Compute QR factorization
      const qr = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.linalg.qr(randNormalMat, false);
      let qMat = qr[0];
      const rMat = qr[1];
      // Make Q uniform
      const diag = rMat.flatten().stridedSlice([0], [Math.min(numCols, numRows) * Math.min(numCols, numRows)], [Math.min(numCols, numRows) + 1]);
      qMat = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(qMat, diag.sign());
      if (numRows < numCols) {
        qMat = qMat.transpose();
      }
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(this.gain), qMat.reshape(shape));
    });
  }
  getConfig() {
    return {
      gain: this.gain,
      seed: this.seed
    };
  }
}
/** @nocollapse */
Orthogonal.className = 'Orthogonal';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Orthogonal);
// Maps the JavaScript-like identifier keys to the corresponding registry
// symbols.
const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
  'constant': 'Constant',
  'glorotNormal': 'GlorotNormal',
  'glorotUniform': 'GlorotUniform',
  'heNormal': 'HeNormal',
  'heUniform': 'HeUniform',
  'identity': 'Identity',
  'leCunNormal': 'LeCunNormal',
  'leCunUniform': 'LeCunUniform',
  'ones': 'Ones',
  'orthogonal': 'Orthogonal',
  'randomNormal': 'RandomNormal',
  'randomUniform': 'RandomUniform',
  'truncatedNormal': 'TruncatedNormal',
  'varianceScaling': 'VarianceScaling',
  'zeros': 'Zeros'
};
function deserializeInitializer(config, customObjects = {}) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.deserializeKerasObject)(config, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');
}
function serializeInitializer(initializer) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.serializeKerasObject)(initializer);
}
function getInitializer(identifier) {
  if (typeof identifier === 'string') {
    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
    /* We have four 'helper' classes for common initializers that
    all get serialized as 'VarianceScaling' and shouldn't go through
    the deserializeInitializer pathway. */
    if (className === 'GlorotNormal') {
      return new GlorotNormal();
    } else if (className === 'GlorotUniform') {
      return new GlorotUniform();
    } else if (className === 'HeNormal') {
      return new HeNormal();
    } else if (className === 'HeUniform') {
      return new HeUniform();
    } else if (className === 'LeCunNormal') {
      return new LeCunNormal();
    } else if (className === 'LeCunUniform') {
      return new LeCunUniform();
    } else {
      const config = {};
      config['className'] = className;
      config['config'] = {};
      return deserializeInitializer(config);
    }
  } else if (identifier instanceof Initializer) {
    return identifier;
  } else {
    return deserializeInitializer(identifier);
  }
}

/***/ }),

/***/ 8125:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/keras_format/common.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VALID_BIDIRECTIONAL_MERGE_MODES": () => (/* binding */ VALID_BIDIRECTIONAL_MERGE_MODES),
/* harmony export */   "VALID_DATA_FORMAT_VALUES": () => (/* binding */ VALID_DATA_FORMAT_VALUES),
/* harmony export */   "VALID_INTERPOLATION_FORMAT_VALUES": () => (/* binding */ VALID_INTERPOLATION_FORMAT_VALUES),
/* harmony export */   "VALID_PADDING_MODE_VALUES": () => (/* binding */ VALID_PADDING_MODE_VALUES),
/* harmony export */   "VALID_POOL_MODE_VALUES": () => (/* binding */ VALID_POOL_MODE_VALUES),
/* harmony export */   "VALID_SAMPLE_WEIGHT_MODES": () => (/* binding */ VALID_SAMPLE_WEIGHT_MODES)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast'];
const VALID_INTERPOLATION_FORMAT_VALUES = ['nearest', 'bilinear'];
const VALID_PADDING_MODE_VALUES = ['valid', 'same', 'causal'];
const VALID_POOL_MODE_VALUES = ['max', 'avg'];
const VALID_BIDIRECTIONAL_MERGE_MODES = ['sum', 'mul', 'concat', 'ave'];
const VALID_SAMPLE_WEIGHT_MODES = ['temporal'];

/***/ }),

/***/ 39463:
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/keras_format/initializer_config.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VALID_DISTRIBUTION_VALUES": () => (/* binding */ VALID_DISTRIBUTION_VALUES),
/* harmony export */   "VALID_FAN_MODE_VALUES": () => (/* binding */ VALID_FAN_MODE_VALUES),
/* harmony export */   "initializerClassNames": () => (/* binding */ initializerClassNames)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg'];
const VALID_DISTRIBUTION_VALUES = ['normal', 'uniform', 'truncatedNormal'];
// We can't easily extract a string[] from the string union type, but we can
// recapitulate the list, enforcing at compile time that the values are valid
// and that we have the right number of them.
/**
 * A string array of valid Initializer class names.
 *
 * This is guaranteed to match the `InitializerClassName` union type.
 */
const initializerClassNames = ['Zeros', 'Ones', 'Constant', 'RandomNormal', 'RandomUniform', 'TruncatedNormal', 'VarianceScaling', 'Orthogonal', 'Identity'];

/***/ }),

/***/ 9489:
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/advanced_activations.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ELU": () => (/* binding */ ELU),
/* harmony export */   "LeakyReLU": () => (/* binding */ LeakyReLU),
/* harmony export */   "PReLU": () => (/* binding */ PReLU),
/* harmony export */   "ReLU": () => (/* binding */ ReLU),
/* harmony export */   "Softmax": () => (/* binding */ Softmax),
/* harmony export */   "ThresholdedReLU": () => (/* binding */ ThresholdedReLU)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _activations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../activations */ 27943);
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constraints */ 57529);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../regularizers */ 97436);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 *  Advanced activation layers.
 */








class ReLU extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super(args == null ? {} : args);
    this.supportsMasking = true;
    if (args != null) {
      this.maxValue = args.maxValue;
    }
  }
  call(inputs, kwargs) {
    inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(inputs);
    let output = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu)(inputs);
    if (this.maxValue != null) {
      output = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue)(output, 0, this.maxValue);
    }
    return output;
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const config = {
      maxValue: this.maxValue
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
ReLU.className = 'ReLU';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(ReLU);
class LeakyReLU extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super(args == null ? {} : args);
    this.DEFAULT_ALPHA = 0.3;
    if (args == null) {
      args = {};
    }
    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;
  }
  call(inputs, kwargs) {
    const x = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(inputs);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.leakyRelu)(x, this.alpha);
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const config = {
      alpha: this.alpha
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
LeakyReLU.className = 'LeakyReLU';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LeakyReLU);
class PReLU extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super(args == null ? {} : args);
    this.DEFAULT_ALPHA_INITIALIZER = 'zeros';
    if (args == null) {
      args = {};
    }
    this.supportsMasking = true;
    this.alphaInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_5__.getInitializer)(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);
    this.alphaRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_6__.getRegularizer)(args.alphaRegularizer);
    this.alphaConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_2__.getConstraint)(args.alphaConstraint);
    if (args.sharedAxes == null) {
      this.sharedAxes = null;
    } else if (Array.isArray(args.sharedAxes)) {
      this.sharedAxes = args.sharedAxes;
    } else if (typeof args.sharedAxes === 'number') {
      this.sharedAxes = [args.sharedAxes];
    } else {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`Expected sharedAxes to be a number or an array of numbers, ` + `but got ${args.sharedAxes}`);
    }
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneShape)(inputShape);
    const paramShape = inputShape.slice(1);
    if (this.sharedAxes != null) {
      for (const i of this.sharedAxes) {
        paramShape[i - 1] = 1;
      }
    }
    this.alpha = this.addWeight('alpha', paramShape, 'float32', this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);
    // Set input spec.
    const axes = {};
    if (this.sharedAxes != null) {
      for (let i = 1; i < inputShape.length; ++i) {
        axes[i] = inputShape[i];
      }
    }
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_3__.InputSpec({
      ndim: inputShape.length,
      axes
    })];
    this.built = true;
  }
  call(inputs, kwargs) {
    inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(inputs);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.prelu)(inputs, this.alpha.read());
  }
  getConfig() {
    const config = {
      alphaInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_5__.serializeInitializer)(this.alphaInitializer),
      alphaRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_6__.serializeRegularizer)(this.alphaRegularizer),
      alphaConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_2__.serializeConstraint)(this.alphaConstraint),
      sharedAxes: this.sharedAxes
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
PReLU.className = 'PReLU';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(PReLU);
class ELU extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super(args == null ? {} : args);
    this.DEFAULT_ALPHA = 1.0;
    if (args == null) {
      args = {};
    }
    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.NotImplementedError(`Non-default alpha value (${args.alpha}) is not supported by the ` + `ELU layer yet.`);
    }
    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;
  }
  call(inputs, kwargs) {
    const x = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(inputs);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.elu)(x);
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const config = {
      alpha: this.alpha
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
ELU.className = 'ELU';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(ELU);
class ThresholdedReLU extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super(args == null ? {} : args);
    this.DEFAULT_THETA = 1.0;
    if (args == null) {
      args = {};
    }
    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;
  }
  call(inputs, kwargs) {
    const x = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(inputs);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(x, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greater)(x, this.theta), 'float32'));
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const config = {
      theta: this.theta
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
ThresholdedReLU.className = 'ThresholdedReLU';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(ThresholdedReLU);
class Softmax extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super(args == null ? {} : args);
    this.DEFAULT_AXIS = 1.0;
    if (args == null) {
      args = {};
    }
    this.softmax = new _activations__WEBPACK_IMPORTED_MODULE_1__.Softmax().apply;
    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;
  }
  call(inputs, kwargs) {
    const x = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(inputs);
    return this.softmax(x, this.axis);
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const config = {
      axis: this.axis
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Softmax.className = 'Softmax';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Softmax);

/***/ }),

/***/ 52684:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseConv": () => (/* binding */ BaseConv),
/* harmony export */   "Conv": () => (/* binding */ Conv),
/* harmony export */   "Conv1D": () => (/* binding */ Conv1D),
/* harmony export */   "Conv2D": () => (/* binding */ Conv2D),
/* harmony export */   "Conv2DTranspose": () => (/* binding */ Conv2DTranspose),
/* harmony export */   "Conv3D": () => (/* binding */ Conv3D),
/* harmony export */   "Conv3DTranspose": () => (/* binding */ Conv3DTranspose),
/* harmony export */   "Cropping2D": () => (/* binding */ Cropping2D),
/* harmony export */   "SeparableConv": () => (/* binding */ SeparableConv),
/* harmony export */   "SeparableConv2D": () => (/* binding */ SeparableConv2D),
/* harmony export */   "UpSampling2D": () => (/* binding */ UpSampling2D),
/* harmony export */   "conv1d": () => (/* binding */ conv1d),
/* harmony export */   "conv1dWithBias": () => (/* binding */ conv1dWithBias),
/* harmony export */   "conv2d": () => (/* binding */ conv2d),
/* harmony export */   "conv2dWithBiasActivation": () => (/* binding */ conv2dWithBiasActivation),
/* harmony export */   "conv3d": () => (/* binding */ conv3d),
/* harmony export */   "conv3dWithBias": () => (/* binding */ conv3dWithBias),
/* harmony export */   "preprocessConv2DInput": () => (/* binding */ preprocessConv2DInput),
/* harmony export */   "preprocessConv3DInput": () => (/* binding */ preprocessConv3DInput)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _activations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../activations */ 27943);
/* harmony import */ var _backend_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../backend/common */ 44906);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constraints */ 57529);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../regularizers */ 97436);
/* harmony import */ var _utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/conv_utils */ 13295);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Convolutional Layers
 */














/**
 * Transpose and cast the input before the conv2d.
 * @param x Input image tensor.
 * @param dataFormat
 */
function preprocessConv2DInput(x, dataFormat) {
  // TODO(cais): Cast type to float32 if not.
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    if (dataFormat === 'channelsFirst') {
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.
    } else {
      return x;
    }
  });
}
/**
 * Transpose and cast the input before the conv3d.
 * @param x Input image tensor.
 * @param dataFormat
 */
function preprocessConv3DInput(x, dataFormat) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    if (dataFormat === 'channelsFirst') {
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.
    } else {
      return x;
    }
  });
}
/**
 * 1D-convolution with bias added.
 *
 * Porting Note: This function does not exist in the Python Keras backend.
 *   It is exactly the same as `conv2d`, except the added `bias`.
 *
 * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.
 * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.
 * @param bias Bias, rank-3, of shape `[outDepth]`.
 * @param strides
 * @param padding Padding mode.
 * @param dataFormat Data format.
 * @param dilationRate
 * @returns The result of the 1D convolution.
 * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.
 */
function conv1dWithBias(x, kernel, bias, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (dataFormat == null) {
      dataFormat = (0,_backend_common__WEBPACK_IMPORTED_MODULE_2__.imageDataFormat)();
    }
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    // Check the ranks of x, kernel and bias.
    if (x.shape.length !== 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`The input of a conv1dWithBias operation should be 3, but is ` + `${x.shape.length} instead.`);
    }
    if (kernel.shape.length !== 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` + `${kernel.shape.length} instead`);
    }
    if (bias != null && bias.shape.length !== 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` + `${kernel.shape.length} instead`);
    }
    // TODO(cais): Support CAUSAL padding mode.
    if (dataFormat === 'channelsFirst') {
      x = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(x, [0, 2, 1]); // NCW -> NWC.
    }

    if (padding === 'causal') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');
    }
    let y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);
    if (bias != null) {
      y = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.biasAdd(y, bias);
    }
    return y;
  });
}
/**
 * 1D-convolution.
 *
 * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.
 * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s
 * @param strides
 * @param padding Padding mode.
 * @param dataFormat Data format.
 * @param dilationRate
 * @returns The result of the 1D convolution.
 * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.
 */
function conv1d(x, kernel, strides = 1, padding = 'valid', dataFormat, dilationRate = 1) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
  });
}
/**
 * 2D Convolution
 * @param x
 * @param kernel kernel of the convolution.
 * @param strides strides array.
 * @param padding padding mode. Default to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param dilationRate dilation rate array.
 * @returns Result of the 2D pooling.
 */
function conv2d(x, kernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);
  });
}
/**
 * 2D Convolution with an added bias and optional activation.
 * Note: This function does not exist in the Python Keras Backend. This function
 * is exactly the same as `conv2d`, except the added `bias`.
 */
function conv2dWithBiasActivation(x, kernel, bias, strides = [1, 1], padding = 'valid', dataFormat, dilationRate, activation = null) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (dataFormat == null) {
      dataFormat = (0,_backend_common__WEBPACK_IMPORTED_MODULE_2__.imageDataFormat)();
    }
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    if (x.rank !== 3 && x.rank !== 4) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` + `but received ${x.rank}.`);
    }
    if (kernel.rank !== 3 && kernel.rank !== 4) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` + `but received ${x.rank}.`);
    }
    let y = preprocessConv2DInput(x, dataFormat);
    if (padding === 'causal') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');
    }
    y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fused.conv2d({
      x: y,
      filter: kernel,
      strides: strides,
      pad: padding === 'same' ? 'same' : 'valid',
      dilations: dilationRate,
      dataFormat: 'NHWC',
      bias,
      activation
    });
    if (dataFormat === 'channelsFirst') {
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(y, [0, 3, 1, 2]);
    }
    return y;
  });
}
/**
 * 3D Convolution.
 * @param x
 * @param kernel kernel of the convolution.
 * @param strides strides array.
 * @param padding padding mode. Default to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param dilationRate dilation rate array.
 * @returns Result of the 3D convolution.
 */
function conv3d(x, kernel, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);
  });
}
/**
 * 3D Convolution with an added bias.
 * Note: This function does not exist in the Python Keras Backend. This function
 * is exactly the same as `conv3d`, except the added `bias`.
 */
function conv3dWithBias(x, kernel, bias, strides = [1, 1, 1], padding = 'valid', dataFormat, dilationRate) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (dataFormat == null) {
      dataFormat = (0,_backend_common__WEBPACK_IMPORTED_MODULE_2__.imageDataFormat)();
    }
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(dataFormat);
    if (x.rank !== 4 && x.rank !== 5) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` + `${x.rank}.`);
    }
    if (kernel.rank !== 4 && kernel.rank !== 5) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` + `${x.rank}.`);
    }
    let y = preprocessConv3DInput(x, dataFormat);
    if (padding === 'causal') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');
    }
    y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);
    if (bias != null) {
      y = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.biasAdd(y, bias);
    }
    if (dataFormat === 'channelsFirst') {
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(y, [0, 4, 1, 2, 3]);
    }
    return y;
  });
}
/**
 * Abstract convolution layer.
 */
class BaseConv extends _engine_topology__WEBPACK_IMPORTED_MODULE_6__.Layer {
  constructor(rank, args) {
    super(args);
    this.bias = null;
    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
    this.DEFAULT_BIAS_INITIALIZER = 'zeros';
    BaseConv.verifyArgs(args);
    this.rank = rank;
    _utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__.assertPositiveInteger(this.rank, 'rank');
    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` + `not implemented yet.`);
    }
    this.kernelSize = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.normalizeArray)(args.kernelSize, rank, 'kernelSize');
    this.strides = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.normalizeArray)(args.strides == null ? 1 : args.strides, rank, 'strides');
    this.padding = args.padding == null ? 'valid' : args.padding;
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkPaddingMode)(this.padding);
    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(this.dataFormat);
    this.activation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.activation);
    this.useBias = args.useBias == null ? true : args.useBias;
    this.biasInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
    this.biasConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.getConstraint)(args.biasConstraint);
    this.biasRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.getRegularizer)(args.biasRegularizer);
    this.activityRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.getRegularizer)(args.activityRegularizer);
    this.dilationRate = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.normalizeArray)(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');
    if (this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`dilationRate must be a number or an array of a single number ` + `for 1D convolution, but received ` + `${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 2) {
      if (typeof this.dilationRate === 'number') {
        this.dilationRate = [this.dilationRate, this.dilationRate];
      } else if (this.dilationRate.length !== 2) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`dilationRate must be a number or array of two numbers for 2D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);
      }
    } else if (this.rank === 3) {
      if (typeof this.dilationRate === 'number') {
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      } else if (this.dilationRate.length !== 3) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`dilationRate must be a number or array of three numbers for 3D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);
      }
    }
  }
  static verifyArgs(args) {
    // Check config.kernelSize type and shape.
    _utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__.assert('kernelSize' in args, `required key 'kernelSize' not in config`);
    if (typeof args.kernelSize !== 'number' && !_utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` + `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);
    }
  }
  getConfig() {
    const config = {
      kernelSize: this.kernelSize,
      strides: this.strides,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      activation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.activation),
      useBias: this.useBias,
      biasInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.serializeInitializer)(this.biasInitializer),
      biasRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.serializeRegularizer)(this.biasRegularizer),
      activityRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.serializeRegularizer)(this.activityRegularizer),
      biasConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.serializeConstraint)(this.biasConstraint)
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/**
 * Abstract nD convolution layer.  Ancestor of convolution layers which reduce
 * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.
 */
class Conv extends BaseConv {
  constructor(rank, args) {
    super(rank, args);
    this.kernel = null;
    Conv.verifyArgs(args);
    this.filters = args.filters;
    _utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__.assertPositiveInteger(this.filters, 'filters');
    this.kernelInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
    this.kernelConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.getConstraint)(args.kernelConstraint);
    this.kernelRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.getRegularizer)(args.kernelRegularizer);
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneShape)(inputShape);
    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
    if (inputShape[channelAxis] == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);
    }
    const inputDim = inputShape[channelAxis];
    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);
    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    if (this.useBias) {
      this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    }
    this.inputSpec = [{
      ndim: this.rank + 2,
      axes: {
        [channelAxis]: inputDim
      }
    }];
    this.built = true;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneTensor)(inputs);
      let outputs;
      const biasValue = this.bias == null ? null : this.bias.read();
      const fusedActivationName = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__.mapActivationToFusedKernel(this.activation.getClassName());
      if (fusedActivationName != null && this.rank === 2) {
        outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);
      } else {
        if (this.rank === 1) {
          outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        } else if (this.rank === 2) {
          // TODO(cais): Move up to constructor.
          outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);
        } else if (this.rank === 3) {
          outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);
        } else {
          throw new _errors__WEBPACK_IMPORTED_MODULE_7__.NotImplementedError('convolutions greater than 3D are not implemented yet.');
        }
        if (this.activation != null) {
          outputs = this.activation.apply(outputs);
        }
      }
      return outputs;
    });
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneShape)(inputShape);
    const newSpace = [];
    const space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);
    for (let i = 0; i < space.length; ++i) {
      const newDim = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.convOutputLength)(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);
      newSpace.push(newDim);
    }
    let outputShape = [inputShape[0]];
    if (this.dataFormat === 'channelsLast') {
      outputShape = outputShape.concat(newSpace);
      outputShape.push(this.filters);
    } else {
      outputShape.push(this.filters);
      outputShape = outputShape.concat(newSpace);
    }
    return outputShape;
  }
  getConfig() {
    const config = {
      filters: this.filters,
      kernelInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.serializeInitializer)(this.kernelInitializer),
      kernelRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.serializeRegularizer)(this.kernelRegularizer),
      kernelConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.serializeConstraint)(this.kernelConstraint)
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  static verifyArgs(args) {
    // Check config.filters type, shape, and value.
    if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` + `but got ${JSON.stringify(args.filters)}`);
    }
  }
}
class Conv2D extends Conv {
  constructor(args) {
    super(2, args);
    Conv2D.verifyArgs(args);
  }
  getConfig() {
    const config = super.getConfig();
    delete config['rank'];
    return config;
  }
  static verifyArgs(args) {
    // config.kernelSize must be a number or array of numbers.
    if (typeof args.kernelSize !== 'number' && !_utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` + `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);
    }
  }
}
/** @nocollapse */
Conv2D.className = 'Conv2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Conv2D);
class Conv3D extends Conv {
  constructor(args) {
    super(3, args);
    Conv3D.verifyArgs(args);
  }
  getConfig() {
    const config = super.getConfig();
    delete config['rank'];
    return config;
  }
  static verifyArgs(args) {
    // config.kernelSize must be a number or array of numbers.
    if (typeof args.kernelSize !== 'number') {
      if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Conv3D expects config.kernelSize to be number or` + ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);
      }
    }
  }
}
/** @nocollapse */
Conv3D.className = 'Conv3D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Conv3D);
class Conv2DTranspose extends Conv2D {
  constructor(args) {
    super(args);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_6__.InputSpec({
      ndim: 4
    })];
    if (this.padding !== 'same' && this.padding !== 'valid') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);
    }
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneShape)(inputShape);
    if (inputShape.length !== 4) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));
    }
    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
    if (inputShape[channelAxis] == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');
    }
    const inputDim = inputShape[channelAxis];
    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);
    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    if (this.useBias) {
      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    }
    // Set input spec.
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_6__.InputSpec({
      ndim: 4,
      axes: {
        [channelAxis]: inputDim
      }
    })];
    this.built = true;
  }
  call(inputs, kwargs) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      let input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneTensor)(inputs);
      if (input.shape.length !== 4) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);
      }
      const inputShape = input.shape;
      const batchSize = inputShape[0];
      let hAxis;
      let wAxis;
      if (this.dataFormat === 'channelsFirst') {
        hAxis = 2;
        wAxis = 3;
      } else {
        hAxis = 1;
        wAxis = 2;
      }
      const height = inputShape[hAxis];
      const width = inputShape[wAxis];
      const kernelH = this.kernelSize[0];
      const kernelW = this.kernelSize[1];
      const strideH = this.strides[0];
      const strideW = this.strides[1];
      // Infer the dynamic output shape.
      const outHeight = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(height, strideH, kernelH, this.padding);
      const outWidth = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(width, strideW, kernelW, this.padding);
      // Porting Note: We don't branch based on `this.dataFormat` here,
      // because
      //   the tjfs-core function `conv2dTranspose` called below always
      //   assumes channelsLast.
      const outputShape = [batchSize, outHeight, outWidth, this.filters];
      if (this.dataFormat !== 'channelsLast') {
        input = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(input, [0, 2, 3, 1]);
      }
      let outputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);
      if (this.dataFormat !== 'channelsLast') {
        outputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(outputs, [0, 3, 1, 2]);
      }
      if (this.bias != null) {
        outputs = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.biasAdd(outputs, this.bias.read(), this.dataFormat);
      }
      if (this.activation != null) {
        outputs = this.activation.apply(outputs);
      }
      return outputs;
    });
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneShape)(inputShape);
    const outputShape = inputShape.slice();
    let channelAxis;
    let heightAxis;
    let widthAxis;
    if (this.dataFormat === 'channelsFirst') {
      channelAxis = 1;
      heightAxis = 2;
      widthAxis = 3;
    } else {
      channelAxis = 3;
      heightAxis = 1;
      widthAxis = 2;
    }
    const kernelH = this.kernelSize[0];
    const kernelW = this.kernelSize[1];
    const strideH = this.strides[0];
    const strideW = this.strides[1];
    outputShape[channelAxis] = this.filters;
    outputShape[heightAxis] = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(outputShape[heightAxis], strideH, kernelH, this.padding);
    outputShape[widthAxis] = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(outputShape[widthAxis], strideW, kernelW, this.padding);
    return outputShape;
  }
  getConfig() {
    const config = super.getConfig();
    delete config['dilationRate'];
    return config;
  }
}
/** @nocollapse */
Conv2DTranspose.className = 'Conv2DTranspose';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Conv2DTranspose);
class Conv3DTranspose extends Conv3D {
  constructor(args) {
    super(args);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_6__.InputSpec({
      ndim: 5
    })];
    if (this.padding !== 'same' && this.padding !== 'valid') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Conv3DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);
    }
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneShape)(inputShape);
    if (inputShape.length !== 5) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError('Input should have rank 5; Received input shape: ' + JSON.stringify(inputShape));
    }
    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
    if (inputShape[channelAxis] == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');
    }
    const inputDim = inputShape[channelAxis];
    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);
    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    if (this.useBias) {
      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    }
    // Set input spec.
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_6__.InputSpec({
      ndim: 5,
      axes: {
        [channelAxis]: inputDim
      }
    })];
    this.built = true;
  }
  call(inputs, kwargs) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      let input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneTensor)(inputs);
      if (input.shape.length !== 5) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);
      }
      const inputShape = input.shape;
      const batchSize = inputShape[0];
      let hAxis;
      let wAxis;
      let dAxis;
      if (this.dataFormat === 'channelsFirst') {
        dAxis = 2;
        hAxis = 3;
        wAxis = 4;
      } else {
        dAxis = 1;
        hAxis = 2;
        wAxis = 3;
      }
      const depth = inputShape[dAxis];
      const height = inputShape[hAxis];
      const width = inputShape[wAxis];
      const kernelD = this.kernelSize[0];
      const kernelH = this.kernelSize[1];
      const kernelW = this.kernelSize[2];
      const strideD = this.strides[0];
      const strideH = this.strides[1];
      const strideW = this.strides[2];
      // Infer the dynamic output shape.
      const outDepth = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(depth, strideD, kernelD, this.padding);
      const outHeight = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(height, strideH, kernelH, this.padding);
      const outWidth = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(width, strideW, kernelW, this.padding);
      // Same as `conv2dTranspose`. We always assumes channelsLast.
      const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];
      if (this.dataFormat !== 'channelsLast') {
        input = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(input, [0, 2, 3, 4, 1]);
      }
      let outputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv3dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);
      if (this.dataFormat !== 'channelsLast') {
        outputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(outputs, [0, 4, 1, 2, 3]);
      }
      if (this.bias !== null) {
        outputs = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.biasAdd(outputs, this.bias.read(), this.dataFormat);
      }
      if (this.activation !== null) {
        outputs = this.activation.apply(outputs);
      }
      return outputs;
    });
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneShape)(inputShape);
    const outputShape = inputShape.slice();
    let channelAxis;
    let depthAxis;
    let heightAxis;
    let widthAxis;
    if (this.dataFormat === 'channelsFirst') {
      channelAxis = 1;
      depthAxis = 2;
      heightAxis = 3;
      widthAxis = 4;
    } else {
      channelAxis = 4;
      depthAxis = 1;
      heightAxis = 2;
      widthAxis = 3;
    }
    const kernelD = this.kernelSize[0];
    const kernelH = this.kernelSize[1];
    const kernelW = this.kernelSize[2];
    const strideD = this.strides[0];
    const strideH = this.strides[1];
    const strideW = this.strides[2];
    outputShape[channelAxis] = this.filters;
    outputShape[depthAxis] = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(outputShape[depthAxis], strideD, kernelD, this.padding);
    outputShape[heightAxis] = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(outputShape[heightAxis], strideH, kernelH, this.padding);
    outputShape[widthAxis] = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_10__.deconvLength)(outputShape[widthAxis], strideW, kernelW, this.padding);
    return outputShape;
  }
  getConfig() {
    const config = super.getConfig();
    delete config['dilationRate'];
    return config;
  }
}
/** @nocollapse */
Conv3DTranspose.className = 'Conv3DTranspose';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Conv3DTranspose);
class SeparableConv extends Conv {
  constructor(rank, config) {
    super(rank, config);
    this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';
    this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';
    this.depthwiseKernel = null;
    this.pointwiseKernel = null;
    if (config.filters == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');
    }
    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');
    }
    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`SeparableConv${this.rank}D supports only padding modes: ` + `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);
    }
    this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;
    this.depthwiseInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.getInitializer)(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);
    this.depthwiseRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.getRegularizer)(config.depthwiseRegularizer);
    this.depthwiseConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.getConstraint)(config.depthwiseConstraint);
    this.pointwiseInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.getInitializer)(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);
    this.pointwiseRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.getRegularizer)(config.pointwiseRegularizer);
    this.pointwiseConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.getConstraint)(config.pointwiseConstraint);
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneShape)(inputShape);
    if (inputShape.length < this.rank + 2) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` + `${this.rank + 2}, but received input shape: ` + `${JSON.stringify(inputShape)}`);
    }
    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`The channel dimension of the inputs should be defined, ` + `but found ${JSON.stringify(inputShape[channelAxis])}`);
    }
    const inputDim = inputShape[channelAxis];
    const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);
    const pointwiseKernelShape = [];
    for (let i = 0; i < this.rank; ++i) {
      pointwiseKernelShape.push(1);
    }
    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);
    const trainable = true;
    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);
    this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);
    if (this.useBias) {
      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);
    } else {
      this.bias = null;
    }
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_6__.InputSpec({
      ndim: this.rank + 2,
      axes: {
        [channelAxis]: inputDim
      }
    })];
    this.built = true;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneTensor)(inputs);
      let output;
      if (this.rank === 1) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_7__.NotImplementedError('1D separable convolution is not implemented yet.');
      } else if (this.rank === 2) {
        if (this.dataFormat === 'channelsFirst') {
          inputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.
        }

        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');
      }
      if (this.useBias) {
        output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.biasAdd(output, this.bias.read(), this.dataFormat);
      }
      if (this.activation != null) {
        output = this.activation.apply(output);
      }
      if (this.dataFormat === 'channelsFirst') {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.
      }

      return output;
    });
  }
  getConfig() {
    const config = super.getConfig();
    delete config['rank'];
    delete config['kernelInitializer'];
    delete config['kernelRegularizer'];
    delete config['kernelConstraint'];
    config['depthwiseInitializer'] = (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.serializeInitializer)(this.depthwiseInitializer);
    config['pointwiseInitializer'] = (0,_initializers__WEBPACK_IMPORTED_MODULE_8__.serializeInitializer)(this.pointwiseInitializer);
    config['depthwiseRegularizer'] = (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.serializeRegularizer)(this.depthwiseRegularizer);
    config['pointwiseRegularizer'] = (0,_regularizers__WEBPACK_IMPORTED_MODULE_9__.serializeRegularizer)(this.pointwiseRegularizer);
    config['depthwiseConstraint'] = (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.serializeConstraint)(this.depthwiseConstraint);
    config['pointwiseConstraint'] = (0,_constraints__WEBPACK_IMPORTED_MODULE_5__.serializeConstraint)(this.pointwiseConstraint);
    return config;
  }
}
/** @nocollapse */
SeparableConv.className = 'SeparableConv';
class SeparableConv2D extends SeparableConv {
  constructor(args) {
    super(2, args);
  }
}
/** @nocollapse */
SeparableConv2D.className = 'SeparableConv2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(SeparableConv2D);
class Conv1D extends Conv {
  constructor(args) {
    super(1, args);
    Conv1D.verifyArgs(args);
    this.inputSpec = [{
      ndim: 3
    }];
  }
  getConfig() {
    const config = super.getConfig();
    delete config['rank'];
    delete config['dataFormat'];
    return config;
  }
  static verifyArgs(args) {
    // config.kernelSize must be a number or array of numbers.
    if (typeof args.kernelSize !== 'number' && !_utils_generic_utils__WEBPACK_IMPORTED_MODULE_11__.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_7__.ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` + `length 1, but received ${JSON.stringify(args.kernelSize)}.`);
    }
  }
}
/** @nocollapse */
Conv1D.className = 'Conv1D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Conv1D);
class Cropping2D extends _engine_topology__WEBPACK_IMPORTED_MODULE_6__.Layer {
  constructor(args) {
    super(args);
    if (typeof args.cropping === 'number') {
      this.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];
    } else if (typeof args.cropping[0] === 'number') {
      this.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];
    } else {
      this.cropping = args.cropping;
    }
    this.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;
    this.inputSpec = [{
      ndim: 4
    }];
  }
  computeOutputShape(inputShape) {
    if (this.dataFormat === 'channelsFirst') {
      return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];
    } else {
      return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];
    }
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneTensor)(inputs);
      if (this.dataFormat === 'channelsLast') {
        const hSliced = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const hSliced = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const config = {
      cropping: this.cropping,
      dataFormat: this.dataFormat
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Cropping2D.className = 'Cropping2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Cropping2D);
class UpSampling2D extends _engine_topology__WEBPACK_IMPORTED_MODULE_6__.Layer {
  constructor(args) {
    super(args);
    this.DEFAULT_SIZE = [2, 2];
    this.inputSpec = [{
      ndim: 4
    }];
    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;
    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkDataFormat)(this.dataFormat);
    this.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;
    (0,_common__WEBPACK_IMPORTED_MODULE_4__.checkInterpolationFormat)(this.interpolation);
  }
  computeOutputShape(inputShape) {
    if (this.dataFormat === 'channelsFirst') {
      const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];
      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];
      return [inputShape[0], inputShape[1], height, width];
    } else {
      const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];
      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];
      return [inputShape[0], height, width, inputShape[3]];
    }
  }
  call(inputs, kwargs) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      let input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_12__.getExactlyOneTensor)(inputs);
      const inputShape = input.shape;
      if (this.dataFormat === 'channelsFirst') {
        input = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(input, [0, 2, 3, 1]);
        const height = this.size[0] * inputShape[2];
        const width = this.size[1] * inputShape[3];
        const resized = this.interpolation === 'nearest' ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeNearestNeighbor(input, [height, width]) : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeBilinear(input, [height, width]);
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(resized, [0, 3, 1, 2]);
      } else {
        const height = this.size[0] * inputShape[1];
        const width = this.size[1] * inputShape[2];
        return this.interpolation === 'nearest' ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeNearestNeighbor(input, [height, width]) : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeBilinear(input, [height, width]);
      }
    });
  }
  getConfig() {
    const config = {
      size: this.size,
      dataFormat: this.dataFormat,
      interpolation: this.interpolation
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
UpSampling2D.className = 'UpSampling2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(UpSampling2D);

/***/ }),

/***/ 45957:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DepthwiseConv2D": () => (/* binding */ DepthwiseConv2D),
/* harmony export */   "depthwiseConv2d": () => (/* binding */ depthwiseConv2d)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/common */ 44906);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constraints */ 57529);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../regularizers */ 97436);
/* harmony import */ var _utils_conv_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/conv_utils */ 13295);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/* harmony import */ var _convolutional__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./convolutional */ 52684);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Depthwise Convolutional Layers
 */












/**
 * 2D convolution with separable filters.
 * @param x Input tensor.
 * @param depthwiseKernel Convolution kernel for depthwise convolution.
 * @param strides Strides (Array of two integers).
 * @param padding Padding model.
 * @param dataFormat Data format.
 * @param dilationRate Array of two integers, dilation rates for the separable
 *   convolution.
 * @returns Output tensor.
 * @throws ValueError If depthwiseKernel is not a 4D array.
 */
function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (dataFormat == null) {
      dataFormat = (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.imageDataFormat)();
    }
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    let y = (0,_convolutional__WEBPACK_IMPORTED_MODULE_10__.preprocessConv2DInput)(x, dataFormat);
    if (x.rank !== 4) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` + `${x.rank}-D`);
    }
    if (depthwiseKernel.rank !== 4) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`depthwiseKernel is required to be 4-D, but is instead ` + `${depthwiseKernel.rank}-D`);
    }
    y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);
    if (dataFormat === 'channelsFirst') {
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(y, [0, 3, 1, 2]);
    }
    return y;
  });
}
class DepthwiseConv2D extends _convolutional__WEBPACK_IMPORTED_MODULE_10__.BaseConv {
  constructor(args) {
    super(2, args);
    this.depthwiseKernel = null;
    this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;
    this.depthwiseInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_6__.getInitializer)(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);
    this.depthwiseConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.depthwiseConstraint);
    this.depthwiseRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.getRegularizer)(args.depthwiseRegularizer);
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_9__.getExactlyOneShape)(inputShape);
    if (inputShape.length < 4) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` + `Received input shape: ${JSON.stringify(inputShape)}.`);
    }
    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;
    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + `be defined, but is not (${inputShape[channelAxis]}).`);
    }
    const inputDim = inputShape[channelAxis];
    const depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];
    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);
    if (this.useBias) {
      this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    } else {
      this.bias = null;
    }
    this.built = true;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_9__.getExactlyOneTensor)(inputs);
      let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      // TODO(cais): Add support for dilation.
      if (this.useBias) {
        outputs = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.biasAdd(outputs, this.bias.read(), this.dataFormat);
      }
      if (this.activation != null) {
        outputs = this.activation.apply(outputs);
      }
      return outputs;
    });
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_9__.getExactlyOneShape)(inputShape);
    const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];
    const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];
    const outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;
    const outRows = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_8__.convOutputLength)(rows, this.kernelSize[0], this.padding, this.strides[0]);
    const outCols = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_8__.convOutputLength)(cols, this.kernelSize[1], this.padding, this.strides[1]);
    if (this.dataFormat === 'channelsFirst') {
      return [inputShape[0], outFilters, outRows, outCols];
    } else {
      // In this case, assume 'channelsLast'.
      return [inputShape[0], outRows, outCols, outFilters];
    }
  }
  getConfig() {
    const config = super.getConfig();
    config['depthMultiplier'] = this.depthMultiplier;
    config['depthwiseInitializer'] = (0,_initializers__WEBPACK_IMPORTED_MODULE_6__.serializeInitializer)(this.depthwiseInitializer);
    config['depthwiseRegularizer'] = (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.serializeRegularizer)(this.depthwiseRegularizer);
    config['depthwiseConstraint'] = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.depthwiseRegularizer);
    return config;
  }
}
/** @nocollapse */
DepthwiseConv2D.className = 'DepthwiseConv2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(DepthwiseConv2D);

/***/ }),

/***/ 99729:
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_recurrent.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConvLSTM2D": () => (/* binding */ ConvLSTM2D),
/* harmony export */   "ConvLSTM2DCell": () => (/* binding */ ConvLSTM2DCell)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/conv_utils */ 13295);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/* harmony import */ var _recurrent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./recurrent */ 29998);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};











class ConvRNN2DCell extends _recurrent__WEBPACK_IMPORTED_MODULE_9__.RNNCell {}
/**
 * Base class for convolutional-recurrent layers.
 */
class ConvRNN2D extends _recurrent__WEBPACK_IMPORTED_MODULE_9__.RNN {
  constructor(args) {
    if (args.unroll) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.NotImplementedError('Unrolling is not possible with convolutional RNNs.');
    }
    if (Array.isArray(args.cell)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.NotImplementedError('It is not possible at the moment to stack convolutional cells.');
    }
    super(args);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_3__.InputSpec({
      ndim: 5
    })];
  }
  call(inputs, kwargs) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      if (this.cell.dropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.dropoutMask);
        this.cell.dropoutMask = null;
      }
      if (this.cell.recurrentDropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.recurrentDropoutMask);
        this.cell.recurrentDropoutMask = null;
      }
      if (kwargs && kwargs['constants']) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError('ConvRNN2D cell does not support constants');
      }
      const mask = kwargs == null ? null : kwargs['mask'];
      const training = kwargs == null ? null : kwargs['training'];
      const initialState = kwargs == null ? null : kwargs['initialState'];
      return super.call(inputs, {
        mask,
        training,
        initialState
      });
    });
  }
  computeOutputShape(inputShape) {
    let outShape = this.computeSingleOutputShape(inputShape);
    if (!this.returnSequences) {
      outShape = [outShape[0], ...outShape.slice(2)];
    }
    if (this.returnState) {
      outShape = [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];
    }
    return outShape;
  }
  getInitialState(inputs) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      const {
        stateSize
      } = this.cell;
      const inputShape = inputs.shape;
      const outputShape = this.computeSingleOutputShape(inputShape);
      const stateShape = [outputShape[0], ...outputShape.slice(2)];
      const initialState = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(stateShape);
      if (Array.isArray(stateSize)) {
        return Array(stateSize.length).fill(initialState);
      }
      return [initialState];
    });
  }
  resetStates(states, training = false) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      if (!this.stateful) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_4__.AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');
      }
      const inputShape = this.inputSpec[0].shape;
      const outputShape = this.computeSingleOutputShape(inputShape);
      const stateShape = [outputShape[0], ...outputShape.slice(2)];
      const batchSize = inputShape[0];
      if (batchSize == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');
      }
      // Initialize state if null.
      if (this.getStates() == null) {
        if (Array.isArray(this.cell.stateSize)) {
          this.states_ = this.cell.stateSize.map(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(stateShape));
        } else {
          this.states_ = [_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(stateShape)];
        }
      } else if (states == null) {
        // Dispose old state tensors.
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.states_);
        // For stateful RNNs, fully dispose kept old states.
        if (this.keptStates != null) {
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.keptStates);
          this.keptStates = [];
        }
        if (Array.isArray(this.cell.stateSize)) {
          this.states_ = this.cell.stateSize.map(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(stateShape));
        } else {
          this.states_[0] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(stateShape);
        }
      } else {
        if (!Array.isArray(states)) {
          states = [states];
        }
        if (states.length !== this.states_.length) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);
        }
        if (training) {
          // Store old state tensors for complete disposal later, i.e., during
          // the next no-arg call to this method. We do not dispose the old
          // states immediately because that BPTT (among other things) require
          // them.
          this.keptStates.push(this.states_.slice());
        } else {
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.states_);
        }
        for (let index = 0; index < this.states_.length; ++index) {
          const value = states[index];
          const expectedShape = stateShape;
          if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(value.shape, expectedShape)) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);
          }
          this.states_[index] = value;
        }
      }
      this.states_ = this.states_.map(state => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep(state.clone()));
    });
  }
  computeSingleOutputShape(inputShape) {
    const {
      dataFormat,
      filters,
      kernelSize,
      padding,
      strides,
      dilationRate
    } = this.cell;
    const isChannelsFirst = dataFormat === 'channelsFirst';
    const h = inputShape[isChannelsFirst ? 3 : 2];
    const w = inputShape[isChannelsFirst ? 4 : 3];
    const hOut = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(h, kernelSize[0], padding, strides[0], dilationRate[0]);
    const wOut = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(w, kernelSize[1], padding, strides[1], dilationRate[1]);
    const outShape = [...inputShape.slice(0, 2), ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])];
    return outShape;
  }
}
/** @nocollapse */
ConvRNN2D.className = 'ConvRNN2D';
class ConvLSTM2DCell extends _recurrent__WEBPACK_IMPORTED_MODULE_9__.LSTMCell {
  constructor(args) {
    const {
      filters,
      kernelSize,
      strides,
      padding,
      dataFormat,
      dilationRate
    } = args;
    super(Object.assign(Object.assign({}, args), {
      units: filters
    }));
    this.filters = filters;
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(this.filters, 'filters');
    this.kernelSize = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeArray)(kernelSize, 2, 'kernelSize');
    this.kernelSize.forEach(size => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(size, 'kernelSize'));
    this.strides = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeArray)(strides || 1, 2, 'strides');
    this.strides.forEach(stride => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(stride, 'strides'));
    this.padding = padding || 'valid';
    (0,_common__WEBPACK_IMPORTED_MODULE_2__.checkPaddingMode)(this.padding);
    this.dataFormat = dataFormat || 'channelsLast';
    (0,_common__WEBPACK_IMPORTED_MODULE_2__.checkDataFormat)(this.dataFormat);
    this.dilationRate = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeArray)(dilationRate || 1, 2, 'dilationRate');
    this.dilationRate.forEach(rate => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(rate, 'dilationRate'));
  }
  build(inputShape) {
    var _a;
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(inputShape);
    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;
    if (inputShape[channelAxis] == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);
    }
    const inputDim = inputShape[channelAxis];
    const numOfKernels = 4;
    const kernelShape = this.kernelSize.concat([inputDim, this.filters * numOfKernels]);
    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    const recurrentKernelShape = this.kernelSize.concat([this.filters, this.filters * numOfKernels]);
    this.recurrentKernel = this.addWeight('recurrent_kernel', recurrentKernelShape, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    if (this.useBias) {
      let biasInitializer;
      if (this.unitForgetBias) {
        const init = this.biasInitializer;
        const filters = this.filters;
        biasInitializer = new (_a = class CustomInit extends _initializers__WEBPACK_IMPORTED_MODULE_5__.Initializer {
          apply(shape, dtype) {
            const biasI = init.apply([filters]);
            const biasF = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ones([filters]);
            const biasCAndO = init.apply([filters * 2]);
            return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.concatenate([biasI, biasF, biasCAndO]);
          }
        }, /** @nocollapse */
        _a.className = 'CustomInit', _a)();
      } else {
        biasInitializer = this.biasInitializer;
      }
      this.bias = this.addWeight('bias', [this.filters * numOfKernels], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    }
    this.built = true;
  }
  call(inputs, kwargs) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      if (inputs.length !== 3) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);
      }
      const training = kwargs['training'] || false;
      const x = inputs[0]; // Current input
      const hTMinus1 = inputs[1]; // Previous memory state.
      const cTMinus1 = inputs[2]; // Previous carry state.
      const numOfKernels = 4;
      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {
        this.dropoutMask = (0,_recurrent__WEBPACK_IMPORTED_MODULE_9__.generateDropoutMask)({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(x),
          rate: this.dropout,
          training,
          count: numOfKernels,
          dropoutFunc: this.dropoutFunc
        });
      }
      const dropoutMask = this.dropoutMask;
      const applyDropout = (x, mask, index) => {
        if (!mask || !mask[index]) {
          return x;
        }
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(mask[index], x);
      };
      let xI = applyDropout(x, dropoutMask, 0);
      let xF = applyDropout(x, dropoutMask, 1);
      let xC = applyDropout(x, dropoutMask, 2);
      let xO = applyDropout(x, dropoutMask, 3);
      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {
        this.recurrentDropoutMask = (0,_recurrent__WEBPACK_IMPORTED_MODULE_9__.generateDropoutMask)({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(hTMinus1),
          rate: this.recurrentDropout,
          training,
          count: numOfKernels,
          dropoutFunc: this.dropoutFunc
        });
      }
      const recDropoutMask = this.recurrentDropoutMask;
      let hI = applyDropout(hTMinus1, recDropoutMask, 0);
      let hF = applyDropout(hTMinus1, recDropoutMask, 1);
      let hC = applyDropout(hTMinus1, recDropoutMask, 2);
      let hO = applyDropout(hTMinus1, recDropoutMask, 3);
      const kernelChannelAxis = 3;
      const [kernelI, kernelF, kernelC, kernelO] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split(this.kernel.read(), numOfKernels, kernelChannelAxis);
      const [biasI, biasF, biasC, biasO] = this.useBias ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split(this.bias.read(), numOfKernels) : [null, null, null, null];
      xI = this.inputConv(xI, kernelI, biasI, this.padding);
      xF = this.inputConv(xF, kernelF, biasF, this.padding);
      xC = this.inputConv(xC, kernelC, biasC, this.padding);
      xO = this.inputConv(xO, kernelO, biasO, this.padding);
      const [recKernelI, recKernelF, recKernelC, recKernelO] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split(this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);
      hI = this.recurrentConv(hI, recKernelI);
      hF = this.recurrentConv(hF, recKernelF);
      hC = this.recurrentConv(hC, recKernelC);
      hO = this.recurrentConv(hO, recKernelO);
      const i = this.recurrentActivation.apply(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(xI, hI));
      const f = this.recurrentActivation.apply(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(xF, hF));
      const c = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(f, cTMinus1), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(i, this.activation.apply(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(xC, hC))));
      const h = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(this.recurrentActivation.apply(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(xO, hO)), this.activation.apply(c));
      return [h, h, c];
    });
  }
  getConfig() {
    const _a = super.getConfig(),
      {
        'units': _
      } = _a,
      baseConfig = __rest(_a, ['units']);
    const config = {
      filters: this.filters,
      kernelSize: this.kernelSize,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      strides: this.strides
    };
    return Object.assign(Object.assign({}, baseConfig), config);
  }
  inputConv(x, w, b, padding) {
    const out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv2d(x, w, this.strides, padding || 'valid', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC', this.dilationRate);
    if (b) {
      return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.biasAdd(out, b, this.dataFormat);
    }
    return out;
  }
  recurrentConv(x, w) {
    const strides = 1;
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv2d(x, w, strides, 'same', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');
  }
}
/** @nocollapse */
ConvLSTM2DCell.className = 'ConvLSTM2DCell';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(ConvLSTM2DCell);
class ConvLSTM2D extends ConvRNN2D {
  constructor(args) {
    const cell = new ConvLSTM2DCell(args);
    super(Object.assign(Object.assign({}, args), {
      cell
    }));
  }
  /** @nocollapse */
  static fromConfig(cls, config) {
    return new cls(config);
  }
}
/** @nocollapse */
ConvLSTM2D.className = 'ConvLSTM2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(ConvLSTM2D);

/***/ }),

/***/ 60298:
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Activation": () => (/* binding */ Activation),
/* harmony export */   "Dense": () => (/* binding */ Dense),
/* harmony export */   "Dropout": () => (/* binding */ Dropout),
/* harmony export */   "Flatten": () => (/* binding */ Flatten),
/* harmony export */   "Masking": () => (/* binding */ Masking),
/* harmony export */   "Permute": () => (/* binding */ Permute),
/* harmony export */   "RepeatVector": () => (/* binding */ RepeatVector),
/* harmony export */   "Reshape": () => (/* binding */ Reshape),
/* harmony export */   "SpatialDropout1D": () => (/* binding */ SpatialDropout1D)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _activations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../activations */ 27943);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constraints */ 57529);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../regularizers */ 97436);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/math_utils */ 96821);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Basic Layers.
 */











class Dropout extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    this.rate = Math.max(Math.min(args.rate, 1), 0);
    // So that the scalar doesn't get tidied up between executions.
    this.noiseShape = args.noiseShape;
    this.seed = args.seed;
    this.supportsMasking = true;
  }
  getNoiseShape(input) {
    if (this.noiseShape == null) {
      return this.noiseShape;
    }
    const inputShape = input.shape;
    const noiseShape = [];
    for (let i = 0; i < this.noiseShape.length; ++i) {
      noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);
    }
    return noiseShape;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
      if (0 < this.rate && this.rate < 1) {
        const training = kwargs['training'] == null ? false : kwargs['training'];
        const noiseShape = this.getNoiseShape(input);
        const output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.inTrainPhase(() => _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dropout(input, this.rate, noiseShape, this.seed), () => input, training);
        return output;
      }
      return inputs;
    });
  }
  getConfig() {
    const config = {
      rate: this.rate,
      noiseShape: this.noiseShape,
      seed: this.seed
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  dispose() {
    return super.dispose();
  }
}
/** @nocollapse */
Dropout.className = 'Dropout';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Dropout);
class SpatialDropout1D extends Dropout {
  constructor(args) {
    super(args);
    this.inputSpec = [{
      ndim: 3
    }];
  }
  getNoiseShape(input) {
    const inputShape = input.shape;
    return [inputShape[0], 1, inputShape[2]];
  }
}
/** @nocollapse */
SpatialDropout1D.className = 'SpatialDropout1D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(SpatialDropout1D);
class Dense extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    // Default activation: Linear (none).
    this.activation = null;
    this.useBias = true;
    this.kernel = null;
    this.bias = null;
    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
    this.DEFAULT_BIAS_INITIALIZER = 'zeros';
    if (args.batchInputShape == null && args.inputShape == null && args.inputDim != null) {
      // This logic is copied from Layer's constructor, since we can't
      // do exactly what the Python constructor does for Dense().
      let batchSize = null;
      if (args.batchSize != null) {
        batchSize = args.batchSize;
      }
      this.batchInputShape = [batchSize, args.inputDim];
    }
    this.units = args.units;
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_8__.assertPositiveInteger)(this.units, 'units');
    this.activation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.activation);
    if (args.useBias != null) {
      this.useBias = args.useBias;
    }
    this.kernelInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_6__.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
    this.biasInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_6__.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
    this.kernelConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_3__.getConstraint)(args.kernelConstraint);
    this.biasConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_3__.getConstraint)(args.biasConstraint);
    this.kernelRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.getRegularizer)(args.kernelRegularizer);
    this.biasRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.getRegularizer)(args.biasRegularizer);
    this.activityRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.getRegularizer)(args.activityRegularizer);
    this.supportsMasking = true;
    this.inputSpec = [{
      minNDim: 2
    }];
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneShape)(inputShape);
    const inputLastDim = inputShape[inputShape.length - 1];
    if (this.kernel == null) {
      this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
      if (this.useBias) {
        this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
      }
    }
    this.inputSpec = [{
      minNDim: 2,
      axes: {
        [-1]: inputLastDim
      }
    }];
    this.built = true;
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneShape)(inputShape);
    const outputShape = inputShape.slice();
    outputShape[outputShape.length - 1] = this.units;
    return outputShape;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      // Dense layer accepts only a single input.
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
      const fusedActivationName = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_8__.mapActivationToFusedKernel)(this.activation.getClassName());
      let output;
      if (fusedActivationName != null) {
        output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(input, this.kernel.read(), fusedActivationName, this.bias ? this.bias.read() : null);
      } else {
        output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(input, this.kernel.read());
        if (this.bias != null) {
          output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.biasAdd(output, this.bias.read());
        }
        if (this.activation != null) {
          output = this.activation.apply(output);
        }
      }
      return output;
    });
  }
  getConfig() {
    const config = {
      units: this.units,
      activation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.activation),
      useBias: this.useBias,
      kernelInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_6__.serializeInitializer)(this.kernelInitializer),
      biasInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_6__.serializeInitializer)(this.biasInitializer),
      kernelRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.serializeRegularizer)(this.kernelRegularizer),
      biasRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.serializeRegularizer)(this.biasRegularizer),
      activityRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_7__.serializeRegularizer)(this.activityRegularizer),
      kernelConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_3__.serializeConstraint)(this.kernelConstraint),
      biasConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_3__.serializeConstraint)(this.biasConstraint)
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Dense.className = 'Dense';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Dense);
class Flatten extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    args = args || {};
    super(args);
    this.inputSpec = [{
      minNDim: 3
    }];
    this.dataFormat = args.dataFormat;
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneShape)(inputShape);
    for (const dim of inputShape.slice(1)) {
      if (dim == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`The shape of the input to "Flatten" is not fully defined ` + `(got ${inputShape.slice(1)}). Make sure to pass a complete ` + `"input_shape" or "batch_input_shape" argument to the first ` + `layer in your model.`);
      }
    }
    return [inputShape[0], (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_9__.arrayProd)(inputShape, 1)];
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      let input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
      if (this.dataFormat === 'channelsFirst' && input.rank > 1) {
        const permutation = [0];
        for (let i = 2; i < input.rank; ++i) {
          permutation.push(i);
        }
        permutation.push(1);
        input = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose)(input, permutation);
      }
      return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.batchFlatten(input);
    });
  }
  getConfig() {
    const config = {};
    if (this.dataFormat != null) {
      config['dataFormat'] = this.dataFormat;
    }
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Flatten.className = 'Flatten';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Flatten);
class Activation extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    this.supportsMasking = true;
    this.activation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.activation);
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
      return this.activation.apply(input);
    });
  }
  getConfig() {
    const config = {
      activation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.activation)
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Activation.className = 'Activation';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Activation);
class RepeatVector extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    this.n = args.n;
    this.inputSpec = [{
      ndim: 2
    }];
  }
  computeOutputShape(inputShape) {
    return [inputShape[0], this.n, inputShape[1]];
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
      return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.repeat(inputs, this.n);
    });
  }
  getConfig() {
    const config = {
      n: this.n
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
RepeatVector.className = 'RepeatVector';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(RepeatVector);
class Reshape extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    this.targetShape = args.targetShape;
    // Make sure that all unknown dimensions are represented as `null`.
    for (let i = 0; i < this.targetShape.length; ++i) {
      if (this.isUnknown(this.targetShape[i])) {
        this.targetShape[i] = null;
      }
    }
  }
  isUnknown(dim) {
    return dim < 0 || dim == null;
  }
  /**
   * Finds and replaces a missing dimension in output shape.
   *
   * This is a near direct port of the internal Numpy function
   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
   *
   * @param inputShape: Original shape of array begin reshape.
   * @param outputShape: Target shape of the array, with at most a single
   * `null` or negative number, which indicates an underdetermined dimension
   * that should be derived from `inputShape` and the known dimensions of
   *   `outputShape`.
   * @returns: The output shape with `null` replaced with its computed value.
   * @throws: ValueError: If `inputShape` and `outputShape` do not match.
   */
  fixUnknownDimension(inputShape, outputShape) {
    const errorMsg = 'Total size of new array must be unchanged.';
    const finalShape = outputShape.slice();
    let known = 1;
    let unknown = null;
    for (let i = 0; i < finalShape.length; ++i) {
      const dim = finalShape[i];
      if (this.isUnknown(dim)) {
        if (unknown === null) {
          unknown = i;
        } else {
          throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError('Can only specifiy one unknown dimension.');
        }
      } else {
        known *= dim;
      }
    }
    const originalSize = (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_9__.arrayProd)(inputShape);
    if (unknown !== null) {
      if (known === 0 || originalSize % known !== 0) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(errorMsg);
      }
      finalShape[unknown] = originalSize / known;
    } else if (originalSize !== known) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(errorMsg);
    }
    return finalShape;
  }
  computeOutputShape(inputShape) {
    let anyUnknownDims = false;
    for (let i = 0; i < inputShape.length; ++i) {
      if (this.isUnknown(inputShape[i])) {
        anyUnknownDims = true;
        break;
      }
    }
    if (anyUnknownDims) {
      return inputShape.slice(0, 1).concat(this.targetShape);
    } else {
      return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));
    }
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
      const inputShape = input.shape;
      const outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(input, outputShape);
    });
  }
  getConfig() {
    const config = {
      targetShape: this.targetShape
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Reshape.className = 'Reshape';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Reshape);
class Permute extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    if (args.dims == null) {
      throw new Error('Required configuration field `dims` is missing during Permute ' + 'constructor call.');
    }
    if (!Array.isArray(args.dims)) {
      throw new Error('Permute constructor requires `dims` to be an Array, but received ' + `${args.dims} instead.`);
    }
    // Check the validity of the permutation indices.
    const expectedSortedIndices = (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_9__.range)(1, args.dims.length + 1);
    if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {
      throw new Error('Invalid permutation `dims`: ' + JSON.stringify(args.dims) + ' `dims` must contain consecutive integers starting from 1.');
    }
    this.dims = args.dims;
    this.dimsIncludingBatch = [0].concat(this.dims);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_4__.InputSpec({
      ndim: this.dims.length + 1
    })];
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneShape)(inputShape);
    const outputShape = inputShape.slice();
    this.dims.forEach((dim, i) => {
      outputShape[i + 1] = inputShape[dim];
    });
    return outputShape;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose)((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs), this.dimsIncludingBatch);
  }
  getConfig() {
    const config = {
      dims: this.dims
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Permute.className = 'Permute';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Permute);
class Masking extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args == null ? {} : args);
    this.supportsMasking = true;
    if (args != null) {
      this.maskValue = args.maskValue == null ? 0 : args.maskValue;
    } else {
      this.maskValue = 0;
    }
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      maskValue: this.maskValue
    };
    Object.assign(config, baseConfig);
    return config;
  }
  computeMask(inputs, mask) {
    const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
    const axis = -1;
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.any)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.notEqual)(input, this.maskValue), axis);
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneTensor)(inputs);
      const axis = -1;
      const keepDims = true;
      const booleanMask = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.any)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.notEqual)(input, this.maskValue), axis, keepDims);
      const output = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(input, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast)(booleanMask, input.dtype));
      return output;
    });
  }
}
/** @nocollapse */
Masking.className = 'Masking';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Masking);

/***/ }),

/***/ 72409:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Embedding": () => (/* binding */ Embedding)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constraints */ 57529);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../regularizers */ 97436);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Embedding Layer.
 *
 * Original source: keras/constraints.py
 */









class Embedding extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    super(args);
    this.embeddings = null;
    this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';
    if (args.batchInputShape == null && args.inputShape == null) {
      // Porting Note: This logic is copied from Layer's constructor, since we
      // can't do exactly what the Python constructor does for Embedding().
      // Specifically, the super constructor can not be called after the
      // mutation of the `config` argument.
      let batchSize = null;
      if (args.batchSize != null) {
        batchSize = args.batchSize;
      }
      if (args.inputLength == null) {
        // Fix super-constructor to what it would have done if
        // 'config.inputShape' were (None, )
        this.batchInputShape = [batchSize, null];
      } else {
        // Fix super-constructor to what it would have done if
        // 'config.inputShape' were (config.inputLength, )
        this.batchInputShape = [batchSize].concat(_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.toList(args.inputLength));
      }
    }
    this.inputDim = args.inputDim;
    _utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger(this.inputDim, 'inputDim');
    this.outputDim = args.outputDim;
    _utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger(this.outputDim, 'outputDim');
    this.embeddingsInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_5__.getInitializer)(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);
    this.embeddingsRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_6__.getRegularizer)(args.embeddingsRegularizer);
    this.activityRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_6__.getRegularizer)(args.activityRegularizer);
    this.embeddingsConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_2__.getConstraint)(args.embeddingsConstraint);
    this.maskZero = args.maskZero;
    this.supportsMasking = args.maskZero;
    this.inputLength = args.inputLength;
  }
  build(inputShape) {
    this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);
    this.built = true;
  }
  // Override warnOnIncompatibleInputShape because an embedding layer allows
  // the input to have varying ranks.
  warnOnIncompatibleInputShape(inputShape) {}
  computeMask(inputs, mask) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (!this.maskZero) {
        return null;
      } else {
        inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.notEqual)(inputs, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zerosLike)(inputs));
      }
    });
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(inputShape);
    if (this.inputLength == null) {
      return [...inputShape, this.outputDim];
    }
    // inputLength can be an array if input is 3D or higher.
    const inLens = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.toList(this.inputLength);
    if (inLens.length !== inputShape.length - 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`"inputLength" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);
    } else {
      let i = 0;
      for (let k = 0; k < inLens.length; ++k) {
        const s1 = inLens[k];
        const s2 = inputShape[k + 1];
        if (s1 != null && s2 != null && s1 !== s2) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`"inputLength" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);
        } else if (s1 == null) {
          inLens[i] = s2;
        }
        i++;
      }
    }
    return [inputShape[0], ...inLens, this.outputDim];
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      // Embedding layer accepts only a single input.
      let input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
      if (input.dtype !== 'int32') {
        input = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.cast(input, 'int32');
      }
      const output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.gather(this.embeddings.read(), (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(input, [input.size]));
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(output, (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(this.computeOutputShape(input.shape)));
    });
  }
  getConfig() {
    const config = {
      inputDim: this.inputDim,
      outputDim: this.outputDim,
      embeddingsInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_5__.serializeInitializer)(this.embeddingsInitializer),
      embeddingsRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_6__.serializeRegularizer)(this.embeddingsRegularizer),
      activityRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_6__.serializeRegularizer)(this.activityRegularizer),
      embeddingsConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_2__.serializeConstraint)(this.embeddingsConstraint),
      maskZero: this.maskZero,
      inputLength: this.inputLength
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Embedding.className = 'Embedding';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Embedding);

/***/ }),

/***/ 56125:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Add": () => (/* binding */ Add),
/* harmony export */   "Average": () => (/* binding */ Average),
/* harmony export */   "Concatenate": () => (/* binding */ Concatenate),
/* harmony export */   "Dot": () => (/* binding */ Dot),
/* harmony export */   "Maximum": () => (/* binding */ Maximum),
/* harmony export */   "Merge": () => (/* binding */ Merge),
/* harmony export */   "Minimum": () => (/* binding */ Minimum),
/* harmony export */   "Multiply": () => (/* binding */ Multiply),
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "average": () => (/* binding */ average),
/* harmony export */   "concatenate": () => (/* binding */ concatenate),
/* harmony export */   "maximum": () => (/* binding */ maximum),
/* harmony export */   "minimum": () => (/* binding */ minimum),
/* harmony export */   "multiply": () => (/* binding */ multiply)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _losses__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../losses */ 56648);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/math_utils */ 96821);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Merge Layers.
 */









/**
 * Generic Merge layer for element-wise merge functions.
 *
 * Used to implement `Sum`, `Average`, `Concatenate`, etc.
 */
class Merge extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    super(args || {});
    this.supportsMasking = true;
  }
  /**
   * Logic for merging multiple tensors, to be overridden by subclasses.
   * @param inputs
   */
  mergeFunction(inputs) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError();
  }
  /**
   * Computes the shape of the result of an elementwise operation.
   *
   * @param shape1: Shape of the first tensor.
   * @param shape2: Shape of the second tensor.
   * @returns Expected output shape when an elementwise operation is carried
   *   out on 2 tensors with shapes `shape1` and `shape2`.
   * @throws ValueError: If `shape1` and `shape2` are not compatible for
   *   element-wise operations.
   */
  computeElementwiseOpOutputShape(shape1, shape2) {
    if (shape1 == null || shape2 == null) {
      return null;
    } else if (shape1.length < shape2.length) {
      return this.computeElementwiseOpOutputShape(shape2, shape1);
    } else if (shape2.length === 0) {
      return shape1;
    }
    const outputShape = shape1.slice(0, shape1.length - shape2.length);
    for (let k = 0; k < shape2.length; ++k) {
      const i = shape1[shape1.length - shape2.length + k];
      const j = shape2[k];
      if (i == null || j == null || i < 0 || j < 0) {
        outputShape.push(null);
      } else if (i === 1) {
        outputShape.push(j);
      } else if (j === 1) {
        outputShape.push(i);
      } else {
        if (i !== j) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('Operands could not be broadcast together with shapes ' + JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));
        }
        outputShape.push(i);
      }
    }
    return outputShape;
  }
  build(inputShape) {
    // Used purely for shape validation.
    if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {
      // Make sure that inputShape is an Array of shape.
      inputShape = [(0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneShape)(inputShape)];
    }
    inputShape = inputShape;
    if (inputShape.length < 2) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('A merge layer should be called on an Array of at least 2 inputs.' + ` Got ${inputShape.length} input(s).`);
    }
    // Make sure that there is at most one unique batch size among the input
    // shapes.
    let batchSizes = [];
    for (const shape of inputShape) {
      if (shape != null && shape[0] !== null) {
        batchSizes.push(shape[0]);
      }
    }
    batchSizes = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.unique(batchSizes);
    if (batchSizes.length > 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Can not merge tensors with different batch sizes. ` + `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);
    }
    let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);
    for (let i = 1; i < inputShape.length; ++i) {
      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);
      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);
    }
    // If the inputs have different ranks, we have to reshape them to make them
    // broadcastable.
    const allRanks = inputShape.map(shape => shape.length);
    if (inputShape.indexOf(null) === -1 && _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.unique(allRanks).length === 1) {
      this.reshapeRequired = false;
    } else {
      this.reshapeRequired = true;
    }
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = inputs;
      if (this.reshapeRequired) {
        const reshapedInputs = [];
        const inputDims = inputs.map(input => input.rank);
        if (inputDims.indexOf(null) === -1) {
          // If ranks of all inputs are available, we simply expand each of them
          // at axis=1 until all of them have the same rank.
          const maxNDim = _utils_math_utils__WEBPACK_IMPORTED_MODULE_6__.max(inputDims);
          for (let x of inputs) {
            const xNDim = x.rank;
            for (let k = 0; k < maxNDim - xNDim; ++k) {
              x = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.expandDims(x, 1);
            }
            reshapedInputs.push(x);
          }
          return this.mergeFunction(reshapedInputs);
        } else {
          // Transpose all inputs so that batch size is the last dimension.
          // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]
          let transposed = false;
          for (const x of inputs) {
            const xNDim = x.rank;
            if (xNDim == null) {
              const xShape = x.shape;
              const batchSize = xShape[0];
              const newShape = xShape.slice(1).concat([batchSize]);
              let xTransposed = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(x, [batchSize].concat(_utils_math_utils__WEBPACK_IMPORTED_MODULE_6__.arrayProd(xShape.slice(1))));
              xTransposed = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(xTransposed, [1, 0]);
              xTransposed = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(xTransposed, newShape);
              reshapedInputs.push(xTransposed);
              transposed = true;
            } else if (xNDim > 1) {
              const dims = _utils_math_utils__WEBPACK_IMPORTED_MODULE_6__.range(1, xNDim).concat([0]);
              reshapedInputs.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(x, dims));
              transposed = true;
            } else {
              // We don't transpose inputs if they are 1D vectors or scalars.
              reshapedInputs.push(x);
            }
          }
          let y = this.mergeFunction(reshapedInputs);
          const yNDim = y.rank;
          if (transposed) {
            // If inputs have been transposed, we have to transpose the output
            // too.
            if (yNDim == null) {
              const yShape = y.shape;
              const yNDim = yShape.length;
              const batchSize = yShape[yNDim - 1];
              const newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));
              y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(y, [-1, batchSize]), [1, 0]), newShape);
            } else if (yNDim > 1) {
              const dims = [yNDim - 1].concat(_utils_math_utils__WEBPACK_IMPORTED_MODULE_6__.range(0, yNDim - 1));
              y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(y, dims);
            }
          }
          return y;
        }
      } else {
        return this.mergeFunction(inputs);
      }
    });
  }
  computeOutputShape(inputShape) {
    inputShape = inputShape;
    let outputShape;
    if (inputShape[0] == null) {
      outputShape = null;
    } else {
      outputShape = inputShape[0].slice(1);
    }
    for (let i = 1; i < inputShape.length; ++i) {
      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);
      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);
    }
    let batchSizes = [];
    for (const shape of inputShape) {
      if (shape != null && shape[0] !== null) {
        batchSizes.push(shape[0]);
      }
    }
    batchSizes = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_5__.unique(batchSizes);
    if (batchSizes.length === 1) {
      outputShape = batchSizes.concat(outputShape);
    } else {
      outputShape = [null].concat(outputShape);
    }
    return outputShape;
  }
  computeMask(inputs, mask) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      if (mask == null) {
        return null;
      }
      if (!Array.isArray(mask)) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('`mask` should be an Array');
      }
      if (!Array.isArray(inputs)) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('`inputs` should be an Array');
      }
      if (mask.length !== inputs.length) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`The Array 'inputs' and 'mask' are expected to have the same ` + `length, but have different lengths ` + `(${inputs.length} vs ${mask.length})`);
      }
      if (mask.every(m => m == null)) {
        return null;
      }
      mask = mask.map(m => m == null ? m : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims(m, 0));
      let output = mask[0];
      for (let i = 1; i < mask.length - 1; ++i) {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalAnd(output, mask[i]);
      }
      return output;
    });
  }
}
class Add extends Merge {
  constructor(args) {
    super(args);
  }
  mergeFunction(inputs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      let output = inputs[0].clone();
      for (let i = 1; i < inputs.length; ++i) {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(output, inputs[i]);
      }
      return output;
    });
  }
}
/** @nocollapse */
Add.className = 'Add';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Add);
/**
 * Calculate the element-wise sum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Add` layer, by using no input argument
 *    or a single configuration argument. The resultant `Add` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const addLayer = tf.layers.add();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = addLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.add([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.add([input1, input2]).print();
 * // Gives [[11, 22], [33, 44]].
 *
 */
function add(config) {
  if (Array.isArray(config)) {
    const layer = new Add({});
    return layer.apply(config);
  } else {
    return new Add(config);
  }
}
class Multiply extends Merge {
  constructor(args) {
    super(args);
  }
  mergeFunction(inputs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      let output = inputs[0].clone();
      for (let i = 1; i < inputs.length; ++i) {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(output, inputs[i]);
      }
      return output;
    });
  }
}
/** @nocollapse */
Multiply.className = 'Multiply';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Multiply);
/**
 * Calculate the element-wise product of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Multiply` layer, by using no input argument
 *    or a single configuration argument. The resultant `Multiply` layer can
 *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const multiplyLayer = tf.layers.multiply();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = multiplyLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.multiply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.multiply([input1, input2]).print();
 * // Gives [[10, 40], [90, 160]].
 *
 */
function multiply(config) {
  if (Array.isArray(config)) {
    const layer = new Multiply({});
    return layer.apply(config);
  } else {
    return new Multiply(config);
  }
}
class Average extends Merge {
  constructor(args) {
    super(args);
  }
  mergeFunction(inputs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      let output = inputs[0].clone();
      for (let i = 1; i < inputs.length; ++i) {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(output, inputs[i]);
      }
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(1 / inputs.length, output);
    });
  }
}
/** @nocollapse */
Average.className = 'Average';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Average);
/**
 * Calculate the element-wise arithmetic mean of inputs, which all have the same
 * shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Average` layer, by using no input argument
 *    or a single configuration argument. The resultant `Average` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const averageLayer = tf.layers.average();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = averageLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.average([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);
 * tf.layers.average([input1, input2]).print();
 * // Gives [[5.5, 11], [16.5, 22]].
 *
 */
function average(config) {
  if (Array.isArray(config)) {
    const layer = new Average({});
    return layer.apply(config);
  } else {
    return new Average(config);
  }
}
class Maximum extends Merge {
  constructor(args) {
    super(args);
  }
  mergeFunction(inputs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      let output = inputs[0];
      for (let i = 1; i < inputs.length; ++i) {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maximum(output, inputs[i]);
      }
      return output;
    });
  }
}
/** @nocollapse */
Maximum.className = 'Maximum';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Maximum);
/**
 * Calculate the element-wise maximum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Maximum` layer, by using no input argument
 *    or a single configuration argument. The resultant `Maximum` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const maximumLayer = tf.layers.maximum();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = maximumLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.maximum([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);
 * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);
 * tf.layers.maximum([input1, input2]).print();
 * // Gives [[10, 20], [30, 40]].
 *
 */
function maximum(config) {
  if (Array.isArray(config)) {
    const layer = new Maximum({});
    return layer.apply(config);
  } else {
    return new Maximum(config);
  }
}
class Minimum extends Merge {
  constructor(args) {
    super(args);
  }
  mergeFunction(inputs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      let output = inputs[0];
      for (let i = 1; i < inputs.length; ++i) {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.minimum(output, inputs[i]);
      }
      return output;
    });
  }
}
/** @nocollapse */
Minimum.className = 'Minimum';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Minimum);
/**
 * Calculate the element-wise minimum of inputs, which all have the same shape.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Minimum` layer, by using no input argument
 *    or a single configuration argument. The resultant `Minimum` layer can then
 *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const minimumLayer = tf.layers.minimum();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = minimumLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 2]});
 * const input2 = tf.input({shape: [2, 2]});
 * const output = tf.layers.minimum([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);
 * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);
 * tf.layers.minimum([input1, input2]).print();
 * // Gives [[1, 2], [3, 4]].
 *
 */
function minimum(config) {
  if (Array.isArray(config)) {
    const layer = new Minimum({});
    return layer.apply(config);
  } else {
    return new Minimum(config);
  }
}
class Concatenate extends Merge {
  constructor(args) {
    super(args);
    this.DEFAULT_AXIS = -1;
    if (args == null) {
      args = {};
    }
    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;
    this.supportsMasking = true;
    this.reshapeRequired = false;
  }
  build(inputShape) {
    // Used purely for shape validation.]
    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('A `Concatenate` layer should be called on a list of at least 2 ' + 'inputs');
    }
    inputShape = inputShape;
    let allNoneShape = true;
    for (const shape of inputShape) {
      if (shape != null) {
        allNoneShape = false;
        break;
      }
    }
    if (allNoneShape) {
      return;
    }
    const shapeSet = [];
    for (let i = 0; i < inputShape.length; ++i) {
      const shapeWithoutConcatAxis = inputShape[i].slice();
      shapeWithoutConcatAxis.splice(this.axis, 1);
      let exists = false;
      for (const shape of shapeSet) {
        if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(shape, shapeWithoutConcatAxis)) {
          exists = true;
          break;
        }
      }
      if (!exists) {
        shapeSet.push(shapeWithoutConcatAxis);
      }
    }
    if (shapeSet.length > 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('A `Concatenate` layer requires inputs with matching shapes ' + 'except for the concat axis. Got input shapes: ' + JSON.stringify(inputShape));
    }
  }
  mergeFunction(inputs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.concatenate(inputs, this.axis);
    });
  }
  computeOutputShape(inputShape) {
    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('A `Concatenate` layer should be called on a list of inputs.');
    }
    const inputShapes = inputShape;
    const outputShape = inputShapes[0].slice();
    const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;
    // Porting Note: the line above is because TypeScript doesn't support
    //   negative indices.
    for (const shape of inputShapes.slice(1)) {
      if (outputShape[axis] == null || shape[axis] == null) {
        outputShape[axis] = null;
        break;
      }
      outputShape[axis] += shape[axis];
    }
    return outputShape;
  }
  computeMask(inputs, mask) {
    if (mask == null) {
      return null;
    }
    if (!Array.isArray(mask)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('`mask` should be an array for Concatenate');
    }
    if (!Array.isArray(inputs)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('`inputs` should be an array for Concatenate');
    }
    if (mask.length !== inputs.length) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Mismatch in the length of mask (${mask.length}) ` + `and the legnth of inputs (${inputs.length})`);
    }
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      let allNullMasks = true;
      mask.forEach(m => {
        if (m != null) {
          allNullMasks = false;
          return;
        }
      });
      if (allNullMasks) {
        return null;
      }
      const outputMasks = [];
      for (let i = 0; i < inputs.length; ++i) {
        if (mask[i] == null) {
          // Input is unmasked. Append all 1's to masks.
          outputMasks.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(inputs[i]), 'bool'));
        } else if (mask[i].rank < inputs[i].rank) {
          // Mask is smaller than the input, expand it.
          outputMasks.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims(mask[i], -1));
        } else {
          outputMasks.push(mask[i]);
        }
      }
      const concatenatedMasks = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat(outputMasks, this.axis);
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.all(concatenatedMasks, -1, false);
    });
  }
  getConfig() {
    const config = {
      'axis': this.axis
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Concatenate.className = 'Concatenate';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Concatenate);
/**
 * Concatenate an `Array` of inputs.
 *
 * This function can be invoked in three ways.
 *
 * 1. Construct an instance of `Concatenate` layer, by using no input argument
 *    or a single configuration argument. The resultant `Concatenate` layer can
 *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:
 *
 * ```js
 * const concatLayer = tf.layers.concatenate();
 *
 * // The layer can be applied to inputs.
 * const input1 = tf.input({shape: [2, 3]});
 * const input2 = tf.input({shape: [2, 4]});
 * const output = concatLayer.apply([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 7], with the first dimension as the undetermined batch
 * // dimension and the last dimension as the result of concatenating the
 * // last dimensions of the two inputs.
 * ```
 *
 * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.SymbolicTensor`. For example:
 *
 * ```js
 * const input1 = tf.input({shape: [2, 3]});
 * const input2 = tf.input({shape: [2, 4]});
 * const output = tf.layers.concatenate([input1, input2]);
 * console.log(output.shape);
 * // You get [null, 2, 2], with the first dimension as the undetermined batch
 * // dimension and the last dimension as the result of concatenating the
 * // last dimensions of the two inputs.
 * ```
 *
 * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs
 *    an `Layer` object internally and calls its `apply` method on the inputs,
 *    generating a new `tf.Tensor` as the result of the computation. For
 * example:
 *
 * ```js
 * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);
 * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);
 * tf.layers.concatenate([input1, input2]).print();
 * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].
 *
 */
function concatenate(config) {
  if (Array.isArray(config)) {
    const layer = new Concatenate({});
    return layer.apply(config);
  } else {
    return new Concatenate(config);
  }
}
/**
 * Interpretable potentially negative axis index.
 *
 * For example, given axis = -1, and dim = 3, this function will return 2.
 *
 * @param axis The axis index, may be a positive, zero or negative integer.
 * @param dim Total number of dimensions, a positive integer.
 * @returns A non-negative axis index equivalent to the input `axis`.
 */
function interpretAxis(axis, dim) {
  while (axis < 0) {
    axis += dim;
  }
  return axis;
}
function batchDot(x, y, axes) {
  if (x.shape.length > 3 || y.shape.length > 3) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, ` + `but got ${x.shape.length}`);
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, ` + `but got ${y.shape.length}`);
  if (typeof axes === 'number') {
    axes = [axes, axes];
  }
  if (x.dtype === 'complex64' || y.dtype === 'complex64') {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');
  }
  const xNDim = x.shape.length;
  const yNDim = y.shape.length;
  if (axes == null) {
    // Behave like batchMatmul by default.
    axes = [xNDim - 1, yNDim - 2];
  }
  const axesArray = axes;
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
    let diff;
    if (xNDim > yNDim) {
      diff = xNDim - yNDim;
      const diffShape = [];
      for (let i = 0; i < diff; ++i) {
        diffShape.push(1);
      }
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(y, y.shape.concat(diffShape));
    } else if (yNDim > xNDim) {
      diff = yNDim - xNDim;
      const diffShape = [];
      for (let i = 0; i < diff; ++i) {
        diffShape.push(1);
      }
      x = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(x, x.shape.concat(diffShape));
    } else {
      diff = 0;
    }
    let out;
    if (x.shape.length === 2 && y.shape.length === 2) {
      if (axesArray[0] === axesArray[1]) {
        out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(x, y), axesArray[0]);
      } else {
        out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(x, [1, 0]), y), axesArray[1]);
      }
    } else {
      const adjX = axesArray[0] !== x.shape.length - 1;
      const adjY = axesArray[1] === y.shape.length - 1;
      out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.matMul(x, y, adjX, adjY);
    }
    if (diff > 0) {
      let idx;
      if (xNDim > yNDim) {
        idx = xNDim + yNDim - 3;
      } else {
        idx = xNDim - 1;
      }
      const squeezeAxes = [];
      for (let i = idx; i < idx + diff; ++i) {
        squeezeAxes.push(i);
      }
      out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.squeeze(out, squeezeAxes);
    }
    if (out.shape.length === 1) {
      out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims(out, 1);
    }
    return out;
  });
}
class Dot extends Merge {
  constructor(args) {
    super(args);
    this.axes = args.axes;
    this.normalize = args.normalize == null ? false : args.normalize;
    this.supportsMasking = true;
    this.reshapeRequired = false;
  }
  build(inputShape) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');
    const shape1 = inputShape[0];
    const shape2 = inputShape[1];
    if (shape1.length > 3 || shape2.length > 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');
    }
    const axes = this.interpretAxes(shape1, shape2);
    if (shape1[axes[0]] !== shape2[axes[1]]) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Dimension incompatibility: ` + `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);
    }
  }
  mergeFunction(inputs) {
    if (inputs.length !== 2) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('A `Dot` layer must be called on exactly 2 inputs, ' + `but received ${inputs.length} input(s).`);
    }
    let x1 = inputs[0];
    let x2 = inputs[1];
    let axes;
    if (!Array.isArray(this.axes)) {
      axes = [interpretAxis(this.axes, x1.shape.length), interpretAxis(this.axes, x2.shape.length)];
    } else {
      axes = this.axes.map((axis, i) => interpretAxis(axis, inputs[i].shape.length));
    }
    if (this.normalize) {
      x1 = (0,_losses__WEBPACK_IMPORTED_MODULE_4__.l2Normalize)(x1, axes[0]);
      x2 = (0,_losses__WEBPACK_IMPORTED_MODULE_4__.l2Normalize)(x2, axes[1]);
    }
    return batchDot(x1, x2, axes);
  }
  interpretAxes(shape1, shape2) {
    let axes;
    if (!Array.isArray(this.axes)) {
      // `this.axes` is a single integer.
      axes = [interpretAxis(this.axes, shape1.length), interpretAxis(this.axes, shape2.length)];
    } else {
      // `this.axes` is an Array of integers.
      axes = this.axes;
    }
    return axes;
  }
  computeOutputShape(inputShape) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');
    const shape1 = inputShape[0].slice();
    const shape2 = inputShape[1].slice();
    if (shape1.length > 3 || shape2.length > 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');
    }
    const axes = this.interpretAxes(shape1, shape2);
    shape1.splice(axes[0], 1);
    shape2.splice(axes[1], 1);
    shape2.splice(0, 1);
    const outputShape = shape1.concat(shape2);
    if (outputShape.length === 1) {
      outputShape.push(1);
    }
    return outputShape;
  }
  computeMask(inputs, mask) {
    return null;
  }
  getConfig() {
    const config = {
      'axes': this.axes,
      'normalize': this.normalize
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
Dot.className = 'Dot';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Dot);
// TODO(cais): Add functional interfaces for the merge layers.

/***/ }),

/***/ 19735:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlphaDropout": () => (/* binding */ AlphaDropout),
/* harmony export */   "GaussianDropout": () => (/* binding */ GaussianDropout),
/* harmony export */   "GaussianNoise": () => (/* binding */ GaussianNoise)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Noise Layers.
 */




class GaussianNoise extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    super(args);
    this.supportsMasking = true;
    this.stddev = args.stddev;
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      stddev: this.stddev
    };
    Object.assign(config, baseConfig);
    return config;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_3__.getExactlyOneTensor)(inputs);
      const noised = () => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add)(_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.randomNormal(input.shape, 0, this.stddev), input);
      const output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.inTrainPhase(noised, () => input, kwargs['training'] || false);
      return output;
    });
  }
}
/** @nocollapse */
GaussianNoise.className = 'GaussianNoise';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GaussianNoise);
class GaussianDropout extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    super(args);
    this.supportsMasking = true;
    this.rate = args.rate;
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      rate: this.rate
    };
    Object.assign(config, baseConfig);
    return config;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_3__.getExactlyOneTensor)(inputs);
      if (this.rate > 0 && this.rate < 1) {
        const noised = () => {
          const stddev = Math.sqrt(this.rate / (1 - this.rate));
          return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(input, _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.randomNormal(input.shape, 1, stddev));
        };
        return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.inTrainPhase(noised, () => input, kwargs['training'] || false);
      }
      return input;
    });
  }
}
/** @nocollapse */
GaussianDropout.className = 'GaussianDropout';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GaussianDropout);
/**
 * Applies Alpha Dropout to the input.
 *
 * As it is a regularization layer, it is only active at training time.
 *
 * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs
 * to their original values, in order to ensure the self-normalizing property
 * even after this dropout.
 * Alpha Dropout fits well to Scaled Exponential Linear Units
 * by randomly setting activations to the negative saturation value.
 *
 * Arguments:
 *   - `rate`: float, drop probability (as with `Dropout`).
 *     The multiplicative noise will have
 *     standard deviation `sqrt(rate / (1 - rate))`.
 *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the
 *     shape for randomly generated keep/drop flags.
 *
 * Input shape:
 *   Arbitrary. Use the keyword argument `inputShape`
 *   (tuple of integers, does not include the samples axis)
 *   when using this layer as the first layer in a model.
 *
 * Output shape:
 *   Same shape as input.
 *
 * References:
 *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)
 */
class AlphaDropout extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    super(args);
    this.supportsMasking = true;
    this.rate = args.rate;
    this.noiseShape = args.noiseShape;
  }
  _getNoiseShape(inputs) {
    return this.noiseShape || (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_3__.getExactlyOneTensor)(inputs).shape;
  }
  computeOutputShape(inputShape) {
    return inputShape;
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      rate: this.rate
    };
    Object.assign(config, baseConfig);
    return config;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (this.rate < 1 && this.rate > 0) {
        const noiseShape = this._getNoiseShape(inputs);
        const droppedInputs = () => {
          const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_3__.getExactlyOneTensor)(inputs);
          const alpha = 1.6732632423543772848170429916717;
          const scale = 1.0507009873554804934193349852946;
          const alphaP = -alpha * scale;
          let keptIdx = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greaterEqual)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniform)(noiseShape), this.rate);
          keptIdx = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.cast(keptIdx, 'float32'); // get default dtype.
          // Get affine transformation params.
          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;
          const b = -a * alphaP * this.rate;
          // Apply mask.
          const x = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(input, keptIdx), (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add)(keptIdx, -1), alphaP));
          return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(x, a), b);
        };
        return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.inTrainPhase(droppedInputs, () => (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_3__.getExactlyOneTensor)(inputs), kwargs['training'] || false);
      }
      return inputs;
    });
  }
}
/** @nocollapse */
AlphaDropout.className = 'AlphaDropout';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(AlphaDropout);

/***/ }),

/***/ 29428:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BatchNormalization": () => (/* binding */ BatchNormalization),
/* harmony export */   "LayerNormalization": () => (/* binding */ LayerNormalization),
/* harmony export */   "batchNormalization": () => (/* binding */ batchNormalization),
/* harmony export */   "normalizeBatchInTraining": () => (/* binding */ normalizeBatchInTraining)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constraints */ 57529);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../regularizers */ 97436);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/math_utils */ 96821);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Normalization layers.
 */










/**
 * Applies batch normalization on x given mean, var, beta and gamma.
 *
 * I.e. returns:
 *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`
 *
 * @param x Input tensor.
 * @param mean Mean of batch.
 * @param variance Variance of batch.
 * @param beta Tensor with which to center the input.
 * @param gamma Tensor by which to scale the input.
 * @param epsilon Fuzz factor.
 * @returns The result of the batch normalization.
 */
function batchNormalization(x, mean, variance, beta, gamma, epsilon = 1e-3) {
  let out;
  if (x.rank === 2) {
    out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm2d(x, mean, variance, beta, gamma, epsilon);
  } else if (x.rank === 3) {
    // TODO(cais): Check rank; give proper error message.
    out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm3d(x, mean, variance, beta, gamma, epsilon);
  } else if (x.rank === 4) {
    out = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm4d(x, mean, variance, beta, gamma, epsilon);
  } else {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError(`batchNormalization is not implemented for array of rank ${x.rank} ` + `yet`);
  }
  return out;
}
/**
 * Non-broadcasting batch normalization for use in training (not inference).
 *
 * The input is normalized to zero mean and unit variance along the
 * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.
 * The result of that is returned as the first element
 * of the returned `Array`. The other two elements are the mean and variance,
 * respectively.
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */
function regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const meanAndVariance = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.moments(x, reductionAxes);
    const mean = meanAndVariance.mean;
    const variance = meanAndVariance.variance;
    const normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);
    return [normed, mean, variance];
  });
}
/**
 * Broadcasting batch normalization for use in training (not inference).
 *
 * The input is normalized to zero mean and unit variance along the
 * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.
 * The result of that is returned as the first element
 * of the returned `Array`. The other two elements are the mean and variance,
 * respectively.
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */
function broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const meanAndVariance = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.moments(x, reductionAxes);
    const mean = meanAndVariance.mean;
    const variance = meanAndVariance.variance;
    const targetShape = [];
    for (const axis of _utils_math_utils__WEBPACK_IMPORTED_MODULE_7__.range(0, x.rank)) {
      if (reductionAxes.indexOf(axis) !== -1) {
        targetShape.push(1);
      } else {
        targetShape.push(x.shape[axis]);
      }
    }
    const broadcastMean = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(mean, targetShape);
    const broadcastVariance = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(variance, targetShape);
    const broadcastGamma = gamma == null ? null : (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(gamma, targetShape);
    const broadcastBeta = beta == null ? null : (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(beta, targetShape);
    const normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);
    return [normed, mean, variance];
  });
}
/**
 * Batch normalization for use in training (not inference).
 *
 * @param x Input tensor to be normalized.
 * @param gamma Tensor by which to scale the input.
 * @param beta Tensor by which to center the input.
 * @param reductionAxes Axes over which to normalize.
 * @param epsilon Fuzz factor.
 * @returns An `Array` of three `Tensors`:
 *   [normalized tensor, mean of input, variance of input].
 */
function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(reductionAxes.slice().sort(), _utils_math_utils__WEBPACK_IMPORTED_MODULE_7__.range(0, x.rank - 1))) {
    return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
  } else {
    return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);
  }
}
class BatchNormalization extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    if (args == null) {
      args = {};
    }
    super(args);
    this.supportsMasking = true;
    this.axis = args.axis == null ? -1 : args.axis;
    this.momentum = args.momentum == null ? 0.99 : args.momentum;
    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;
    this.center = args.center == null ? true : args.center;
    this.scale = args.scale == null ? true : args.scale;
    this.betaInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.getInitializer)(args.betaInitializer || 'zeros');
    this.gammaInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.getInitializer)(args.gammaInitializer || 'ones');
    this.movingMeanInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.getInitializer)(args.movingMeanInitializer || 'zeros');
    this.movingVarianceInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.getInitializer)(args.movingVarianceInitializer || 'ones');
    this.betaConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_1__.getConstraint)(args.betaConstraint);
    this.gammaConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_1__.getConstraint)(args.gammaConstraint);
    this.betaRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.getRegularizer)(args.betaRegularizer);
    this.gammaRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.getRegularizer)(args.gammaRegularizer);
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(inputShape);
    const axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;
    const dim = inputShape[axis];
    if (dim == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Axis ${axis} of input tensor should have a defined dimension but ` + `the layer received an input with shape ` + `${JSON.stringify(inputShape)}.`);
    }
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_2__.InputSpec({
      ndim: inputShape.length,
      axes: {
        [axis]: dim
      }
    })];
    const shape = [dim];
    if (this.scale) {
      this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);
    }
    if (this.center) {
      this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);
    }
    this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);
    this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);
    this.built = true;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const training = kwargs['training'] == null ? false : kwargs['training'];
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
      const inputShape = input.shape;
      const ndim = inputShape.length;
      const reductionAxes = _utils_math_utils__WEBPACK_IMPORTED_MODULE_7__.range(0, ndim);
      const axis = this.axis >= 0 ? this.axis : this.axis + ndim;
      reductionAxes.splice(axis, 1);
      const broadcastShape = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_6__.pyListRepeat(1, ndim);
      broadcastShape[axis] = inputShape[axis];
      const sortedReductionAxes = reductionAxes.slice();
      sortedReductionAxes.sort();
      const needsBroadcasting = !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(sortedReductionAxes, _utils_math_utils__WEBPACK_IMPORTED_MODULE_7__.range(0, ndim).slice(0, ndim - 1));
      const normalizeInference = () => {
        if (needsBroadcasting) {
          const broadcastMovingMean = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(this.movingMean.read(), broadcastShape);
          const broadcastMovingVariance = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(this.movingVariance.read(), broadcastShape);
          const broadcastBeta = this.center ? (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(this.beta.read(), broadcastShape) : null;
          const broadcastGamma = this.scale ? (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(this.gamma.read(), broadcastShape) : null;
          return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, this.epsilon);
        } else {
          return batchNormalization(input, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
        }
      };
      if (!training) {
        return normalizeInference();
      }
      const [normedTraining, mean, variance] = normalizeBatchInTraining(input, this.gamma.read(), this.beta.read(), reductionAxes, this.epsilon);
      const doMovingAverage = (variable, value, momentum) => {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
          const decay = 1 - momentum;
          const origValue = variable.read();
          const updateDelta = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(origValue, value), decay);
          variable.write(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(origValue, updateDelta));
        });
      };
      // Perform updates to moving mean and moving variance for training.
      // Porting Note: In PyKeras, these updates to `movingMean` and
      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s
      //   `update`s using the `add_update()` method. Here we do it imperatively
      //   and encapsulate the updates in a function that is invoked
      //   immediately.
      const updateMovingMeanAndVariance = () => {
        doMovingAverage(this.movingMean, mean, this.momentum);
        doMovingAverage(this.movingVariance, variance, this.momentum);
      };
      updateMovingMeanAndVariance();
      return normedTraining;
    });
  }
  getConfig() {
    const config = {
      axis: this.axis,
      momentum: this.momentum,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.serializeInitializer)(this.betaInitializer),
      gammaInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.serializeInitializer)(this.gammaInitializer),
      movingMeanInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.serializeInitializer)(this.movingMeanInitializer),
      movingVarianceInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.serializeInitializer)(this.movingVarianceInitializer),
      betaRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.serializeRegularizer)(this.betaRegularizer),
      gammaRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.serializeRegularizer)(this.gammaRegularizer),
      betaConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_1__.serializeConstraint)(this.betaConstraint),
      gammaConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_1__.serializeConstraint)(this.gammaConstraint)
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
BatchNormalization.className = 'BatchNormalization';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(BatchNormalization);
class LayerNormalization extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    if (args == null) {
      args = {};
    }
    super(args);
    this.axis = args.axis == null ? -1 : args.axis;
    if (typeof this.axis === 'number') {
      if (!Number.isInteger(this.axis)) {
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
      }
    } else if (Array.isArray(this.axis)) {
      for (const axis of this.axis) {
        if (!Number.isInteger(axis)) {
          throw new Error(`Expected axis to be an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);
        }
      }
    } else {
      throw new Error(`Expected axis to be an integer or an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);
    }
    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;
    this.center = args.center == null ? true : args.center;
    this.scale = args.scale == null ? true : args.scale;
    this.betaInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.getInitializer)(args.betaInitializer || 'zeros');
    this.gammaInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.getInitializer)(args.gammaInitializer || 'ones');
    this.betaRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.getRegularizer)(args.betaRegularizer);
    this.gammaRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.getRegularizer)(args.gammaRegularizer);
    this.supportsMasking = true;
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(inputShape);
    const nDims = inputShape.length;
    // Convert axis to array and resolve negatives.
    if (typeof this.axis === 'number') {
      this.axis = [this.axis];
    }
    for (let i = 0; i < this.axis.length; ++i) {
      if (this.axis[i] < 0) {
        this.axis[i] += nDims;
      }
    }
    // Further validate axes.
    for (const axis of this.axis) {
      if (axis < 0 || axis >= nDims) {
        throw new Error(`Invalid axis: ${axis}`);
      }
    }
    if (this.axis.length !== _utils_generic_utils__WEBPACK_IMPORTED_MODULE_6__.unique(this.axis).length) {
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    }
    const paramShape = this.axis.map(axis => inputShape[axis]);
    const trainable = true;
    if (this.scale) {
      this.gamma = this.addWeight('gamma', paramShape, 'float32', this.gammaInitializer, this.gammaRegularizer, trainable);
    } else {
      this.gamma = null;
    }
    if (this.center) {
      this.beta = this.addWeight('beta', paramShape, 'float32', this.betaInitializer, this.betaRegularizer, trainable);
    } else {
      this.beta = null;
    }
    this.built = true;
  }
  call(inputs, kwargs) {
    const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
    const inputShape = input.shape;
    const nDims = inputShape.length;
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const keepDims = true;
      let {
        mean,
        variance
      } = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.moments)(input, this.axis, keepDims);
      const broadcastShape = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_6__.pyListRepeat(1, nDims);
      for (const dim of this.axis) {
        broadcastShape[dim] = inputShape[dim];
      }
      const broadcast = v => {
        if (v != null && v.shape.length !== nDims) {
          return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(v, broadcastShape);
        } else {
          return v;
        }
      };
      let scale = this.scale ? broadcast(this.gamma.read()) : null;
      let offset = this.center ? broadcast(this.beta.read()) : null;
      // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below
      // is a workaround for the limitation of core's batchNormalization?d don't
      // support broadcasting in their gradients. In addition, the tiling is
      // necessary to ensure correctness on the browser CPU backend regardless
      // of forward or backward computation. Remove this workaround once the
      // limitation is addressed. See .
      const momentsTiling = [];
      const scaleOffsetTiling = [];
      for (let i = 0; i < nDims; ++i) {
        if (this.axis.indexOf(i) !== -1) {
          momentsTiling.push(inputShape[i]);
          scaleOffsetTiling.push(1);
        } else {
          momentsTiling.push(1);
          scaleOffsetTiling.push(inputShape[i]);
        }
      }
      mean = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tile(mean, momentsTiling);
      variance = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tile(variance, momentsTiling);
      if (scale != null) {
        scale = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tile(scale, scaleOffsetTiling);
      }
      if (offset != null) {
        offset = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tile(offset, scaleOffsetTiling);
      }
      return batchNormalization(input, mean, variance, offset, scale, this.epsilon);
    });
  }
  getConfig() {
    const config = {
      axis: this.axis,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.serializeInitializer)(this.betaInitializer),
      gammaInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_4__.serializeInitializer)(this.gammaInitializer),
      betaRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.serializeRegularizer)(this.betaRegularizer),
      gammaRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_5__.serializeRegularizer)(this.gammaRegularizer)
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
LayerNormalization.className = 'LayerNormalization';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LayerNormalization);

/***/ }),

/***/ 95877:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZeroPadding2D": () => (/* binding */ ZeroPadding2D),
/* harmony export */   "spatial2dPadding": () => (/* binding */ spatial2dPadding),
/* harmony export */   "temporalPadding": () => (/* binding */ temporalPadding)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/common */ 44906);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Padding Layers.
 */
// Porting Note: In Python Keras, the padding layers are in convolutional.py,
//   but we decided to put them in a separate file (padding.ts) for clarity.






/**
 * Pads the middle dimension of a 3D tensor.
 *
 * @param x Input `tf.Tensor` to be padded.
 * @param padding `Array` of 2 integers, how many zeros to add at the start and
 *   end of the middle dimension (i.e., dimension 1).
 * @return A padded 3D `tf.Tensor`.
 */
function temporalPadding(x, padding) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (x.rank !== 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` + `${x.rank}-D tensor.`);
    }
    if (padding == null) {
      padding = [1, 1];
    }
    if (padding.length !== 2) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`temporalPadding expects input padding pattern to be a length-2 ` + `array, but received a length-${padding.length} array.`);
    }
    const pattern = [[0, 0], padding, [0, 0]];
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad(x, pattern);
  });
}
/**
 * Pads the 2nd and 3rd dimensions of a 4D tensor.
 *
 * @param x Input `tf.Tensor` to be padded.
 * @param padding `Array` of two `Array`s, each of which is an `Array` of two
 *   integers. The amount of padding at the beginning and end of the 2nd and 3rd
 *   dimensions, respectively.
 * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.
 * @return Padded 4D `tf.Tensor`.
 */
function spatial2dPadding(x, padding, dataFormat) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (x.rank !== 4) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` + `${x.rank}-D tensor.`);
    }
    if (padding == null) {
      padding = [[1, 1], [1, 1]];
    }
    if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' + 'each of which is an Array of two integers.');
    }
    if (dataFormat == null) {
      dataFormat = (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.imageDataFormat)();
    }
    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`Unknown data format: ${dataFormat}. ` + `Supported data formats are 'channelsLast' and 'channelsFirst.`);
    }
    let pattern;
    if (dataFormat === 'channelsFirst') {
      pattern = [[0, 0], [0, 0], padding[0], padding[1]];
    } else {
      pattern = [[0, 0], padding[0], padding[1], [0, 0]];
    }
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad(x, pattern);
  });
}
class ZeroPadding2D extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    if (args == null) {
      args = {};
    }
    super(args);
    this.dataFormat = args.dataFormat == null ? (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.imageDataFormat)() : args.dataFormat;
    // TODO(cais): Maybe refactor the following logic surrounding `padding`
    //   into a helper method.
    if (args.padding == null) {
      this.padding = [[1, 1], [1, 1]];
    } else if (typeof args.padding === 'number') {
      this.padding = [[args.padding, args.padding], [args.padding, args.padding]];
    } else {
      args.padding = args.padding;
      if (args.padding.length !== 2) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` + `received a length-${args.padding.length} array.`);
      }
      let heightPadding;
      let widthPadding;
      if (typeof args.padding[0] === 'number') {
        heightPadding = [args.padding[0], args.padding[0]];
        widthPadding = [args.padding[1], args.padding[1]];
      } else {
        args.padding = args.padding;
        if (args.padding[0].length !== 2) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` + `but received a length-${args.padding[0].length} array.`);
        }
        heightPadding = args.padding[0];
        if (args.padding[1].length !== 2) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` + `but received a length-${args.padding[1].length} array.`);
        }
        widthPadding = args.padding[1];
      }
      this.padding = [heightPadding, widthPadding];
    }
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_2__.InputSpec({
      ndim: 4
    })];
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_4__.getExactlyOneShape)(inputShape);
    let rows;
    let cols;
    if (this.dataFormat === 'channelsFirst') {
      if (inputShape[2] != null && inputShape[2] >= 0) {
        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];
      } else {
        rows = null;
      }
      if (inputShape[3] != null && inputShape[3] >= 0) {
        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];
      } else {
        cols = null;
      }
      return [inputShape[0], inputShape[1], rows, cols];
    } else {
      if (inputShape[1] != null && inputShape[1] >= 0) {
        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];
      } else {
        rows = null;
      }
      if (inputShape[2] != null && inputShape[2] >= 0) {
        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];
      } else {
        cols = null;
      }
      return [inputShape[0], rows, cols, inputShape[3]];
    }
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => spatial2dPadding((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_4__.getExactlyOneTensor)(inputs), this.padding, this.dataFormat));
  }
  getConfig() {
    const config = {
      padding: this.padding,
      dataFormat: this.dataFormat
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
/** @nocollapse */
ZeroPadding2D.className = 'ZeroPadding2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(ZeroPadding2D);

/***/ }),

/***/ 53239:
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AveragePooling1D": () => (/* binding */ AveragePooling1D),
/* harmony export */   "AveragePooling2D": () => (/* binding */ AveragePooling2D),
/* harmony export */   "AveragePooling3D": () => (/* binding */ AveragePooling3D),
/* harmony export */   "GlobalAveragePooling1D": () => (/* binding */ GlobalAveragePooling1D),
/* harmony export */   "GlobalAveragePooling2D": () => (/* binding */ GlobalAveragePooling2D),
/* harmony export */   "GlobalMaxPooling1D": () => (/* binding */ GlobalMaxPooling1D),
/* harmony export */   "GlobalMaxPooling2D": () => (/* binding */ GlobalMaxPooling2D),
/* harmony export */   "GlobalPooling1D": () => (/* binding */ GlobalPooling1D),
/* harmony export */   "GlobalPooling2D": () => (/* binding */ GlobalPooling2D),
/* harmony export */   "MaxPooling1D": () => (/* binding */ MaxPooling1D),
/* harmony export */   "MaxPooling2D": () => (/* binding */ MaxPooling2D),
/* harmony export */   "MaxPooling3D": () => (/* binding */ MaxPooling3D),
/* harmony export */   "Pooling1D": () => (/* binding */ Pooling1D),
/* harmony export */   "Pooling2D": () => (/* binding */ Pooling2D),
/* harmony export */   "Pooling3D": () => (/* binding */ Pooling3D),
/* harmony export */   "pool2d": () => (/* binding */ pool2d),
/* harmony export */   "pool3d": () => (/* binding */ pool3d)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/common */ 44906);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/conv_utils */ 13295);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/* harmony import */ var _convolutional__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./convolutional */ 52684);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Pooling Layers.
 */












/**
 * 2D pooling.
 * @param x
 * @param poolSize
 * @param strides strides. Defaults to [1, 1].
 * @param padding padding. Defaults to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param poolMode Mode of pooling. Defaults to 'max'.
 * @returns Result of the 2D pooling.
 */
function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPoolMode)(poolMode);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    if (strides == null) {
      strides = [1, 1];
    }
    if (padding == null) {
      padding = 'valid';
    }
    if (dataFormat == null) {
      dataFormat = (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.imageDataFormat)();
    }
    if (poolMode == null) {
      poolMode = 'max';
    }
    // TODO(cais): Remove the preprocessing step once deeplearn.js supports
    // dataFormat as an input argument.
    x = (0,_convolutional__WEBPACK_IMPORTED_MODULE_9__.preprocessConv2DInput)(x, dataFormat); // x is NHWC after preprocessing.
    let y;
    const paddingString = padding === 'same' ? 'same' : 'valid';
    if (poolMode === 'max') {
      // TODO(cais): Rank check?
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPool(x, poolSize, strides, paddingString);
    } else {
      // 'avg'
      // TODO(cais): Check the dtype and rank of x and give clear error message
      //   if those are incorrect.
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.avgPool(
      // TODO(cais): Rank check?
      x, poolSize, strides, paddingString);
    }
    if (dataFormat === 'channelsFirst') {
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.
    }

    return y;
  });
}
/**
 * 3D pooling.
 * @param x
 * @param poolSize. Default to [1, 1, 1].
 * @param strides strides. Defaults to [1, 1, 1].
 * @param padding padding. Defaults to 'valid'.
 * @param dataFormat data format. Defaults to 'channelsLast'.
 * @param poolMode Mode of pooling. Defaults to 'max'.
 * @returns Result of the 3D pooling.
 */
function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPoolMode)(poolMode);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    if (strides == null) {
      strides = [1, 1, 1];
    }
    if (padding == null) {
      padding = 'valid';
    }
    if (dataFormat == null) {
      dataFormat = (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.imageDataFormat)();
    }
    if (poolMode == null) {
      poolMode = 'max';
    }
    // x is NDHWC after preprocessing.
    x = (0,_convolutional__WEBPACK_IMPORTED_MODULE_9__.preprocessConv3DInput)(x, dataFormat);
    let y;
    const paddingString = padding === 'same' ? 'same' : 'valid';
    if (poolMode === 'max') {
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPool3d(x, poolSize, strides, paddingString);
    } else {
      // 'avg'
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.avgPool3d(x, poolSize, strides, paddingString);
    }
    if (dataFormat === 'channelsFirst') {
      y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.
    }

    return y;
  });
}
/**
 * Abstract class for different pooling 1D layers.
 */
class Pooling1D extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  /**
   *
   * @param args Parameters for the Pooling layer.
   *
   * config.poolSize defaults to 2.
   */
  constructor(args) {
    if (args.poolSize == null) {
      args.poolSize = 2;
    }
    super(args);
    if (typeof args.poolSize === 'number') {
      this.poolSize = [args.poolSize];
    } else if (Array.isArray(args.poolSize) && args.poolSize.length === 1 && typeof args.poolSize[0] === 'number') {
      this.poolSize = args.poolSize;
    } else {
      throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`poolSize for 1D convolutional layer must be a number or an ` + `Array of a single number, but received ` + `${JSON.stringify(args.poolSize)}`);
    }
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(this.poolSize, 'poolSize');
    if (args.strides == null) {
      this.strides = this.poolSize;
    } else {
      if (typeof args.strides === 'number') {
        this.strides = [args.strides];
      } else if (Array.isArray(args.strides) && args.strides.length === 1 && typeof args.strides[0] === 'number') {
        this.strides = args.strides;
      } else {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`strides for 1D convolutional layer must be a number or an ` + `Array of a single number, but received ` + `${JSON.stringify(args.strides)}`);
      }
    }
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(this.strides, 'strides');
    this.padding = args.padding == null ? 'valid' : args.padding;
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(this.padding);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_4__.InputSpec({
      ndim: 3
    })];
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(inputShape);
    const length = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);
    return [inputShape[0], length, inputShape[2]];
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      // Add dummy last dimension.
      inputs = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.expandDims((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs), 2);
      const output = this.poolingFunction((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');
      // Remove dummy last dimension.
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.squeeze(output, [2]);
    });
  }
  getConfig() {
    const config = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
class MaxPooling1D extends Pooling1D {
  constructor(args) {
    super(args);
  }
  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');
  }
}
/** @nocollapse */
MaxPooling1D.className = 'MaxPooling1D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(MaxPooling1D);
class AveragePooling1D extends Pooling1D {
  constructor(args) {
    super(args);
  }
  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');
  }
}
/** @nocollapse */
AveragePooling1D.className = 'AveragePooling1D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(AveragePooling1D);
/**
 * Abstract class for different pooling 2D layers.
 */
class Pooling2D extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    if (args.poolSize == null) {
      args.poolSize = [2, 2];
    }
    super(args);
    this.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize];
    if (args.strides == null) {
      this.strides = this.poolSize;
    } else if (Array.isArray(args.strides)) {
      if (args.strides.length !== 2) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`If the strides property of a 2D pooling layer is an Array, ` + `it is expected to have a length of 2, but received length ` + `${args.strides.length}.`);
      }
      this.strides = args.strides;
    } else {
      // `config.strides` is a number.
      this.strides = [args.strides, args.strides];
    }
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(this.poolSize, 'poolSize');
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(this.strides, 'strides');
    this.padding = args.padding == null ? 'valid' : args.padding;
    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(this.dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(this.padding);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_4__.InputSpec({
      ndim: 4
    })];
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(inputShape);
    let rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];
    let cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];
    rows = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(rows, this.poolSize[0], this.padding, this.strides[0]);
    cols = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(cols, this.poolSize[1], this.padding, this.strides[1]);
    if (this.dataFormat === 'channelsFirst') {
      return [inputShape[0], inputShape[1], rows, cols];
    } else {
      return [inputShape[0], rows, cols, inputShape[3]];
    }
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      return this.poolingFunction((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);
    });
  }
  getConfig() {
    const config = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
class MaxPooling2D extends Pooling2D {
  constructor(args) {
    super(args);
  }
  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');
  }
}
/** @nocollapse */
MaxPooling2D.className = 'MaxPooling2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(MaxPooling2D);
class AveragePooling2D extends Pooling2D {
  constructor(args) {
    super(args);
  }
  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');
  }
}
/** @nocollapse */
AveragePooling2D.className = 'AveragePooling2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(AveragePooling2D);
/**
 * Abstract class for different pooling 3D layers.
 */
class Pooling3D extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    if (args.poolSize == null) {
      args.poolSize = [2, 2, 2];
    }
    super(args);
    this.poolSize = Array.isArray(args.poolSize) ? args.poolSize : [args.poolSize, args.poolSize, args.poolSize];
    if (args.strides == null) {
      this.strides = this.poolSize;
    } else if (Array.isArray(args.strides)) {
      if (args.strides.length !== 3) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.ValueError(`If the strides property of a 3D pooling layer is an Array, ` + `it is expected to have a length of 3, but received length ` + `${args.strides.length}.`);
      }
      this.strides = args.strides;
    } else {
      // `config.strides` is a number.
      this.strides = [args.strides, args.strides, args.strides];
    }
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(this.poolSize, 'poolSize');
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_7__.assertPositiveInteger)(this.strides, 'strides');
    this.padding = args.padding == null ? 'valid' : args.padding;
    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(this.dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(this.padding);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_4__.InputSpec({
      ndim: 5
    })];
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneShape)(inputShape);
    let depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];
    let rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];
    let cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];
    depths = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(depths, this.poolSize[0], this.padding, this.strides[0]);
    rows = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(rows, this.poolSize[1], this.padding, this.strides[1]);
    cols = (0,_utils_conv_utils__WEBPACK_IMPORTED_MODULE_6__.convOutputLength)(cols, this.poolSize[2], this.padding, this.strides[2]);
    if (this.dataFormat === 'channelsFirst') {
      return [inputShape[0], inputShape[1], depths, rows, cols];
    } else {
      return [inputShape[0], depths, rows, cols, inputShape[4]];
    }
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      this.invokeCallHook(inputs, kwargs);
      return this.poolingFunction((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);
    });
  }
  getConfig() {
    const config = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
class MaxPooling3D extends Pooling3D {
  constructor(args) {
    super(args);
  }
  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');
  }
}
/** @nocollapse */
MaxPooling3D.className = 'MaxPooling3D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(MaxPooling3D);
class AveragePooling3D extends Pooling3D {
  constructor(args) {
    super(args);
  }
  poolingFunction(inputs, poolSize, strides, padding, dataFormat) {
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(dataFormat);
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkPaddingMode)(padding);
    return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');
  }
}
/** @nocollapse */
AveragePooling3D.className = 'AveragePooling3D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(AveragePooling3D);
/**
 * Abstract class for different global pooling 1D layers.
 */
class GlobalPooling1D extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_4__.InputSpec({
      ndim: 3
    })];
  }
  computeOutputShape(inputShape) {
    return [inputShape[0], inputShape[2]];
  }
  call(inputs, kwargs) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError();
  }
}
class GlobalAveragePooling1D extends GlobalPooling1D {
  constructor(args) {
    super(args || {});
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(input, 1);
    });
  }
}
/** @nocollapse */
GlobalAveragePooling1D.className = 'GlobalAveragePooling1D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GlobalAveragePooling1D);
class GlobalMaxPooling1D extends GlobalPooling1D {
  constructor(args) {
    super(args || {});
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.max(input, 1);
    });
  }
}
/** @nocollapse */
GlobalMaxPooling1D.className = 'GlobalMaxPooling1D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GlobalMaxPooling1D);
/**
 * Abstract class for different global pooling 2D layers.
 */
class GlobalPooling2D extends _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Layer {
  constructor(args) {
    super(args);
    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;
    (0,_common__WEBPACK_IMPORTED_MODULE_3__.checkDataFormat)(this.dataFormat);
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_4__.InputSpec({
      ndim: 4
    })];
  }
  computeOutputShape(inputShape) {
    inputShape = inputShape;
    if (this.dataFormat === 'channelsLast') {
      return [inputShape[0], inputShape[3]];
    } else {
      return [inputShape[0], inputShape[1]];
    }
  }
  call(inputs, kwargs) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_5__.NotImplementedError();
  }
  getConfig() {
    const config = {
      dataFormat: this.dataFormat
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
}
class GlobalAveragePooling2D extends GlobalPooling2D {
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
      if (this.dataFormat === 'channelsLast') {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(input, [1, 2]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(input, [2, 3]);
      }
    });
  }
}
/** @nocollapse */
GlobalAveragePooling2D.className = 'GlobalAveragePooling2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GlobalAveragePooling2D);
class GlobalMaxPooling2D extends GlobalPooling2D {
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_8__.getExactlyOneTensor)(inputs);
      if (this.dataFormat === 'channelsLast') {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.max(input, [1, 2]);
      } else {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.max(input, [2, 3]);
      }
    });
  }
}
/** @nocollapse */
GlobalMaxPooling2D.className = 'GlobalMaxPooling2D';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GlobalMaxPooling2D);

/***/ }),

/***/ 45408:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/category_encoding.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CategoryEncoding": () => (/* binding */ CategoryEncoding)
/* harmony export */ });
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/topology */ 59996);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/types_utils */ 13124);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors */ 22802);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../backend/tfjs_backend */ 81579);
/* harmony import */ var _preprocessing_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./preprocessing_utils */ 42866);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */







class CategoryEncoding extends _engine_topology__WEBPACK_IMPORTED_MODULE_0__.Layer {
  constructor(args) {
    super(args);
    this.numTokens = args.numTokens;
    if (args.outputMode) {
      this.outputMode = args.outputMode;
    } else {
      this.outputMode = 'multiHot';
    }
  }
  getConfig() {
    const config = {
      'numTokens': this.numTokens,
      'outputMode': this.outputMode
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_2__.getExactlyOneShape)(inputShape);
    if (inputShape == null) {
      return [this.numTokens];
    }
    if (this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1) {
      inputShape.push(this.numTokens);
      return inputShape;
    }
    inputShape[inputShape.length - 1] = this.numTokens;
    return inputShape;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_2__.getExactlyOneTensor)(inputs);
      if (inputs.dtype !== 'int32') {
        inputs = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_4__.cast(inputs, 'int32');
      }
      let countWeights;
      if (typeof kwargs['countWeights'] !== 'undefined') {
        if (this.outputMode !== 'count') {
          throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`countWeights is not used when outputMode !== count.
              Received countWeights=${kwargs['countWeights']}`);
        }
        countWeights = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_2__.getExactlyOneTensor)(kwargs['countWeights']);
      }
      const maxValue = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.max)(inputs);
      const minValue = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.min)(inputs);
      const greaterEqualMax = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.greater)(this.numTokens, maxValue).bufferSync().get(0);
      const greaterMin = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.greaterEqual)(minValue, 0).bufferSync().get(0);
      if (!(greaterEqualMax && greaterMin)) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError('Input values must be between 0 < values <=' + ` numTokens with numTokens=${this.numTokens}`);
      }
      return _preprocessing_utils__WEBPACK_IMPORTED_MODULE_5__.encodeCategoricalInputs(inputs, this.outputMode, this.numTokens, countWeights);
    });
  }
}
/** @nocollapse */
CategoryEncoding.className = 'CategoryEncoding';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.serialization.registerClass(CategoryEncoding);

/***/ }),

/***/ 199:
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/center_crop.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CenterCrop": () => (/* binding */ CenterCrop)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/types_utils */ 13124);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../engine/topology */ 59996);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../backend/tfjs_backend */ 81579);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */




const {
  resizeBilinear,
  cropAndResize
} = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image;
class CenterCrop extends _engine_topology__WEBPACK_IMPORTED_MODULE_2__.Layer {
  constructor(args) {
    super(args);
    this.height = args.height;
    this.width = args.width;
  }
  centerCrop(inputs, hBuffer, wBuffer, height, width, inputHeight, inputWidth, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      let input;
      let isRank3 = false;
      const top = hBuffer / inputHeight;
      const left = wBuffer / inputWidth;
      const bottom = (height + hBuffer) / inputHeight;
      const right = (width + wBuffer) / inputWidth;
      const bound = [top, left, bottom, right];
      const boxesArr = [];
      if (inputs.rank === 3) {
        isRank3 = true;
        input = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)([inputs]);
      } else {
        input = inputs;
      }
      for (let i = 0; i < input.shape[0]; i++) {
        boxesArr.push(bound);
      }
      const boxes = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)(boxesArr, [boxesArr.length, 4]);
      const boxInd = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.range)(0, boxesArr.length, 1, 'int32');
      const cropSize = [height, width];
      const cropped = cropAndResize(input, boxes, boxInd, cropSize, 'nearest');
      if (isRank3) {
        return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.cast((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_1__.getExactlyOneTensor)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(cropped)), dtype);
      }
      return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.cast(cropped, dtype);
    });
  }
  upsize(inputs, height, width, dtype) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const outputs = resizeBilinear(inputs, [height, width]);
      return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.cast(outputs, dtype);
    });
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const rankedInputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_1__.getExactlyOneTensor)(inputs);
      const dtype = rankedInputs.dtype;
      const inputShape = rankedInputs.shape;
      const inputHeight = inputShape[inputShape.length - 3];
      const inputWidth = inputShape[inputShape.length - 2];
      let hBuffer = 0;
      if (inputHeight !== this.height) {
        hBuffer = Math.floor((inputHeight - this.height) / 2);
      }
      let wBuffer = 0;
      if (inputWidth !== this.width) {
        wBuffer = Math.floor((inputWidth - this.width) / 2);
        if (wBuffer === 0) {
          wBuffer = 1;
        }
      }
      if (hBuffer >= 0 && wBuffer >= 0) {
        return this.centerCrop(rankedInputs, hBuffer, wBuffer, this.height, this.width, inputHeight, inputWidth, dtype);
      } else {
        return this.upsize(inputs, this.height, this.width, dtype);
      }
    });
  }
  getConfig() {
    const config = {
      'height': this.height,
      'width': this.width
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_1__.getExactlyOneShape)(inputShape);
    const hAxis = inputShape.length - 3;
    const wAxis = inputShape.length - 2;
    inputShape[hAxis] = this.height;
    inputShape[wAxis] = this.width;
    return inputShape;
  }
}
/** @nocollapse */
CenterCrop.className = 'CenterCrop';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(CenterCrop);

/***/ }),

/***/ 7139:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/image_preprocessing.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rescaling": () => (/* binding */ Rescaling)
/* harmony export */ });
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine/topology */ 59996);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/types_utils */ 13124);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../backend/tfjs_backend */ 81579);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */




/**
 * Preprocessing Rescaling Layer
 *
 * This rescales images by a scaling and offset factor
 */
class Rescaling extends _engine_topology__WEBPACK_IMPORTED_MODULE_0__.Layer {
  constructor(args) {
    super(args);
    this.scale = args.scale;
    if (args.offset) {
      this.offset = args.offset;
    } else {
      this.offset = 0;
    }
  }
  getConfig() {
    const config = {
      'scale': this.scale,
      'offset': this.offset
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_2__.getExactlyOneTensor)(inputs);
      if (inputs.dtype !== 'float32') {
        inputs = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.cast(inputs, 'float32');
      }
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)(inputs, this.scale), this.offset);
    });
  }
}
/** @nocollapse */
Rescaling.className = 'Rescaling';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.serialization.registerClass(Rescaling);

/***/ }),

/***/ 57411:
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/image_resizing.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Resizing": () => (/* binding */ Resizing)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors */ 22802);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/types_utils */ 13124);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
 // mul, add


 //, getExactlyOneTensor
// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',
//                                   'gaussian', 'mitchellcubic'
const INTERPOLATION_KEYS = ['bilinear', 'nearest'];
const INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);
/**
 * Preprocessing Resizing Layer
 *
 * This resizes images by a scaling and offset factor
 */
class Resizing extends _engine_topology__WEBPACK_IMPORTED_MODULE_1__.Layer {
  constructor(args) {
    super(args);
    this.height = args.height;
    this.width = args.width;
    if (args.interpolation) {
      if (INTERPOLATION_METHODS.has(args.interpolation)) {
        this.interpolation = args.interpolation;
      } else {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Invalid interpolation parameter: ${args.interpolation} is not implemented`);
      }
    } else {
      this.interpolation = 'bilinear';
    }
    this.cropToAspectRatio = Boolean(args.cropToAspectRatio);
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_3__.getExactlyOneShape)(inputShape);
    const numChannels = inputShape[2];
    return [this.height, this.width, numChannels];
  }
  getConfig() {
    const config = {
      'height': this.height,
      'width': this.width,
      'interpolation': this.interpolation,
      'cropToAspectRatio': this.cropToAspectRatio
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const size = [this.height, this.width];
      if (this.interpolation === 'bilinear') {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeBilinear(inputs, size, !this.cropToAspectRatio);
      } else if (this.interpolation === 'nearest') {
        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeNearestNeighbor(inputs, size, !this.cropToAspectRatio);
      } else {
        throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS]} are supported`);
      }
    });
  }
}
/** @nocollapse */
Resizing.className = 'Resizing';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Resizing);

/***/ }),

/***/ 42866:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/preprocessing_utils.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encodeCategoricalInputs": () => (/* binding */ encodeCategoricalInputs)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/types_utils */ 13124);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors */ 22802);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../backend/tfjs_backend */ 81579);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */





function encodeCategoricalInputs(inputs, outputMode, depth, weights) {
  let input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_1__.getExactlyOneTensor)(inputs);
  if (input.dtype !== 'int32') {
    input = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_3__.cast(input, 'int32');
  }
  if (outputMode === 'int') {
    return input;
  }
  const originalShape = input.shape;
  if (input.rank === 0) {
    input = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims)(input, -1);
  }
  if (outputMode === 'oneHot') {
    if (input.shape[input.shape.length - 1] !== 1) {
      input = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims)(input, -1);
    }
  }
  if (input.rank > 2) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`When outputMode is not int, maximum output rank is 2` + ` Received outputMode ${outputMode} and input shape ${originalShape}` + ` which would result in output rank ${input.rank}.`);
  }
  const binaryOutput = ['multiHot', 'oneHot'].includes(outputMode);
  const denseBincountInput = input;
  let binCounts;
  if (typeof weights !== 'undefined' && outputMode === 'count') {
    binCounts = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.denseBincount)(denseBincountInput, weights, depth, binaryOutput);
  } else {
    binCounts = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.denseBincount)(denseBincountInput, [], depth, binaryOutput);
  }
  if (outputMode !== 'tfIdf') {
    return binCounts;
  }
  if (weights) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(binCounts, weights);
  } else {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`When outputMode is 'tfIdf', weights must be provided.`);
  }
}

/***/ }),

/***/ 47882:
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/random_width.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "INTERPOLATION_METHODS": () => (/* binding */ INTERPOLATION_METHODS),
/* harmony export */   "RandomWidth": () => (/* binding */ RandomWidth)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/types_utils */ 13124);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors */ 22802);
/* harmony import */ var _engine_base_random_layer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../engine/base_random_layer */ 41488);
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */





const INTERPOLATION_KEYS = ['bilinear', 'nearest'];
const INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);
/**
 * Preprocessing Layer with randomly varies image during training
 *
 * This layer randomly adjusts the width of a batch of images of a
 * batch of images by a random factor.
 *
 * The input should be a 3D (unbatched) or
 * 4D (batched) tensor in the `"channels_last"` image data format. Input pixel
 * values can be of any range (e.g. `[0., 1.)` or `[0, 255]`) and of interger
 * or floating point dtype. By default, the layer will output floats.
 *
 * tf methods implemented in tfjs: 'bilinear', 'nearest',
 * tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',
 *                                   'gaussian', 'mitchellcubic'
 *
 */
class RandomWidth extends _engine_base_random_layer__WEBPACK_IMPORTED_MODULE_3__.BaseRandomLayer {
  constructor(args) {
    super(args);
    const {
      factor,
      interpolation = 'bilinear'
    } = args;
    this.factor = factor;
    if (Array.isArray(this.factor) && this.factor.length === 2) {
      this.widthLower = this.factor[0];
      this.widthUpper = this.factor[1];
    } else if (!Array.isArray(this.factor) && this.factor > 0) {
      this.widthLower = -this.factor;
      this.widthUpper = this.factor;
    } else {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);
    }
    if (this.widthLower < -1.0 || this.widthUpper < -1.0) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`factor must have values larger than -1. Got: ${this.factor}`);
    }
    if (this.widthUpper < this.widthLower) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
    }
    if (interpolation) {
      if (INTERPOLATION_METHODS.has(interpolation)) {
        this.interpolation = interpolation;
      } else {
        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Invalid interpolation parameter: ${interpolation} is not implemented`);
      }
    }
  }
  getConfig() {
    const config = {
      'factor': this.factor,
      'interpolation': this.interpolation
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_1__.getExactlyOneShape)(inputShape);
    const numChannels = inputShape[2];
    return [this.imgHeight, -1, numChannels];
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const input = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_1__.getExactlyOneTensor)(inputs);
      this.imgHeight = input.shape[input.shape.length - 3];
      const imgWidth = input.shape[input.shape.length - 2];
      this.widthFactor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniform)([1], 1.0 + this.widthLower, 1.0 + this.widthUpper, 'float32', this.randomGenerator.next());
      let adjustedWidth = this.widthFactor.dataSync()[0] * imgWidth;
      adjustedWidth = Math.round(adjustedWidth);
      const size = [this.imgHeight, adjustedWidth];
      switch (this.interpolation) {
        case 'bilinear':
          return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeBilinear(inputs, size);
        case 'nearest':
          return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeNearestNeighbor(inputs, size);
        default:
          throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...INTERPOLATION_METHODS]} are supported`);
      }
    });
  }
}
/** @nocollapse */
RandomWidth.className = 'RandomWidth';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(RandomWidth);

/***/ }),

/***/ 29998:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GRU": () => (/* binding */ GRU),
/* harmony export */   "GRUCell": () => (/* binding */ GRUCell),
/* harmony export */   "LSTM": () => (/* binding */ LSTM),
/* harmony export */   "LSTMCell": () => (/* binding */ LSTMCell),
/* harmony export */   "RNN": () => (/* binding */ RNN),
/* harmony export */   "RNNCell": () => (/* binding */ RNNCell),
/* harmony export */   "SimpleRNN": () => (/* binding */ SimpleRNN),
/* harmony export */   "SimpleRNNCell": () => (/* binding */ SimpleRNNCell),
/* harmony export */   "StackedRNNCells": () => (/* binding */ StackedRNNCells),
/* harmony export */   "generateDropoutMask": () => (/* binding */ generateDropoutMask),
/* harmony export */   "rnn": () => (/* binding */ rnn),
/* harmony export */   "standardizeArgs": () => (/* binding */ standardizeArgs)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _activations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../activations */ 27943);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _constraints__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constraints */ 57529);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _initializers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../initializers */ 1024);
/* harmony import */ var _regularizers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../regularizers */ 97436);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math_utils */ 96821);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../variables */ 22414);
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./serialization */ 49796);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * TensorFlow.js Layers: Recurrent Neural Network Layers.
 */
















/**
 * Standardize `apply()` args to a single list of tensor inputs.
 *
 * When running a model loaded from file, the input tensors `initialState` and
 * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the
 * dedicated kwargs fields. `inputs` consists of
 * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this
 * case.
 * This method makes sure that arguments are
 * separated and that `initialState` and `constants` are `Array`s of tensors
 * (or None).
 *
 * @param inputs Tensor or `Array` of  tensors.
 * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.
 * @param constants Tensor or `Array` of tensors or `null`/`undefined`.
 * @returns An object consisting of
 *   inputs: A tensor.
 *   initialState: `Array` of tensors or `null`.
 *   constants: `Array` of tensors or `null`.
 * @throws ValueError, if `inputs` is an `Array` but either `initialState` or
 *   `constants` is provided.
 */
function standardizeArgs(inputs, initialState, constants, numConstants) {
  if (Array.isArray(inputs)) {
    if (initialState != null || constants != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('When inputs is an array, neither initialState or constants ' + 'should be provided');
    }
    if (numConstants != null) {
      constants = inputs.slice(inputs.length - numConstants, inputs.length);
      inputs = inputs.slice(0, inputs.length - numConstants);
    }
    if (inputs.length > 1) {
      initialState = inputs.slice(1, inputs.length);
    }
    inputs = inputs[0];
  }
  function toListOrNull(x) {
    if (x == null || Array.isArray(x)) {
      return x;
    } else {
      return [x];
    }
  }
  initialState = toListOrNull(initialState);
  constants = toListOrNull(constants);
  return {
    inputs,
    initialState,
    constants
  };
}
/**
 * Iterates over the time dimension of a tensor.
 *
 * @param stepFunction RNN step function.
 *   Parameters:
 *     inputs: tensor with shape `[samples, ...]` (no time dimension),
 *       representing input for the batch of samples at a certain time step.
 *     states: an Array of tensors.
 *   Returns:
 *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).
 *     newStates: list of tensors, same length and shapes as `states`. The first
 *       state in the list must be the output tensor at the previous timestep.
 * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at
 *   least 3D).
 * @param initialStates Tensor with shape `[samples, outputDim]` (no time
 *   dimension), containing the initial values of the states used in the step
 *   function.
 * @param goBackwards If `true`, do the iteration over the time dimension in
 *   reverse order and return the reversed sequence.
 * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for
 *   every element that is masked.
 * @param constants An Array of constant values passed at each step.
 * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*
 *   applicable to this imperative deeplearn.js backend. Its value is ignored.
 * @param needPerStepOutputs Whether the per-step outputs are to be
 *   concatenated into a single tensor and returned (as the second return
 *   value). Default: `false`. This arg is included so that the relatively
 *   expensive concatenation of the stepwise outputs can be omitted unless
 *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which
 *   `returnSequence` is `true`.)
 * @returns An Array: `[lastOutput, outputs, newStates]`.
 *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.
 *   outputs: tensor with shape `[samples, time, ...]` where each entry
 *     `output[s, t]` is the output of the step function at time `t` for sample
 *     `s`. This return value is provided if and only if the
 *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this
 *     return value will be `undefined`.
 *   newStates: Array of tensors, latest states returned by the step function,
 *      of shape `(samples, ...)`.
 * @throws ValueError If input dimension is less than 3.
 *
 * TODO(nielsene): This needs to be tidy-ed.
 */
function rnn(stepFunction, inputs, initialStates, goBackwards = false, mask, constants, unroll = false, needPerStepOutputs = false) {
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
    const ndim = inputs.shape.length;
    if (ndim < 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`Input should be at least 3D, but is ${ndim}D.`);
    }
    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,
    // ...].
    const axes = [1, 0].concat(_utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.range(2, ndim));
    inputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(inputs, axes);
    if (constants != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' + 'constants yet.');
    }
    // Porting Note: the unroll option is ignored by the imperative backend.
    if (unroll) {
      console.warn('Backend rnn(): the unroll = true option is not applicable to the ' + 'imperative deeplearn.js backend.');
    }
    if (mask != null) {
      mask = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(mask, 'bool'), 'float32');
      if (mask.rank === ndim - 1) {
        mask = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims(mask, -1);
      }
      mask = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose(mask, axes);
    }
    if (goBackwards) {
      inputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse(inputs, 0);
      if (mask != null) {
        mask = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse(mask, 0);
      }
    }
    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop
    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just
    //   use the usual TypeScript control flow to iterate over the time steps in
    //   the inputs.
    // Porting Note: PyKeras patches a "_use_learning_phase" attribute to
    // outputs.
    //   This is not idiomatic in TypeScript. The info regarding whether we are
    //   in a learning (i.e., training) phase for RNN is passed in a different
    //   way.
    const perStepOutputs = [];
    let lastOutput;
    let states = initialStates;
    const timeSteps = inputs.shape[0];
    const perStepInputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack(inputs);
    let perStepMasks;
    if (mask != null) {
      perStepMasks = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack(mask);
    }
    for (let t = 0; t < timeSteps; ++t) {
      const currentInput = perStepInputs[t];
      const stepOutputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => stepFunction(currentInput, states));
      if (mask == null) {
        lastOutput = stepOutputs[0];
        states = stepOutputs[1];
      } else {
        const maskedOutputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
          const stepMask = perStepMasks[t];
          const negStepMask = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(stepMask), stepMask);
          // TODO(cais): Would tfc.where() be better for performance?
          const output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(stepOutputs[0], stepMask), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(states[0], negStepMask));
          const newStates = states.map((state, i) => {
            return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(stepOutputs[1][i], stepMask), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(state, negStepMask));
          });
          return {
            output,
            newStates
          };
        });
        lastOutput = maskedOutputs.output;
        states = maskedOutputs.newStates;
      }
      if (needPerStepOutputs) {
        perStepOutputs.push(lastOutput);
      }
    }
    let outputs;
    if (needPerStepOutputs) {
      const axis = 1;
      outputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack(perStepOutputs, axis);
    }
    return [lastOutput, outputs, states];
  });
}
class RNN extends _engine_topology__WEBPACK_IMPORTED_MODULE_5__.Layer {
  constructor(args) {
    super(args);
    let cell;
    if (args.cell == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('cell property is missing for the constructor of RNN.');
    } else if (Array.isArray(args.cell)) {
      cell = new StackedRNNCells({
        cells: args.cell
      });
    } else {
      cell = args.cell;
    }
    if (cell.stateSize == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' + 'integers, one integer per RNN state).');
    }
    this.cell = cell;
    this.returnSequences = args.returnSequences == null ? false : args.returnSequences;
    this.returnState = args.returnState == null ? false : args.returnState;
    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;
    this._stateful = args.stateful == null ? false : args.stateful;
    this.unroll = args.unroll == null ? false : args.unroll;
    this.supportsMasking = true;
    this.inputSpec = [new _engine_topology__WEBPACK_IMPORTED_MODULE_5__.InputSpec({
      ndim: 3
    })];
    this.stateSpec = null;
    this.states_ = null;
    // TODO(cais): Add constantsSpec and numConstants.
    this.numConstants = null;
    // TODO(cais): Look into the use of initial_state in the kwargs of the
    //   constructor.
    this.keptStates = [];
  }
  // Porting Note: This is the equivalent of `RNN.states` property getter in
  //   PyKeras.
  getStates() {
    if (this.states_ == null) {
      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.range(0, numStates).map(x => null);
    } else {
      return this.states_;
    }
  }
  // Porting Note: This is the equivalent of the `RNN.states` property setter in
  //   PyKeras.
  setStates(states) {
    this.states_ = states;
  }
  computeOutputShape(inputShape) {
    if ((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_11__.isArrayOfShapes)(inputShape)) {
      inputShape = inputShape[0];
    }
    inputShape = inputShape;
    // TODO(cais): Remove the casting once stacked RNN cells become supported.
    let stateSize = this.cell.stateSize;
    if (!Array.isArray(stateSize)) {
      stateSize = [stateSize];
    }
    const outputDim = stateSize[0];
    let outputShape;
    if (this.returnSequences) {
      outputShape = [inputShape[0], inputShape[1], outputDim];
    } else {
      outputShape = [inputShape[0], outputDim];
    }
    if (this.returnState) {
      const stateShape = [];
      for (const dim of stateSize) {
        stateShape.push([inputShape[0], dim]);
      }
      return [outputShape].concat(stateShape);
    } else {
      return outputShape;
    }
  }
  computeMask(inputs, mask) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {
      if (Array.isArray(mask)) {
        mask = mask[0];
      }
      const outputMask = this.returnSequences ? mask : null;
      if (this.returnState) {
        const stateMask = this.states.map(s => null);
        return [outputMask].concat(stateMask);
      } else {
        return outputMask;
      }
    });
  }
  /**
   * Get the current state tensors of the RNN.
   *
   * If the state hasn't been set, return an array of `null`s of the correct
   * length.
   */
  get states() {
    if (this.states_ == null) {
      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      const output = [];
      for (let i = 0; i < numStates; ++i) {
        output.push(null);
      }
      return output;
    } else {
      return this.states_;
    }
  }
  set states(s) {
    this.states_ = s;
  }
  build(inputShape) {
    // Note inputShape will be an Array of Shapes of initial states and
    // constants if these are passed in apply().
    const constantShape = null;
    if (this.numConstants != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.NotImplementedError('Constants support is not implemented in RNN yet.');
    }
    if ((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_11__.isArrayOfShapes)(inputShape)) {
      inputShape = inputShape[0];
    }
    inputShape = inputShape;
    const batchSize = this.stateful ? inputShape[0] : null;
    const inputDim = inputShape.slice(2);
    this.inputSpec[0] = new _engine_topology__WEBPACK_IMPORTED_MODULE_5__.InputSpec({
      shape: [batchSize, null, ...inputDim]
    });
    // Allow cell (if RNNCell Layer) to build before we set or validate
    // stateSpec.
    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));
    if (constantShape != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.NotImplementedError('Constants support is not implemented in RNN yet.');
    } else {
      this.cell.build(stepInputShape);
    }
    // Set or validate stateSpec.
    let stateSize;
    if (Array.isArray(this.cell.stateSize)) {
      stateSize = this.cell.stateSize;
    } else {
      stateSize = [this.cell.stateSize];
    }
    if (this.stateSpec != null) {
      if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]), stateSize)) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`An initialState was passed that is not compatible with ` + `cell.stateSize. Received stateSpec=${this.stateSpec}; ` + `However cell.stateSize is ${this.cell.stateSize}`);
      }
    } else {
      this.stateSpec = stateSize.map(dim => new _engine_topology__WEBPACK_IMPORTED_MODULE_5__.InputSpec({
        shape: [null, dim]
      }));
    }
    if (this.stateful) {
      this.resetStates();
    }
  }
  /**
   * Reset the state tensors of the RNN.
   *
   * If the `states` argument is `undefined` or `null`, will set the
   * state tensor(s) of the RNN to all-zero tensors of the appropriate
   * shape(s).
   *
   * If `states` is provided, will set the state tensors of the RNN to its
   * value.
   *
   * @param states Optional externally-provided initial states.
   * @param training Whether this call is done during training. For stateful
   *   RNNs, this affects whether the old states are kept or discarded. In
   *   particular, if `training` is `true`, the old states will be kept so
   *   that subsequent backpropgataion through time (BPTT) may work properly.
   *   Else, the old states will be discarded.
   */
  resetStates(states, training = false) {
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (!this.stateful) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');
      }
      const batchSize = this.inputSpec[0].shape[0];
      if (batchSize == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');
      }
      // Initialize state if null.
      if (this.states_ == null) {
        if (Array.isArray(this.cell.stateSize)) {
          this.states_ = this.cell.stateSize.map(dim => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros([batchSize, dim]));
        } else {
          this.states_ = [_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros([batchSize, this.cell.stateSize])];
        }
      } else if (states == null) {
        // Dispose old state tensors.
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.states_);
        // For stateful RNNs, fully dispose kept old states.
        if (this.keptStates != null) {
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.keptStates);
          this.keptStates = [];
        }
        if (Array.isArray(this.cell.stateSize)) {
          this.states_ = this.cell.stateSize.map(dim => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros([batchSize, dim]));
        } else {
          this.states_[0] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros([batchSize, this.cell.stateSize]);
        }
      } else {
        if (!Array.isArray(states)) {
          states = [states];
        }
        if (states.length !== this.states_.length) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);
        }
        if (training === true) {
          // Store old state tensors for complete disposal later, i.e., during
          // the next no-arg call to this method. We do not dispose the old
          // states immediately because that BPTT (among other things) require
          // them.
          this.keptStates.push(this.states_.slice());
        } else {
          _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.states_);
        }
        for (let index = 0; index < this.states_.length; ++index) {
          const value = states[index];
          const dim = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[index] : this.cell.stateSize;
          const expectedShape = [batchSize, dim];
          if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(value.shape, expectedShape)) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);
          }
          this.states_[index] = value;
        }
      }
      this.states_ = this.states_.map(state => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep(state.clone()));
    });
  }
  apply(inputs, kwargs) {
    // TODO(cais): Figure out whether initialState is in kwargs or inputs.
    let initialState = kwargs == null ? null : kwargs['initialState'];
    let constants = kwargs == null ? null : kwargs['constants'];
    if (kwargs == null) {
      kwargs = {};
    }
    const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);
    inputs = standardized.inputs;
    initialState = standardized.initialState;
    constants = standardized.constants;
    // If any of `initial_state` or `constants` are specified and are
    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify
    // the input_spec to include them.
    let additionalInputs = [];
    let additionalSpecs = [];
    if (initialState != null) {
      kwargs['initialState'] = initialState;
      additionalInputs = additionalInputs.concat(initialState);
      this.stateSpec = [];
      for (const state of initialState) {
        this.stateSpec.push(new _engine_topology__WEBPACK_IMPORTED_MODULE_5__.InputSpec({
          shape: state.shape
        }));
      }
      // TODO(cais): Use the following instead.
      // this.stateSpec = initialState.map(state => new InputSpec({shape:
      // state.shape}));
      additionalSpecs = additionalSpecs.concat(this.stateSpec);
    }
    if (constants != null) {
      kwargs['constants'] = constants;
      additionalInputs = additionalInputs.concat(constants);
      // TODO(cais): Add this.constantsSpec.
      this.numConstants = constants.length;
    }
    const isTensor = additionalInputs[0] instanceof _engine_topology__WEBPACK_IMPORTED_MODULE_5__.SymbolicTensor;
    if (isTensor) {
      // Compute full input spec, including state and constants.
      const fullInput = [inputs].concat(additionalInputs);
      const fullInputSpec = this.inputSpec.concat(additionalSpecs);
      // Perform the call with temporarily replaced inputSpec.
      const originalInputSpec = this.inputSpec;
      this.inputSpec = fullInputSpec;
      const output = super.apply(fullInput, kwargs);
      this.inputSpec = originalInputSpec;
      return output;
    } else {
      return super.apply(inputs, kwargs);
    }
  }
  // tslint:disable-next-line:no-any
  call(inputs, kwargs) {
    // Input shape: `[samples, time (padded with zeros), input_dim]`.
    // Note that the .build() method of subclasses **must** define
    // this.inputSpec and this.stateSpec owith complete input shapes.
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const mask = kwargs == null ? null : kwargs['mask'];
      const training = kwargs == null ? null : kwargs['training'];
      let initialState = kwargs == null ? null : kwargs['initialState'];
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_11__.getExactlyOneTensor)(inputs);
      if (initialState == null) {
        if (this.stateful) {
          initialState = this.states_;
        } else {
          initialState = this.getInitialState(inputs);
        }
      }
      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (initialState.length !== numStates) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`RNN Layer has ${numStates} state(s) but was passed ` + `${initialState.length} initial state(s).`);
      }
      if (this.unroll) {
        console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');
      }
      const cellCallKwargs = {
        training
      };
      // TODO(cais): Add support for constants.
      const step = (inputs, states) => {
        // `inputs` and `states` are concatenated to form a single `Array` of
        // `tf.Tensor`s as the input to `cell.call()`.
        const outputs = this.cell.call([inputs].concat(states), cellCallKwargs);
        // Marshall the return value into output and new states.
        return [outputs[0], outputs.slice(1)];
      };
      // TODO(cais): Add support for constants.
      const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);
      const lastOutput = rnnOutputs[0];
      const outputs = rnnOutputs[1];
      const states = rnnOutputs[2];
      if (this.stateful) {
        this.resetStates(states, training);
      }
      const output = this.returnSequences ? outputs : lastOutput;
      // TODO(cais): Porperty set learning phase flag.
      if (this.returnState) {
        return [output].concat(states);
      } else {
        return output;
      }
    });
  }
  getInitialState(inputs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      // Build an all-zero tensor of shape [samples, outputDim].
      // [Samples, timeSteps, inputDim].
      let initialState = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(inputs.shape);
      // [Samples].
      initialState = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(initialState, [1, 2]);
      initialState = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.expandDims(initialState); // [Samples, 1].
      if (Array.isArray(this.cell.stateSize)) {
        return this.cell.stateSize.map(dim => dim > 1 ? _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.tile(initialState, [1, dim]) : initialState);
      } else {
        return this.cell.stateSize > 1 ? [_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.tile(initialState, [1, this.cell.stateSize])] : [initialState];
      }
    });
  }
  get trainableWeights() {
    if (!this.trainable) {
      return [];
    }
    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.
    return this.cell.trainableWeights;
  }
  get nonTrainableWeights() {
    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.
    if (!this.trainable) {
      return this.cell.weights;
    }
    return this.cell.nonTrainableWeights;
  }
  setFastWeightInitDuringBuild(value) {
    super.setFastWeightInitDuringBuild(value);
    if (this.cell != null) {
      this.cell.setFastWeightInitDuringBuild(value);
    }
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      returnSequences: this.returnSequences,
      returnState: this.returnState,
      goBackwards: this.goBackwards,
      stateful: this.stateful,
      unroll: this.unroll
    };
    if (this.numConstants != null) {
      config['numConstants'] = this.numConstants;
    }
    const cellConfig = this.cell.getConfig();
    if (this.getClassName() === RNN.className) {
      config['cell'] = {
        'className': this.cell.getClassName(),
        'config': cellConfig
      };
    }
    // this order is necessary, to prevent cell name from replacing layer name
    return Object.assign(Object.assign(Object.assign({}, cellConfig), baseConfig), config);
  }
  /** @nocollapse */
  static fromConfig(cls, config, customObjects = {}) {
    const cellConfig = config['cell'];
    const cell = (0,_serialization__WEBPACK_IMPORTED_MODULE_13__.deserialize)(cellConfig, customObjects);
    return new cls(Object.assign(config, {
      cell
    }));
  }
}
/** @nocollapse */
RNN.className = 'RNN';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(RNN);
// Porting Note: This is a common parent class for RNN cells. There is no
// equivalent of this in PyKeras. Having a common parent class forgoes the
//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.
/**
 * An RNNCell layer.
 *
 * @doc {heading: 'Layers', subheading: 'Classes'}
 */
class RNNCell extends _engine_topology__WEBPACK_IMPORTED_MODULE_5__.Layer {}
class SimpleRNNCell extends RNNCell {
  constructor(args) {
    super(args);
    this.DEFAULT_ACTIVATION = 'tanh';
    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
    this.DEFAULT_BIAS_INITIALIZER = 'zeros';
    this.units = args.units;
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_9__.assertPositiveInteger)(this.units, `units`);
    this.activation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);
    this.useBias = args.useBias == null ? true : args.useBias;
    this.kernelInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
    this.recurrentInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);
    this.biasInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
    this.kernelRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.kernelRegularizer);
    this.recurrentRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.recurrentRegularizer);
    this.biasRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.biasRegularizer);
    this.kernelConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.kernelConstraint);
    this.recurrentConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.recurrentConstraint);
    this.biasConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.biasConstraint);
    this.dropout = _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.min([1, _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.max([0, args.dropout == null ? 0 : args.dropout])]);
    this.recurrentDropout = _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.min([1, _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);
    this.dropoutFunc = args.dropoutFunc;
    this.stateSize = this.units;
    this.dropoutMask = null;
    this.recurrentDropoutMask = null;
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_11__.getExactlyOneShape)(inputShape);
    // TODO(cais): Use regularizer.
    this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    if (this.useBias) {
      this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    } else {
      this.bias = null;
    }
    this.built = true;
  }
  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
  //   `inputs` and `states`. Here, the two tensors are combined into an
  //   `Tensor[]` Array as the first input argument.
  //   Similarly, PyKeras' equivalent of this method returns two values:
  //    `output` and `[output]`. Here the two are combined into one length-2
  //    `Tensor[]`, consisting of `output` repeated.
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = inputs;
      if (inputs.length !== 2) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);
      }
      let prevOutput = inputs[1];
      inputs = inputs[0];
      const training = kwargs['training'] == null ? false : kwargs['training'];
      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {
        this.dropoutMask = generateDropoutMask({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(inputs),
          rate: this.dropout,
          training,
          dropoutFunc: this.dropoutFunc
        });
      }
      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {
        this.recurrentDropoutMask = generateDropoutMask({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(prevOutput),
          rate: this.recurrentDropout,
          training,
          dropoutFunc: this.dropoutFunc
        });
      }
      let h;
      const dpMask = this.dropoutMask;
      const recDpMask = this.recurrentDropoutMask;
      if (dpMask != null) {
        h = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(inputs, dpMask), this.kernel.read());
      } else {
        h = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(inputs, this.kernel.read());
      }
      if (this.bias != null) {
        h = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.biasAdd(h, this.bias.read());
      }
      if (recDpMask != null) {
        prevOutput = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(prevOutput, recDpMask);
      }
      let output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(h, _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(prevOutput, this.recurrentKernel.read()));
      if (this.activation != null) {
        output = this.activation.apply(output);
      }
      // TODO(cais): Properly set learning phase on output tensor?
      return [output, output];
    });
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      units: this.units,
      activation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.activation),
      useBias: this.useBias,
      kernelInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.kernelInitializer),
      recurrentInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.recurrentInitializer),
      biasInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.biasInitializer),
      kernelRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.kernelRegularizer),
      recurrentRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.recurrentRegularizer),
      biasRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.biasRegularizer),
      activityRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.activityRegularizer),
      kernelConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.kernelConstraint),
      recurrentConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.recurrentConstraint),
      biasConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout
    };
    return Object.assign(Object.assign({}, baseConfig), config);
  }
}
/** @nocollapse */
SimpleRNNCell.className = 'SimpleRNNCell';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(SimpleRNNCell);
class SimpleRNN extends RNN {
  constructor(args) {
    args.cell = new SimpleRNNCell(args);
    super(args);
    // TODO(cais): Add activityRegularizer.
  }

  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (this.cell.dropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.dropoutMask);
        this.cell.dropoutMask = null;
      }
      if (this.cell.recurrentDropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.recurrentDropoutMask);
        this.cell.recurrentDropoutMask = null;
      }
      const mask = kwargs == null ? null : kwargs['mask'];
      const training = kwargs == null ? null : kwargs['training'];
      const initialState = kwargs == null ? null : kwargs['initialState'];
      return super.call(inputs, {
        mask,
        training,
        initialState
      });
    });
  }
  /** @nocollapse */
  static fromConfig(cls, config) {
    return new cls(config);
  }
}
/** @nocollapse */
SimpleRNN.className = 'SimpleRNN';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(SimpleRNN);
class GRUCell extends RNNCell {
  constructor(args) {
    super(args);
    this.DEFAULT_ACTIVATION = 'tanh';
    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';
    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
    this.DEFAULT_BIAS_INITIALIZER = 'zeros';
    if (args.resetAfter) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`GRUCell does not support reset_after parameter set to true.`);
    }
    this.units = args.units;
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_9__.assertPositiveInteger)(this.units, 'units');
    this.activation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);
    this.recurrentActivation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);
    this.useBias = args.useBias == null ? true : args.useBias;
    this.kernelInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
    this.recurrentInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);
    this.biasInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
    this.kernelRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.kernelRegularizer);
    this.recurrentRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.recurrentRegularizer);
    this.biasRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.biasRegularizer);
    this.kernelConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.kernelConstraint);
    this.recurrentConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.recurrentConstraint);
    this.biasConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.biasConstraint);
    this.dropout = _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.min([1, _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.max([0, args.dropout == null ? 0 : args.dropout])]);
    this.recurrentDropout = _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.min([1, _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);
    this.dropoutFunc = args.dropoutFunc;
    this.implementation = args.implementation;
    this.stateSize = this.units;
    this.dropoutMask = null;
    this.recurrentDropoutMask = null;
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_11__.getExactlyOneShape)(inputShape);
    const inputDim = inputShape[inputShape.length - 1];
    this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    if (this.useBias) {
      this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    } else {
      this.bias = null;
    }
    // Porting Notes: Unlike the PyKeras implementation, we perform slicing
    //   of the weights and bias in the call() method, at execution time.
    this.built = true;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = inputs;
      if (inputs.length !== 2) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);
      }
      const training = kwargs['training'] == null ? false : kwargs['training'];
      let hTMinus1 = inputs[1]; // Previous memory state.
      inputs = inputs[0];
      // Note: For superior performance, TensorFlow.js always uses
      // implementation 2, regardless of the actual value of
      // config.implementation.
      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {
        this.dropoutMask = generateDropoutMask({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(inputs),
          rate: this.dropout,
          training,
          count: 3,
          dropoutFunc: this.dropoutFunc
        });
      }
      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {
        this.recurrentDropoutMask = generateDropoutMask({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(hTMinus1),
          rate: this.recurrentDropout,
          training,
          count: 3,
          dropoutFunc: this.dropoutFunc
        });
      }
      const dpMask = this.dropoutMask;
      const recDpMask = this.recurrentDropoutMask;
      let z;
      let r;
      let hh;
      if (0 < this.dropout && this.dropout < 1) {
        inputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(inputs, dpMask[0]);
      }
      let matrixX = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(inputs, this.kernel.read());
      if (this.useBias) {
        matrixX = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.biasAdd(matrixX, this.bias.read());
      }
      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {
        hTMinus1 = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(hTMinus1, recDpMask[0]);
      }
      const recurrentKernelValue = this.recurrentKernel.read();
      const [rk1, rk2] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);
      const matrixInner = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(hTMinus1, rk1);
      const [xZ, xR, xH] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split(matrixX, 3, matrixX.rank - 1);
      const [recurrentZ, recurrentR] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split(matrixInner, 2, matrixInner.rank - 1);
      z = this.recurrentActivation.apply(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(xZ, recurrentZ));
      r = this.recurrentActivation.apply(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(xR, recurrentR));
      const recurrentH = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(r, hTMinus1), rk2);
      hh = this.activation.apply(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(xH, recurrentH));
      const h = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(z, hTMinus1), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(1, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.neg(z)), hh));
      // TODO(cais): Add use_learning_phase flag properly.
      return [h, h];
    });
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      units: this.units,
      activation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.activation),
      recurrentActivation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.kernelInitializer),
      recurrentInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.recurrentInitializer),
      biasInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.biasInitializer),
      kernelRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.kernelRegularizer),
      recurrentRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.recurrentRegularizer),
      biasRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.biasRegularizer),
      activityRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.activityRegularizer),
      kernelConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.kernelConstraint),
      recurrentConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.recurrentConstraint),
      biasConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation,
      resetAfter: false
    };
    return Object.assign(Object.assign({}, baseConfig), config);
  }
}
/** @nocollapse */
GRUCell.className = 'GRUCell';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GRUCell);
class GRU extends RNN {
  constructor(args) {
    if (args.implementation === 0) {
      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');
    }
    args.cell = new GRUCell(args);
    super(args);
    // TODO(cais): Add activityRegularizer.
  }

  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (this.cell.dropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.dropoutMask);
        this.cell.dropoutMask = null;
      }
      if (this.cell.recurrentDropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.recurrentDropoutMask);
        this.cell.recurrentDropoutMask = null;
      }
      const mask = kwargs == null ? null : kwargs['mask'];
      const training = kwargs == null ? null : kwargs['training'];
      const initialState = kwargs == null ? null : kwargs['initialState'];
      return super.call(inputs, {
        mask,
        training,
        initialState
      });
    });
  }
  /** @nocollapse */
  static fromConfig(cls, config) {
    if (config['implmentation'] === 0) {
      config['implementation'] = 1;
    }
    return new cls(config);
  }
}
/** @nocollapse */
GRU.className = 'GRU';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(GRU);
class LSTMCell extends RNNCell {
  constructor(args) {
    super(args);
    this.DEFAULT_ACTIVATION = 'tanh';
    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';
    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';
    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';
    this.DEFAULT_BIAS_INITIALIZER = 'zeros';
    this.units = args.units;
    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_9__.assertPositiveInteger)(this.units, 'units');
    this.activation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);
    this.recurrentActivation = (0,_activations__WEBPACK_IMPORTED_MODULE_1__.getActivation)(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);
    this.useBias = args.useBias == null ? true : args.useBias;
    this.kernelInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);
    this.recurrentInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);
    this.biasInitializer = (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.getInitializer)(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);
    this.unitForgetBias = args.unitForgetBias;
    this.kernelRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.kernelRegularizer);
    this.recurrentRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.recurrentRegularizer);
    this.biasRegularizer = (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.getRegularizer)(args.biasRegularizer);
    this.kernelConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.kernelConstraint);
    this.recurrentConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.recurrentConstraint);
    this.biasConstraint = (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.getConstraint)(args.biasConstraint);
    this.dropout = _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.min([1, _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.max([0, args.dropout == null ? 0 : args.dropout])]);
    this.recurrentDropout = _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.min([1, _utils_math_utils__WEBPACK_IMPORTED_MODULE_10__.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);
    this.dropoutFunc = args.dropoutFunc;
    this.implementation = args.implementation;
    this.stateSize = [this.units, this.units];
    this.dropoutMask = null;
    this.recurrentDropoutMask = null;
  }
  build(inputShape) {
    var _a;
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_11__.getExactlyOneShape)(inputShape);
    const inputDim = inputShape[inputShape.length - 1];
    this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);
    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);
    let biasInitializer;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const capturedBiasInit = this.biasInitializer;
        const capturedUnits = this.units;
        biasInitializer = new (_a = class CustomInit extends _initializers__WEBPACK_IMPORTED_MODULE_7__.Initializer {
          apply(shape, dtype) {
            // TODO(cais): More informative variable names?
            const bI = capturedBiasInit.apply([capturedUnits]);
            const bF = new _initializers__WEBPACK_IMPORTED_MODULE_7__.Ones().apply([capturedUnits]);
            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);
            return _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.concatAlongFirstAxis(_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.concatAlongFirstAxis(bI, bF), bCAndH);
          }
        }, /** @nocollapse */
        _a.className = 'CustomInit', _a)();
      } else {
        biasInitializer = this.biasInitializer;
      }
      this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);
    } else {
      this.bias = null;
    }
    // Porting Notes: Unlike the PyKeras implementation, we perform slicing
    //   of the weights and bias in the call() method, at execution time.
    this.built = true;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const training = kwargs['training'] == null ? false : kwargs['training'];
      inputs = inputs;
      if (inputs.length !== 3) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);
      }
      let hTMinus1 = inputs[1]; // Previous memory state.
      const cTMinus1 = inputs[2]; // Previous carry state.
      inputs = inputs[0];
      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {
        this.dropoutMask = generateDropoutMask({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(inputs),
          rate: this.dropout,
          training,
          count: 4,
          dropoutFunc: this.dropoutFunc
        });
      }
      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {
        this.recurrentDropoutMask = generateDropoutMask({
          ones: () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(hTMinus1),
          rate: this.recurrentDropout,
          training,
          count: 4,
          dropoutFunc: this.dropoutFunc
        });
      }
      const dpMask = this.dropoutMask;
      const recDpMask = this.recurrentDropoutMask;
      // Note: For superior performance, TensorFlow.js always uses
      // implementation 2 regardless of the actual value of
      // config.implementation.
      let i;
      let f;
      let c;
      let o;
      if (0 < this.dropout && this.dropout < 1) {
        inputs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(inputs, dpMask[0]);
      }
      let z = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(inputs, this.kernel.read());
      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {
        hTMinus1 = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(hTMinus1, recDpMask[0]);
      }
      z = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(z, _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dot(hTMinus1, this.recurrentKernel.read()));
      if (this.useBias) {
        z = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.biasAdd(z, this.bias.read());
      }
      const [z0, z1, z2, z3] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split(z, 4, z.rank - 1);
      i = this.recurrentActivation.apply(z0);
      f = this.recurrentActivation.apply(z1);
      c = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(f, cTMinus1), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(i, this.activation.apply(z2)));
      o = this.recurrentActivation.apply(z3);
      const h = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(o, this.activation.apply(c));
      // TODO(cais): Add use_learning_phase flag properly.
      return [h, h, c];
    });
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const config = {
      units: this.units,
      activation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.activation),
      recurrentActivation: (0,_activations__WEBPACK_IMPORTED_MODULE_1__.serializeActivation)(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.kernelInitializer),
      recurrentInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.recurrentInitializer),
      biasInitializer: (0,_initializers__WEBPACK_IMPORTED_MODULE_7__.serializeInitializer)(this.biasInitializer),
      unitForgetBias: this.unitForgetBias,
      kernelRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.kernelRegularizer),
      recurrentRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.recurrentRegularizer),
      biasRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.biasRegularizer),
      activityRegularizer: (0,_regularizers__WEBPACK_IMPORTED_MODULE_8__.serializeRegularizer)(this.activityRegularizer),
      kernelConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.kernelConstraint),
      recurrentConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.recurrentConstraint),
      biasConstraint: (0,_constraints__WEBPACK_IMPORTED_MODULE_4__.serializeConstraint)(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation
    };
    return Object.assign(Object.assign({}, baseConfig), config);
  }
}
/** @nocollapse */
LSTMCell.className = 'LSTMCell';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LSTMCell);
class LSTM extends RNN {
  constructor(args) {
    if (args.implementation === 0) {
      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');
    }
    args.cell = new LSTMCell(args);
    super(args);
    // TODO(cais): Add activityRegularizer.
  }

  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      if (this.cell.dropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.dropoutMask);
        this.cell.dropoutMask = null;
      }
      if (this.cell.recurrentDropoutMask != null) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(this.cell.recurrentDropoutMask);
        this.cell.recurrentDropoutMask = null;
      }
      const mask = kwargs == null ? null : kwargs['mask'];
      const training = kwargs == null ? null : kwargs['training'];
      const initialState = kwargs == null ? null : kwargs['initialState'];
      return super.call(inputs, {
        mask,
        training,
        initialState
      });
    });
  }
  /** @nocollapse */
  static fromConfig(cls, config) {
    if (config['implmentation'] === 0) {
      config['implementation'] = 1;
    }
    return new cls(config);
  }
}
/** @nocollapse */
LSTM.className = 'LSTM';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LSTM);
class StackedRNNCells extends RNNCell {
  constructor(args) {
    super(args);
    this.cells = args.cells;
  }
  get stateSize() {
    // States are a flat list in reverse order of the cell stack.
    // This allows perserving the requirement `stack.statesize[0] ===
    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,
    // assuming one LSTM has states `[h, c]`.
    const stateSize = [];
    for (const cell of this.cells.slice().reverse()) {
      if (Array.isArray(cell.stateSize)) {
        stateSize.push(...cell.stateSize);
      } else {
        stateSize.push(cell.stateSize);
      }
    }
    return stateSize;
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      inputs = inputs;
      let states = inputs.slice(1);
      // Recover per-cell states.
      const nestedStates = [];
      for (const cell of this.cells.slice().reverse()) {
        if (Array.isArray(cell.stateSize)) {
          nestedStates.push(states.splice(0, cell.stateSize.length));
        } else {
          nestedStates.push(states.splice(0, 1));
        }
      }
      nestedStates.reverse();
      // Call the cells in order and store the returned states.
      const newNestedStates = [];
      let callInputs;
      for (let i = 0; i < this.cells.length; ++i) {
        const cell = this.cells[i];
        states = nestedStates[i];
        // TODO(cais): Take care of constants.
        if (i === 0) {
          callInputs = [inputs[0]].concat(states);
        } else {
          callInputs = [callInputs[0]].concat(states);
        }
        callInputs = cell.call(callInputs, kwargs);
        newNestedStates.push(callInputs.slice(1));
      }
      // Format the new states as a flat list in reverse cell order.
      states = [];
      for (const cellStates of newNestedStates.slice().reverse()) {
        states.push(...cellStates);
      }
      return [callInputs[0]].concat(states);
    });
  }
  build(inputShape) {
    if ((0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_11__.isArrayOfShapes)(inputShape)) {
      // TODO(cais): Take care of input constants.
      // const constantShape = inputShape.slice(1);
      inputShape = inputShape[0];
    }
    inputShape = inputShape;
    let outputDim;
    this.cells.forEach((cell, i) => {
      (0,_common__WEBPACK_IMPORTED_MODULE_3__.nameScope)(`RNNCell_${i}`, () => {
        // TODO(cais): Take care of input constants.
        cell.build(inputShape);
        if (Array.isArray(cell.stateSize)) {
          outputDim = cell.stateSize[0];
        } else {
          outputDim = cell.stateSize;
        }
        inputShape = [inputShape[0], outputDim];
      });
    });
    this.built = true;
  }
  getConfig() {
    const baseConfig = super.getConfig();
    const getCellConfig = cell => {
      return {
        'className': cell.getClassName(),
        'config': cell.getConfig()
      };
    };
    const cellConfigs = this.cells.map(getCellConfig);
    const config = {
      'cells': cellConfigs
    };
    return Object.assign(Object.assign({}, baseConfig), config);
  }
  /** @nocollapse */
  static fromConfig(cls, config, customObjects = {}) {
    const cells = [];
    for (const cellConfig of config['cells']) {
      cells.push((0,_serialization__WEBPACK_IMPORTED_MODULE_13__.deserialize)(cellConfig, customObjects));
    }
    return new cls({
      cells
    });
  }
  get trainableWeights() {
    if (!this.trainable) {
      return [];
    }
    const weights = [];
    for (const cell of this.cells) {
      weights.push(...cell.trainableWeights);
    }
    return weights;
  }
  get nonTrainableWeights() {
    const weights = [];
    for (const cell of this.cells) {
      weights.push(...cell.nonTrainableWeights);
    }
    if (!this.trainable) {
      const trainableWeights = [];
      for (const cell of this.cells) {
        trainableWeights.push(...cell.trainableWeights);
      }
      return trainableWeights.concat(weights);
    }
    return weights;
  }
  /**
   * Retrieve the weights of a the model.
   *
   * @returns A flat `Array` of `tf.Tensor`s.
   */
  getWeights() {
    const weights = [];
    for (const cell of this.cells) {
      weights.push(...cell.weights);
    }
    return (0,_variables__WEBPACK_IMPORTED_MODULE_12__.batchGetValue)(weights);
  }
  /**
   * Set the weights of the model.
   *
   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
   *     the output of `getWeights()`.
   */
  setWeights(weights) {
    const tuples = [];
    for (const cell of this.cells) {
      const numParams = cell.weights.length;
      const inputWeights = weights.splice(numParams);
      for (let i = 0; i < cell.weights.length; ++i) {
        tuples.push([cell.weights[i], inputWeights[i]]);
      }
    }
    (0,_variables__WEBPACK_IMPORTED_MODULE_12__.batchSetValue)(tuples);
  }
}
/** @nocollapse */
StackedRNNCells.className = 'StackedRNNCells';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(StackedRNNCells);
function generateDropoutMask(args) {
  const {
    ones,
    rate,
    training = false,
    count = 1,
    dropoutFunc
  } = args;
  const droppedInputs = () => dropoutFunc != null ? dropoutFunc(ones(), rate) : _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.dropout(ones(), rate);
  const createMask = () => _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.inTrainPhase(droppedInputs, ones, training);
  // just in case count is provided with null or undefined
  if (!count || count <= 1) {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep(createMask().clone());
  }
  const masks = Array(count).fill(undefined).map(createMask);
  return masks.map(m => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep(m.clone()));
}

/***/ }),

/***/ 49796:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deserialize": () => (/* binding */ deserialize)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original Source layers/__init__.py */


/**
 * Instantiate a layer from a config dictionary.
 * @param config dict of the form {class_name: str, config: dict}
 * @param customObjects dict mapping class names (or function names)
 *   of custom (non-Keras) objects to class/functions
 * @param fastWeightInit Optional flag to use fast weight initialization
 *   during deserialization. This is applicable to cases in which
 *   the initialization will be immediately overwritten by loaded weight
 *   values. Default: `false`.
 * @returns Layer instance (may be LayersModel, Sequential, Layer...)
 */
function deserialize(config, customObjects = {}, fastWeightInit = false) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_1__.deserializeKerasObject)(config, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.SerializationMap.getMap().classNameMap, customObjects, 'layer', fastWeightInit);
}

/***/ }),

/***/ 64088:
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bidirectional": () => (/* binding */ Bidirectional),
/* harmony export */   "TimeDistributed": () => (/* binding */ TimeDistributed),
/* harmony export */   "Wrapper": () => (/* binding */ Wrapper),
/* harmony export */   "checkBidirectionalMergeMode": () => (/* binding */ checkBidirectionalMergeMode)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend/tfjs_backend */ 81579);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common */ 9878);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/topology */ 59996);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _keras_format_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../keras_format/common */ 8125);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/types_utils */ 13124);
/* harmony import */ var _recurrent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./recurrent */ 29998);
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./serialization */ 49796);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Layers that augment the functionality of a base layer.
 */











/**
 * Abstract wrapper base class.
 *
 * Wrappers take another layer and augment it in various ways.
 * Do not use this class as a layer, it is only an abstract base class.
 * Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.
 */
class Wrapper extends _engine_topology__WEBPACK_IMPORTED_MODULE_3__.Layer {
  constructor(args) {
    // Porting Note: In PyKeras, `self.layer` is set prior to the calling
    //   `super()`. But we can't do that here due to TypeScript's restriction.
    //   See: https://github.com/Microsoft/TypeScript/issues/8277
    //   As a result, we have to add checks in `get trainable()` and
    //   `set trainable()` below in order to prevent using `this.layer` when
    //   its value is `undefined`. The super constructor does use the getter
    //   and the setter of `this.layer`.
    super(args);
    this.layer = args.layer;
  }
  build(inputShape) {
    this.built = true;
  }
  // TODO(cais): Implement activityRegularizer getter.
  get trainable() {
    // Porting Note: the check of `this.layer` here is necessary due to the
    //   way the `constructor` of this class is written (see Porting Note
    //   above).
    if (this.layer != null) {
      return this.layer.trainable;
    } else {
      return false;
    }
  }
  set trainable(value) {
    // Porting Note: the check of `this.layer` here is necessary due to the
    //   way the `constructor` of this class is written (see Porting Note
    //   above).
    if (this.layer != null) {
      this.layer.trainable = value;
    }
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  // TODO(cais): Implement setter for trainableWeights.
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  // TODO(cais): Implement setter for nonTrainableWeights.
  get updates() {
    // tslint:disable-next-line:no-any
    return this.layer._updates;
  }
  // TODO(cais): Implement getUpdatesFor().
  get losses() {
    return this.layer.losses;
  }
  // TODO(cais): Implement getLossesFor().
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(weights) {
    this.layer.setWeights(weights);
  }
  getConfig() {
    const config = {
      'layer': {
        'className': this.layer.getClassName(),
        'config': this.layer.getConfig()
      }
    };
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  setFastWeightInitDuringBuild(value) {
    super.setFastWeightInitDuringBuild(value);
    if (this.layer != null) {
      this.layer.setFastWeightInitDuringBuild(value);
    }
  }
  /** @nocollapse */
  static fromConfig(cls, config, customObjects = {}) {
    const layerConfig = config['layer'];
    const layer = (0,_serialization__WEBPACK_IMPORTED_MODULE_9__.deserialize)(layerConfig, customObjects);
    delete config['layer'];
    const newConfig = {
      layer
    };
    Object.assign(newConfig, config);
    return new cls(newConfig);
  }
}
class TimeDistributed extends Wrapper {
  constructor(args) {
    super(args);
    this.supportsMasking = true;
  }
  build(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneShape)(inputShape);
    if (inputShape.length < 3) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError(`TimeDistributed layer expects an input shape >= 3D, but received ` + `input shape ${JSON.stringify(inputShape)}`);
    }
    this.inputSpec = [{
      shape: inputShape
    }];
    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));
    if (!this.layer.built) {
      this.layer.build(childInputShape);
      this.layer.built = true;
    }
    super.build(inputShape);
  }
  computeOutputShape(inputShape) {
    inputShape = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneShape)(inputShape);
    const childInputShape = [inputShape[0]].concat(inputShape.slice(2));
    const childOutputShape = this.layer.computeOutputShape(childInputShape);
    const timesteps = inputShape[1];
    return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      // TODO(cais): Add 'training' and 'useLearningPhase' to kwargs.
      inputs = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(inputs);
      // Porting Note: In tfjs-layers, `inputs` are always concrete tensor
      // values. Hence the inputs can't have an undetermined first (batch)
      // dimension, which is why we always use the K.rnn approach here.
      const step = (inputs, states) => {
        // TODO(cais): Add useLearningPhase.
        // NOTE(cais): `layer.call` may return a length-1 array of Tensor in
        //   some cases (e.g., `layer` is a `Sequential` instance), which is
        //   why `getExactlyOneTensor` is used below.
        const output = (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_7__.getExactlyOneTensor)(this.layer.call(inputs, kwargs));
        return [output, []];
      };
      const rnnOutputs = (0,_recurrent__WEBPACK_IMPORTED_MODULE_8__.rnn)(step, inputs, [], false /* goBackwards */, null /* mask */, null /* constants */, false /* unroll */, true /* needPerStepOutputs */);
      const y = rnnOutputs[1];
      // TODO(cais): Add activity regularization.
      // TODO(cais): Add useLearningPhase.
      return y;
    });
  }
}
/** @nocollapse */
TimeDistributed.className = 'TimeDistributed';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(TimeDistributed);
function checkBidirectionalMergeMode(value) {
  _utils_generic_utils__WEBPACK_IMPORTED_MODULE_6__.checkStringTypeUnionValue(_keras_format_common__WEBPACK_IMPORTED_MODULE_5__.VALID_BIDIRECTIONAL_MERGE_MODES, 'BidirectionalMergeMode', value);
}
const DEFAULT_BIDIRECTIONAL_MERGE_MODE = 'concat';
class Bidirectional extends Wrapper {
  constructor(args) {
    super(args);
    // Note: When creating `this.forwardLayer`, the original Layer object
    //   (`config.layer`) ought to be cloned. This is why we call
    //   `getConfig()` followed by `deserialize()`. Without this cloning,
    //   the layer names saved during serialization will incorrectly contain
    //   the 'forward_' prefix. In Python Keras, this is done using
    //   `copy.copy` (shallow copy), which does not have a simple equivalent
    //   in JavaScript. JavaScript's `Object.assign()` does not copy
    //   methods.
    const layerConfig = args.layer.getConfig();
    const forwDict = {};
    forwDict['className'] = args.layer.getClassName();
    forwDict['config'] = layerConfig;
    this.forwardLayer = (0,_serialization__WEBPACK_IMPORTED_MODULE_9__.deserialize)(forwDict);
    layerConfig['goBackwards'] = layerConfig['goBackwards'] === true ? false : true;
    const backDict = {};
    backDict['className'] = args.layer.getClassName();
    backDict['config'] = layerConfig;
    this.backwardLayer = (0,_serialization__WEBPACK_IMPORTED_MODULE_9__.deserialize)(backDict);
    this.forwardLayer.name = 'forward_' + this.forwardLayer.name;
    this.backwardLayer.name = 'backward_' + this.backwardLayer.name;
    this.mergeMode = args.mergeMode === undefined ? DEFAULT_BIDIRECTIONAL_MERGE_MODE : args.mergeMode;
    checkBidirectionalMergeMode(this.mergeMode);
    if (args.weights) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.NotImplementedError('weights support is not implemented for Bidirectional layer yet.');
    }
    this._stateful = args.layer.stateful;
    this.returnSequences = args.layer.returnSequences;
    this.returnState = args.layer.returnState;
    this.supportsMasking = true;
    this._trainable = true;
    this.inputSpec = args.layer.inputSpec;
    this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(value) {
    // Porting Note: the check of `this.layer` here is necessary due to the
    //   way the `constructor` of this class is written (see Porting Note
    //   above).
    this._trainable = value;
    if (this.forwardLayer != null) {
      this.forwardLayer.trainable = value;
    }
    if (this.backwardLayer != null) {
      this.backwardLayer.trainable = value;
    }
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(weights) {
    const numWeights = weights.length;
    const numeightsOver2 = Math.floor(numWeights / 2);
    this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));
    this.backwardLayer.setWeights(weights.slice(numeightsOver2));
  }
  computeOutputShape(inputShape) {
    let layerShapes = this.forwardLayer.computeOutputShape(inputShape);
    if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {
      layerShapes = [layerShapes];
    }
    layerShapes = layerShapes;
    let outputShape;
    let outputShapes;
    let stateShape;
    if (this.returnState) {
      stateShape = layerShapes.slice(1);
      outputShape = layerShapes[0];
    } else {
      outputShape = layerShapes[0];
    }
    outputShape = outputShape;
    if (this.mergeMode === 'concat') {
      outputShape[outputShape.length - 1] *= 2;
      outputShapes = [outputShape];
    } else if (this.mergeMode == null) {
      outputShapes = [outputShape, outputShape.slice()];
    } else {
      outputShapes = [outputShape];
    }
    if (this.returnState) {
      if (this.mergeMode == null) {
        return outputShapes.concat(stateShape).concat(stateShape.slice());
      }
      return [outputShape].concat(stateShape).concat(stateShape.slice());
    }
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_6__.singletonOrArray(outputShapes);
  }
  apply(inputs, kwargs) {
    let initialState = kwargs == null ? null : kwargs['initialState'];
    let constants = kwargs == null ? null : kwargs['constants'];
    if (kwargs == null) {
      kwargs = {};
    }
    const standardized = (0,_recurrent__WEBPACK_IMPORTED_MODULE_8__.standardizeArgs)(inputs, initialState, constants, this.numConstants);
    inputs = standardized.inputs;
    initialState = standardized.initialState;
    constants = standardized.constants;
    if (Array.isArray(inputs)) {
      initialState = inputs.slice(1);
      inputs = inputs[0];
    }
    if ((initialState == null || initialState.length === 0) && constants == null) {
      return super.apply(inputs, kwargs);
    }
    const additionalInputs = [];
    const additionalSpecs = [];
    if (initialState != null) {
      const numStates = initialState.length;
      if (numStates % 2 > 0) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError('When passing `initialState` to a Bidrectional RNN, ' + 'the state should be an Array containing the states of ' + 'the underlying RNNs.');
      }
      kwargs['initialState'] = initialState;
      additionalInputs.push(...initialState);
      const stateSpecs = initialState.map(state => new _engine_topology__WEBPACK_IMPORTED_MODULE_3__.InputSpec({
        shape: state.shape
      }));
      this.forwardLayer.stateSpec = stateSpecs.slice(0, numStates / 2);
      this.backwardLayer.stateSpec = stateSpecs.slice(numStates / 2);
      additionalSpecs.push(...stateSpecs);
    }
    if (constants != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.NotImplementedError('Support for constants in Bidirectional layers is not ' + 'implemented yet.');
    }
    const isSymbolicTensor = additionalInputs[0] instanceof _engine_topology__WEBPACK_IMPORTED_MODULE_3__.SymbolicTensor;
    for (const tensor of additionalInputs) {
      if (tensor instanceof _engine_topology__WEBPACK_IMPORTED_MODULE_3__.SymbolicTensor !== isSymbolicTensor) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_4__.ValueError('The initial state of a Bidirectional layer cannot be ' + 'specified as a mix of symbolic and non-symbolic tensors');
      }
    }
    if (isSymbolicTensor) {
      // Compute the full input and specs, including the states.
      const fullInput = [inputs].concat(additionalInputs);
      const fullInputSpec = this.inputSpec.concat(additionalSpecs);
      // Perform the call temporarily and replace inputSpec.
      // Note: with initial states symbolic calls and non-symbolic calls to
      // this method differ in how the initial states are passed. For
      // symbolic calls, the initial states are passed in the first arg, as
      // an Array of SymbolicTensors; for non-symbolic calls, they are
      // passed in the second arg as a part of the kwargs. Hence the need to
      // temporarily modify inputSpec here.
      // TODO(cais): Make refactoring so that this hacky code below is no
      // longer needed.
      const originalInputSpec = this.inputSpec;
      this.inputSpec = fullInputSpec;
      const output = super.apply(fullInput, kwargs);
      this.inputSpec = originalInputSpec;
      return output;
    } else {
      return super.apply(inputs, kwargs);
    }
  }
  call(inputs, kwargs) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const initialState = kwargs['initialState'];
      let y;
      let yRev;
      if (initialState == null) {
        y = this.forwardLayer.call(inputs, kwargs);
        yRev = this.backwardLayer.call(inputs, kwargs);
      } else {
        const forwardState = initialState.slice(0, initialState.length / 2);
        const backwardState = initialState.slice(initialState.length / 2);
        y = this.forwardLayer.call(inputs, Object.assign(kwargs, {
          initialState: forwardState
        }));
        yRev = this.backwardLayer.call(inputs, Object.assign(kwargs, {
          initialState: backwardState
        }));
      }
      let states;
      if (this.returnState) {
        if (Array.isArray(y)) {
          states = y.slice(1).concat(yRev.slice(1));
        } else {}
        y = y[0];
        yRev = yRev[0];
      }
      if (this.returnSequences) {
        yRev = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse(yRev, 1);
      }
      let output;
      if (this.mergeMode === 'concat') {
        output = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.concatenate([y, yRev]);
      } else if (this.mergeMode === 'sum') {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(y, yRev);
      } else if (this.mergeMode === 'ave') {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(.5, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(y, yRev));
      } else if (this.mergeMode === 'mul') {
        output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(y, yRev);
      } else if (this.mergeMode == null) {
        output = [y, yRev];
      }
      // TODO(cais): Properly set learning phase.
      if (this.returnState) {
        if (this.mergeMode == null) {
          return output.concat(states);
        }
        return [output].concat(states);
      }
      return output;
    });
  }
  resetStates(states) {
    this.forwardLayer.resetStates();
    this.backwardLayer.resetStates();
  }
  build(inputShape) {
    (0,_common__WEBPACK_IMPORTED_MODULE_2__.nameScope)(this.forwardLayer.name, () => {
      this.forwardLayer.build(inputShape);
    });
    (0,_common__WEBPACK_IMPORTED_MODULE_2__.nameScope)(this.backwardLayer.name, () => {
      this.backwardLayer.build(inputShape);
    });
    this.built = true;
  }
  computeMask(inputs, mask) {
    if (Array.isArray(mask)) {
      mask = mask[0];
    }
    let outputMask;
    if (this.returnSequences) {
      if (this.mergeMode == null) {
        outputMask = [mask, mask];
      } else {
        outputMask = mask;
      }
    } else {
      if (this.mergeMode == null) {
        outputMask = [null, null];
      } else {
        outputMask = null;
      }
    }
    if (this.returnState) {
      const states = this.forwardLayer.states;
      const stateMask = states.map(state => null);
      if (Array.isArray(outputMask)) {
        return outputMask.concat(stateMask).concat(stateMask);
      } else {
        return [outputMask].concat(stateMask).concat(stateMask);
      }
    } else {
      return outputMask;
    }
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  // TODO(cais): Implement constraints().
  setFastWeightInitDuringBuild(value) {
    super.setFastWeightInitDuringBuild(value);
    if (this.forwardLayer != null) {
      this.forwardLayer.setFastWeightInitDuringBuild(value);
    }
    if (this.backwardLayer != null) {
      this.backwardLayer.setFastWeightInitDuringBuild(value);
    }
  }
  getConfig() {
    const config = {
      'mergeMode': this.mergeMode
    };
    // TODO(cais): Add logic for `numConstants` once the property is added.
    const baseConfig = super.getConfig();
    Object.assign(config, baseConfig);
    return config;
  }
  /** @nocollapse */
  static fromConfig(cls, config) {
    const rnnLayer = (0,_serialization__WEBPACK_IMPORTED_MODULE_9__.deserialize)(config['layer']);
    delete config['layer'];
    // TODO(cais): Add logic for `numConstants` once the property is added.
    if (config['numConstants'] != null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_4__.NotImplementedError(`Deserialization of a Bidirectional layer with numConstants ` + `present is not supported yet.`);
    }
    // tslint:disable-next-line:no-any
    const newConfig = config;
    newConfig['layer'] = rnnLayer;
    return new cls(newConfig);
  }
}
/** @nocollapse */
Bidirectional.className = 'Bidirectional';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Bidirectional);

/***/ }),

/***/ 15878:
/*!***********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/logs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "disposeTensorsInLogs": () => (/* binding */ disposeTensorsInLogs),
/* harmony export */   "resolveScalarsInLogs": () => (/* binding */ resolveScalarsInLogs)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */

/**
 * Turn any Scalar values in a Logs object into actual number values.
 *
 * @param logs The `Logs` object to be resolved in place.
 */
function resolveScalarsInLogs(_x) {
  return _resolveScalarsInLogs.apply(this, arguments);
}
/**
 * Dispose all Tensors in an UnresolvedLogs object.
 *
 * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in
 *   places where the values can be `tf.Tensor` or `number`.
 */
function _resolveScalarsInLogs() {
  _resolveScalarsInLogs = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (logs) {
    if (logs == null) {
      return;
    }
    const promises = [];
    const keys = [];
    const scalarsToDispose = [];
    for (const key in logs) {
      const value = logs[key];
      if (typeof value !== 'number') {
        const valueScalar = value;
        promises.push(valueScalar.data());
        keys.push(key);
        scalarsToDispose.push(valueScalar);
      }
    }
    if (promises.length > 0) {
      const values = yield Promise.all(promises);
      for (let i = 0; i < values.length; ++i) {
        logs[keys[i]] = values[i][0];
      }
      // Dispose the original scalar tensors.
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose)(scalarsToDispose);
    }
  });
  return _resolveScalarsInLogs.apply(this, arguments);
}
function disposeTensorsInLogs(logs) {
  if (logs == null) {
    return;
  }
  for (const key in logs) {
    const value = logs[key];
    if (typeof value !== 'number') {
      value.dispose();
    }
  }
}

/***/ }),

/***/ 56648:
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/losses.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KLD": () => (/* binding */ KLD),
/* harmony export */   "MAE": () => (/* binding */ MAE),
/* harmony export */   "MAPE": () => (/* binding */ MAPE),
/* harmony export */   "MSE": () => (/* binding */ MSE),
/* harmony export */   "MSLE": () => (/* binding */ MSLE),
/* harmony export */   "binaryCrossentropy": () => (/* binding */ binaryCrossentropy),
/* harmony export */   "categoricalCrossentropy": () => (/* binding */ categoricalCrossentropy),
/* harmony export */   "categoricalHinge": () => (/* binding */ categoricalHinge),
/* harmony export */   "cosine": () => (/* binding */ cosine),
/* harmony export */   "cosineProximity": () => (/* binding */ cosineProximity),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "hinge": () => (/* binding */ hinge),
/* harmony export */   "kld": () => (/* binding */ kld),
/* harmony export */   "kullbackLeiblerDivergence": () => (/* binding */ kullbackLeiblerDivergence),
/* harmony export */   "l2Normalize": () => (/* binding */ l2Normalize),
/* harmony export */   "logcosh": () => (/* binding */ logcosh),
/* harmony export */   "lossesMap": () => (/* binding */ lossesMap),
/* harmony export */   "mae": () => (/* binding */ mae),
/* harmony export */   "mape": () => (/* binding */ mape),
/* harmony export */   "meanAbsoluteError": () => (/* binding */ meanAbsoluteError),
/* harmony export */   "meanAbsolutePercentageError": () => (/* binding */ meanAbsolutePercentageError),
/* harmony export */   "meanSquaredError": () => (/* binding */ meanSquaredError),
/* harmony export */   "meanSquaredLogarithmicError": () => (/* binding */ meanSquaredLogarithmicError),
/* harmony export */   "mse": () => (/* binding */ mse),
/* harmony export */   "msle": () => (/* binding */ msle),
/* harmony export */   "poisson": () => (/* binding */ poisson),
/* harmony export */   "sigmoidCrossEntropyWithLogits": () => (/* binding */ sigmoidCrossEntropyWithLogits),
/* harmony export */   "sparseCategoricalCrossentropy": () => (/* binding */ sparseCategoricalCrossentropy),
/* harmony export */   "squaredHinge": () => (/* binding */ squaredHinge)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/common */ 44906);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backend/tfjs_backend */ 81579);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ 22802);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original Source: losses.py */





/**
 * Normalizes a tensor wrt the L2 norm alongside the specified axis.
 * @param x
 * @param axis Axis along which to perform normalization.
 */
function l2Normalize(x, axis) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (x.dtype !== 'float32') {
      x = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(x, 'float32');
    }
    const squareSum = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.square(x), axis, true);
    const epsilonTensor = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fill(squareSum.shape, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)());
    const norm = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sqrt(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maximum(squareSum, epsilonTensor));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(x, norm);
  });
}
function meanSquaredError(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.square(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(yPred, yTrue)), -1));
}
function meanAbsoluteError(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(yPred, yTrue)), -1));
}
function meanAbsolutePercentageError(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const diff = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(yTrue, yPred);
    const clippedTrue = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs(yTrue), (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), Number.MAX_VALUE);
    const absResult = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(diff, clippedTrue));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(100, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(absResult, -1));
  });
}
function meanSquaredLogarithmicError(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const clippedPred = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(yPred, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), Number.MAX_VALUE);
    const firstLog = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(1, clippedPred));
    const clippedTrue = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(yTrue, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), Number.MAX_VALUE);
    const secondLog = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(1, clippedTrue));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.square(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(firstLog, secondLog)), -1);
  });
}
function squaredHinge(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const maxResult = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maximum(0, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(1, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(yTrue, yPred)));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.square(maxResult), -1);
  });
}
function hinge(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const maxResult = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maximum(0, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(1, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(yTrue, yPred)));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(maxResult, -1);
  });
}
function categoricalHinge(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const pos = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(yTrue, yPred), -1);
    const neg = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.max(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(1, yTrue), yPred), -1);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maximum(0, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(1, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(neg, pos)));
  });
}
/**
 * Logarithm of the hyperbolic cosine of the prediction error.
 *
 * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and
 * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly
 * like the mean squared error, but will not be so strongly affected by the
 * occasional wildly incorrect prediction.
 */
function logcosh(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const log2 = Math.log(2);
    const predictionDiff = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(yPred, yTrue);
    const logcoshResult = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(predictionDiff, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softplus(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(-2, predictionDiff))), log2);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(logcoshResult, -1);
  });
}
function categoricalCrossentropy(target, output, fromLogits = false) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    if (fromLogits) {
      output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softmax(output);
    } else {
      // scale preds so that the class probabilities of each sample sum to 1.
      const outputSum = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(output, output.shape.length - 1, true);
      output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(output, outputSum);
    }
    output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(output, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), 1 - (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)());
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.neg(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(target, 'float32'), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log(output)), output.shape.length - 1));
  });
}
/**
 * Categorical crossentropy with integer targets.
 *
 * @param target An integer tensor.
 * @param output A tensor resulting from a softmax (unless `fromLogits` is
 *  `true`, in which case `output` is expected to be the logits).
 * @param fromLogits Boolean, whether `output` is the result of a softmax, or is
 *   a tensor of logits.
 */
function sparseCategoricalCrossentropy(target, output, fromLogits = false) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const flatTarget = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.floor(_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_2__.flatten(target)), 'int32');
    output = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(output, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), 1 - (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)());
    const outputShape = output.shape;
    const oneHotTarget = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.oneHot(flatTarget, outputShape[outputShape.length - 1]), outputShape);
    return categoricalCrossentropy(oneHotTarget, output, fromLogits);
  });
}
/**
 * From TensorFlow's implementation in nn_impl.py:
 *
 * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
 *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
 *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
 *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
 *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
 *    = (1 - z) * x + log(1 + exp(-x))
 *    = x - x * z + log(1 + exp(-x))
 * For x < 0, to avoid overflow in exp(-x), we reformulate the above
 *      x - x * z + log(1 + exp(-x))
 *    = log(exp(x)) - x * z + log(1 + exp(-x))
 *    = - x * z + log(1 + exp(x))
 * Hence, to ensure stability and avoid overflow, the implementation uses this
 * equivalent formulation
 *    max(x, 0) - x * z + log(1 + exp(-abs(x)))
 *
 * @param labels The labels.
 * @param logits The logits.
 */
function sigmoidCrossEntropyWithLogits(labels, logits) {
  if (!_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(labels.shape, logits.shape)) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(`logits and labels must have the same shape, but got shapes ` + `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);
  }
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    // The logistic loss formula from above is
    //   x - x * z + log(1 + exp(-x))
    // For x < 0, a more numerically stable formula is
    //   -x * z + log(1 + exp(x))
    // Note that these two expressions can be combined into the following:
    //   max(x, 0) - x * z + log(1 + exp(-abs(x)))
    const reluLogits = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu(logits);
    const negAbsLogits = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.neg(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs(logits));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(reluLogits, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(logits, labels)), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log1p(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.exp(negAbsLogits)));
  });
}
function binaryCrossentropy(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    let y;
    y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(yPred, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), 1 - (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)());
    y = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(y, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(1, y)));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);
  });
}
function kullbackLeiblerDivergence(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const clippedTrue = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(yTrue, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), 1);
    const clippedPred = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue(yPred, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), 1);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(yTrue, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(clippedTrue, clippedPred))), -1);
  });
}
function poisson(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const logPred = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add((0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), yPred));
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(yPred, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(yTrue, logPred)), -1);
  });
}
function cosineProximity(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const trueNormalized = l2Normalize(yTrue, -1);
    const predNormalized = l2Normalize(yPred, -1);
    const trueXPred = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(trueNormalized, predNormalized);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.neg(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(trueXPred, -1));
  });
}
const mse = meanSquaredError;
const MSE = meanSquaredError;
const mae = meanAbsoluteError;
const MAE = meanAbsoluteError;
const mape = meanAbsolutePercentageError;
const MAPE = meanAbsolutePercentageError;
const msle = meanSquaredLogarithmicError;
const MSLE = meanSquaredLogarithmicError;
const kld = kullbackLeiblerDivergence;
const KLD = kullbackLeiblerDivergence;
const cosine = cosineProximity;
// TODO(michaelterry): Add deserialize() function.
const lossesMap = {
  meanSquaredError,
  meanAbsoluteError,
  meanAbsolutePercentageError,
  meanSquaredLogarithmicError,
  squaredHinge,
  hinge,
  categoricalHinge,
  logcosh,
  categoricalCrossentropy,
  sparseCategoricalCrossentropy,
  binaryCrossentropy,
  kullbackLeiblerDivergence,
  poisson,
  cosineProximity
};
// Porting note: This diverges from the PyKeras implementation and may need to
// change based on (de)serialization requirements.
function get(identifierOrFn) {
  if (typeof identifierOrFn === 'string') {
    if (identifierOrFn in lossesMap) {
      return lossesMap[identifierOrFn];
    }
    let errMsg = `Unknown loss ${identifierOrFn}`;
    if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {
      errMsg = `Unknown loss ${identifierOrFn}. ` + 'Use "categoricalCrossentropy" as the string name for ' + 'tf.losses.softmaxCrossEntropy';
    }
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValueError(errMsg);
  } else {
    return identifierOrFn;
  }
}

/***/ }),

/***/ 69384:
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/metrics.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAE": () => (/* binding */ MAE),
/* harmony export */   "MAPE": () => (/* binding */ MAPE),
/* harmony export */   "MSE": () => (/* binding */ MSE),
/* harmony export */   "binaryAccuracy": () => (/* binding */ binaryAccuracy),
/* harmony export */   "binaryCrossentropy": () => (/* binding */ binaryCrossentropy),
/* harmony export */   "categoricalAccuracy": () => (/* binding */ categoricalAccuracy),
/* harmony export */   "categoricalCrossentropy": () => (/* binding */ categoricalCrossentropy),
/* harmony export */   "cosine": () => (/* binding */ cosine),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "getLossOrMetricName": () => (/* binding */ getLossOrMetricName),
/* harmony export */   "mae": () => (/* binding */ mae),
/* harmony export */   "mape": () => (/* binding */ mape),
/* harmony export */   "metricsMap": () => (/* binding */ metricsMap),
/* harmony export */   "mse": () => (/* binding */ mse),
/* harmony export */   "precision": () => (/* binding */ precision),
/* harmony export */   "recall": () => (/* binding */ recall),
/* harmony export */   "sparseCategoricalAccuracy": () => (/* binding */ sparseCategoricalAccuracy),
/* harmony export */   "sparseCategoricalCrossentropy": () => (/* binding */ sparseCategoricalCrossentropy),
/* harmony export */   "sparseTopKCategoricalAccuracy": () => (/* binding */ sparseTopKCategoricalAccuracy),
/* harmony export */   "topKCategoricalAccuracy": () => (/* binding */ topKCategoricalAccuracy)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/tfjs_backend */ 81579);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ 22802);
/* harmony import */ var _losses__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./losses */ 56648);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Built-in metrics.
 */








function binaryAccuracy(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const threshold = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(.5, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(yPred));
    const yPredThresholded = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greater(yPred, threshold), yTrue.dtype);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yTrue, yPredThresholded), -1);
  });
}
function categoricalAccuracy(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.argMax(yTrue, -1), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.argMax(yPred, -1)), 'float32'));
}
function truePositives(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalAnd(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yTrue, 1), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yPred, 1))), 'float32');
  });
}
function falseNegatives(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalAnd(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yTrue, 1), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yPred, 0))), 'float32');
  });
}
function falsePositives(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalAnd(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yTrue, 0), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yPred, 1))), 'float32');
  });
}
function precision(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const tp = truePositives(yTrue, yPred);
    const fp = falsePositives(yTrue, yPred);
    const denominator = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(tp, fp);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.where(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greater(denominator, 0), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(tp, denominator), 0), 'float32');
  });
}
function recall(yTrue, yPred) {
  return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const tp = truePositives(yTrue, yPred);
    const fn = falseNegatives(yTrue, yPred);
    const denominator = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(tp, fn);
    return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.where(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greater(denominator, 0), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(tp, denominator), 0), 'float32');
  });
}
function binaryCrossentropy(yTrue, yPred) {
  return (0,_losses__WEBPACK_IMPORTED_MODULE_3__.binaryCrossentropy)(yTrue, yPred);
}
function sparseCategoricalAccuracy(yTrue, yPred) {
  if (yTrue.rank === yPred.rank) {
    yTrue = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.squeeze(yTrue, [yTrue.rank - 1]);
  }
  yPred = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.argMax(yPred, -1);
  if (yPred.dtype !== yTrue.dtype) {
    yPred = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(yPred, yTrue.dtype);
  }
  return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal(yTrue, yPred), 'float32');
}
function topKCategoricalAccuracy(yTrue, yPred) {
  throw new _errors__WEBPACK_IMPORTED_MODULE_2__.NotImplementedError();
}
function sparseTopKCategoricalAccuracy(yTrue, yPred) {
  throw new _errors__WEBPACK_IMPORTED_MODULE_2__.NotImplementedError();
}
// Aliases.
const mse = _losses__WEBPACK_IMPORTED_MODULE_3__.meanSquaredError;
const MSE = _losses__WEBPACK_IMPORTED_MODULE_3__.meanSquaredError;
const mae = _losses__WEBPACK_IMPORTED_MODULE_3__.meanAbsoluteError;
const MAE = _losses__WEBPACK_IMPORTED_MODULE_3__.meanAbsoluteError;
const mape = _losses__WEBPACK_IMPORTED_MODULE_3__.meanAbsolutePercentageError;
const MAPE = _losses__WEBPACK_IMPORTED_MODULE_3__.meanAbsolutePercentageError;
const categoricalCrossentropy = _losses__WEBPACK_IMPORTED_MODULE_3__.categoricalCrossentropy;
const cosine = _losses__WEBPACK_IMPORTED_MODULE_3__.cosineProximity;
const sparseCategoricalCrossentropy = _losses__WEBPACK_IMPORTED_MODULE_3__.sparseCategoricalCrossentropy;
// TODO(cais, nielsene): Add serialize().
const metricsMap = {
  binaryAccuracy,
  categoricalAccuracy,
  precision,
  categoricalCrossentropy,
  sparseCategoricalCrossentropy,
  mse,
  MSE,
  mae,
  MAE,
  mape,
  MAPE,
  cosine
};
function get(identifier) {
  if (typeof identifier === 'string' && identifier in metricsMap) {
    return metricsMap[identifier];
  } else if (typeof identifier !== 'string' && identifier != null) {
    return identifier;
  } else {
    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Unknown metric ${identifier}`);
  }
}
/**
 * Get the shortcut function name.
 *
 * If the fn name is a string,
 *   directly return the string name.
 * If the function is included in metricsMap or lossesMap,
 *   return key of the map.
 *   - If the function relative to multiple keys,
 *     return the first found key as the function name.
 *   - If the function exists in both lossesMap and metricsMap,
 *     search lossesMap first.
 * If the function is not included in metricsMap or lossesMap,
 *   return the function name.
 *
 * @param fn loss function, metric function, or short cut name.
 * @returns Loss or Metric name in string.
 */
function getLossOrMetricName(fn) {
  _utils_generic_utils__WEBPACK_IMPORTED_MODULE_4__.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);
  if (typeof fn === 'string') {
    return fn;
  } else {
    let fnName;
    for (const key of Object.keys(_losses__WEBPACK_IMPORTED_MODULE_3__.lossesMap)) {
      if (_losses__WEBPACK_IMPORTED_MODULE_3__.lossesMap[key] === fn) {
        fnName = key;
        break;
      }
    }
    if (fnName !== undefined) {
      return fnName;
    }
    for (const key of Object.keys(metricsMap)) {
      if (metricsMap[key] === fn) {
        fnName = key;
        break;
      }
    }
    if (fnName !== undefined) {
      return fnName;
    }
    return fn.name;
  }
}

/***/ }),

/***/ 45207:
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/models.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sequential": () => (/* binding */ Sequential),
/* harmony export */   "loadLayersModel": () => (/* binding */ loadLayersModel),
/* harmony export */   "loadLayersModelFromIOHandler": () => (/* binding */ loadLayersModelFromIOHandler),
/* harmony export */   "modelFromJSON": () => (/* binding */ modelFromJSON)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backend/state */ 6337);
/* harmony import */ var _engine_input_layer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./engine/input_layer */ 45367);
/* harmony import */ var _engine_topology__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./engine/topology */ 59996);
/* harmony import */ var _engine_training__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./engine/training */ 64970);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors */ 22802);
/* harmony import */ var _layers_serialization__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./layers/serialization */ 49796);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);
/* harmony import */ var _utils_serialization_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/serialization_utils */ 83903);
/* harmony import */ var _utils_types_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/types_utils */ 13124);

/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original source keras/models.py */










/**
 * Parses a JSON model configuration file and returns a model instance.
 *
 * ```js
 * // This example shows how to serialize a model using `toJSON()` and
 * // deserialize it as another model using `tf.models.modelFromJSON()`.
 * // Note: this example serializes and deserializes only the topology
 * // of the model; the weights of the loaded model will be different
 * // from those of the the original model, due to random weight
 * // initialization.
 * // To load the topology and weights of a model, use `tf.loadLayersModel()`.
 * const model1 = tf.sequential();
 * model1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));
 * // Serialize `model1` as a JSON object.
 * const model1JSON = model1.toJSON(null, false);
 * model1.summary();
 *
 * const model2 = await tf.models.modelFromJSON(model1JSON);
 * model2.summary();
 * ```
 *
 *  @param modelAndWeightsConfig JSON object or string encoding a model and
 *       weights configuration. It can also be only the topology JSON of the
 *       model, in which case the weights will not be loaded.
 *  @param custom_objects Optional dictionary mapping names
 *       (strings) to custom classes or functions to be
 *       considered during deserialization.
 * @returns A TensorFlow.js Layers `tf.LayersModel` instance (uncompiled).
 */
function modelFromJSON(_x, _x2) {
  return _modelFromJSON.apply(this, arguments);
}
/**
 * Load a model composed of Layer objects, including its topology and optionally
 * weights. See the Tutorial named "How to import a Keras Model" for usage
 * examples.
 *
 * This method is applicable to:
 *
 * 1. Models created with the `tf.layers.*`, `tf.sequential`, and
 * `tf.model` APIs of TensorFlow.js and later saved with the
 * `tf.LayersModel.save` method.
 * 2. Models converted from Keras or TensorFlow tf.keras using the
 * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).
 *
 * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted
 * forms. For those models, use `tf.loadGraphModel`.
 *
 * Example 1. Load a model from an HTTP server.
 *
 * ```js
 * const model = await tf.loadLayersModel(
 *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');
 * model.summary();
 * ```
 *
 * Example 2: Save `model`'s topology and weights to browser [local
 * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('localstorage://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 3. Saving `model`'s topology and weights to browser
 * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
 * then load it back.
 *
 * ```js
 * const model = tf.sequential(
 *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
 * console.log('Prediction from original model:');
 * model.predict(tf.ones([1, 3])).print();
 *
 * const saveResults = await model.save('indexeddb://my-model-1');
 *
 * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
 * console.log('Prediction from loaded model:');
 * loadedModel.predict(tf.ones([1, 3])).print();
 * ```
 *
 * Example 4. Load a model from user-selected files from HTML
 * [file input
 * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).
 *
 * ```js
 * // Note: this code snippet will not work without the HTML elements in the
 * //   page
 * const jsonUpload = document.getElementById('json-upload');
 * const weightsUpload = document.getElementById('weights-upload');
 *
 * const model = await tf.loadLayersModel(
 *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));
 * ```
 *
 * @param pathOrIOHandler Can be either of the two formats
 *   1. A string path to the `ModelAndWeightsConfig` JSON describing
 *      the model in the canonical TensorFlow.js format. For file://
 *      (tfjs-node-only), http:// and https:// schemas, the path can be
 *      either absolute or relative. The content of the JSON file is assumed to
 *      be a JSON object with the following fields and values:
 *      - 'modelTopology': A JSON object that can be either of:
 *        1. a model architecture JSON consistent with the format of the return
 *            value of `keras.Model.to_json()`
 *        2. a full model JSON in the format of `keras.models.save_model()`.
 *      - 'weightsManifest': A TensorFlow.js weights manifest.
 *      See the Python converter function `save_model()` for more details.
 *      It is also assumed that model weights can be accessed from relative
 *      paths described by the `paths` fields in weights manifest.
 *   2. A `tf.io.IOHandler` object that loads model artifacts with its `load`
 *      method.
 * @param options Optional configuration arguments for the model loading,
 *   including:
 *   - `strict`: Require that the provided weights exactly match those required
 *     by the layers.  Default true.  Passing false means that both extra
 *     weights and missing weights will be silently ignored.
 *   - `onProgress`: A progress callback of the form:
 *     `(fraction: number) => void`. This callback can be used to monitor the
 *     model-loading process.
 * @returns A `Promise` of `tf.LayersModel`, with the topology and weights
 *     loaded.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */
function _modelFromJSON() {
  _modelFromJSON = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (modelAndWeightsConfig, customObjects) {
    if (!('modelTopology' in modelAndWeightsConfig)) {
      modelAndWeightsConfig = {
        modelTopology: modelAndWeightsConfig
      };
    }
    modelAndWeightsConfig = modelAndWeightsConfig;
    let modelTopology = modelAndWeightsConfig.modelTopology;
    if (modelTopology['model_config'] != null) {
      // If the model-topology JSON contains a 'model_config' field, then it is
      // a full model JSON (e.g., from `keras.Model.save()`), which contains
      // not only the model's architecture in its 'model_config' field, but
      // additional information such as the model's optimizer. We use only the
      // 'model_config' field currently.
      modelTopology = modelTopology['model_config'];
    }
    const tsConfig = (0,_utils_serialization_utils__WEBPACK_IMPORTED_MODULE_9__.convertPythonicToTs)(modelTopology);
    const model = (0,_layers_serialization__WEBPACK_IMPORTED_MODULE_7__.deserialize)(tsConfig, customObjects);
    if (modelAndWeightsConfig.weightsManifest != null) {
      // Load the weight values keyed by the original tensor names in the model
      // file that was loaded.  These should match the keys of the weight
      // manifest.
      const weightValues = yield _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map(weight => weight.originalName));
      // Map the weights to the unique tensor names generated during model loading
      const uniqueWeightValues = {};
      for (const weight of model.weights) {
        uniqueWeightValues[weight.originalName] = weightValues[weight.originalName];
      }
      model.loadWeights(uniqueWeightValues);
      // Dispose temporary weight values.
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose)(weightValues);
    }
    return model;
  });
  return _modelFromJSON.apply(this, arguments);
}
function loadLayersModel(_x3, _x4) {
  return _loadLayersModel.apply(this, arguments);
}
/**
 * Load a model and optionally its weights, using an IOHandler object.
 *
 * @param handler The instance of `IOHandler` to be used during the model
 *   loading.
 * @param customObjects Any optional custom objects to be used during model
 *   loading.
 * @param strict Whether the weight loading will be done in strict mode.
 *   Default: `true`.
 */
function _loadLayersModel() {
  _loadLayersModel = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (pathOrIOHandler, options) {
    if (options == null) {
      options = {};
    }
    if (typeof pathOrIOHandler === 'string') {
      const handlers = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.getLoadHandlers(pathOrIOHandler, options);
      if (handlers.length === 0) {
        // For backward compatibility: if no load handler can be found,
        // assume it is a relative http path.
        // TODO(cais): Reformat the args into a single `LoadOptions` once the core
        // is refactored.
        handlers.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.browserHTTPRequest(pathOrIOHandler, options));
      } else if (handlers.length > 1) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError(`Found more than one (${handlers.length}) load handlers for ` + `URL '${pathOrIOHandler}'`);
      }
      pathOrIOHandler = handlers[0];
    }
    return loadLayersModelFromIOHandler(pathOrIOHandler, undefined, options);
  });
  return _loadLayersModel.apply(this, arguments);
}
function loadLayersModelFromIOHandler(_x5, _x6, _x7) {
  return _loadLayersModelFromIOHandler.apply(this, arguments);
}
function _loadLayersModelFromIOHandler() {
  _loadLayersModelFromIOHandler = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (handler, customObjects, options) {
    if (options == null) {
      options = {};
    }
    if (handler.load == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');
    }
    const artifacts = yield handler.load();
    let modelTopology = artifacts.modelTopology;
    if (modelTopology['model_config'] != null) {
      modelTopology = modelTopology['model_config'];
    }
    const strict = options.strict == null ? true : options.strict;
    // If weights are provided and the weight-loading mode is strict, use
    // fast weight initialization. This skips costly initializers such as
    // 'orthogonal' and saves unnecessary computation in cases where
    // the initialized weight values will immediately be overwritten by
    // loaded weight values.
    const fastWeightInit = artifacts.weightData != null && artifacts.weightSpecs != null && strict;
    const model = (0,_layers_serialization__WEBPACK_IMPORTED_MODULE_7__.deserialize)((0,_utils_serialization_utils__WEBPACK_IMPORTED_MODULE_9__.convertPythonicToTs)(modelTopology), customObjects, fastWeightInit);
    const trainingConfig = artifacts.trainingConfig;
    if (trainingConfig != null) {
      model.loadTrainingConfig(trainingConfig);
    }
    if (artifacts.userDefinedMetadata != null) {
      model.setUserDefinedMetadata(artifacts.userDefinedMetadata);
    }
    // If weightData is present, load the weights into the model.
    if (artifacts.weightData != null) {
      // Loading weights requires weightSpecs.
      if (artifacts.weightSpecs == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('LayersModel artifacts contains weight data, but not weight specs. ' + 'Therefore loading of weights cannot proceed.');
      }
      const {
        modelWeights,
        optimizerWeights
      } = decodeModelAndOptimizerWeights(artifacts.weightData, artifacts.weightSpecs);
      model.loadWeights(modelWeights, strict);
      if (model.optimizer != null && optimizerWeights.length > 0) {
        yield model.optimizer.setWeights(optimizerWeights);
      }
      // Dispose temporary weight values.
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose)(modelWeights);
      (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose)(optimizerWeights.map(w => w.tensor));
    }
    return model;
  });
  return _loadLayersModelFromIOHandler.apply(this, arguments);
}
function decodeModelAndOptimizerWeights(buffer, specs) {
  const name2Tensor = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.decodeWeights(buffer, specs);
  const modelWeights = {};
  const optimizerWeights = [];
  specs.forEach(spec => {
    if (spec.group === 'optimizer') {
      optimizerWeights.push({
        name: spec.name,
        tensor: name2Tensor[spec.name]
      });
    } else {
      modelWeights[spec.name] = name2Tensor[spec.name];
    }
  });
  return {
    modelWeights,
    optimizerWeights
  };
}
/**
 * A model with a stack of layers, feeding linearly from one to the next.
 *
 * `tf.sequential` is a factory function that creates an instance of
 * `tf.Sequential`.
 *
 * ```js
 *  // Define a model for linear regression.
 *  const model = tf.sequential();
 *  model.add(tf.layers.dense({units: 1, inputShape: [1]}));
 *
 *  // Prepare the model for training: Specify the loss and the optimizer.
 *  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
 *
 *  // Generate some synthetic data for training.
 *  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);
 *  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);
 *
 *  // Train the model using the data then do inference on a data point the
 *  // model hasn't seen:
 *  await model.fit(xs, ys);
 *  model.predict(tf.tensor2d([5], [1, 1])).print();
 * ```
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */
class Sequential extends _engine_training__WEBPACK_IMPORTED_MODULE_5__.LayersModel {
  constructor(args) {
    super({
      inputs: [],
      outputs: []
    });
    args = args || {};
    this.trainable = true;
    this.built = false;
    // Set model name.
    this.name = args.name != null ? args.name : (0,_backend_state__WEBPACK_IMPORTED_MODULE_2__.getUid)('sequential_');
    // Add to the model any layers passed to the constructor.
    if (args.layers != null) {
      for (const layer of args.layers) {
        this.add(layer);
      }
    }
  }
  // Helper function to Sequential.add  Throws if the new output shape will be
  // invalid.
  checkShape(layer) {
    const shape = layer.inboundNodes[0].outputTensors[0].shape;
    if (shape.some(x => x < 0)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('Negative dimension size caused by adding layer ' + `${layer.name} with input shape [` + `${layer.inboundNodes[0].inputTensors[0].shape}]`);
    }
  }
  /**
   * Adds a layer instance on top of the layer stack.
   *
   * ```js
   *  const model = tf.sequential();
   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
   *  // Note that the untrained model is random at this point.
   *  model.predict(tf.randomNormal([10, 1])).print();
   * ```
   * @param layer Layer instance.
   *
   * @exception ValueError In case the `layer` argument does not know its
   * input shape.
   * @exception ValueError In case the `layer` argument has multiple output
   *   tensors, or is already connected somewhere else (forbidden in
   *   `Sequential` models).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  add(layer) {
    const isLayerModelInstance = layer instanceof Sequential || layer instanceof _engine_training__WEBPACK_IMPORTED_MODULE_5__.LayersModel;
    let modelLayer;
    if (isLayerModelInstance) {
      modelLayer = layer;
      if (modelLayer.outputs.length !== 1) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');
      }
      if (modelLayer.inputs.length !== 1) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('All layers in a Sequential model ' + 'should have a single input tensor. ' + 'For multi-input layers, ' + 'use the functional API.');
      }
    }
    if (this.outputs.length === 0) {
      // first layer in model: check that it is an input layer
      if (layer.inboundNodes.length === 0) {
        // create an input layer
        if (layer.batchInputShape == null) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('The first layer in a Sequential model must ' + 'get an `inputShape` or `batchInputShape` argument.');
        }
        // Instantiate the input layer.
        const x = (0,_engine_input_layer__WEBPACK_IMPORTED_MODULE_3__.Input)({
          batchShape: layer.batchInputShape,
          dtype: layer.dtype,
          name: layer.name + '_input'
        });
        // This will build the current layer and create the node connecting
        // the current layer to the input layer we just created.
        layer.apply(x);
      }
      if (isLayerModelInstance) {
        this.outputs = modelLayer.outputs;
        this.inputs = modelLayer.inputs;
      } else {
        if (layer.inboundNodes.length !== 1) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('A layer added to a Sequential model must not already be ' + `connected somewhere else. LayersModel received layer ${layer.name} ` + `which has ${layer.inboundNodes.length} pre-existing inbound ` + 'connections.');
        }
        if (layer.inboundNodes[0].outputTensors.length !== 1) {
          throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');
        }
        this.checkShape(layer);
        this.outputs = [layer.inboundNodes[0].outputTensors[0]];
        this.inputs = (0,_engine_topology__WEBPACK_IMPORTED_MODULE_4__.getSourceInputs)(this.outputs[0]);
      }
      this.inboundNodes = [];
      // We create an input node, which we will keep updated
      // as we add more layers.
      // (This call has side effects.)
      // tslint:disable-next-line:no-unused-expression
      new _engine_topology__WEBPACK_IMPORTED_MODULE_4__.Node({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        // no model-level masking for now
        inputMasks: _utils_generic_utils__WEBPACK_IMPORTED_MODULE_8__.pyListRepeat(null, this.inputs.length),
        outputMasks: [null],
        inputShapes: this.inputs.map(x => x.shape),
        outputShapes: this.outputs[0].shape
      });
    } else {
      const outputTensor = layer.apply(this.outputs[0]);
      if (Array.isArray(outputTensor)) {
        throw new TypeError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');
      }
      this.checkShape(layer);
      this.outputs = [outputTensor];
      // update self.inbound_nodes
      this.inboundNodes[0].outputTensors = this.outputs;
      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(layer);
    this.built = false;
  }
  /**
   * Removes the last layer in the model.
   *
   * @exception TypeError if there are no layers in the model.
   */
  pop() {
    if (this.layers.length === 0) {
      throw new TypeError('There are no layers in the model.');
    }
    this.layers.pop();
    if (this.layers.length === 0) {
      this.outputs = [];
      this.inboundNodes = [];
      this.outboundNodes = [];
    } else {
      const lastLayerIndex = this.layers.length - 1;
      this.layers[lastLayerIndex].outboundNodes = [];
      this.outputs = [this.layers[lastLayerIndex].output];
      // update self.inbound_nodes
      this.inboundNodes[0].outputTensors = this.outputs;
      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(inputs, kwargs) {
    if (this.model == null) {
      this.build();
    }
    return this.model.call(inputs, kwargs);
  }
  build(inputShape) {
    // Call `getExactlyOneShape` without using its return value,
    // to verify that exactly one input shape is provided.
    (0,_utils_types_utils__WEBPACK_IMPORTED_MODULE_10__.getExactlyOneShape)(inputShape);
    if (this.inputs.length === 0 || this.outputs.length === 0) {
      throw new TypeError('Sequential model cannot be built: model is empty.' + ' Add some layers first.');
    }
    // actually create the model
    this.model = new _engine_training__WEBPACK_IMPORTED_MODULE_5__.LayersModel({
      inputs: this.inputs,
      outputs: this.outputs[0],
      name: this.name + '_model'
    });
    this.model.trainable = this.trainable;
    // mirror model attributes
    this.supportsMasking = this.model.supportsMasking;
    // TODO(michaelterry): Add caches
    this.inputLayers = this.model.inputLayers;
    this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;
    this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;
    this.outputLayers = this.model.outputLayers;
    this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;
    this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;
    this.nodesByDepth = this.model.nodesByDepth;
    this.containerNodes = this.model.containerNodes;
    this.outputNames = this.model.outputNames;
    this.inputNames = this.model.inputNames;
    // TODO(michaelterry): Add feedInputNames, feedInputs, if needed.
    // TODO(michaelterry): Add callbackModel if needed.
    this.built = true;
  }
  countParams() {
    if (!this.built) {
      this.build();
    }
    return super.countParams();
  }
  /**
   * Print a text summary of the Sequential model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - The total number of trainable and non-trainable parameters of the
   * model.
   *
   * ```js
   * const model = tf.sequential();
   * model.add(
   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
   *
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(lineLength, positions, printFn = console.log) {
    if (!this.built) {
      this.build();
    }
    super.summary(lineLength, positions, printFn);
  }
  /**
   * Sets the weights of the model.
   *
   * @param weights Should be a list of Tensors with shapes and types matching
   *   the output of `model.getWeights()`.
   */
  setWeights(weights) {
    if (this.model == null) {
      this.build();
    }
    this.model.setWeights(weights);
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   * });
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateConfig`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(x, y, args = {}) {
    if (!this.built) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('The model needs to be compiled before being used.');
    }
    return this.model.evaluate(x, y, args);
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluateDataset(dataset, args) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this.built) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('The model needs to be compiled before being used.');
      }
      return _this.model.evaluateDataset(dataset, args);
    })();
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([2, 10])).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param conifg A `ModelPredictConfig` object containing optional fields.
   *
   * @return `tf.Tensor`(s) of predictions.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(x, args = {}) {
    if (this.model == null) {
      this.build();
    }
    return this.model.predict(x, args);
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * @param x: Input samples, as a Tensor, or list of Tensors (if the model
   *   has multiple inputs).
   * @return Tensor(s) of predictions
   */
  predictOnBatch(x) {
    if (this.model == null) {
      this.build();
    }
    return this.model.predictOnBatch(x);
  }
  /**
   * See `LayersModel.compile`.
   *
   * @param args
   */
  compile(args) {
    this.build();
    this.model.compile(args);
    this.optimizer_ = this.model.optimizer;
    // tslint:disable-next-line:no-any
    this.isOptimizerOwned = this.model.isOptimizerOwned;
    this.loss = this.model.loss;
    this.metrics = this.model.metrics;
    // TODO(cais): Add this.lossWeights, this.sampleWeightMode,
    //   this.weightedMetrics, this.targets.
    this.metricsTensors = this.model.metricsTensors;
    this.metricsNames = this.model.metricsNames;
    // TODO(cais): Add sampleWeights.
  }

  get optimizer() {
    return this.model == null ? undefined : this.model.optimizer;
  }
  set optimizer(optimizer) {
    this.model.optimizer = optimizer;
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a dataset).
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   *   epochs: 3
   * });
   * console.log(history.history.loss[0]);
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you can
   * also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named, you
   *  can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args  A `ModelFitConfig`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  fit(x, y, args = {}) {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this2.built) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('The model needs to be compiled before ' + 'being used.');
      }
      return _this2.model.fit(x, y, args);
    })();
  }
  /**
   * Trains the model using a dataset object.
   *
   * ```js
   * const xArray = [
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   * ];
   * const yArray = [1, 1, 1, 1];
   * // Create a dataset from the JavaScript array.
   * const xDataset = tf.data.array(xArray);
   * const yDataset = tf.data.array(yArray);
   * // Zip combines the `x` and `y` Datasets into a single Dataset, the
   * // iterator of which will return an object containing of two tensors,
   * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
   * // four such samples into a single object, with the same keys now pointing
   * // to tensors that hold 4 examples, organized along the batch dimension.
   * // The call to `shuffle(4)` causes each iteration through the dataset to
   * // happen in a different order.  The size of the shuffle window is 4.
   * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
   *     .batch(4)
   *     .shuffle(4);
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fitDataset(xyDataset, {
   *   epochs: 4,
   *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
   * });
   * ```
   *
   * @param dataset A dataset object. Its `iterator()` method is expected to
   *   generate a dataset iterator object, the `next()` method of which is
   *   expected to produce data batches for evaluation. The return value of the
   *   `next()` call ought to contain a boolean `done` field and a `value`
   *   field.
   *
   *   The `value` field is expected to be an object of with fields
   *   `xs` and `ys`, which point to the feature tensor and the target tensor,
   *   respectively. This case is for models with exactly one input and one
   *   output (e.g. a sequential model). For example:
   *   ```js
   *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
   *   ```
   *
   *   If the model has multiple inputs, the `xs` field of `value` should
   *   be an object mapping input names to their respective feature tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: {
   *         input_1: xsTensor1,
   *         input_2: xsTensor2
   *       },
   *       ys: ysTensor
   *     },
   *     done: false
   *   }
   *   ```
   *   If the model has multiple outputs, the `ys` field of `value` should
   *   be an object mapping output names to their respective target tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: xsTensor,
   *       ys: {
   *         output_1: ysTensor1,
   *         output_2: ysTensor2
   *       },
   *     },
   *     done: false
   *   }
   *   ```
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  fitDataset(dataset, args) {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this3.built) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.RuntimeError('The model needs to be compiled before ' + 'being used.');
      }
      return _this3.model.fitDataset(dataset, args);
    })();
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  trainOnBatch(x, y) {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this4.model.trainOnBatch(x, y);
    })();
  }
  /* See parent class for JsDoc */
  /** @nocollapse */
  static fromConfig(cls, config, customObjects = {}, fastWeightInit = false) {
    let configArray;
    let extraModelConfig = {};
    if (config instanceof Array) {
      if (!(config[0].className != null) || config[0]['className'] === 'Merge') {
        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('Legacy serialization format not supported yet.');
      }
      configArray = config;
    } else {
      _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(config['layers'] != null, () => `When the config data for a Sequential model is not an Array, ` + `it must be an Object that contains the 'layers' field.`);
      configArray = config['layers'];
      delete config['layers'];
      extraModelConfig = config;
    }
    const model = new cls(extraModelConfig);
    if (!(model instanceof Sequential)) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.NotImplementedError(`Sequential.fromConfig called on non-Sequential input: ${model}`);
    }
    for (const conf of configArray) {
      const customObjects = undefined;
      const layer = (0,_layers_serialization__WEBPACK_IMPORTED_MODULE_7__.deserialize)(conf, customObjects, fastWeightInit);
      if (fastWeightInit) {
        layer.setFastWeightInitDuringBuild(true);
      }
      model.add(layer);
    }
    return model;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const model = tf.sequential();
   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10 values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(stop) {
    // TODO(cais): When refactoring to remove the composition pattern happens,
    // remove this method overriding.
    if (this.model == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('Cannot set the stopTraining property of a sequential model before ' + 'it is compiled.');
    }
    this.model.stopTraining = stop;
  }
  get stopTraining() {
    if (this.model == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_6__.ValueError('Cannot get the stopTraining property of a sequential model before ' + 'it is compiled.');
    }
    return this.model.stopTraining;
  }
  // TODO(cais): Override get trainableWeights() here
  // tslint:disable-next-line:no-any
  getConfig() {
    // NOTE(cais): We override the return type of getConfig() to `any` here,
    //   because the `Sequential` class is a special case among `Container`
    //   subtypes in that its getConfig() method returns an Array (not a
    //   dict).
    const layers = [];
    for (const layer of this.layers) {
      const dict = {};
      dict['className'] = layer.getClassName();
      dict['config'] = layer.getConfig();
      layers.push(dict);
    }
    return {
      name: this.name,
      layers
    };
  }
}
/** @nocollapse */
Sequential.className = 'Sequential';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.serialization.registerClass(Sequential);

/***/ }),

/***/ 9478:
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOptimizer": () => (/* binding */ getOptimizer)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/common */ 44906);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ 22802);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Optimizers.
 */



// Add (de)serialize()
// Porting note: This diverges from the PyKeras implementation and may need to
// change based on (de)serialization requirements.
function getOptimizer(identifier) {
  const optimizerMap = {
    'Adagrad': () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.train.adagrad(0.01),
    'Adadelta': () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.train.adadelta(1, 0.95, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)()),
    'Adam': () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.train.adam(0.001, 0.9, 0.999, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)()),
    'Adamax': () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.train.adamax(0.002, 0.9, 0.999, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)(), 0),
    'RMSProp': () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.train.rmsprop(0.001, 0.9, 0, (0,_backend_common__WEBPACK_IMPORTED_MODULE_1__.epsilon)()),
    'SGD': () => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.train.sgd(0.01)
  };
  optimizerMap['adagrad'] = optimizerMap['Adagrad'];
  optimizerMap['adadelta'] = optimizerMap['Adadelta'];
  optimizerMap['adam'] = optimizerMap['Adam'];
  optimizerMap['adamax'] = optimizerMap['Adamax'];
  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];
  optimizerMap['sgd'] = optimizerMap['SGD'];
  if (identifier in optimizerMap) {
    return optimizerMap[identifier]();
  }
  throw new _errors__WEBPACK_IMPORTED_MODULE_2__.ValueError(`Unknown Optimizer ${identifier}`);
}

/***/ }),

/***/ 97436:
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L1L2": () => (/* binding */ L1L2),
/* harmony export */   "REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP": () => (/* binding */ REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP),
/* harmony export */   "Regularizer": () => (/* binding */ Regularizer),
/* harmony export */   "deserializeRegularizer": () => (/* binding */ deserializeRegularizer),
/* harmony export */   "getRegularizer": () => (/* binding */ getRegularizer),
/* harmony export */   "l1": () => (/* binding */ l1),
/* harmony export */   "l2": () => (/* binding */ l2),
/* harmony export */   "serializeRegularizer": () => (/* binding */ serializeRegularizer)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/tfjs_backend */ 81579);
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/generic_utils */ 14218);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* original source: keras/regularizers.py */




function assertObjectArgs(args) {
  if (args != null && typeof args !== 'object') {
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` + `object, but received: ${args}`);
  }
}
/**
 * Regularizer base class.
 */
class Regularizer extends _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.Serializable {}
class L1L2 extends Regularizer {
  constructor(args) {
    super();
    assertObjectArgs(args);
    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;
    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;
    this.hasL1 = this.l1 !== 0;
    this.hasL2 = this.l2 !== 0;
  }
  /**
   * Porting note: Renamed from __call__.
   * @param x Variable of which to calculate the regularization score.
   */
  apply(x) {
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      let regularization = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros)([1]);
      if (this.hasL1) {
        regularization = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add)(regularization, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(this.l1, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs)(x))));
      }
      if (this.hasL2) {
        regularization = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add)(regularization, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(this.l2, _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__.square(x))));
      }
      return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape(regularization, []);
    });
  }
  getConfig() {
    return {
      'l1': this.l1,
      'l2': this.l2
    };
  }
  /** @nocollapse */
  static fromConfig(cls, config) {
    return new cls({
      l1: config['l1'],
      l2: config['l2']
    });
  }
}
/** @nocollapse */
L1L2.className = 'L1L2';
_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(L1L2);
function l1(args) {
  assertObjectArgs(args);
  return new L1L2({
    l1: args != null ? args.l1 : null,
    l2: 0
  });
}
function l2(args) {
  assertObjectArgs(args);
  return new L1L2({
    l2: args != null ? args.l2 : null,
    l1: 0
  });
}
// Maps the JavaScript-like identifier keys to the corresponding keras symbols.
const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
  'l1l2': 'L1L2'
};
function serializeRegularizer(constraint) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__.serializeKerasObject)(constraint);
}
function deserializeRegularizer(config, customObjects = {}) {
  return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_2__.deserializeKerasObject)(config, _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');
}
function getRegularizer(identifier) {
  if (identifier == null) {
    return null;
  }
  if (typeof identifier === 'string') {
    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;
    const config = {
      className,
      config: {}
    };
    return deserializeRegularizer(config);
  } else if (identifier instanceof Regularizer) {
    return identifier;
  } else {
    return deserializeRegularizer(identifier);
  }
}

/***/ }),

/***/ 15360:
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/user_defined_metadata.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH": () => (/* binding */ MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH),
/* harmony export */   "checkUserDefinedMetadata": () => (/* binding */ checkUserDefinedMetadata),
/* harmony export */   "plainObjectCheck": () => (/* binding */ plainObjectCheck)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/** Utility functions related to user-defined metadata. */
// Maximum recommended serialized size for user-defined metadata.
// Beyond this limit, a warning message will be printed during model loading and
// saving.
const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;
/**
 * Check validity of user-defined metadata.
 *
 * @param userDefinedMetadata
 * @param modelName Name of the model that the user-defined metadata belongs to.
 *   Used during construction of error messages.
 * @param checkSize Whether to check the size of the metadata is under
 *   recommended limit. Default: `false`. If `true`, will try stringify the
 *   JSON object and print a console warning if the serialzied size is above the
 *   limit.
 * @throws Error if `userDefinedMetadata` is not a plain JSON object.
 */
function checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {
  if (userDefinedMetadata == null || typeof userDefinedMetadata !== 'object' || Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype || !plainObjectCheck(userDefinedMetadata)) {
    throw new Error('User-defined metadata is expected to be a JSON object, but is not.');
  }
  if (checkSize) {
    const out = JSON.stringify(userDefinedMetadata);
    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {
      console.warn(`User-defined metadata of model "${modelName}" is too large in ` + `size (length=${out.length} when serialized). It is not ` + `recommended to store such large objects in user-defined metadata. ` + `Please make sure its serialized length is <= ` + `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);
    }
  }
}
/**
 * Check if an input is plain JSON object or any valid subfield of it.
 *
 * @param x The input to be checked.
 * @param assertObject Whether to assert `x` is a JSON object, i.e., reject
 *   cases of arrays and primitives.
 * @return Returns `true` if and only if `x` is a plain JSON object,
 *   a JSON-valid primitive including string, number, boolean and null,
 *   or an array of the said types.
 */
// tslint:disable-next-line:no-any
function plainObjectCheck(x) {
  if (x === null) {
    // Note: typeof `null` is 'object', and `null` is valid in JSON.
    return true;
  } else if (typeof x === 'object') {
    if (Object.getPrototypeOf(x) === Object.prototype) {
      // `x` is a JavaScript object and its prototype is Object.
      const keys = Object.keys(x);
      for (const key of keys) {
        if (typeof key !== 'string') {
          // JSON keys must be strings.
          return false;
        }
        if (!plainObjectCheck(x[key])) {
          // Recursive call.
          return false;
        }
      }
      return true;
    } else {
      // `x` is a JavaScript object but its prototype is not Object.
      if (Array.isArray(x)) {
        // `x` is a JavaScript array.
        for (const item of x) {
          if (!plainObjectCheck(item)) {
            // Recursive call.
            return false;
          }
        }
        return true;
      } else {
        // `x` is a JavaScript object and its prototype is not Object,
        // and it's not an Array. I.e., it's a complex object such as
        // `Error` and `Date`.
        return false;
      }
    }
  } else {
    // `x` is not a JavaScript object or `null`.
    const xType = typeof x;
    return xType === 'string' || xType === 'number' || xType === 'boolean';
  }
}

/***/ }),

/***/ 13295:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convOutputLength": () => (/* binding */ convOutputLength),
/* harmony export */   "deconvLength": () => (/* binding */ deconvLength),
/* harmony export */   "normalizeArray": () => (/* binding */ normalizeArray)
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors */ 22802);
/* harmony import */ var _generic_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generic_utils */ 14218);
/* harmony import */ var _math_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math_utils */ 96821);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */



/**
 * Transforms a single number of array of numbers into an array of numbers.
 * @param value
 * @param n: The size of the tuple to be returned.
 * @param name: Name of the parameter, used for generating error messages.
 * @returns An array of numbers.
 */
function normalizeArray(value, n, name) {
  if (typeof value === 'number') {
    return (0,_generic_utils__WEBPACK_IMPORTED_MODULE_1__.pyListRepeat)(value, n);
  } else {
    if (value.length !== n) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` + ` Received: ${value.length} elements.`);
    }
    for (let i = 0; i < n; ++i) {
      const singleValue = value[i];
      if (!(0,_math_utils__WEBPACK_IMPORTED_MODULE_2__.isInteger)(singleValue)) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValueError(`The ${name} argument must be an integer or tuple of ${n}` + ` integers. Received: ${JSON.stringify(value)} including a` + ` non-integer number ${singleValue}`);
      }
    }
    return value;
  }
}
/**
 * Determines output length of a convolution given input length.
 * @param inputLength
 * @param filterSize
 * @param padding
 * @param stride
 * @param dilation: dilation rate.
 */
function convOutputLength(inputLength, filterSize, padding, stride, dilation = 1) {
  if (inputLength == null) {
    return inputLength;
  }
  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);
  let outputLength;
  if (padding === 'same') {
    outputLength = inputLength;
  } else {
    // VALID
    outputLength = inputLength - dilatedFilterSize + 1;
  }
  return Math.floor((outputLength + stride - 1) / stride);
}
function deconvLength(dimSize, strideSize, kernelSize, padding) {
  if (dimSize == null) {
    return null;
  }
  if (padding === 'valid') {
    dimSize = dimSize * strideSize + (0,_math_utils__WEBPACK_IMPORTED_MODULE_2__.max)([kernelSize - strideSize, 0]);
  } else if (padding === 'same') {
    dimSize = dimSize * strideSize;
  } else {
    throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValueError(`Unsupport padding mode: ${padding}.`);
  }
  return dimSize;
}

/***/ }),

/***/ 18156:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/executor_utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LruCache": () => (/* binding */ LruCache)
/* harmony export */ });
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * LruCache: A mapping from the String to T. If the number of the entries is
 * exceeding the `maxEntries`, the LruCache will delete the least recently
 * used entry.
 */
class LruCache {
  constructor(maxEntries) {
    this.maxEntries = maxEntries || 100;
    this.cache = new Map();
  }
  /**
   * Get the entry for the key and mark it as used recently.
   */
  get(key) {
    let entry;
    if (this.cache.has(key)) {
      entry = this.cache.get(key);
      this.cache.delete(key);
      this.cache.set(key, entry);
    }
    return entry;
  }
  /**
   * Put the entry into the cache. If the key already existed, mark the key as
   * used recently.
   */
  put(key, value) {
    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.cache.size >= this.maxEntries) {
      const keyToDelete = this.cache.keys().next().value;
      this.cache.delete(keyToDelete);
    }
    this.cache.set(key, value);
  }
  /**
   * Get the MaxEntries of the cache.
   */
  getMaxEntries() {
    return this.maxEntries;
  }
  /**
   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce
   * entries in the cache.
   */
  setMaxEntries(maxEntries) {
    if (maxEntries < 0) {
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${maxEntries}.`);
    }
    if (this.maxEntries > maxEntries) {
      for (let i = 0; i < this.maxEntries - maxEntries; i++) {
        const keyToDelete = this.cache.keys().next().value;
        this.cache.delete(keyToDelete);
      }
    }
    this.maxEntries = maxEntries;
  }
}

/***/ }),

/***/ 14218:
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assert": () => (/* binding */ assert),
/* harmony export */   "assertPositiveInteger": () => (/* binding */ assertPositiveInteger),
/* harmony export */   "checkArrayTypeAndLength": () => (/* binding */ checkArrayTypeAndLength),
/* harmony export */   "checkStringTypeUnionValue": () => (/* binding */ checkStringTypeUnionValue),
/* harmony export */   "count": () => (/* binding */ count),
/* harmony export */   "debounce": () => (/* binding */ debounce),
/* harmony export */   "deserializeKerasObject": () => (/* binding */ deserializeKerasObject),
/* harmony export */   "formatAsFriendlyString": () => (/* binding */ formatAsFriendlyString),
/* harmony export */   "getCartesianProductOfValues": () => (/* binding */ getCartesianProductOfValues),
/* harmony export */   "isObjectEmpty": () => (/* binding */ isObjectEmpty),
/* harmony export */   "mapActivationToFusedKernel": () => (/* binding */ mapActivationToFusedKernel),
/* harmony export */   "numberCompare": () => (/* binding */ numberCompare),
/* harmony export */   "objectListUid": () => (/* binding */ objectListUid),
/* harmony export */   "pyListRepeat": () => (/* binding */ pyListRepeat),
/* harmony export */   "reverseNumberCompare": () => (/* binding */ reverseNumberCompare),
/* harmony export */   "serializeKerasObject": () => (/* binding */ serializeKerasObject),
/* harmony export */   "singletonOrArray": () => (/* binding */ singletonOrArray),
/* harmony export */   "stringToDType": () => (/* binding */ stringToDType),
/* harmony export */   "stringsEqual": () => (/* binding */ stringsEqual),
/* harmony export */   "toCamelCase": () => (/* binding */ toCamelCase),
/* harmony export */   "toList": () => (/* binding */ toList),
/* harmony export */   "toSnakeCase": () => (/* binding */ toSnakeCase),
/* harmony export */   "unique": () => (/* binding */ unique)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ 22802);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/* Original source: utils/generic_utils.py */


// tslint:enable
/**
 * If `value` is an Array, equivalent to Python's `value * numValues`.
 * If `value` is not an Array, equivalent to Python's `[value] * numValues`
 */
// tslint:disable-next-line:no-any
function pyListRepeat(value, numValues) {
  if (Array.isArray(value)) {
    // tslint:disable-next-line:no-any
    let newArray = [];
    for (let i = 0; i < numValues; i++) {
      newArray = newArray.concat(value);
    }
    return newArray;
  } else {
    const newArray = new Array(numValues);
    newArray.fill(value);
    return newArray;
  }
}
function assert(val, message) {
  if (!val) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AssertionError(message);
  }
}
/**
 * Count the number of elements of the `array` that are equal to `reference`.
 */
function count(array, refernce) {
  let counter = 0;
  for (const item of array) {
    if (item === refernce) {
      counter++;
    }
  }
  return counter;
}
/**
 * If an array is of length 1, just return the first element. Otherwise, return
 * the full array.
 * @param tensors
 */
function singletonOrArray(xs) {
  if (xs.length === 1) {
    return xs[0];
  }
  return xs;
}
/**
 * Normalizes a list/tensor into a list.
 *
 * If a tensor is passed, we return
 * a list of size 1 containing the tensor.
 *
 * @param x target object to be normalized.
 */
// tslint:disable-next-line:no-any
function toList(x) {
  if (Array.isArray(x)) {
    return x;
  }
  return [x];
}
/**
 * Generate a UID for a list
 */
// tslint:disable-next-line:no-any
function objectListUid(objs) {
  const objectList = toList(objs);
  let retVal = '';
  for (const obj of objectList) {
    if (obj.id == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Object ${obj} passed to objectListUid without an id`);
    }
    if (retVal !== '') {
      retVal = retVal + ', ';
    }
    retVal = `${retVal}${Math.abs(obj.id)}`;
  }
  return retVal;
}
/**
 * Converts string to snake-case.
 * @param name
 */
function toSnakeCase(name) {
  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');
  const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
  /*
   If the class is private the name starts with "_" which is not secure
   for creating scopes. We prefix the name with "private" in this case.
   */
  if (insecure[0] !== '_') {
    return insecure;
  }
  return 'private' + insecure;
}
function toCamelCase(identifier) {
  // quick return for empty string or single character strings
  if (identifier.length <= 1) {
    return identifier;
  }
  // Check for the underscore indicating snake_case
  if (identifier.indexOf('_') === -1) {
    return identifier;
  }
  return identifier.replace(/[_]+(\w|$)/g, (m, p1) => p1.toUpperCase());
}
// tslint:disable-next-line:no-any
let _GLOBAL_CUSTOM_OBJECTS = {};
function serializeKerasObject(instance) {
  if (instance === null || instance === undefined) {
    return null;
  }
  const dict = {};
  dict['className'] = instance.getClassName();
  dict['config'] = instance.getConfig();
  return dict;
}
/**
 * Replace ndarray-style scalar objects in serialization objects with numbers.
 *
 * Background: In some versions of tf.keras, certain scalar values in the HDF5
 * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,
 * where in `num` is a plain number. This method converts such serialization
 * to a `number`.
 *
 * @param config The keras-format serialization object to be processed
 *   (in place).
 */
function convertNDArrayScalarsInConfig(config) {
  if (config == null || typeof config !== 'object') {
    return;
  } else if (Array.isArray(config)) {
    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));
  } else {
    const fields = Object.keys(config);
    for (const field of fields) {
      const value = config[field];
      if (value != null && typeof value === 'object') {
        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {
          config[field] = value['value'];
        } else {
          convertNDArrayScalarsInConfig(value);
        }
      }
    }
  }
}
/**
 * Deserialize a saved Keras Object
 * @param identifier either a string ID or a saved Keras dictionary
 * @param moduleObjects a list of Python class names to object constructors
 * @param customObjects a list of Python class names to object constructors
 * @param printableModuleName debug text for the object being reconstituted
 * @param fastWeightInit Optional flag to use fast weight initialization
 *   during deserialization. This is applicable to cases in which
 *   the initialization will be immediately overwritten by loaded weight
 *   values. Default: `false`.
 * @returns a TensorFlow.js Layers object
 */
// tslint:disable:no-any
function deserializeKerasObject(identifier, moduleObjects = {}, customObjects = {}, printableModuleName = 'object', fastWeightInit = false) {
  // tslint:enable
  if (typeof identifier === 'string') {
    const functionName = identifier;
    let fn;
    if (functionName in customObjects) {
      fn = customObjects[functionName];
    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {
      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];
    } else {
      fn = moduleObjects[functionName];
      if (fn == null) {
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Unknown ${printableModuleName}: ${identifier}. ` + `This may be due to one of the following reasons:\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`);
        // TODO(cais): Add link to tutorial page on custom layers.
      }
    }

    return fn;
  } else {
    // In this case we are dealing with a Keras config dictionary.
    const config = identifier;
    if (config['className'] == null || config['config'] == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`${printableModuleName}: Improper config format: ` + `${JSON.stringify(config)}.\n` + `'className' and 'config' must set.`);
    }
    const className = config['className'];
    let cls, fromConfig;
    if (className in customObjects) {
      [cls, fromConfig] = customObjects[className];
    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {
      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];
    } else if (className in moduleObjects) {
      [cls, fromConfig] = moduleObjects[className];
    }
    if (cls == null) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Unknown ${printableModuleName}: ${className}. ` + `This may be due to one of the following reasons:\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`);
      // TODO(cais): Add link to tutorial page on custom layers.
    }

    if (fromConfig != null) {
      // Porting notes: Instead of checking to see whether fromConfig accepts
      // customObjects, we create a customObjects dictionary and tack it on to
      // config['config'] as config['config'].customObjects. Objects can use it,
      // if they want.
      // tslint:disable-next-line:no-any
      const customObjectsCombined = {};
      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {
        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];
      }
      for (const key of Object.keys(customObjects)) {
        customObjectsCombined[key] = customObjects[key];
      }
      // Add the customObjects to config
      const nestedConfig = config['config'];
      nestedConfig['customObjects'] = customObjectsCombined;
      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);
      for (const key of Object.keys(customObjects)) {
        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];
      }
      convertNDArrayScalarsInConfig(config['config']);
      const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);
      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);
      return returnObj;
    } else {
      // Then `cls` may be a function returning a class.
      // In this case by convention `config` holds
      // the kwargs of the function.
      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);
      for (const key of Object.keys(customObjects)) {
        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];
      }
      // In python this is **config['config'], for tfjs-layers we require
      // classes that use this fall-through construction method to take
      // a config interface that mimics the expansion of named parameters.
      const returnObj = new cls(config['config']);
      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);
      return returnObj;
    }
  }
}
/**
 * Compares two numbers for sorting.
 * @param a
 * @param b
 */
function numberCompare(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
/**
 * Comparison of two numbers for reverse sorting.
 * @param a
 * @param b
 */
function reverseNumberCompare(a, b) {
  return -1 * numberCompare(a, b);
}
/**
 * Convert a string into the corresponding DType.
 * @param dtype
 * @returns An instance of DType.
 */
function stringToDType(dtype) {
  switch (dtype) {
    case 'float32':
      return 'float32';
    default:
      throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Invalid dtype: ${dtype}`);
  }
}
/**
 * Test the element-by-element equality of two Arrays of strings.
 * @param xs First array of strings.
 * @param ys Second array of strings.
 * @returns Wether the two arrays are all equal, element by element.
 */
function stringsEqual(xs, ys) {
  if (xs == null || ys == null) {
    return xs === ys;
  }
  if (xs.length !== ys.length) {
    return false;
  }
  for (let i = 0; i < xs.length; ++i) {
    if (xs[i] !== ys[i]) {
      return false;
    }
  }
  return true;
}
/**
 * Get the unique elements of an array.
 * @param xs Array.
 * @returns An Array consisting of the unique elements in `xs`.
 */
function unique(xs) {
  if (xs == null) {
    return xs;
  }
  const out = [];
  // TODO(cais): Maybe improve performance by sorting.
  for (const x of xs) {
    if (out.indexOf(x) === -1) {
      out.push(x);
    }
  }
  return out;
}
/**
 * Determine if an Object is empty (i.e., does not have own properties).
 * @param obj Object
 * @returns Whether the Object is empty.
 * @throws ValueError: If object is `null` or `undefined`.
 */
function isObjectEmpty(obj) {
  if (obj == null) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}
/**
 * Helper function used to build type union/enum run-time checkers.
 * @param values The list of allowed values.
 * @param label A string name for the type
 * @param value The value to test.
 * @throws ValueError: If the value is not in values nor `undefined`/`null`.
 */
function checkStringTypeUnionValue(values, label, value) {
  if (value == null) {
    return;
  }
  if (values.indexOf(value) < 0) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);
  }
}
/**
 * Helper function for verifying the types of inputs.
 *
 * Ensures that the elements of `x` are all of type `expectedType`.
 * Also verifies that the length of `x` is within bounds.
 *
 * @param x Object to test.
 * @param expectedType The string expected type of all of the elements in the
 * Array.
 * @param minLength Return false if x.length is less than this.
 * @param maxLength Return false if x.length is greater than this.
 * @returns true if and only if `x` is an `Array<expectedType>` with
 * length >= `minLength` and <= `maxLength`.
 */
// tslint:disable:no-any
function checkArrayTypeAndLength(x, expectedType, minLength = 0, maxLength = Infinity) {
  assert(minLength >= 0);
  assert(maxLength >= minLength);
  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(e => typeof e === expectedType);
}
// tslint:enable:no-any
/**
 * Assert that a value or an array of value are positive integer.
 *
 * @param value The value being asserted on. May be a single number or an array
 *   of numbers.
 * @param name Name of the value, used to make the error message.
 */
function assertPositiveInteger(value, name) {
  if (Array.isArray(value)) {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);
    value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));
  } else {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` + `${formatAsFriendlyString(value)}.`);
  }
}
/**
 * Format a value into a display-friendly, human-readable fashion.
 *
 * - `null` is formatted as `'null'`
 * - Strings are formated with flanking pair of quotes.
 * - Arrays are formatted with flanking pair of square brackets.
 *
 * @param value The value to display.
 * @return Formatted string.
 */
// tslint:disable-next-line:no-any
function formatAsFriendlyString(value) {
  if (value === null) {
    return 'null';
  } else if (Array.isArray(value)) {
    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';
  } else if (typeof value === 'string') {
    return `"${value}"`;
  } else {
    return `${value}`;
  }
}
/**
 * Returns a function `f2` (decorator) which wraps the original function
 * `f`. `f2` guarantees that `f` can be called at most once
 * every `waitMs` ms. If `f2` is called more often, it will return
 * the last returned result of `f`.
 *
 * @param f The original function `f` to wrap.
 * @param waitMs The time between two consecutive calls to `f` in ms.
 */
function debounce(f, waitMs, nowFunc) {
  let lastTime = nowFunc != null ? nowFunc() : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.now();
  let lastResult;
  const f2 = (...args) => {
    const now = nowFunc != null ? nowFunc() : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.now();
    if (now - lastTime < waitMs) {
      return lastResult;
    }
    lastTime = now;
    lastResult = f(...args);
    return lastResult;
  };
  return f2;
}
/**
 * Returns the fusable activation given a layers identifier.
 *
 * @param activationName The layers identifier string.
 * @return The name of the fusable activation.
 */
function mapActivationToFusedKernel(activationName) {
  if (activationName === 'relu') {
    return 'relu';
  }
  if (activationName === 'linear') {
    return 'linear';
  }
  if (activationName === 'elu') {
    return 'elu';
  }
  return null;
}
/**
 * Returns the cartesian product of sets of values.
 * This works the same as itertools.product in Python.
 *
 * Example:
 *
 * filters = [128, 256, 512]
 * paddings = ['same', 'valid']
 *
 * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],
 * [512, 'same'], [512, 'valid']]
 *
 * @param arrayOfValues List/array of values.
 * @return The cartesian product.
 */
function getCartesianProductOfValues(...arrayOfValues) {
  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');
  for (const values of arrayOfValues) {
    assert(Array.isArray(values), 'one of the values is not an array');
    assert(values.length > 0, 'one of the values is empty');
  }
  return arrayOfValues.reduce((products, values) => {
    if (products.length === 0) {
      return values.map(value => [value]);
    }
    return values.map(value => {
      return products.map(prevValue => [...prevValue, value]);
    }).reduce((flattenedProduct, unflattenedProduct) => {
      return flattenedProduct.concat(unflattenedProduct);
    }, []);
  }, []);
}

/***/ }),

/***/ 46246:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/layer_utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printSummary": () => (/* binding */ printSummary)
/* harmony export */ });
/* harmony import */ var _variable_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./variable_utils */ 83260);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */

/**
 * Print the summary of a LayersModel object.
 *
 * @param model tf.LayersModel instance.
 * @param lineLength Total length of printed lines. Set this to adapt to the
 *   display to different terminal or console sizes.
 * @param positions Relative or absolute positions of log elements in each
 *   line. Each number corresponds to right-most (i.e., ending) position of a
 *   column.
 *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like
 *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.
 * @param printFn Print function to use.
 *   It will be called on each line of the summary. You can provide a custom
 *   function in order to capture the string summary. Defaults to `console.log`.
 */
function printSummary(model, lineLength, positions,
// tslint:disable-next-line:no-any
printFn = console.log) {
  const sequentialLike = isModelSequentialLike(model);
  // Header names for different log elements.
  const toDisplay = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];
  if (sequentialLike) {
    lineLength = lineLength || 90;
    positions = positions || [0.32, 0.61, 0.89, 1];
  } else {
    lineLength = lineLength || 115;
    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];
    // Header names for different log elements.
  }

  if (positions[positions.length - 1] <= 1) {
    // `positions` is relative. Convert it to absolute positioning.
    positions = positions.map(p => Math.floor(lineLength * p));
  }
  let relevantNodes;
  if (!sequentialLike) {
    toDisplay.push('Receives inputs');
    relevantNodes = [];
    for (const depth in model.nodesByDepth) {
      relevantNodes.push(...model.nodesByDepth[depth]);
    }
  }
  printFn('_'.repeat(lineLength));
  printRow(toDisplay, positions, printFn);
  printFn('='.repeat(lineLength));
  const layers = model.layers;
  for (let i = 0; i < layers.length; ++i) {
    if (sequentialLike) {
      printLayerSummary(layers[i], positions, printFn);
    } else {
      printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);
    }
    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));
  }
  // tslint:disable-next-line:no-any
  model.checkTrainableWeightsConsistency();
  const trainableCount = countTrainableParams(model);
  const nonTrainableCount = (0,_variable_utils__WEBPACK_IMPORTED_MODULE_0__.countParamsInWeights)(model.nonTrainableWeights);
  printFn(`Total params: ${trainableCount + nonTrainableCount}`);
  printFn(`Trainable params: ${trainableCount}`);
  printFn(`Non-trainable params: ${nonTrainableCount}`);
  printFn('_'.repeat(lineLength));
}
function countTrainableParams(model) {
  let trainableCount;
  // tslint:disable:no-any
  if (model.collectedTrainableWeights != null) {
    trainableCount = (0,_variable_utils__WEBPACK_IMPORTED_MODULE_0__.countParamsInWeights)(model.collectedTrainableWeights);
  } else {
    trainableCount = (0,_variable_utils__WEBPACK_IMPORTED_MODULE_0__.countParamsInWeights)(model.trainableWeights);
  }
  // tslint:enable:no-any
  return trainableCount;
}
function isModelSequentialLike(model) {
  let sequentialLike = true;
  const nodesByDepth = [];
  const nodes = [];
  for (const depth in model.nodesByDepth) {
    nodesByDepth.push(model.nodesByDepth[depth]);
  }
  for (const depthNodes of nodesByDepth) {
    if (depthNodes.length > 1 || depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {
      sequentialLike = false;
      break;
    }
    nodes.push(...depthNodes);
  }
  if (sequentialLike) {
    // Search for shared layers.
    for (const layer of model.layers) {
      let flag = false;
      for (const node of layer.inboundNodes) {
        if (nodes.indexOf(node) !== -1) {
          if (flag) {
            sequentialLike = false;
            break;
          } else {
            flag = true;
          }
        }
      }
      if (!sequentialLike) {
        break;
      }
    }
  }
  return sequentialLike;
}
function printRow(fields, positions,
// tslint:disable-next-line:no-any
printFn = console.log) {
  let line = '';
  for (let i = 0; i < fields.length; ++i) {
    if (i > 0) {
      line = line.slice(0, line.length - 1) + ' ';
    }
    line += fields[i];
    line = line.slice(0, positions[i]);
    line += ' '.repeat(positions[i] - line.length);
  }
  printFn(line);
}
/**
 * Prints a summary for a single Layer, without connectivity information.
 *
 * @param layer: Layer instance to print.
 */
function printLayerSummary(layer, positions,
// tslint:disable-next-line:no-any
printFn) {
  let outputShape;
  let inputShape;
  try {
    inputShape = layer.inboundNodes.map(x => JSON.stringify(x.inputShapes)).join(',');
  } catch (err) {
    inputShape = 'multiple';
  }
  try {
    outputShape = JSON.stringify(layer.outputShape);
  } catch (err) {
    outputShape = 'multiple';
  }
  const name = layer.name;
  const className = layer.getClassName();
  const fields = [`${name} (${className})`, inputShape, outputShape, layer.countParams().toString()];
  printRow(fields, positions, printFn);
}
/**
 * Prints a summary for a single Layer, with connectivity information.
 */
function printLayerSummaryWithConnections(layer, positions, relevantNodes,
// tslint:disable-next-line:no-any
printFn) {
  let outputShape;
  let inputShape;
  try {
    inputShape = layer.inboundNodes.map(x => JSON.stringify(x.inputShapes)).join(',');
  } catch (err) {
    inputShape = 'multiple';
  }
  try {
    outputShape = JSON.stringify(layer.outputShape);
  } catch (err) {
    outputShape = 'multiple';
  }
  const connections = [];
  for (const node of layer.inboundNodes) {
    if (relevantNodes != null && relevantNodes.length > 0 && relevantNodes.indexOf(node) === -1) {
      continue;
    }
    for (let i = 0; i < node.inboundLayers.length; ++i) {
      const inboundLayer = node.inboundLayers[i].name;
      const inboundLayerIndex = node.nodeIndices[i];
      const inboundTensorIndex = node.tensorIndices[i];
      connections.push(`${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);
    }
  }
  const name = layer.name;
  const className = layer.getClassName();
  const firstConnection = connections.length === 0 ? '' : connections[0];
  const fields = [`${name} (${className})`, inputShape, outputShape, layer.countParams().toString(), firstConnection];
  printRow(fields, positions, printFn);
  for (let i = 1; i < connections.length; ++i) {
    printRow(['', '', '', '', connections[i]], positions, printFn);
  }
}

/***/ }),

/***/ 96821:
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayProd": () => (/* binding */ arrayProd),
/* harmony export */   "isInteger": () => (/* binding */ isInteger),
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "mean": () => (/* binding */ mean),
/* harmony export */   "median": () => (/* binding */ median),
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "variance": () => (/* binding */ variance)
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors */ 22802);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Math utility functions.
 *
 * This file contains some frequently used math function that operates on
 * number[] or Float32Array and return a number. Many of these functions are
 * not-so-thick wrappers around TF.js Core functions. But they offer the
 * convenience of
 * 1) not having to convert the inputs into Tensors,
 * 2) not having to convert the returned Tensors to numbers.
 */

/**
 * Determine if a number is an integer.
 */
function isInteger(x) {
  return x === parseInt(x.toString(), 10);
}
/**
 * Calculate the product of an array of numbers.
 * @param array The array to calculate the product over.
 * @param begin Beginning index, inclusive.
 * @param end Ending index, exclusive.
 * @return The product.
 */
function arrayProd(array, begin, end) {
  if (begin == null) {
    begin = 0;
  }
  if (end == null) {
    end = array.length;
  }
  let prod = 1;
  for (let i = begin; i < end; ++i) {
    prod *= array[i];
  }
  return prod;
}
/**
 * Compute minimum value.
 * @param array
 * @return minimum value.
 */
function min(array) {
  // same behavior as tf.min()
  if (array.length === 0) {
    return Number.NaN;
  }
  let min = Number.POSITIVE_INFINITY;
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    if (value < min) {
      min = value;
    }
  }
  return min;
}
/**
 * Compute maximum value.
 * @param array
 * @return maximum value
 */
function max(array) {
  // same behavior as tf.max()
  if (array.length === 0) {
    return Number.NaN;
  }
  let max = Number.NEGATIVE_INFINITY;
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    if (value > max) {
      max = value;
    }
  }
  return max;
}
/**
 * Compute sum of array.
 * @param array
 * @return The sum.
 */
function sum(array) {
  let sum = 0;
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    sum += value;
  }
  return sum;
}
/**
 * Compute mean of array.
 * @param array
 * @return The mean.
 */
function mean(array) {
  return sum(array) / array.length;
}
/**
 * Compute variance of array.
 * @param array
 * @return The variance.
 */
function variance(array) {
  const meanValue = mean(array);
  const demeaned = array.map(value => value - meanValue);
  let sumSquare = 0;
  for (let i = 0; i < demeaned.length; i++) {
    const value = demeaned[i];
    sumSquare += value * value;
  }
  return sumSquare / array.length;
}
/**
 * Compute median of array.
 * @param array
 * @return The median value.
 */
function median(array) {
  const arraySorted = array.slice().sort((a, b) => a - b);
  const lowIdx = Math.floor((arraySorted.length - 1) / 2);
  const highIdx = Math.ceil((arraySorted.length - 1) / 2);
  if (lowIdx === highIdx) {
    return arraySorted[lowIdx];
  }
  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;
}
/**
 * Generate an array of integers in [begin, end).
 * @param begin Beginning integer, inclusive.
 * @param end Ending integer, exclusive.
 * @returns Range array.
 * @throws ValueError, iff `end` < `begin`.
 */
function range(begin, end) {
  if (end < begin) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValueError(`end (${end}) < begin (${begin}) is forbidden.`);
  }
  const out = [];
  for (let i = begin; i < end; ++i) {
    out.push(i);
  }
  return out;
}

/***/ }),

/***/ 83903:
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertPythonicToTs": () => (/* binding */ convertPythonicToTs),
/* harmony export */   "convertTsToPythonic": () => (/* binding */ convertTsToPythonic)
/* harmony export */ });
/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/generic_utils */ 14218);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */

// tslint:enable
/**
 * Test whether a value in an array is the name of a LayersModel or Layer.
 * @param key The key name that the value is found under. Note that the key
 *   may not be at the level immediately above the value, if the value is in a
 *   nested array.
 * @param index Index of the value in the Array that it is found in.
 * @param value The value object.
 * @returns A boolean indicating whether value is a name.
 */
function isArrayItemInputOrOutputName(key, index, value) {
  return (key === 'inboundNodes' || key === 'outputLayers' || key === 'inputLayers') && index === 0 && typeof value === 'string';
}
/**
 * Convert a Pythonic config object to TypeScript config object.
 * @param pythonicConfig The config object to convert.
 * @param key Optional key name of the object being converted.
 * @returns Result of the conversion.
 */
function convertPythonicToTs(pythonicConfig, key) {
  if (pythonicConfig === null) {
    return null;
  } else if (typeof pythonicConfig === 'string') {
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_0__.toCamelCase(pythonicConfig);
  } else if (typeof pythonicConfig === 'number' || typeof pythonicConfig === 'boolean') {
    return pythonicConfig;
  } else if (pythonicConfig instanceof Array) {
    const tsArray = [];
    const arrayLength = pythonicConfig.length;
    for (let i = 0; i < arrayLength; ++i) {
      const item = pythonicConfig[i];
      if (isArrayItemInputOrOutputName(key, i, item)) {
        tsArray.push(item);
      } else {
        tsArray.push(convertPythonicToTs(item, key));
      }
    }
    return tsArray;
  } else {
    const tsDict = {};
    for (const pythonicKey of Object.keys(pythonicConfig)) {
      const pythonicValue = pythonicConfig[pythonicKey];
      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {
        // Special case the 'name' key with a string value. Name values, such as
        // the names of LayersModel and Layer instances, should not undergo the
        // camel-case conversion.
        tsDict[pythonicKey] = pythonicValue;
      } else {
        const tsKey = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_0__.toCamelCase(pythonicKey);
        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);
      }
    }
    return tsDict;
  }
}
/**
 * Convert a TypeScript config object to Python config object.
 * @param tsConfig The config object to convert.
 * @param key Optional key name of the object being converted.
 * @returns Result of the conversion.
 */
function convertTsToPythonic(tsConfig, key) {
  if (tsConfig === null || tsConfig === undefined) {
    return null;
  } else if (typeof tsConfig === 'string') {
    return _utils_generic_utils__WEBPACK_IMPORTED_MODULE_0__.toSnakeCase(tsConfig);
  } else if (typeof tsConfig === 'number' || typeof tsConfig === 'boolean') {
    return tsConfig;
  } else if (tsConfig instanceof Array) {
    const pyArray = [];
    const arrayLength = tsConfig.length;
    for (let i = 0; i < arrayLength; ++i) {
      const item = tsConfig[i];
      if (isArrayItemInputOrOutputName(key, i, item)) {
        pyArray.push(item);
      } else {
        pyArray.push(convertTsToPythonic(item, key));
      }
    }
    return pyArray;
  } else {
    const pyDict = {};
    for (const tsKey of Object.keys(tsConfig)) {
      const tsValue = tsConfig[tsKey];
      const pyKey = _utils_generic_utils__WEBPACK_IMPORTED_MODULE_0__.toSnakeCase(tsKey);
      if ((tsKey === 'name' || tsKey === 'className') && typeof tsValue === 'string') {
        // Special case the 'name' key with a string value. Name values, such as
        // the names of LayersModel and Layer instances, should not undergo the
        // snake-case conversion.
        pyDict[pyKey] = tsValue;
      } else {
        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);
      }
    }
    return pyDict;
  }
}

/***/ }),

/***/ 13124:
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExactlyOneShape": () => (/* binding */ getExactlyOneShape),
/* harmony export */   "getExactlyOneTensor": () => (/* binding */ getExactlyOneTensor),
/* harmony export */   "isArrayOfShapes": () => (/* binding */ isArrayOfShapes),
/* harmony export */   "normalizeShapeList": () => (/* binding */ normalizeShapeList)
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors */ 22802);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */

// tslint:enable
/**
 * Determine whether the input is an Array of Shapes.
 */
function isArrayOfShapes(x) {
  return Array.isArray(x) && Array.isArray(x[0]);
}
/**
 * Special case of normalizing shapes to lists.
 *
 * @param x A shape or list of shapes to normalize into a list of Shapes.
 * @return A list of Shapes.
 */
function normalizeShapeList(x) {
  if (x.length === 0) {
    return [];
  }
  if (!Array.isArray(x[0])) {
    return [x];
  }
  return x;
}
/**
 * Helper function to obtain exactly one Tensor.
 * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.
 * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.
 * @throws ValueError: If `xs` is an `Array` and its length is not 1.
 */
function getExactlyOneTensor(xs) {
  let x;
  if (Array.isArray(xs)) {
    if (xs.length !== 1) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValueError(`Expected Tensor length to be 1; got ${xs.length}`);
    }
    x = xs[0];
  } else {
    x = xs;
  }
  return x;
}
/**
 * Helper function to obtain exactly on instance of Shape.
 *
 * @param shapes Input single `Shape` or Array of `Shape`s.
 * @returns If input is a single `Shape`, return it unchanged. If the input is
 *   an `Array` containing exactly one instance of `Shape`, return the instance.
 *   Otherwise, throw a `ValueError`.
 * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not
 *   1.
 */
function getExactlyOneShape(shapes) {
  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {
    if (shapes.length === 1) {
      shapes = shapes;
      return shapes[0];
    } else {
      throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);
    }
  } else {
    return shapes;
  }
}

/***/ }),

/***/ 83260:
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/variable_utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "countParamsInWeights": () => (/* binding */ countParamsInWeights)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
/**
 * Count the elements in an Array of LayerVariables.
 *
 * @param weights: The LayerVariables of which the constituent numbers are to
 *   be counted.
 * @returns A count of the elements in all the LayerVariables
 */
function countParamsInWeights(weights) {
  let count = 0;
  for (const weight of weights) {
    if (weight.shape.length === 0) {
      count += 1;
    } else {
      count += weight.shape.reduce((a, b) => a * b);
    }
  }
  return count;
}

/***/ }),

/***/ 22414:
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/variables.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LayerVariable": () => (/* binding */ LayerVariable),
/* harmony export */   "batchGetValue": () => (/* binding */ batchGetValue),
/* harmony export */   "batchSetValue": () => (/* binding */ batchSetValue),
/* harmony export */   "eyeVariable": () => (/* binding */ eyeVariable),
/* harmony export */   "gradients": () => (/* binding */ gradients),
/* harmony export */   "onesLike": () => (/* binding */ onesLike),
/* harmony export */   "onesVariable": () => (/* binding */ onesVariable),
/* harmony export */   "randomNormalVariable": () => (/* binding */ randomNormalVariable),
/* harmony export */   "randomUniformVariable": () => (/* binding */ randomUniformVariable),
/* harmony export */   "truncatedNormalVariable": () => (/* binding */ truncatedNormalVariable),
/* harmony export */   "update": () => (/* binding */ update),
/* harmony export */   "updateAdd": () => (/* binding */ updateAdd),
/* harmony export */   "updateSub": () => (/* binding */ updateSub),
/* harmony export */   "variable": () => (/* binding */ variable),
/* harmony export */   "zerosLike": () => (/* binding */ zerosLike),
/* harmony export */   "zerosVariable": () => (/* binding */ zerosVariable)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _backend_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./backend/state */ 6337);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ 9878);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ 22802);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */





const DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';
/**
 * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a
 * dtype and shape, but its value is mutable.  The value is itself represented
 * as a`tf.Tensor`, and can be read with the `read()` method and updated with
 * the `write()` method.
 */
class LayerVariable {
  /**
   * Construct Variable from a `tf.Tensor`.
   *
   * If not explicitly named, the Variable will be given a name with the
   * prefix 'Variable'. Variable names are unique. In the case of name
   * collision, suffixies '_<num>' will be added to the name.
   *
   * @param val Initial value of the Variable.
   * @param name Name of the variable. If `null` or `undefined` is provided, it
   *   will default a name with the prefix 'Variable'.
   * @param constraint Optional, projection function to be applied to the
   * variable after optimize updates
   * @throws ValueError if `name` is `null` or `undefined`.
   */
  constructor(val, dtype = 'float32', name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true, constraint = null) {
    this.dtype = dtype == null ? 'float32' : dtype;
    this.shape = val.shape;
    this.id = (0,_backend_state__WEBPACK_IMPORTED_MODULE_1__.getNextUniqueTensorId)();
    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;
    this.originalName = (0,_common__WEBPACK_IMPORTED_MODULE_2__.getScopedTensorName)(name);
    this.name = (0,_common__WEBPACK_IMPORTED_MODULE_2__.getUniqueTensorName)(this.originalName);
    this.trainable_ = trainable;
    this.constraint = constraint;
    this.val = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.variable(val, this.trainable_, this.name, this.dtype);
  }
  /**
   * Get a snapshot of the Variable's value.
   *
   * The returned value is a snapshot of the Variable's value at the time of
   * the invocation. Future mutations in the value of the tensor will only
   * be reflected by future calls to this method.
   */
  read() {
    this.assertNotDisposed();
    return this.val;
  }
  /**
   * Update the value of the Variable.
   *
   * @param newVal: The new value to update to. Must be consistent with the
   *   dtype and shape of the Variable.
   * @return This Variable.
   */
  write(newVal) {
    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.
    this.assertNotDisposed();
    checkShapesMatch(this.val, newVal);
    // Skip updating if this is the exact same tensor.
    if (this.val.id !== newVal.id) {
      this.val.assign(newVal);
      if (this.constraint != null) {
        this.val.assign(this.constraint.apply(this.val));
      }
    }
    return this;
  }
  /**
   * Dispose this LayersVariable instance from memory.
   */
  dispose() {
    this.assertNotDisposed();
    this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed) {
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
    }
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(trainable) {
    this.trainable_ = trainable;
    this.val.trainable = trainable;
  }
}
function checkShapesMatch(x, y) {
  if (x.shape.toString() !== y.shape.toString()) {
    throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' + JSON.stringify(y.shape));
  }
}
/**
 * Create a Variable.
 * @param x The initial value of the `Variable`.
 * @param dtype optional, the type of the variable.
 * @param name optional, the name of the variable, default provided by
 * Variable.
 * @param constraint optional, a constraint to be applied after every update.
 * @return The newly instantiated `Variable`.
 */
function variable(x, dtype, name, constraint) {
  return new LayerVariable(x, dtype, name, true, constraint);
}
/**
 * Instantiates an all-zeros Variable and returns it.
 *
 * @param shape Shape of the tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return An all-zero Variable.
 */
function zerosVariable(shape, dtype, name) {
  // TODO(cais): Implement logic for dtype.
  return new LayerVariable(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros(shape), dtype, name);
}
/**
 * Instantiates an all-zeros tensor of the same shape as another tensor.
 *
 * @param x The other tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return A newly instantiated Variable.
 */
function zerosLike(x, dtype, name) {
  return new LayerVariable(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zerosLike(x), dtype, name);
}
/**
 * Instantiates an all-ones tensor and returns it.
 *
 * @param shape Shape of the tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return An all-ones Variable.
 */
function onesVariable(shape, dtype, name) {
  // TODO(cais): Implement logic for dtype.
  const allocated = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ones(shape);
  return new LayerVariable(allocated, dtype, name);
}
/**
 * Instantiates an all-ones tensor of the same shape as another tensor.
 *
 * @param x The other tensor.
 * @param dtype DType of the tensor.
 * @param name Name of the tensor.
 * @return A newly instantiated Variable.
 */
function onesLike(x, dtype, name) {
  const allocated = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike(x);
  return new LayerVariable(allocated, dtype, name);
}
/**
 * Instantiate an identity matrix and returns it, as a Variable
 *
 * @param size Number of rows/columns.
 * @param dtype Data type of returned Variable.
 * @param name Name of returned Variable.
 * @return A Variable, an identity matrix.
 */
function eyeVariable(size, dtype, name) {
  return new LayerVariable(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.eye(size), dtype, name);
}
/**
 * Get a Variable with uniform distribution of values.
 * @param shape Shape of the tensor.
 * @param minval Lower bound of the uniform distribution.
 * @param maxval Upper bound of the uniform distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The uniform-random Variable.
 */
function randomUniformVariable(shape, minval, maxval, dtype, seed, name = 'randomUniform') {
  return new LayerVariable(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniform(shape, minval, maxval, dtype), dtype, name);
}
/**
 * Get a Variable with truncated-normal distribution of values.
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The truncated-normal-random Variable.
 */
function truncatedNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'truncatedNormal') {
  // TODO(cais): Implement logic for dtype and seed once they are supported
  // by deeplearn.js.
  dtype = dtype || 'float32';
  if (dtype !== 'float32' && dtype !== 'int32') {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError(`randomNormal does not support dType ${dtype}.`);
  }
  return new LayerVariable(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);
}
/**
 * Get a Variable with normal distribution of values.
 * @param shape Shape of the tensor.
 * @param mean mean value of the normal distribution.
 * @param stddev standard deviation of the normal distribution.
 * @param dtype
 * @param seed
 * @param name Optional name.
 * @return The truncated-normal-random Variable.
 */
function randomNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'randomNormal') {
  dtype = dtype || 'float32';
  if (dtype !== 'float32' && dtype !== 'int32') {
    throw new _errors__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError(`randomNormalVariable does not support dType ${dtype}.`);
  }
  return new LayerVariable(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);
}
/**
 * Update the value of a Variable.
 * @param x The Variable to be updated.
 * @param xNew The new value to update to.
 * @return The Variable updated.
 */
function update(x, xNew) {
  return x.write(xNew);
}
/**
 * Update the value of a Variable by adding an increment.
 * @param x The Variable to be updated.
 * @param increment The incrment to add to `x`.
 * @return The Variable updated.
 */
function updateAdd(x, increment) {
  return x.write(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(x.read(), increment));
}
/**
 * Update the value of a Variable by subtracting a decrement.
 * @param x The Variable to be updated.
 * @param decrement The decrement to subtract from `x`.
 * @return The Variable updated.
 */
function updateSub(x, decrement) {
  return x.write(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub(x.read(), decrement));
}
/**
 * Get the values of an array of Variables.
 *
 * @param tensors An `Array` of `Variable`s to get the values of.
 * @return The values of the inputs, as an `Array` of`tf.Tensor`s.
 */
function batchGetValue(xs) {
  return xs.map(x => x.read());
}
/**
 * Update the value of multiple Variables at once.
 *
 * @param variablesAndValues An `Array`, each element is of type
 *   [Variable, Tensor]. The first item is the
 *   `Variable` of which the value is to be updated. The second item
 *   carries the new value.
 */
function batchSetValue(variablesAndValues) {
  variablesAndValues.forEach(variableAndValue => {
    const variable = variableAndValue[0];
    variable.write(variableAndValue[1]);
  });
}
/**
 * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.
 * @param lossFn A function which returns a Scalar to be used as the function
 *   value (i.e., numerator) for differentiation.
 * @param variables List of variables to be used as the independent variables
 *   (i.e., denominator) for differentiation.
 * @returns An Array of gradients tensors.
 */
function gradients(lossFn, variables) {
  // TODO(cais): The return type signature can be simplified if deeplearn makes
  //   the corresponding type public.
  const variableList = variables.map(variable => variable.read());
  const valudAndGrads = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.variableGrads)(lossFn, variableList);
  return variables.map(variable => valudAndGrads.grads[variable.name]);
}

/***/ }),

/***/ 21378:
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/version.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '4.5.0';


/***/ }),

/***/ 92175:
/*!*****************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Abs": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Abs),
/* harmony export */   "Acos": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acos),
/* harmony export */   "Acosh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Acosh),
/* harmony export */   "AdadeltaOptimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AdadeltaOptimizer),
/* harmony export */   "AdagradOptimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AdagradOptimizer),
/* harmony export */   "AdamOptimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AdamOptimizer),
/* harmony export */   "AdamaxOptimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AdamaxOptimizer),
/* harmony export */   "Add": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Add),
/* harmony export */   "AddN": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AddN),
/* harmony export */   "All": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.All),
/* harmony export */   "Any": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Any),
/* harmony export */   "ArgMax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMax),
/* harmony export */   "ArgMin": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ArgMin),
/* harmony export */   "Asin": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asin),
/* harmony export */   "Asinh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Asinh),
/* harmony export */   "Atan": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan),
/* harmony export */   "Atan2": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atan2),
/* harmony export */   "Atanh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Atanh),
/* harmony export */   "AvgPool": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool),
/* harmony export */   "AvgPool3D": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3D),
/* harmony export */   "AvgPool3DGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPool3DGrad),
/* harmony export */   "AvgPoolGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.AvgPoolGrad),
/* harmony export */   "BatchMatMul": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchMatMul),
/* harmony export */   "BatchToSpaceND": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BatchToSpaceND),
/* harmony export */   "Bincount": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Bincount),
/* harmony export */   "BitwiseAnd": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BitwiseAnd),
/* harmony export */   "BroadcastArgs": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BroadcastArgs),
/* harmony export */   "BroadcastTo": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.BroadcastTo),
/* harmony export */   "Callback": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.Callback),
/* harmony export */   "CallbackList": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.CallbackList),
/* harmony export */   "Cast": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cast),
/* harmony export */   "Ceil": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Ceil),
/* harmony export */   "ClipByValue": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ClipByValue),
/* harmony export */   "Complex": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Complex),
/* harmony export */   "ComplexAbs": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ComplexAbs),
/* harmony export */   "Concat": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Concat),
/* harmony export */   "Conv2D": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2D),
/* harmony export */   "Conv2DBackpropFilter": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropFilter),
/* harmony export */   "Conv2DBackpropInput": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropInput),
/* harmony export */   "Conv3D": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3D),
/* harmony export */   "Conv3DBackpropFilterV2": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropFilterV2),
/* harmony export */   "Conv3DBackpropInputV2": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Conv3DBackpropInputV2),
/* harmony export */   "Cos": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cos),
/* harmony export */   "Cosh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cosh),
/* harmony export */   "CropAndResize": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.CropAndResize),
/* harmony export */   "Cumprod": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cumprod),
/* harmony export */   "Cumsum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Cumsum),
/* harmony export */   "CustomCallback": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.CustomCallback),
/* harmony export */   "DataStorage": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DataStorage),
/* harmony export */   "DenseBincount": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DenseBincount),
/* harmony export */   "DepthToSpace": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthToSpace),
/* harmony export */   "DepthwiseConv2dNative": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNative),
/* harmony export */   "DepthwiseConv2dNativeBackpropFilter": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropFilter),
/* harmony export */   "DepthwiseConv2dNativeBackpropInput": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNativeBackpropInput),
/* harmony export */   "Diag": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Diag),
/* harmony export */   "Dilation2D": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2D),
/* harmony export */   "Dilation2DBackpropFilter": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2DBackpropFilter),
/* harmony export */   "Dilation2DBackpropInput": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Dilation2DBackpropInput),
/* harmony export */   "ENV": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ENV),
/* harmony export */   "EarlyStopping": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.EarlyStopping),
/* harmony export */   "Einsum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Einsum),
/* harmony export */   "Elu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Elu),
/* harmony export */   "EluGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.EluGrad),
/* harmony export */   "Environment": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Environment),
/* harmony export */   "Equal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Equal),
/* harmony export */   "Erf": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Erf),
/* harmony export */   "Exp": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Exp),
/* harmony export */   "ExpandDims": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ExpandDims),
/* harmony export */   "Expm1": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Expm1),
/* harmony export */   "FFT": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FFT),
/* harmony export */   "Fill": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Fill),
/* harmony export */   "FlipLeftRight": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FlipLeftRight),
/* harmony export */   "Floor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Floor),
/* harmony export */   "FloorDiv": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FloorDiv),
/* harmony export */   "FromPixels": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FromPixels),
/* harmony export */   "FusedBatchNorm": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedBatchNorm),
/* harmony export */   "FusedConv2D": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedConv2D),
/* harmony export */   "FusedDepthwiseConv2D": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.FusedDepthwiseConv2D),
/* harmony export */   "GPGPUContext": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.GPGPUContext),
/* harmony export */   "GatherNd": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherNd),
/* harmony export */   "GatherV2": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GatherV2),
/* harmony export */   "GraphModel": () => (/* reexport safe */ _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__.GraphModel),
/* harmony export */   "Greater": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Greater),
/* harmony export */   "GreaterEqual": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.GreaterEqual),
/* harmony export */   "History": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.History),
/* harmony export */   "IFFT": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IFFT),
/* harmony export */   "Identity": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Identity),
/* harmony export */   "Imag": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Imag),
/* harmony export */   "InputSpec": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.InputSpec),
/* harmony export */   "IsFinite": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsFinite),
/* harmony export */   "IsInf": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsInf),
/* harmony export */   "IsNan": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.IsNan),
/* harmony export */   "KernelBackend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.KernelBackend),
/* harmony export */   "LRN": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRN),
/* harmony export */   "LRNGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LRNGrad),
/* harmony export */   "LayerVariable": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.LayerVariable),
/* harmony export */   "LayersModel": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.LayersModel),
/* harmony export */   "LeakyRelu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LeakyRelu),
/* harmony export */   "Less": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Less),
/* harmony export */   "LessEqual": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LessEqual),
/* harmony export */   "LinSpace": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LinSpace),
/* harmony export */   "Log": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log),
/* harmony export */   "Log1p": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Log1p),
/* harmony export */   "LogSoftmax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogSoftmax),
/* harmony export */   "LogicalAnd": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalAnd),
/* harmony export */   "LogicalNot": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalNot),
/* harmony export */   "LogicalOr": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalOr),
/* harmony export */   "LogicalXor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LogicalXor),
/* harmony export */   "LowerBound": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.LowerBound),
/* harmony export */   "MathBackendCPU": () => (/* reexport safe */ _tensorflow_tfjs_backend_cpu__WEBPACK_IMPORTED_MODULE_6__.MathBackendCPU),
/* harmony export */   "MathBackendWebGL": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.MathBackendWebGL),
/* harmony export */   "MatrixBandPart": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MatrixBandPart),
/* harmony export */   "Max": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Max),
/* harmony export */   "MaxPool": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool),
/* harmony export */   "MaxPool3D": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3D),
/* harmony export */   "MaxPool3DGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPool3DGrad),
/* harmony export */   "MaxPoolGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolGrad),
/* harmony export */   "MaxPoolWithArgmax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MaxPoolWithArgmax),
/* harmony export */   "Maximum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Maximum),
/* harmony export */   "Mean": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mean),
/* harmony export */   "Min": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Min),
/* harmony export */   "Minimum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Minimum),
/* harmony export */   "MirrorPad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MirrorPad),
/* harmony export */   "Mod": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Mod),
/* harmony export */   "MomentumOptimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.MomentumOptimizer),
/* harmony export */   "Multinomial": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multinomial),
/* harmony export */   "Multiply": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Multiply),
/* harmony export */   "Neg": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Neg),
/* harmony export */   "NonMaxSuppressionV3": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV3),
/* harmony export */   "NonMaxSuppressionV4": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV4),
/* harmony export */   "NonMaxSuppressionV5": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NonMaxSuppressionV5),
/* harmony export */   "NotEqual": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.NotEqual),
/* harmony export */   "OP_SCOPE_SUFFIX": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OP_SCOPE_SUFFIX),
/* harmony export */   "OneHot": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OneHot),
/* harmony export */   "OnesLike": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OnesLike),
/* harmony export */   "Optimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Optimizer),
/* harmony export */   "OptimizerConstructors": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.OptimizerConstructors),
/* harmony export */   "Pack": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pack),
/* harmony export */   "PadV2": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.PadV2),
/* harmony export */   "Pool": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pool),
/* harmony export */   "Pow": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Pow),
/* harmony export */   "Prelu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prelu),
/* harmony export */   "Prod": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Prod),
/* harmony export */   "RMSPropOptimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RMSPropOptimizer),
/* harmony export */   "RNN": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.RNN),
/* harmony export */   "RaggedGather": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedGather),
/* harmony export */   "RaggedRange": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedRange),
/* harmony export */   "RaggedTensorToTensor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RaggedTensorToTensor),
/* harmony export */   "Range": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Range),
/* harmony export */   "Rank": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rank),
/* harmony export */   "Real": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Real),
/* harmony export */   "RealDiv": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RealDiv),
/* harmony export */   "Reciprocal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reciprocal),
/* harmony export */   "Reduction": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reduction),
/* harmony export */   "Relu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu),
/* harmony export */   "Relu6": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Relu6),
/* harmony export */   "Reshape": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reshape),
/* harmony export */   "ResizeBilinear": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinear),
/* harmony export */   "ResizeBilinearGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeBilinearGrad),
/* harmony export */   "ResizeNearestNeighbor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighbor),
/* harmony export */   "ResizeNearestNeighborGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ResizeNearestNeighborGrad),
/* harmony export */   "Reverse": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Reverse),
/* harmony export */   "RotateWithOffset": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.RotateWithOffset),
/* harmony export */   "Round": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Round),
/* harmony export */   "Rsqrt": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Rsqrt),
/* harmony export */   "SGDOptimizer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SGDOptimizer),
/* harmony export */   "ScatterNd": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ScatterNd),
/* harmony export */   "SearchSorted": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SearchSorted),
/* harmony export */   "Select": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Select),
/* harmony export */   "Selu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Selu),
/* harmony export */   "Sequential": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.Sequential),
/* harmony export */   "Sigmoid": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sigmoid),
/* harmony export */   "Sign": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sign),
/* harmony export */   "Sin": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sin),
/* harmony export */   "Sinh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sinh),
/* harmony export */   "Slice": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Slice),
/* harmony export */   "Softmax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softmax),
/* harmony export */   "Softplus": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Softplus),
/* harmony export */   "SpaceToBatchND": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SpaceToBatchND),
/* harmony export */   "SparseFillEmptyRows": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseFillEmptyRows),
/* harmony export */   "SparseReshape": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseReshape),
/* harmony export */   "SparseSegmentMean": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseSegmentMean),
/* harmony export */   "SparseSegmentSum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseSegmentSum),
/* harmony export */   "SparseToDense": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SparseToDense),
/* harmony export */   "SplitV": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SplitV),
/* harmony export */   "Sqrt": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sqrt),
/* harmony export */   "Square": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Square),
/* harmony export */   "SquaredDifference": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference),
/* harmony export */   "StaticRegexReplace": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StaticRegexReplace),
/* harmony export */   "Step": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Step),
/* harmony export */   "StridedSlice": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StridedSlice),
/* harmony export */   "StringNGrams": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringNGrams),
/* harmony export */   "StringSplit": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringSplit),
/* harmony export */   "StringToHashBucketFast": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.StringToHashBucketFast),
/* harmony export */   "Sub": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sub),
/* harmony export */   "Sum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Sum),
/* harmony export */   "SymbolicTensor": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.SymbolicTensor),
/* harmony export */   "Tan": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tan),
/* harmony export */   "Tanh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tanh),
/* harmony export */   "Tensor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor),
/* harmony export */   "TensorBuffer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorBuffer),
/* harmony export */   "TensorScatterUpdate": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TensorScatterUpdate),
/* harmony export */   "Tile": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tile),
/* harmony export */   "TopK": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.TopK),
/* harmony export */   "Transform": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transform),
/* harmony export */   "Transpose": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Transpose),
/* harmony export */   "Unique": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unique),
/* harmony export */   "Unpack": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Unpack),
/* harmony export */   "UnsortedSegmentSum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.UnsortedSegmentSum),
/* harmony export */   "UpperBound": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.UpperBound),
/* harmony export */   "Variable": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Variable),
/* harmony export */   "ZerosLike": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ZerosLike),
/* harmony export */   "_FusedMatMul": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__._FusedMatMul),
/* harmony export */   "abs": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs),
/* harmony export */   "acos": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.acos),
/* harmony export */   "acosh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.acosh),
/* harmony export */   "add": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add),
/* harmony export */   "addN": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.addN),
/* harmony export */   "all": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.all),
/* harmony export */   "any": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.any),
/* harmony export */   "argMax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.argMax),
/* harmony export */   "argMin": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.argMin),
/* harmony export */   "asin": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.asin),
/* harmony export */   "asinh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.asinh),
/* harmony export */   "atan": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.atan),
/* harmony export */   "atan2": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.atan2),
/* harmony export */   "atanh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.atanh),
/* harmony export */   "avgPool": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.avgPool),
/* harmony export */   "avgPool3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.avgPool3d),
/* harmony export */   "backend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend),
/* harmony export */   "backend_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.backend_util),
/* harmony export */   "basicLSTMCell": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.basicLSTMCell),
/* harmony export */   "batchNorm": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm),
/* harmony export */   "batchNorm2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm2d),
/* harmony export */   "batchNorm3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm3d),
/* harmony export */   "batchNorm4d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm4d),
/* harmony export */   "batchToSpaceND": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchToSpaceND),
/* harmony export */   "bincount": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.bincount),
/* harmony export */   "bitwiseAnd": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.bitwiseAnd),
/* harmony export */   "booleanMaskAsync": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.booleanMaskAsync),
/* harmony export */   "broadcastArgs": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.broadcastArgs),
/* harmony export */   "broadcastTo": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.broadcastTo),
/* harmony export */   "broadcast_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.broadcast_util),
/* harmony export */   "browser": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.browser),
/* harmony export */   "buffer": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.buffer),
/* harmony export */   "callbacks": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.callbacks),
/* harmony export */   "cast": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast),
/* harmony export */   "ceil": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ceil),
/* harmony export */   "clipByValue": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue),
/* harmony export */   "clone": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clone),
/* harmony export */   "complex": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.complex),
/* harmony export */   "concat": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat),
/* harmony export */   "concat1d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat1d),
/* harmony export */   "concat2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat2d),
/* harmony export */   "concat3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat3d),
/* harmony export */   "concat4d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat4d),
/* harmony export */   "constraints": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.constraints),
/* harmony export */   "conv1d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv1d),
/* harmony export */   "conv2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv2d),
/* harmony export */   "conv2dTranspose": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv2dTranspose),
/* harmony export */   "conv3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv3d),
/* harmony export */   "conv3dTranspose": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv3dTranspose),
/* harmony export */   "copyRegisteredKernels": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.copyRegisteredKernels),
/* harmony export */   "cos": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cos),
/* harmony export */   "cosh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cosh),
/* harmony export */   "cosineWindow": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cosineWindow),
/* harmony export */   "cumprod": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cumprod),
/* harmony export */   "cumsum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cumsum),
/* harmony export */   "customGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.customGrad),
/* harmony export */   "data": () => (/* reexport module object */ _tensorflow_tfjs_data__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "denseBincount": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.denseBincount),
/* harmony export */   "deprecationWarn": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn),
/* harmony export */   "depthToSpace": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.depthToSpace),
/* harmony export */   "depthwiseConv2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.depthwiseConv2d),
/* harmony export */   "deregisterOp": () => (/* reexport safe */ _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__.deregisterOp),
/* harmony export */   "device_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.device_util),
/* harmony export */   "diag": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.diag),
/* harmony export */   "dilation2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dilation2d),
/* harmony export */   "disableDeprecationWarnings": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.disableDeprecationWarnings),
/* harmony export */   "dispose": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose),
/* harmony export */   "disposeVariables": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.disposeVariables),
/* harmony export */   "div": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div),
/* harmony export */   "divNoNan": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.divNoNan),
/* harmony export */   "dot": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dot),
/* harmony export */   "dropout": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dropout),
/* harmony export */   "einsum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.einsum),
/* harmony export */   "elu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.elu),
/* harmony export */   "enableDebugMode": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.enableDebugMode),
/* harmony export */   "enableProdMode": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.enableProdMode),
/* harmony export */   "enclosingPowerOfTwo": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.enclosingPowerOfTwo),
/* harmony export */   "engine": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.engine),
/* harmony export */   "ensureShape": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ensureShape),
/* harmony export */   "env": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env),
/* harmony export */   "equal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal),
/* harmony export */   "erf": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.erf),
/* harmony export */   "euclideanNorm": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.euclideanNorm),
/* harmony export */   "exp": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.exp),
/* harmony export */   "expandDims": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims),
/* harmony export */   "expm1": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expm1),
/* harmony export */   "eye": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.eye),
/* harmony export */   "fft": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fft),
/* harmony export */   "fill": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fill),
/* harmony export */   "findBackend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.findBackend),
/* harmony export */   "findBackendFactory": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.findBackendFactory),
/* harmony export */   "floor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.floor),
/* harmony export */   "floorDiv": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.floorDiv),
/* harmony export */   "forceHalfFloat": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.forceHalfFloat),
/* harmony export */   "fused": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fused),
/* harmony export */   "gather": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gather),
/* harmony export */   "gatherND": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gatherND),
/* harmony export */   "gather_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gather_util),
/* harmony export */   "getBackend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.getBackend),
/* harmony export */   "getGradient": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.getGradient),
/* harmony export */   "getKernel": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.getKernel),
/* harmony export */   "getKernelsForBackend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.getKernelsForBackend),
/* harmony export */   "gpgpu_util": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.gpgpu_util),
/* harmony export */   "grad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.grad),
/* harmony export */   "grads": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.grads),
/* harmony export */   "greater": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greater),
/* harmony export */   "greaterEqual": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greaterEqual),
/* harmony export */   "ifft": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ifft),
/* harmony export */   "imag": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.imag),
/* harmony export */   "image": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image),
/* harmony export */   "inTopKAsync": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.inTopKAsync),
/* harmony export */   "initializers": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.initializers),
/* harmony export */   "input": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.input),
/* harmony export */   "io": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io),
/* harmony export */   "irfft": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.irfft),
/* harmony export */   "isFinite": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.isFinite),
/* harmony export */   "isInf": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.isInf),
/* harmony export */   "isNaN": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.isNaN),
/* harmony export */   "keep": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep),
/* harmony export */   "kernel_impls": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.kernel_impls),
/* harmony export */   "layers": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.layers),
/* harmony export */   "leakyRelu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.leakyRelu),
/* harmony export */   "less": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.less),
/* harmony export */   "lessEqual": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.lessEqual),
/* harmony export */   "linalg": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.linalg),
/* harmony export */   "linspace": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.linspace),
/* harmony export */   "loadGraphModel": () => (/* reexport safe */ _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__.loadGraphModel),
/* harmony export */   "loadGraphModelSync": () => (/* reexport safe */ _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__.loadGraphModelSync),
/* harmony export */   "loadLayersModel": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.loadLayersModel),
/* harmony export */   "localResponseNormalization": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.localResponseNormalization),
/* harmony export */   "log": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log),
/* harmony export */   "log1p": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log1p),
/* harmony export */   "logSigmoid": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logSigmoid),
/* harmony export */   "logSoftmax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logSoftmax),
/* harmony export */   "logSumExp": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logSumExp),
/* harmony export */   "logicalAnd": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalAnd),
/* harmony export */   "logicalNot": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalNot),
/* harmony export */   "logicalOr": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalOr),
/* harmony export */   "logicalXor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalXor),
/* harmony export */   "losses": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.losses),
/* harmony export */   "lowerBound": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.lowerBound),
/* harmony export */   "matMul": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.matMul),
/* harmony export */   "math": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.math),
/* harmony export */   "max": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.max),
/* harmony export */   "maxPool": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPool),
/* harmony export */   "maxPool3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPool3d),
/* harmony export */   "maxPoolWithArgmax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPoolWithArgmax),
/* harmony export */   "maximum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maximum),
/* harmony export */   "mean": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean),
/* harmony export */   "memory": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.memory),
/* harmony export */   "meshgrid": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.meshgrid),
/* harmony export */   "metrics": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.metrics),
/* harmony export */   "min": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.min),
/* harmony export */   "minimum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.minimum),
/* harmony export */   "mirrorPad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mirrorPad),
/* harmony export */   "mod": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mod),
/* harmony export */   "model": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.model),
/* harmony export */   "models": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.models),
/* harmony export */   "moments": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.moments),
/* harmony export */   "movingAverage": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.movingAverage),
/* harmony export */   "mul": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul),
/* harmony export */   "multiRNNCell": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.multiRNNCell),
/* harmony export */   "multinomial": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.multinomial),
/* harmony export */   "neg": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.neg),
/* harmony export */   "nextFrame": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.nextFrame),
/* harmony export */   "norm": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.norm),
/* harmony export */   "notEqual": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.notEqual),
/* harmony export */   "oneHot": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.oneHot),
/* harmony export */   "ones": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ones),
/* harmony export */   "onesLike": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike),
/* harmony export */   "op": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.op),
/* harmony export */   "outerProduct": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.outerProduct),
/* harmony export */   "pad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad),
/* harmony export */   "pad1d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad1d),
/* harmony export */   "pad2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad2d),
/* harmony export */   "pad3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad3d),
/* harmony export */   "pad4d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad4d),
/* harmony export */   "pool": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pool),
/* harmony export */   "pow": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pow),
/* harmony export */   "prelu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.prelu),
/* harmony export */   "print": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.print),
/* harmony export */   "prod": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.prod),
/* harmony export */   "profile": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.profile),
/* harmony export */   "raggedGather": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.raggedGather),
/* harmony export */   "raggedRange": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.raggedRange),
/* harmony export */   "raggedTensorToTensor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.raggedTensorToTensor),
/* harmony export */   "rand": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.rand),
/* harmony export */   "randomGamma": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomGamma),
/* harmony export */   "randomNormal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomNormal),
/* harmony export */   "randomStandardNormal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomStandardNormal),
/* harmony export */   "randomUniform": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniform),
/* harmony export */   "randomUniformInt": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniformInt),
/* harmony export */   "range": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.range),
/* harmony export */   "ready": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ready),
/* harmony export */   "real": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.real),
/* harmony export */   "reciprocal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reciprocal),
/* harmony export */   "registerBackend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerBackend),
/* harmony export */   "registerCallbackConstructor": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.registerCallbackConstructor),
/* harmony export */   "registerGradient": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerGradient),
/* harmony export */   "registerKernel": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.registerKernel),
/* harmony export */   "registerOp": () => (/* reexport safe */ _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__.registerOp),
/* harmony export */   "regularizers": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.regularizers),
/* harmony export */   "relu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu),
/* harmony export */   "relu6": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu6),
/* harmony export */   "removeBackend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.removeBackend),
/* harmony export */   "reshape": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape),
/* harmony export */   "reverse": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse),
/* harmony export */   "reverse1d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse1d),
/* harmony export */   "reverse2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse2d),
/* harmony export */   "reverse3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse3d),
/* harmony export */   "reverse4d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse4d),
/* harmony export */   "rfft": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.rfft),
/* harmony export */   "round": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.round),
/* harmony export */   "rsqrt": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.rsqrt),
/* harmony export */   "scalar": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar),
/* harmony export */   "scatterND": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scatterND),
/* harmony export */   "scatter_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scatter_util),
/* harmony export */   "searchSorted": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.searchSorted),
/* harmony export */   "selu": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.selu),
/* harmony export */   "separableConv2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.separableConv2d),
/* harmony export */   "sequential": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.sequential),
/* harmony export */   "serialization": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization),
/* harmony export */   "setBackend": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.setBackend),
/* harmony export */   "setPlatform": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.setPlatform),
/* harmony export */   "setWebGLContext": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.setWebGLContext),
/* harmony export */   "setdiff1dAsync": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.setdiff1dAsync),
/* harmony export */   "shared": () => (/* reexport safe */ _tensorflow_tfjs_backend_cpu__WEBPACK_IMPORTED_MODULE_6__.shared),
/* harmony export */   "sigmoid": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sigmoid),
/* harmony export */   "sign": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sign),
/* harmony export */   "signal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.signal),
/* harmony export */   "sin": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sin),
/* harmony export */   "sinh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sinh),
/* harmony export */   "slice": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice),
/* harmony export */   "slice1d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice1d),
/* harmony export */   "slice2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice2d),
/* harmony export */   "slice3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice3d),
/* harmony export */   "slice4d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice4d),
/* harmony export */   "slice_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice_util),
/* harmony export */   "softmax": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softmax),
/* harmony export */   "softplus": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softplus),
/* harmony export */   "spaceToBatchND": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.spaceToBatchND),
/* harmony export */   "sparse": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sparse),
/* harmony export */   "sparseToDense": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sparseToDense),
/* harmony export */   "spectral": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.spectral),
/* harmony export */   "split": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split),
/* harmony export */   "sqrt": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sqrt),
/* harmony export */   "square": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.square),
/* harmony export */   "squaredDifference": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.squaredDifference),
/* harmony export */   "squeeze": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.squeeze),
/* harmony export */   "stack": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack),
/* harmony export */   "step": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.step),
/* harmony export */   "stridedSlice": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stridedSlice),
/* harmony export */   "string": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.string),
/* harmony export */   "sub": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub),
/* harmony export */   "sum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum),
/* harmony export */   "sumOutType": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sumOutType),
/* harmony export */   "tan": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tan),
/* harmony export */   "tanh": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tanh),
/* harmony export */   "tensor": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor),
/* harmony export */   "tensor1d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor1d),
/* harmony export */   "tensor2d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor2d),
/* harmony export */   "tensor3d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor3d),
/* harmony export */   "tensor4d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor4d),
/* harmony export */   "tensor5d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor5d),
/* harmony export */   "tensor6d": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor6d),
/* harmony export */   "tensorScatterUpdate": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensorScatterUpdate),
/* harmony export */   "tensor_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor_util),
/* harmony export */   "test_util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.test_util),
/* harmony export */   "tidy": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy),
/* harmony export */   "tile": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tile),
/* harmony export */   "time": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.time),
/* harmony export */   "topk": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.topk),
/* harmony export */   "train": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.train),
/* harmony export */   "transpose": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose),
/* harmony export */   "truncatedNormal": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.truncatedNormal),
/* harmony export */   "unique": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unique),
/* harmony export */   "unregisterGradient": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unregisterGradient),
/* harmony export */   "unregisterKernel": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unregisterKernel),
/* harmony export */   "unsortedSegmentSum": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unsortedSegmentSum),
/* harmony export */   "unstack": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack),
/* harmony export */   "upcastType": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upcastType),
/* harmony export */   "upperBound": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.upperBound),
/* harmony export */   "util": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util),
/* harmony export */   "valueAndGrad": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.valueAndGrad),
/* harmony export */   "valueAndGrads": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.valueAndGrads),
/* harmony export */   "variable": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.variable),
/* harmony export */   "variableGrads": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.variableGrads),
/* harmony export */   "version": () => (/* binding */ version),
/* harmony export */   "version_converter": () => (/* reexport safe */ _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__.version_converter),
/* harmony export */   "version_core": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.version_core),
/* harmony export */   "version_cpu": () => (/* reexport safe */ _tensorflow_tfjs_backend_cpu__WEBPACK_IMPORTED_MODULE_6__.version_cpu),
/* harmony export */   "version_layers": () => (/* reexport safe */ _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.version_layers),
/* harmony export */   "version_webgl": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.version_webgl),
/* harmony export */   "webgl": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.webgl),
/* harmony export */   "webgl_util": () => (/* reexport safe */ _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.webgl_util),
/* harmony export */   "where": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.where),
/* harmony export */   "whereAsync": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.whereAsync),
/* harmony export */   "zeros": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros),
/* harmony export */   "zerosLike": () => (/* reexport safe */ _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zerosLike)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _tensorflow_tfjs_core_dist_register_all_gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/register_all_gradients */ 16394);
/* harmony import */ var _tensorflow_tfjs_core_dist_public_chained_ops_register_all_chained_ops__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops */ 88381);
/* harmony import */ var _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-layers */ 75537);
/* harmony import */ var _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-converter */ 51101);
/* harmony import */ var _tensorflow_tfjs_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-data */ 69309);
/* harmony import */ var _tensorflow_tfjs_backend_cpu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-backend-cpu */ 72836);
/* harmony import */ var _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-backend-webgl */ 31527);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./version */ 91173);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// tslint:disable-next-line: no-imports-from-dist

// tslint:disable-next-line: no-imports-from-dist




// Export data api as tf.data


// Import and register backends.


// Import versions of all sub-packages.







const version = {
  'tfjs-core': _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.version_core,
  'tfjs-backend-cpu': _tensorflow_tfjs_backend_cpu__WEBPACK_IMPORTED_MODULE_6__.version_cpu,
  'tfjs-backend-webgl': _tensorflow_tfjs_backend_webgl__WEBPACK_IMPORTED_MODULE_7__.version_webgl,
  'tfjs-data': _tensorflow_tfjs_data__WEBPACK_IMPORTED_MODULE_5__.version_data,
  'tfjs-layers': _tensorflow_tfjs_layers__WEBPACK_IMPORTED_MODULE_3__.version_layers,
  'tfjs-converter': _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_4__.version_converter,
  'tfjs': _version__WEBPACK_IMPORTED_MODULE_8__.version
};

/***/ }),

/***/ 91173:
/*!*******************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/dist/version.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '4.5.0';


/***/ }),

/***/ 66255:
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataType": () => (/* binding */ DataType),
/* harmony export */   "SaverDef": () => (/* binding */ SaverDef)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/** DataType enum. */
var DataType;
(function (DataType) {
  // Not a legal value for DataType.  Used to indicate a DataType field
  // has not been set.
  DataType[DataType["DT_INVALID"] = 0] = "DT_INVALID";
  // Data types that all computation devices are expected to be
  // capable to support.
  DataType[DataType["DT_FLOAT"] = 1] = "DT_FLOAT";
  DataType[DataType["DT_DOUBLE"] = 2] = "DT_DOUBLE";
  DataType[DataType["DT_INT32"] = 3] = "DT_INT32";
  DataType[DataType["DT_UINT8"] = 4] = "DT_UINT8";
  DataType[DataType["DT_INT16"] = 5] = "DT_INT16";
  DataType[DataType["DT_INT8"] = 6] = "DT_INT8";
  DataType[DataType["DT_STRING"] = 7] = "DT_STRING";
  DataType[DataType["DT_COMPLEX64"] = 8] = "DT_COMPLEX64";
  DataType[DataType["DT_INT64"] = 9] = "DT_INT64";
  DataType[DataType["DT_BOOL"] = 10] = "DT_BOOL";
  DataType[DataType["DT_QINT8"] = 11] = "DT_QINT8";
  DataType[DataType["DT_QUINT8"] = 12] = "DT_QUINT8";
  DataType[DataType["DT_QINT32"] = 13] = "DT_QINT32";
  DataType[DataType["DT_BFLOAT16"] = 14] = "DT_BFLOAT16";
  DataType[DataType["DT_QINT16"] = 15] = "DT_QINT16";
  DataType[DataType["DT_QUINT16"] = 16] = "DT_QUINT16";
  DataType[DataType["DT_UINT16"] = 17] = "DT_UINT16";
  DataType[DataType["DT_COMPLEX128"] = 18] = "DT_COMPLEX128";
  DataType[DataType["DT_HALF"] = 19] = "DT_HALF";
  DataType[DataType["DT_RESOURCE"] = 20] = "DT_RESOURCE";
  DataType[DataType["DT_VARIANT"] = 21] = "DT_VARIANT";
  DataType[DataType["DT_UINT32"] = 22] = "DT_UINT32";
  DataType[DataType["DT_UINT64"] = 23] = "DT_UINT64";
  // Do not use!  These are only for parameters.  Every enum above
  // should have a corresponding value below (verified by types_test).
  DataType[DataType["DT_FLOAT_REF"] = 101] = "DT_FLOAT_REF";
  DataType[DataType["DT_DOUBLE_REF"] = 102] = "DT_DOUBLE_REF";
  DataType[DataType["DT_INT32_REF"] = 103] = "DT_INT32_REF";
  DataType[DataType["DT_UINT8_REF"] = 104] = "DT_UINT8_REF";
  DataType[DataType["DT_INT16_REF"] = 105] = "DT_INT16_REF";
  DataType[DataType["DT_INT8_REF"] = 106] = "DT_INT8_REF";
  DataType[DataType["DT_STRING_REF"] = 107] = "DT_STRING_REF";
  DataType[DataType["DT_COMPLEX64_REF"] = 108] = "DT_COMPLEX64_REF";
  DataType[DataType["DT_INT64_REF"] = 109] = "DT_INT64_REF";
  DataType[DataType["DT_BOOL_REF"] = 110] = "DT_BOOL_REF";
  DataType[DataType["DT_QINT8_REF"] = 111] = "DT_QINT8_REF";
  DataType[DataType["DT_QUINT8_REF"] = 112] = "DT_QUINT8_REF";
  DataType[DataType["DT_QINT32_REF"] = 113] = "DT_QINT32_REF";
  DataType[DataType["DT_BFLOAT16_REF"] = 114] = "DT_BFLOAT16_REF";
  DataType[DataType["DT_QINT16_REF"] = 115] = "DT_QINT16_REF";
  DataType[DataType["DT_QUINT16_REF"] = 116] = "DT_QUINT16_REF";
  DataType[DataType["DT_UINT16_REF"] = 117] = "DT_UINT16_REF";
  DataType[DataType["DT_COMPLEX128_REF"] = 118] = "DT_COMPLEX128_REF";
  DataType[DataType["DT_HALF_REF"] = 119] = "DT_HALF_REF";
  DataType[DataType["DT_RESOURCE_REF"] = 120] = "DT_RESOURCE_REF";
  DataType[DataType["DT_VARIANT_REF"] = 121] = "DT_VARIANT_REF";
  DataType[DataType["DT_UINT32_REF"] = 122] = "DT_UINT32_REF";
  DataType[DataType["DT_UINT64_REF"] = 123] = "DT_UINT64_REF";
})(DataType || (DataType = {}));
var SaverDef;
(function (SaverDef) {
  /** CheckpointFormatVersion enum. */
  let CheckpointFormatVersion;
  (function (CheckpointFormatVersion) {
    CheckpointFormatVersion[CheckpointFormatVersion["LEGACY"] = 0] = "LEGACY";
    CheckpointFormatVersion[CheckpointFormatVersion["V1"] = 1] = "V1";
    CheckpointFormatVersion[CheckpointFormatVersion["V2"] = 2] = "V2";
  })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));
})(SaverDef || (SaverDef = {}));

/***/ }),

/***/ 79396:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExecutionContext": () => (/* binding */ ExecutionContext)
/* harmony export */ });
/**
 * ExecutionContext captures the runtime environment of the node. It keeps
 * track of the current frame and iteration for the control flow ops.
 *
 * For example, typical Dynamic RNN model may contain loops, for which
 * TensorFlow will generate graphs with Enter/Exit nodes to control the
 * current execution frame, and NextIteration Nodes for iteration id increment.
 * For model with branch logic, TensorFLow will generate Switch/Merge ops.
 */
class ExecutionContext {
  constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}, parseNodeNameCache) {
    this.weightMap = weightMap;
    this.tensorArrayMap = tensorArrayMap;
    this.tensorListMap = tensorListMap;
    this.functionMap = functionMap;
    this.parseNodeNameCache = parseNodeNameCache;
    this.rootContext = {
      id: 0,
      frameName: '',
      iterationId: 0
    };
    this.contexts = [this.rootContext];
    this.lastId = 0;
    this.generateCurrentContextIds();
  }
  newFrame(id, frameName) {
    return {
      id,
      frameName,
      iterationId: 0
    };
  }
  /**
   * Set the current context
   * @param contexts: ExecutionContextInfo[] the current path of execution
   * frames
   */
  set currentContext(contexts) {
    if (this.contexts !== contexts) {
      this.contexts = contexts;
      this.generateCurrentContextIds();
    }
  }
  get currentContext() {
    return this.contexts;
  }
  /**
   * Returns the current context in string format.
   */
  get currentContextId() {
    return this._currentContextIds[0];
  }
  /**
   * Returns the current context and all parent contexts in string format.
   * This allow access to the nodes in the current and parent frames.
   */
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    const names = [];
    for (let i = 0; i < this.contexts.length - 1; i++) {
      const contexts = this.contexts.slice(0, this.contexts.length - i);
      names.push(this.contextIdforContexts(contexts));
    }
    names.push('');
    this._currentContextIds = names;
  }
  contextIdforContexts(contexts) {
    return contexts ? contexts.map(context => context.id === 0 && context.iterationId === 0 ? '' : `${context.frameName}-${context.iterationId}`).join('/') : '';
  }
  /**
   * Enter a new frame, a new context is pushed on the current context list.
   * @param frameId new frame id
   */
  enterFrame(frameId) {
    if (this.contexts) {
      this.lastId++;
      this.contexts = this.contexts.slice();
      this.contexts.push(this.newFrame(this.lastId, frameId));
      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
    }
  }
  /**
   * Exit the current frame, the last context is removed from the current
   * context list.
   */
  exitFrame() {
    if (this.contexts && this.contexts.length > 1) {
      this.contexts = this.contexts.slice();
      this.contexts.splice(-1);
      this.currentContextIds.shift();
    } else {
      throw new Error('Cannot exit frame, the context is empty');
    }
  }
  /**
   * Enter the next iteration of a loop, the iteration id of last context is
   * increased.
   */
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice();
      this.lastId++;
      const context = Object.assign({}, this.contexts[this.contexts.length - 1]);
      context.iterationId += 1;
      context.id = this.lastId;
      this.contexts.splice(-1, 1, context);
      this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else {
      throw new Error('Cannot increase frame iteration, the context is empty');
    }
  }
  getWeight(name) {
    return this.weightMap[name];
  }
  addTensorArray(tensorArray) {
    this.tensorArrayMap[tensorArray.id] = tensorArray;
  }
  getTensorArray(id) {
    return this.tensorArrayMap[id];
  }
  addTensorList(tensorList) {
    this.tensorListMap[tensorList.id] = tensorList;
  }
  getTensorList(id) {
    return this.tensorListMap[id];
  }
  dispose(keepIds) {
    for (const key in this.tensorArrayMap) {
      this.tensorArrayMap[key].clearAndClose(keepIds);
    }
    for (const key in this.tensorListMap) {
      this.tensorListMap[key].clearAndClose(keepIds);
    }
  }
}

/***/ }),

/***/ 88286:
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GraphExecutor": () => (/* binding */ GraphExecutor)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations/executors/utils */ 80461);
/* harmony import */ var _operations_operation_executor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operations/operation_executor */ 81033);
/* harmony import */ var _execution_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./execution_context */ 79396);
/* harmony import */ var _model_analysis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model_analysis */ 24148);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





class GraphExecutor {
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(weightMap) {
    const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));
    this._weightIds = [].concat(...weightIds);
    this._weightMap = weightMap;
  }
  /**
   * Set `ResourceManager` shared by executors of a model.
   * @param resourceManager: `ResourceManager` of the `GraphModel`.
   */
  set resourceManager(resourceManager) {
    this._resourceManager = resourceManager;
  }
  get inputs() {
    return this._inputs.map(node => {
      return {
        name: node.name,
        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,
        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined
      };
    });
  }
  get outputs() {
    return this._outputs.map(node => {
      return {
        name: node.name,
        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,
        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined
      };
    });
  }
  get inputNodes() {
    return this._inputs.map(node => node.signatureKey || node.name);
  }
  get outputNodes() {
    return this._outputs.map(node => {
      const name = node.signatureKey || node.name;
      return node.defaultOutput ? `${name}:${node.defaultOutput}` : name;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((map, key) => {
      map[key] = this._functions[key].signature;
      return map;
    }, {});
  }
  /**
   *
   * @param graph Graph the model or function graph to be executed.
   * @param parent When building function exector you need to set the parent
   * executor. Since the weights and function executor maps are set at parant
   * level, that function executor can access the function maps and weight maps
   * through the parent.
   */
  constructor(graph, parent) {
    this.graph = graph;
    this.parent = parent;
    this.compiledMap = new Map();
    this.parseNodeNameCache = new Map();
    this._weightMap = {};
    this.SEPARATOR = ',';
    this._functions = {};
    this._functionExecutorMap = {};
    this.keepIntermediateTensors = false;
    this._outputs = graph.outputs;
    this._inputs = graph.inputs;
    this._initNodes = graph.initNodes;
    this._signature = graph.signature;
    this._functions = graph.functions;
    // create sub-graph executors
    if (graph.functions != null) {
      Object.keys(graph.functions).forEach(name => {
        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);
      });
    }
  }
  getCompilationKey(inputs, outputs) {
    const sortedInputs = inputs.map(node => node.name).sort();
    const sortedOutputs = outputs.map(node => node.name).sort();
    return sortedInputs.join(this.SEPARATOR) + '--' + sortedOutputs.join(this.SEPARATOR);
  }
  /**
   * Compiles the inference graph and returns the minimal set of nodes that are
   * required for execution, in the correct execution order.
   * @returns {Object} compilation The compile result.
   * @returns {Node[]} compilation.orderedNodes Nodes in the correct execution
   *     order.
   * @returns {Map<string, Node[]>} compilation.nodeLiveUntilMap A map from node
   *     to disposable nodes after its execution. That is, for a node `x`,
   *     `nodeLiveUntilMap[x]` indicates all nodes whose intermediate
   *     tensors should be disposed after `x` is executed.
   */
  compile(inputs, outputs) {
    const executionInfo = (0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.getExecutionSubgraph)(inputs, outputs, this.weightMap, this._initNodes);
    const {
      missingInputs,
      dynamicNode,
      syncInputs
    } = executionInfo;
    if (dynamicNode != null) {
      throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` + `the dynamic op '${dynamicNode.op}'. Please use ` + `model.executeAsync() instead. Alternatively, to avoid the ` + `dynamic ops, specify the inputs [${syncInputs}]`);
    }
    if (missingInputs.length > 0) {
      const outNames = outputs.map(n => n.name);
      const inNames = Object.keys(inputs);
      throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` + `[${inNames}]. Missing the following inputs: [${missingInputs}]`);
    }
    const orderedNodes = (0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.getNodesInTopologicalOrder)(this.graph, executionInfo);
    const nodeLiveUntilMap = (0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.getNodeLiveUntilMap)(orderedNodes);
    return {
      orderedNodes,
      nodeLiveUntilMap
    };
  }
  cloneAndKeepTensor(tensor) {
    if (tensor == null) {
      return null;
    }
    const clone = tensor.clone();
    // Keep the clone because`model.execute()` may be called within
    // a `tidy()`, but the user may inspect these tensors after the
    // tidy.
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep)(clone);
    return clone;
  }
  cloneTensorList(tensors) {
    if (!tensors) {
      return null;
    }
    const clonedTensor = tensors.map(tensor => {
      return this.cloneAndKeepTensor(tensor);
    });
    return clonedTensor;
  }
  cloneTensorMap(tensorsMap) {
    return Object.fromEntries(Object.entries(tensorsMap).map(([name, tensorsList]) => {
      return [name, this.cloneTensorList(tensorsList)];
    }));
  }
  /**
   * Executes the inference for given input tensors.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model, if
   * no outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   */
  execute(inputs, outputs) {
    // Dispose any tensors from a prior run to avoid leaking them.
    this.disposeIntermediateTensors();
    inputs = this.mapInputs(inputs);
    const names = Object.keys(inputs).sort();
    this.checkInputs(inputs);
    this.checkInputShapeAndType(inputs);
    outputs = this.mapOutputs(outputs);
    this.checkOutputs(outputs);
    const inputNodes = names.map(name => this.graph.nodes[(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name)[0]]);
    const outputNodeNames = outputs.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name)[0]);
    const outputNodeNameSet = new Set(outputNodeNames);
    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);
    // If no outputs are specified, then use the default outputs of the model.
    if (outputNodes.length === 0) {
      outputNodes = this._outputs;
    }
    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);
    // Do nothing if the compiled graph cache contains the input.
    let compilation = this.compiledMap.get(compilationKey);
    if (compilation == null) {
      compilation = this.compile(inputs, outputNodes);
      this.compiledMap.set(compilationKey, compilation);
    }
    // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.
    try {
      this.keepIntermediateTensors = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('KEEP_INTERMEDIATE_TENSORS');
    } catch (e) {
      this.keepIntermediateTensors = false;
      console.warn(e.message);
    }
    const tensorArrayMap = {};
    const tensorListMap = {};
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
      const context = new _execution_context__WEBPACK_IMPORTED_MODULE_4__.ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap, this.parseNodeNameCache);
      const tensorsMap = Object.assign({}, this.weightMap);
      if (this.keepIntermediateTensors) {
        this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);
      }
      Object.keys(inputs).forEach(name => {
        const [nodeName, index] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name, context);
        const tensors = [];
        tensors[index] = inputs[name];
        tensorsMap[nodeName] = tensors;
        if (this.keepIntermediateTensors) {
          this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);
        }
      });
      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
      const {
        orderedNodes,
        nodeLiveUntilMap
      } = compilation;
      for (const node of orderedNodes) {
        if (tensorsMap[node.name]) {
          continue;
        }
        const tensors = (0,_operations_operation_executor__WEBPACK_IMPORTED_MODULE_3__.executeOp)(node, tensorsMap, context, this._resourceManager);
        if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isPromise(tensors)) {
          throw new Error(`The execution of the op '${node.op}' returned a promise. ` + `Please use model.executeAsync() instead.`);
        }
        tensorsMap[node.name] = tensors;
        if (this.keepIntermediateTensors) {
          this.clonedTensorsMap[node.name] = this.cloneTensorList(tensors);
        }
        this.checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorsMap, context, tensorsToKeep, outputNodeNameSet, nodeLiveUntilMap.get(node.name));
      }
      // dispose the context for the root executor
      if (this.parent == null) {
        context.dispose(tensorsToKeep);
      }
      return outputs.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getTensor)(name, tensorsMap, context));
    });
  }
  getFrozenTensorIds(tensorMap) {
    const ids = [].concat.apply([], Object.keys(tensorMap).map(key => tensorMap[key]).map(tensors => tensors.map(tensor => tensor.id)));
    return new Set(ids);
  }
  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount) {
    // Skip output nodes and any control flow nodes, since its dependency is
    // tricky to track correctly.
    if ((0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.isControlFlow)(node) || outputNodeNameSet.has(nodeName)) {
      return;
    }
    for (const tensor of tensorMap[nodeName]) {
      if (tensor == null) {
        continue;
      }
      intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;
    }
    for (const input of node.inputs) {
      // Skip any control flow nodes, since its dependency is tricky to track
      // correctly.
      if ((0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.isControlFlow)(input)) {
        continue;
      }
      const tensors = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getTensorsForCurrentContext)(input.name, tensorMap, context);
      if (tensors == null) {
        continue;
      }
      for (const tensor of tensors) {
        if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {
          continue;
        }
        // Only intermediate nodes' tensors have counts set, not marked as
        // kept, and not in `tensorsToKeep`.
        // Input and weight nodes' tensors should exist in `tensorsToKeep`.
        // Output and control flow nodes' tensors should never have count set.
        const count = intermediateTensorConsumerCount[tensor.id];
        if (count === 1) {
          tensor.dispose();
          delete intermediateTensorConsumerCount[tensor.id];
        } else if (count != null) {
          intermediateTensorConsumerCount[tensor.id]--;
        }
      }
    }
  }
  checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorMap, context, tensorsToKeep, outputNodeNameSet, liveUntilNodes) {
    function isNonDisposableNode(node) {
      // Skip output nodes and any control flow nodes, since its dependency is
      // tricky to track correctly.
      return (0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.isControlFlow)(node) || outputNodeNameSet.has(node.name);
    }
    if ((0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.isControlFlow)(node) || liveUntilNodes == null) {
      return;
    }
    for (const nodeToDispose of liveUntilNodes) {
      if (isNonDisposableNode(nodeToDispose)) {
        continue;
      }
      const tensors = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getTensorsForCurrentContext)(nodeToDispose.name, tensorMap, context);
      for (const tensor of tensors) {
        if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {
          continue;
        }
        tensor.dispose();
      }
    }
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   */
  executeAsync(inputs, outputs) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this._executeAsync(inputs, outputs);
    })();
  }
  disposeIntermediateTensors() {
    if (!this.clonedTensorsMap) {
      return;
    }
    Object.values(this.clonedTensorsMap).forEach(tensorsList => {
      for (const tensor of tensorsList) {
        if (tensor && !tensor.isDisposed) {
          tensor.dispose();
        }
      }
    });
    this.clonedTensorsMap = null;
  }
  getIntermediateTensors() {
    return this.clonedTensorsMap;
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to
   * the outputs array.
   * @param isFunctionExecution Optional. Flag for executing a function.
   * @param tensorArrayMap Optional, global TensorArray map by id. Used for
   * function execution.
   * @param tensorArrayMap Optinal global TensorList map by id. Used for
   * function execution.
   */
  _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Dispose any tensors from a prior run to avoid leaking them.
      _this2.disposeIntermediateTensors();
      if (!isFunctionExecution) {
        inputs = _this2.mapInputs(inputs);
        _this2.checkInputs(inputs);
        _this2.checkInputShapeAndType(inputs);
        outputs = _this2.mapOutputs(outputs);
        _this2.checkOutputs(outputs);
      }
      // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.
      try {
        _this2.keepIntermediateTensors = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('KEEP_INTERMEDIATE_TENSORS');
      } catch (e) {
        _this2.keepIntermediateTensors = false;
        console.warn(e.message);
      }
      const context = new _execution_context__WEBPACK_IMPORTED_MODULE_4__.ExecutionContext(_this2.weightMap, tensorArrayMap, tensorListMap, _this2.functionExecutorMap, _this2.parseNodeNameCache);
      if (_this2.keepIntermediateTensors) {
        _this2.clonedTensorsMap = _this2.cloneTensorMap(_this2.weightMap);
      }
      // Graph with control flow op requires runtime evaluation of the execution
      // order, while without control flow the execution order is pre-determined
      // in the compile method.
      const tensorsMap = yield _this2.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);
      const results = outputs.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getTensor)(name, tensorsMap, context));
      // dispose all the intermediate tensors
      const outputIds = results.map(t => t.id);
      const inputIds = Object.keys(inputs).map(name => inputs[name].id);
      const keepIds = new Set([...outputIds, ...inputIds, ..._this2.weightIds]);
      Object.values(tensorsMap).forEach(tensorsList => {
        tensorsList.forEach(tensor => {
          if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {
            tensor.dispose();
          }
        });
      });
      // dispose the context for the root executor
      if (_this2.parent == null) {
        context.dispose(keepIds);
      }
      return results;
    })();
  }
  executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const mappedInputs = inputs.reduce((map, tensor, index) => {
        map[_this3.inputs[index].name] = tensor;
        return map;
      }, {});
      return _this3._executeAsync(mappedInputs, _this3.outputNodes, true, tensorArrayMap, tensorListMap);
    })();
  }
  /**
   * When there are control flow nodes in the graph, the graph execution use
   * ExecutionContext to keep track of the frames and loop iterators.
   * @param inputs placeholder tensors for the graph.
   * @param context the execution context object for current execution.
   * @param outputNames Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to
   * the outputs array.
   * @param isFunctionExecution Flag for executing a function.
   */
  executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const names = Object.keys(inputs);
      const inputNodes = names.map(name => _this4.graph.nodes[(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name)[0]]);
      const outputNodeNames = outputNames.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name)[0]);
      const outputNodeNameSet = new Set(outputNodeNames);
      let outputNodes = outputNodeNames.map(name => _this4.graph.nodes[name]);
      // If no outputs are specified, then use the default outputs of the model.
      if (outputNodes.length === 0) {
        outputNodes = _this4._outputs;
      }
      const {
        usedNodes,
        missingInputs,
        dynamicNode,
        syncInputs
      } = (0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.getExecutionSubgraph)(inputs, outputNodes, _this4.weightMap, _this4._initNodes);
      // First nodes to execute include inputNodes, weights, and initNodes.
      const stack = [...inputNodes, ..._this4.graph.weights, ...(_this4._initNodes || [])].map(node => {
        return {
          node,
          contexts: context.currentContext
        };
      });
      const tensorsMap = Object.assign({}, _this4.weightMap);
      Object.keys(inputs).forEach(name => {
        const [nodeName, index] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name);
        const tensors = [];
        tensors[index] = inputs[name];
        tensorsMap[nodeName] = tensors;
      });
      const intermediateTensorConsumerCount = {};
      const tensorsToKeep = _this4.getFrozenTensorIds(tensorsMap);
      const added = {};
      while (stack.length > 0) {
        const promises = _this4.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes);
        yield Promise.all(promises);
      }
      if (dynamicNode == null && !isFunctionExecution) {
        console.warn(`This model execution did not contain any nodes with control flow ` + `or dynamic output shapes. You can use model.execute() instead.`);
      }
      const missingOutputs = outputNodes.filter(node => !(0,_model_analysis__WEBPACK_IMPORTED_MODULE_5__.isControlFlow)(node) && !(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getTensor)(node.name, tensorsMap, context)).map(node => node.name);
      if (missingOutputs.length > 0) {
        let alternativeMsg = '';
        if (dynamicNode != null) {
          alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() ` + `and specify the inputs [${syncInputs}]`;
        }
        throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` + `inputs [${names}]. Consider providing the following inputs: ` + `[${missingInputs}]. ${alternativeMsg}`);
      }
      return tensorsMap;
    })();
  }
  processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes) {
    const promises = [];
    while (stack.length > 0) {
      const item = stack.pop();
      context.currentContext = item.contexts;
      let nodeName = '';
      // The tensor of the Enter op with isConstant set should be set
      // in the parent scope, so it will be available as constant for the
      // whole loop.
      if (item.node.op === 'Enter' && (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('isConstant', item.node, tensorMap, context)) {
        [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getNodeNameAndIndex)(item.node.name, context);
      }
      // only process nodes that are not in the tensorMap yet, this include
      // inputNodes and internal initNodes.
      if (tensorMap[item.node.name] == null) {
        const tensors = (0,_operations_operation_executor__WEBPACK_IMPORTED_MODULE_3__.executeOp)(item.node, tensorMap, context, this._resourceManager);
        if (!nodeName) {
          [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getNodeNameAndIndex)(item.node.name, context);
        }
        const currentContext = context.currentContext;
        if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isPromise(tensors)) {
          promises.push(tensors.then(t => {
            tensorMap[nodeName] = t;
            if (this.keepIntermediateTensors) {
              this.clonedTensorsMap[nodeName] = this.cloneTensorList(t);
            }
            context.currentContext = currentContext;
            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);
            this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
            return t;
          }));
        } else {
          tensorMap[nodeName] = tensors;
          if (this.keepIntermediateTensors) {
            this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);
          }
          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);
          this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
        }
      } else {
        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
      }
    }
    return promises;
  }
  processChildNodes(node, stack, context, tensorMap, added, usedNodes) {
    node.children.forEach(childNode => {
      const [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getNodeNameAndIndex)(childNode.name, context);
      if (added[nodeName] || !usedNodes.has(childNode.name)) {
        return;
      }
      // Merge op can be pushed if any of its inputs has value.
      if (childNode.op === 'Merge') {
        if (childNode.inputNames.some(name => {
          return !!(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getTensor)(name, tensorMap, context);
        })) {
          added[nodeName] = true;
          stack.push({
            contexts: context.currentContext,
            node: childNode
          });
        }
      } else
        // Otherwise all inputs must to have value.
        if (childNode.inputNames.every(name => {
          return !!(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.getTensor)(name, tensorMap, context);
        })) {
          added[nodeName] = true;
          stack.push({
            contexts: context.currentContext,
            node: childNode
          });
        }
    });
  }
  /**
   * Releases the memory used by the weight tensors.
   */
  dispose() {
    Object.keys(this.weightMap).forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));
  }
  checkInputShapeAndType(inputs) {
    Object.keys(inputs).forEach(name => {
      const input = inputs[name];
      const [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name);
      const node = this.graph.nodes[nodeName];
      if (node.attrParams['shape'] && node.attrParams['shape'].value) {
        const shape = node.attrParams['shape'].value;
        const match = shape.length === input.shape.length && input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(match, () => `The shape of dict['${node.name}'] provided in ` + `model.execute(dict) must be [${shape}], but was ` + `[${input.shape}]`);
      }
      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` + `model.execute(dict) must be ` + `${node.attrParams['dtype'].value}, but was ${input.dtype}`);
      }
    });
  }
  mapInputs(inputs) {
    var _a, _b;
    const result = {};
    for (const inputName in inputs) {
      const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName];
      if (tensor != null) {
        result[tensor.name] = inputs[inputName];
      } else {
        result[inputName] = inputs[inputName];
      }
    }
    return result;
  }
  checkInputs(inputs) {
    const notInGraph = Object.keys(inputs).filter(name => {
      const [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name);
      return this.graph.nodes[nodeName] == null;
    });
    if (notInGraph.length > 0) {
      throw new Error(`The dict provided in model.execute(dict) has ` + `keys: [${notInGraph}] that are not part of graph`);
    }
  }
  mapOutputs(outputs) {
    return outputs.map(name => {
      var _a, _b;
      const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.outputs) === null || _b === void 0 ? void 0 : _b[name];
      if (tensor != null) {
        return tensor.name;
      }
      return name;
    }, {});
  }
  checkOutputs(outputs) {
    outputs.forEach(name => {
      const [normalizedName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_2__.parseNodeName)(name);
      if (!this.graph.nodes[normalizedName]) {
        throw new Error(`The output '${name}' is not found in the graph`);
      }
    });
  }
}

/***/ }),

/***/ 87205:
/*!************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_MODEL_NAME": () => (/* binding */ DEFAULT_MODEL_NAME),
/* harmony export */   "GraphModel": () => (/* binding */ GraphModel),
/* harmony export */   "TFHUB_SEARCH_PARAM": () => (/* binding */ TFHUB_SEARCH_PARAM),
/* harmony export */   "loadGraphModel": () => (/* binding */ loadGraphModel),
/* harmony export */   "loadGraphModelSync": () => (/* binding */ loadGraphModelSync)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _operations_operation_mapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations/operation_mapper */ 23993);
/* harmony import */ var _graph_executor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./graph_executor */ 88286);
/* harmony import */ var _resource_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resource_manager */ 93135);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const TFHUB_SEARCH_PARAM = '?tfjs-format=file';
const DEFAULT_MODEL_NAME = 'model.json';
/**
 * A `tf.GraphModel` is a directed, acyclic graph built from a
 * SavedModel GraphDef and allows inference execution.
 *
 * A `tf.GraphModel` can only be created by loading from a model converted from
 * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using
 * the command line converter tool and loaded via `tf.loadGraphModel`.
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */
class GraphModel {
  // Returns the version information for the tensorflow model GraphDef.
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  /**
   * @param modelUrl url for the model, or an `io.IOHandler`.
   * @param weightManifestUrl url for the weight file generated by
   * scripts/convert.py script.
   * @param requestOption options for Request, which allows to send credentials
   * and custom headers.
   * @param onProgress Optional, progress callback function, fired periodically
   * before the load is completed.
   */
  constructor(modelUrl, loadOptions = {}, tfio = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io) {
    this.modelUrl = modelUrl;
    this.loadOptions = loadOptions;
    this.version = 'n/a';
    this.io = tfio;
    if (loadOptions == null) {
      this.loadOptions = {};
    }
    this.resourceManager = new _resource_manager__WEBPACK_IMPORTED_MODULE_4__.ResourceManager();
  }
  findIOHandler() {
    const path = this.modelUrl;
    if (path.load != null) {
      // Path is an IO Handler.
      this.handler = path;
    } else if (this.loadOptions.requestInit != null) {
      this.handler = this.io.browserHTTPRequest(path, this.loadOptions);
    } else {
      const handlers = this.io.getLoadHandlers(path, this.loadOptions);
      if (handlers.length === 0) {
        // For backward compatibility: if no load handler can be found,
        // assume it is a relative http path.
        handlers.push(this.io.browserHTTPRequest(path, this.loadOptions));
      } else if (handlers.length > 1) {
        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);
      }
      this.handler = handlers[0];
    }
  }
  /**
   * Loads the model and weight files, construct the in memory weight map and
   * compile the inference graph.
   */
  load() {
    this.findIOHandler();
    if (this.handler.load == null) {
      throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');
    }
    const loadResult = this.handler.load();
    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.isPromise(loadResult)) {
      return loadResult.then(artifacts => this.loadSync(artifacts));
    }
    return this.loadSync(loadResult);
  }
  /**
   * Synchronously construct the in memory weight map and
   * compile the inference graph.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  loadSync(artifacts) {
    this.artifacts = artifacts;
    const graph = this.artifacts.modelTopology;
    let signature = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      const metadata = this.artifacts.userDefinedMetadata;
      if (metadata.signature != null) {
        signature = metadata.signature;
      }
      if (metadata.structuredOutputKeys != null) {
        this.structuredOutputKeys = metadata.structuredOutputKeys;
      }
    }
    this.signature = signature;
    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;
    const weightMap = this.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    this.executor = new _graph_executor__WEBPACK_IMPORTED_MODULE_3__.GraphExecutor(_operations_operation_mapper__WEBPACK_IMPORTED_MODULE_2__.OperationMapper.Instance.transformGraph(graph, this.signature));
    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
    // Attach a model-level resourceManager to each executor to share resources,
    // such as `HashTable`.
    this.executor.resourceManager = this.resourceManager;
    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {
      const initializer = _operations_operation_mapper__WEBPACK_IMPORTED_MODULE_2__.OperationMapper.Instance.transformGraph(artifacts.modelInitializer);
      this.initializer = new _graph_executor__WEBPACK_IMPORTED_MODULE_3__.GraphExecutor(initializer);
      this.initializer.weightMap = this.executor.weightMap;
      // Attach a model-level resourceManager to the initializer, the
      // hashTables created from when executing the initializer will be stored
      // in the resourceManager.
      this.initializer.resourceManager = this.resourceManager;
      this.initializerSignature = artifacts.initializerSignature;
    }
    return true;
  }
  /**
   * Save the configuration and/or weights of the GraphModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const modelUrl =
   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
   * const model = await tf.loadGraphModel(modelUrl);
   * const zeros = tf.zeros([1, 224, 224, 3]);
   * model.predict(zeros).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * model.predict(zeros).print();
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  save(handlerOrURL, config) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (typeof handlerOrURL === 'string') {
        const handlers = _this.io.getSaveHandlers(handlerOrURL);
        if (handlers.length === 0) {
          throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);
        } else if (handlers.length > 1) {
          throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);
        }
        handlerOrURL = handlers[0];
      }
      if (handlerOrURL.save == null) {
        throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');
      }
      return handlerOrURL.save(_this.artifacts);
    })();
  }
  addStructuredOutputNames(outputTensors) {
    if (this.structuredOutputKeys) {
      const outputTensorsArray = outputTensors instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor ? [outputTensors] : outputTensors;
      const outputTensorMap = {};
      outputTensorsArray.forEach((outputTensor, i) => outputTensorMap[this.structuredOutputKeys[i]] = outputTensor);
      return outputTensorMap;
    }
    return outputTensors;
  }
  /**
   * Execute the inference for the input tensors.
   *
   * @param input The input tensors, when there is single input for the model,
   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
   * inputs params should be in either `tf.Tensor`[] if the input order is
   * fixed, or otherwise NamedTensorMap format.
   *
   * For model with multiple inputs, we recommend you use NamedTensorMap as the
   * input type, if you use `tf.Tensor`[], the order of the array needs to
   * follow the
   * order of inputNodes array. @see {@link GraphModel.inputNodes}
   *
   * You can also feed any intermediate nodes using the NamedTensorMap as the
   * input type. For example, given the graph
   *    InputNode => Intermediate => OutputNode,
   * you can execute the subgraph Intermediate => OutputNode by calling
   *    model.execute('IntermediateNode' : tf.tensor(...));
   *
   * This is useful for models that uses tf.dynamic_rnn, where the intermediate
   * state needs to be fed manually.
   *
   * For batch inference execution, the tensors for each input need to be
   * concatenated together. For example with mobilenet, the required input shape
   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
   * If we are provide a batched data of 100 images, the input tensor should be
   * in the shape of [100, 244, 244, 3].
   *
   * @param config Prediction configuration for specifying the batch size.
   * Currently the batch size option is ignored for graph model.
   *
   * @returns Inference result tensors. If the model is converted and it
   * originally had structured_outputs in tensorflow, then a NamedTensorMap
   * will be returned matching the structured_outputs. If no structured_outputs
   * are present, the output will be single `tf.Tensor` if the model has single
   * output node, otherwise Tensor[].
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(inputs, config) {
    const outputTensors = this.execute(inputs, this.outputNodes);
    return this.addStructuredOutputNames(outputTensors);
  }
  /**
   * Execute the inference for the input tensors in async fashion, use this
   * method when your model contains control flow ops.
   *
   * @param input The input tensors, when there is single input for the model,
   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
   * inputs params should be in either `tf.Tensor`[] if the input order is
   * fixed, or otherwise NamedTensorMap format.
   *
   * For model with multiple inputs, we recommend you use NamedTensorMap as the
   * input type, if you use `tf.Tensor`[], the order of the array needs to
   * follow the
   * order of inputNodes array. @see {@link GraphModel.inputNodes}
   *
   * You can also feed any intermediate nodes using the NamedTensorMap as the
   * input type. For example, given the graph
   *    InputNode => Intermediate => OutputNode,
   * you can execute the subgraph Intermediate => OutputNode by calling
   *    model.execute('IntermediateNode' : tf.tensor(...));
   *
   * This is useful for models that uses tf.dynamic_rnn, where the intermediate
   * state needs to be fed manually.
   *
   * For batch inference execution, the tensors for each input need to be
   * concatenated together. For example with mobilenet, the required input shape
   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
   * If we are provide a batched data of 100 images, the input tensor should be
   * in the shape of [100, 244, 244, 3].
   *
   * @param config Prediction configuration for specifying the batch size.
   * Currently the batch size option is ignored for graph model.
   *
   * @returns A Promise of inference result tensors. If the model is converted
   * and it originally had structured_outputs in tensorflow, then a
   * NamedTensorMap will be returned matching the structured_outputs. If no
   * structured_outputs are present, the output will be single `tf.Tensor` if
   * the model has single output node, otherwise Tensor[].
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predictAsync(inputs, config) {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const outputTensors = yield _this2.executeAsync(inputs, _this2.outputNodes);
      return _this2.addStructuredOutputNames(outputTensors);
    })();
  }
  normalizeInputs(inputs) {
    var _a;
    if (!(inputs instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor) && !Array.isArray(inputs)) {
      // The input is already a NamedTensorMap.
      const signatureInputs = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs;
      if (signatureInputs != null) {
        for (const input in signatureInputs) {
          const tensor = signatureInputs[input];
          if (tensor.resourceId != null) {
            inputs[input] = this.resourceIdToCapturedInput[tensor.resourceId];
          }
        }
      }
      return inputs;
    }
    inputs = Array.isArray(inputs) ? inputs : [inputs];
    const numCapturedInputs = Object.keys(this.resourceIdToCapturedInput).length;
    if (inputs.length + numCapturedInputs !== this.inputNodes.length) {
      throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - numCapturedInputs} non-resource placeholders, while there are ${inputs.length} input tensors provided.`);
    }
    let inputIndex = 0;
    return this.inputNodes.reduce((map, inputName) => {
      var _a, _b, _c;
      const resourceId = (_c = (_b = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName]) === null || _c === void 0 ? void 0 : _c.resourceId;
      if (resourceId != null) {
        map[inputName] = this.resourceIdToCapturedInput[resourceId];
      } else {
        map[inputName] = inputs[inputIndex++];
      }
      return map;
    }, {});
  }
  normalizeOutputs(outputs) {
    outputs = outputs || this.outputNodes;
    return !Array.isArray(outputs) ? [outputs] : outputs;
  }
  executeInitializerGraph() {
    if (this.initializer == null) {
      return [];
    }
    if (this.initializerSignature == null) {
      return this.initializer.execute({}, []);
    } else {
      return this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));
    }
  }
  executeInitializerGraphAsync() {
    var _this3 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this3.initializer == null) {
        return [];
      }
      if (_this3.initializerSignature == null) {
        return _this3.initializer.executeAsync({}, []);
      } else {
        return _this3.initializer.executeAsync({}, Object.keys(_this3.initializerSignature.outputs));
      }
    })();
  }
  setResourceIdToCapturedInput(outputs) {
    this.resourceIdToCapturedInput = {};
    if (this.initializerSignature) {
      const signatureOutputs = this.initializerSignature.outputs;
      const outputNames = Object.keys(signatureOutputs);
      for (let i = 0; i < outputNames.length; i++) {
        const outputName = outputNames[i];
        const tensorInfo = signatureOutputs[outputName];
        this.resourceIdToCapturedInput[tensorInfo.resourceId] = outputs[i];
      }
    }
  }
  /**
   * Executes inference for the model for given input tensors.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the TensorFlow model, if no
   * outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   *
   * @returns A single tensor if provided with a single output or no outputs
   * are provided and there is only one default output, otherwise return a
   * tensor array. The order of the tensor array is the same as the outputs
   * if provided, otherwise the order of outputNodes attribute of the model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  execute(inputs, outputs) {
    if (this.resourceIdToCapturedInput == null) {
      this.setResourceIdToCapturedInput(this.executeInitializerGraph());
    }
    inputs = this.normalizeInputs(inputs);
    outputs = this.normalizeOutputs(outputs);
    const result = this.executor.execute(inputs, outputs);
    return result.length > 1 ? result : result[0];
  }
  /**
   * Executes inference for the model for given input tensors in async
   * fashion, use this method when your model contains control flow ops.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the TensorFlow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   *
   * @returns A Promise of single tensor if provided with a single output or
   * no outputs are provided and there is only one default output, otherwise
   * return a tensor map.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  executeAsync(inputs, outputs) {
    var _this4 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this4.resourceIdToCapturedInput == null) {
        _this4.setResourceIdToCapturedInput(yield _this4.executeInitializerGraphAsync());
      }
      inputs = _this4.normalizeInputs(inputs);
      outputs = _this4.normalizeOutputs(outputs);
      const result = yield _this4.executor.executeAsync(inputs, outputs);
      return result.length > 1 ? result : result[0];
    })();
  }
  /**
   * Get intermediate tensors for model debugging mode (flag
   * KEEP_INTERMEDIATE_TENSORS is true).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  /**
   * Dispose intermediate tensors for model debugging mode (flag
   * KEEP_INTERMEDIATE_TENSORS is true).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(map) {
    return Object.keys(map).reduce((newMap, key) => {
      newMap[key] = [map[key]];
      return newMap;
    }, {});
  }
  /**
   * Releases the memory used by the weight tensors and resourceManager.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  dispose() {
    this.executor.dispose();
    if (this.initializer) {
      this.initializer.dispose();
      if (this.resourceIdToCapturedInput) {
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.dispose)(this.resourceIdToCapturedInput);
      }
    }
    this.resourceManager.dispose();
  }
}
/**
 * Load a graph model given a URL to the model definition.
 *
 * Example of loading MobileNetV2 from a URL and making a prediction with a
 * zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
 * const model = await tf.loadGraphModel(modelUrl);
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 *
 * Example of loading MobileNetV2 from a TF Hub URL and making a prediction
 * with a zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';
 * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 * @param modelUrl The url or an `io.IOHandler` that loads the model.
 * @param options Options for the HTTP request, which allows to send
 *     credentials
 *    and custom headers.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */
function loadGraphModel(_x) {
  return _loadGraphModel.apply(this, arguments);
}
/**
 * Load a graph model given a synchronous IO handler with a 'load' method.
 *
 * @param modelSource The `io.IOHandlerSync` that loads the model, or the
 *     `io.ModelArtifacts` that encode the model, or a tuple of
 *     `[io.ModelJSON, ArrayBuffer]` of which the first element encodes the
 *      model and the second contains the weights.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */
function _loadGraphModel() {
  _loadGraphModel = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (modelUrl, options = {}, tfio = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io) {
    if (modelUrl == null) {
      throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');
    }
    if (options == null) {
      options = {};
    }
    if (options.fromTFHub && typeof modelUrl === 'string') {
      modelUrl = getTFHubUrl(modelUrl);
    }
    const model = new GraphModel(modelUrl, options, tfio);
    yield model.load();
    return model;
  });
  return _loadGraphModel.apply(this, arguments);
}
function loadGraphModelSync(modelSource) {
  if (modelSource == null) {
    throw new Error('modelUrl in loadGraphModelSync() cannot be null. Please provide ' + 'model artifacts or an IOHandler that loads the model');
  }
  let ioHandler;
  if (modelSource instanceof Array) {
    const [modelJSON, weights] = modelSource;
    if (!modelJSON) {
      throw new Error('modelJSON must be the first element of the array');
    }
    if (!weights || !(weights instanceof ArrayBuffer)) {
      throw new Error('An ArrayBuffer of weights must be the second element of' + ' the array');
    }
    if (!('modelTopology' in modelJSON)) {
      throw new Error('Model JSON is missing \'modelTopology\'');
    }
    if (!('weightsManifest' in modelJSON)) {
      throw new Error('Model JSON is missing \'weightsManifest\'');
    }
    const weightSpecs = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.getWeightSpecs(modelJSON.weightsManifest);
    const modelArtifacts = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.getModelArtifactsForJSONSync(modelJSON, weightSpecs, weights);
    ioHandler = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.fromMemorySync(modelArtifacts);
  } else if ('load' in modelSource) {
    // Then modelSource is already an IOHandlerSync.
    ioHandler = modelSource;
  } else if ('modelTopology' in modelSource && 'weightSpecs' in modelSource && 'weightData' in modelSource) {
    // modelSource is of type ModelArtifacts.
    ioHandler = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.io.fromMemorySync(modelSource);
  } else {
    throw new Error('Unknown model format');
  }
  const model = new GraphModel(ioHandler);
  model.load();
  return model;
}
function getTFHubUrl(modelUrl) {
  if (!modelUrl.endsWith('/')) {
    modelUrl = modelUrl + '/';
  }
  return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;
}

/***/ }),

/***/ 95536:
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HashTable": () => (/* binding */ HashTable)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 69683);

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// tslint:disable-next-line: no-imports-from-dist

/**
 * Hashtable contains a set of tensors, which can be accessed by key.
 */
class HashTable {
  get id() {
    return this.handle.id;
  }
  /**
   * Constructor of HashTable. Creates a hash table.
   *
   * @param keyDType `dtype` of the table keys.
   * @param valueDType `dtype` of the table values.
   */
  constructor(keyDType, valueDType) {
    this.keyDType = keyDType;
    this.valueDType = valueDType;
    this.handle = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.scalar)(0);
    // tslint:disable-next-line: no-any
    this.tensorMap = new Map();
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep)(this.handle);
  }
  /**
   * Dispose the tensors and handle and clear the hashtable.
   */
  clearAndClose() {
    this.tensorMap.forEach(value => value.dispose());
    this.tensorMap.clear();
    this.handle.dispose();
  }
  /**
   * The number of items in the hash table.
   */
  size() {
    return this.tensorMap.size;
  }
  /**
   * The number of items in the hash table as a rank-0 tensor.
   */
  tensorSize() {
    return _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.scalar(this.size(), 'int32');
  }
  /**
   * Replaces the contents of the table with the specified keys and values.
   * @param keys Keys to store in the hashtable.
   * @param values Values to store in the hashtable.
   */
  import(keys, values) {
    var _this = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.checkKeyAndValueTensor(keys, values);
      // We only store the primitive values of the keys, this allows lookup
      // to be O(1).
      const $keys = yield keys.data();
      // Clear the hashTable before inserting new values.
      _this.tensorMap.forEach(value => value.dispose());
      _this.tensorMap.clear();
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
        const $values = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.unstack)(values);
        const keysLength = $keys.length;
        const valuesLength = $values.length;
        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);
        for (let i = 0; i < keysLength; i++) {
          const key = $keys[i];
          const value = $values[i];
          (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.keep)(value);
          _this.tensorMap.set(key, value);
        }
        return _this.handle;
      });
    })();
  }
  /**
   * Looks up keys in a hash table, outputs the corresponding values.
   *
   * Performs batch lookups, for every element in the key tensor, `find`
   * stacks the corresponding value into the return tensor.
   *
   * If an element is not present in the table, the given `defaultValue` is
   * used.
   *
   * @param keys Keys to look up. Must have the same type as the keys of the
   *     table.
   * @param defaultValue The scalar `defaultValue` is the value output for keys
   *     not present in the table. It must also be of the same type as the
   *     table values.
   */
  find(keys, defaultValue) {
    var _this2 = this;
    return (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.checkKeyAndValueTensor(keys, defaultValue);
      const $keys = yield keys.data();
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)(() => {
        const result = [];
        for (let i = 0; i < $keys.length; i++) {
          const key = $keys[i];
          const value = _this2.findWithDefault(key, defaultValue);
          result.push(value);
        }
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.stack)(result);
      });
    })();
  }
  // tslint:disable-next-line: no-any
  findWithDefault(key, defaultValue) {
    const result = this.tensorMap.get(key);
    return result != null ? result : defaultValue;
  }
  checkKeyAndValueTensor(key, value) {
    if (key.dtype !== this.keyDType) {
      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);
    }
    if (value.dtype !== this.valueDType) {
      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);
    }
  }
}

/***/ }),

/***/ 24148:
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExecutionSubgraph": () => (/* binding */ getExecutionSubgraph),
/* harmony export */   "getNodeLiveUntilMap": () => (/* binding */ getNodeLiveUntilMap),
/* harmony export */   "getNodesInTopologicalOrder": () => (/* binding */ getNodesInTopologicalOrder),
/* harmony export */   "isControlFlow": () => (/* binding */ isControlFlow),
/* harmony export */   "isDynamicShape": () => (/* binding */ isDynamicShape),
/* harmony export */   "isHashTable": () => (/* binding */ isHashTable)
/* harmony export */ });
/* harmony import */ var _operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operations/executors/utils */ 80461);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Given graph inputs and desired outputs, find the minimal set of nodes
 * to execute in order to compute the outputs. In addition return other useful
 * info such:
 * - Missing inputs needed to compute the output.
 * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).
 * - Alternative inputs in order to avoid async (dynamic op) execution.
 */
function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {
  const usedNodes = new Set();
  const missingInputs = [];
  let dynamicNode = null;
  let syncInputs = null;
  // Start with the outputs, going backwards and find all the nodes that are
  // needed to compute those outputs.
  const seen = new Set();
  const inputNodeNames = new Set(Object.keys(inputs).map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__.parseNodeName)(name)[0]));
  initNodes = initNodes || [];
  const initNodeNames = new Set(initNodes.map(node => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__.parseNodeName)(node.name)[0]));
  const frontier = [...outputs];
  while (frontier.length > 0) {
    const node = frontier.pop();
    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {
      if (dynamicNode == null) {
        dynamicNode = node;
        syncInputs = dynamicNode.children.map(child => child.name).filter(name => usedNodes.has(name));
      }
    }
    usedNodes.add(node.name);
    // Weights are dead end since we already have their values.
    if (weightMap[node.name] != null) {
      continue;
    }
    // This node is a dead end since it's one of the user-provided inputs.
    if (inputNodeNames.has(node.name)) {
      continue;
    }
    // This node is a dead end since it doesn't have any inputs.
    if (initNodeNames.has(node.name)) {
      continue;
    }
    if (node.inputs.length === 0) {
      missingInputs.push(node.name);
      continue;
    }
    node.inputs.forEach(input => {
      // Don't add to the frontier if it is already there.
      if (seen.has(input.name)) {
        return;
      }
      seen.add(input.name);
      frontier.push(input);
    });
  }
  return {
    inputs,
    outputs,
    usedNodes,
    missingInputs,
    dynamicNode,
    syncInputs
  };
}
/**
 * Given the execution info, return a list of nodes in topological order that
 * need to be executed to compute the output.
 */
function getNodesInTopologicalOrder(graph, executionInfo) {
  const {
    usedNodes,
    inputs
  } = executionInfo;
  const inputNodes = Object.keys(inputs).map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__.parseNodeName)(name)[0]).map(name => graph.nodes[name]);
  const initNodes = graph.initNodes || [];
  const isUsed = node => usedNodes.has(typeof node === 'string' ? node : node.name);
  function unique(nodes) {
    return [...new Map(nodes.map(node => [node.name, node])).values()];
  }
  const predefinedNodes = unique([...inputNodes, ...graph.weights, ...initNodes]).filter(isUsed);
  const allNodes = unique([...predefinedNodes, ...Object.values(graph.nodes)]).filter(isUsed);
  const nameToNode = new Map(allNodes.map(node => [node.name, node]));
  const inCounts = {};
  for (const node of allNodes) {
    inCounts[node.name] = inCounts[node.name] || 0;
    for (const child of node.children) {
      // When the child is unused, set in counts to infinity so that it will
      // never be decreased to 0 and added to the execution list.
      if (!isUsed(child)) {
        inCounts[child.name] = Number.POSITIVE_INFINITY;
      }
      inCounts[child.name] = (inCounts[child.name] || 0) + 1;
    }
  }
  // Build execution order for all used nodes regardless whether they are
  // predefined or not.
  const frontier = Object.entries(inCounts).filter(([, inCount]) => inCount === 0).map(([name]) => name);
  const orderedNodeNames = [...frontier];
  while (frontier.length > 0) {
    const nodeName = frontier.pop();
    const node = nameToNode.get(nodeName);
    for (const child of node.children.filter(isUsed)) {
      if (--inCounts[child.name] === 0) {
        orderedNodeNames.push(child.name);
        frontier.push(child.name);
      }
    }
  }
  const orderedNodes = orderedNodeNames.map(name => nameToNode.get(name));
  const filteredOrderedNodes = filterPredefinedReachableNodes(orderedNodes, predefinedNodes);
  // TODO: Turn validation on/off with tf env flag.
  validateNodesExecutionOrder(filteredOrderedNodes, predefinedNodes);
  return filteredOrderedNodes;
}
/**
 * This is a helper function of `getNodesInTopologicalOrder`.
 * Returns ordered nodes reachable by at least one predefined node.
 * This can help us filter out redundant nodes from the returned node list.
 * For example:
 * If we have four nodes with dependencies like this:
 *   a --> b --> c --> d
 * when node `c` is predefined (e.g. given as an input tensor), we can
 * skip node `a` and `b` since their outputs will never be used.
 *
 * @param orderedNodes Graph nodes in execution order.
 * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this
 *     list must have distinct names.
 */
function filterPredefinedReachableNodes(orderedNodes, predefinedNodes) {
  const nameToNode = new Map(orderedNodes.map(node => [node.name, node]));
  // TODO: Filter out more nodes when >=2 nodes are predefined in a path.
  const stack = predefinedNodes.map(node => node.name);
  const predefinedReachableNodeNames = new Set(stack);
  // Perform a DFS starting from the set of all predefined nodes
  // to find the set of all nodes reachable from the predefined nodes.
  while (stack.length > 0) {
    const nodeName = stack.pop();
    const node = nameToNode.get(nodeName);
    for (const child of node.children) {
      if (!nameToNode.has(child.name) || predefinedReachableNodeNames.has(child.name)) {
        continue;
      }
      predefinedReachableNodeNames.add(child.name);
      stack.push(child.name);
    }
  }
  // Filter out unreachable nodes and build the ordered node list.
  const filteredOrderedNodes = orderedNodes.filter(node => predefinedReachableNodeNames.has(node.name));
  return filteredOrderedNodes;
}
class NodesExecutionOrderError extends Error {
  constructor(message) {
    super(`NodesExecutionOrderError: ${message}`);
  }
}
/**
 * This is a helper function of `getNodesInTopologicalOrder`.
 * Validates property: given nodes `a` and `b`, Order(a) > Order(b) if `a`
 * is a child of `b`. This function throws an error if validation fails.
 *
 * @param orderedNodes Graph nodes in execution order.
 * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this
 *     list must have distinct names.
 */
function validateNodesExecutionOrder(orderedNodes, predefinedNodes) {
  const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));
  const predefinedNodeNames = new Set(predefinedNodes.map(node => node.name));
  const isPredefined = node => predefinedNodeNames.has(typeof node === 'string' ? node : node.name);
  const willBeExecutedNodeNames = new Set(orderedNodes.map(node => node.name));
  const willBeExecuted = node => willBeExecutedNodeNames.has(typeof node === 'string' ? node : node.name);
  for (const node of orderedNodes) {
    for (const child of node.children.filter(willBeExecuted)) {
      if (!nodeNameToOrder.has(child.name)) {
        throw new NodesExecutionOrderError(`Child ${child.name} of node ${node.name} is unreachable.`);
      }
      if (nodeNameToOrder.get(node.name) > nodeNameToOrder.get(child.name)) {
        throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run after its child ${child.name}.`);
      }
    }
    if (!isPredefined(node)) {
      for (const input of node.inputs) {
        if (!nodeNameToOrder.has(input.name)) {
          throw new NodesExecutionOrderError(`Input ${input.name} of node ${node.name} is unreachable.`);
        }
        if (nodeNameToOrder.get(input.name) > nodeNameToOrder.get(node.name)) {
          throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run before its input ${input.name}.`);
        }
      }
    }
  }
}
/**
 * Given the execution info, return a map from node name to the disposable
 * node name list after its execution.
 *
 * @returns A map from node name to disposable nodes after its
 *     execution. That is, for a node `x`, `nodeLiveUntilMap[x]` indicates
 *     all nodes which their intermediate tensors should be disposed after `x`
 *     being executed.
 */
function getNodeLiveUntilMap(orderedNodes) {
  const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));
  const INF_LIFE = Number.MAX_SAFE_INTEGER;
  // Make control flow nodes (and consequently their direct parents)
  // live forever since they're tricky to track correctly.
  const selfLifespans = orderedNodes.map((node, nodeOrder) => isControlFlow(node) ? INF_LIFE : nodeOrder);
  const getSelfLifeSpan = node => {
    const selfLife = selfLifespans[nodeNameToOrder.get(node.name)];
    if (selfLife == null) {
      // If nodeToOrder does not contain the node, it is unused or
      // unreachable in graph.
      return -1;
    }
    return selfLife;
  };
  // `liveUntil[i]` points to the last node in the `orderedNodes` array that
  // may depend on tensors from node `i`. It indicates that all the
  // intermediate tensors from `orderedNodes[i]` should be disposed after
  // `orderedNodes[liveUntil[i]]` is executed.
  // A node lives long enough to pass on its tensors to its children.
  // It lives until at least `max(node's position, children's positions)`.
  const liveUntilOrders = orderedNodes.map((node, nodeOrder) => {
    return node.children.map(getSelfLifeSpan).reduce((a, b) => Math.max(a, b), selfLifespans[nodeOrder]);
  });
  // liveUntilMap:
  // - Key: Name of a node `x`
  // - Values: All nodes whose intermediate tensors should be disposed
  //           after `x` is executed.
  const liveUntilMap = new Map();
  for (let nodeOrder = 0; nodeOrder < orderedNodes.length; ++nodeOrder) {
    const liveUntilOrder = liveUntilOrders[nodeOrder];
    if (liveUntilOrder === INF_LIFE) {
      continue;
    }
    const node = orderedNodes[nodeOrder];
    const liveUntilNode = orderedNodes[liveUntilOrder];
    if (!liveUntilMap.has(liveUntilNode.name)) {
      liveUntilMap.set(liveUntilNode.name, []);
    }
    liveUntilMap.get(liveUntilNode.name).push(node);
  }
  return liveUntilMap;
}
const CONTROL_FLOW_OPS = new Set(['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf', 'StatelessWhile', 'if', 'While']);
const DYNAMIC_SHAPE_OPS = new Set(['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where']);
const HASH_TABLE_OPS = new Set(['HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2', 'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2']);
function isControlFlow(node) {
  return CONTROL_FLOW_OPS.has(node.op);
}
function isDynamicShape(node) {
  return DYNAMIC_SHAPE_OPS.has(node.op);
}
function isHashTable(node) {
  return HASH_TABLE_OPS.has(node.op);
}

/***/ }),

/***/ 93135:
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResourceManager": () => (/* binding */ ResourceManager)
/* harmony export */ });
/**
 * Contains global resources of a model.
 */
class ResourceManager {
  constructor(hashTableNameToHandle = {}, hashTableMap = {}) {
    this.hashTableNameToHandle = hashTableNameToHandle;
    this.hashTableMap = hashTableMap;
  }
  /**
   * Register a `HashTable` in the resource manager.
   *
   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,
   * where id is the table handle tensor's id.
   *
   * @param name Op node name that creates the `HashTable`.
   * @param hashTable The `HashTable` to be added to resource manager.
   */
  addHashTable(name, hashTable) {
    this.hashTableNameToHandle[name] = hashTable.handle;
    this.hashTableMap[hashTable.id] = hashTable;
  }
  /**
   * Get the table handle by node name.
   * @param name Op node name that creates the `HashTable`. This name is also
   *     used in the inputs list of lookup and import `HashTable` ops.
   */
  getHashTableHandleByName(name) {
    return this.hashTableNameToHandle[name];
  }
  /**
   * Get the actual `HashTable` by its handle tensor's id.
   * @param id The id of the handle tensor.
   */
  getHashTableById(id) {
    return this.hashTableMap[id];
  }
  /**
   * Dispose `ResourceManager`, including its hashTables and tensors in them.
   */
  dispose() {
    for (const key in this.hashTableMap) {
      this.hashTableMap[key].clearAndClose();
      delete this.hashTableMap[key];
    }
    for (const name in this.hashTableNameToHandle) {
      this.hashTableNameToHandle[name].dispose();
      delete this.hashTableNameToHandle[name];
    }
  }
}

/***/ }),

/***/ 99899:
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TensorArray": () => (/* binding */ TensorArray)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _tensor_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_utils */ 13940);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * The TensorArray object keeps an array of Tensors.  It
 * allows reading from the array and writing to the array.
 */
class TensorArray {
  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {
    this.name = name;
    this.dtype = dtype;
    this.maxSize = maxSize;
    this.elementShape = elementShape;
    this.identicalElementShapes = identicalElementShapes;
    this.dynamicSize = dynamicSize;
    this.clearAfterRead = clearAfterRead;
    this.tensors = [];
    this.closed_ = false;
    this.idTensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(0);
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  /**
   * Dispose the tensors and idTensor and mark the TensoryArray as closed.
   */
  clearAndClose(keepIds) {
    this.tensors.forEach(tensor => {
      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {
        tensor.tensor.dispose();
      }
    });
    this.tensors = [];
    this.closed_ = true;
    this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  /**
   * Read the value at location index in the TensorArray.
   * @param index Number the index to read from.
   */
  read(index) {
    if (this.closed_) {
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    }
    if (index < 0 || index >= this.size()) {
      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);
    }
    const tensorWithState = this.tensors[index];
    if (tensorWithState.cleared) {
      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);
    }
    if (this.clearAfterRead) {
      tensorWithState.cleared = true;
    }
    tensorWithState.read = true;
    return tensorWithState.tensor;
  }
  /**
   * Helper method to read multiple tensors from the specified indices.
   */
  readMany(indices) {
    return indices.map(index => this.read(index));
  }
  /**
   * Write value into the index of the TensorArray.
   * @param index number the index to write to.
   * @param tensor
   */
  write(index, tensor) {
    if (this.closed_) {
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    }
    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {
      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);
    }
    const t = this.tensors[index] || {};
    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},
          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);
    }
    // Set the shape for the first time write to unknow shape tensor array
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {
      this.elementShape = tensor.shape;
    }
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);
    if (t.read) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);
    }
    if (t.written) {
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);
    }
    t.tensor = tensor;
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
    t.written = true;
    this.tensors[index] = t;
  }
  /**
   * Helper method to write multiple tensors to the specified indices.
   */
  writeMany(indices, tensors) {
    if (indices.length !== tensors.length) {
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);
    }
    indices.forEach((i, index) => this.write(i, tensors[index]));
  }
  /**
   * Return selected values in the TensorArray as a packed Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param [indices] number[] Optional. Taking values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size(). If not specified returns
   *    all tensors in the original order.
   * @param [dtype]
   */
  gather(indices, dtype) {
    if (!!dtype && dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);
    }
    if (!indices) {
      indices = [];
      for (let i = 0; i < this.size(); i++) {
        indices.push(i);
      }
    } else {
      indices = indices.slice(0, this.size());
    }
    if (indices.length === 0) {
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(this.elementShape));
    }
    // Read all the PersistentTensors into a vector to keep track of
    // their memory.
    const tensors = this.readMany(indices);
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(tensors, 0);
  }
  /**
   * Return the values in the TensorArray as a concatenated Tensor.
   */
  concat(dtype) {
    if (!!dtype && dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);
    }
    if (this.size() === 0) {
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(this.elementShape));
    }
    const indices = [];
    for (let i = 0; i < this.size(); i++) {
      indices.push(i);
    }
    // Collect all the tensors from the tensors array.
    const tensors = this.readMany(indices);
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, 0);
  }
  /**
   * Scatter the values of a Tensor in specific indices of a TensorArray.
   * @param indices nummber[] values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size().
   * @param tensor Tensor input tensor.
   */
  scatter(indices, tensor) {
    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
    }
    if (indices.length !== tensor.shape[0]) {
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
    }
    const maxIndex = Math.max(...indices);
    if (!this.dynamicSize && maxIndex >= this.maxSize) {
      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);
    }
    this.writeMany(indices, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(tensor, 0));
  }
  /**
   * Split the values of a Tensor into the TensorArray.
   * @param length number[] with the lengths to use when splitting value along
   *    its first dimension.
   * @param tensor Tensor, the tensor to split.
   */
  split(length, tensor) {
    if (tensor.dtype !== this.dtype) {
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
    }
    let totalLength = 0;
    const cumulativeLengths = length.map(len => {
      totalLength += len;
      return totalLength;
    });
    if (totalLength !== tensor.shape[0]) {
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
    }
    if (!this.dynamicSize && length.length !== this.maxSize) {
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');
    }
    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
    const tensors = [];
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      tensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, [1, totalLength, elementPerRow]);
      for (let i = 0; i < length.length; ++i) {
        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];
        const indices = [0, previousLength, 0];
        const sizes = [1, length[i], elementPerRow];
        tensors[i] = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice)(tensor, indices, sizes), this.elementShape);
      }
      return tensors;
    });
    const indices = [];
    for (let i = 0; i < length.length; i++) {
      indices[i] = i;
    }
    this.writeMany(indices, tensors);
  }
}

/***/ }),

/***/ 2376:
/*!************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TensorList": () => (/* binding */ TensorList),
/* harmony export */   "fromTensor": () => (/* binding */ fromTensor),
/* harmony export */   "reserve": () => (/* binding */ reserve),
/* harmony export */   "scatter": () => (/* binding */ scatter),
/* harmony export */   "split": () => (/* binding */ split)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _tensor_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_utils */ 13940);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * TensorList stores a container of `tf.Tensor` objects, which are accessible
 * via tensors field.
 *
 * In order to get a copy of the underlying list, use the copy method:
 * ```
 *    TensorList b = a.copy();
 *    b.tensors().pushBack(t);  // This does not modify a.tensors().
 * ```
 *
 * Note that this is not a deep copy: the memory locations of the underlying
 * tensors will still point to the same locations of the corresponding tensors
 * in the original.
 */
class TensorList {
  get id() {
    return this.idTensor.id;
  }
  /**
   *
   * @param tensors list of tensors
   * @param elementShape shape of each tensor, this can be a single number (any
   * shape is allowed) or partial shape (dim = -1).
   * @param elementDtype data type of each tensor
   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
   *   meaning that the size of `tensors` is unbounded.
   */
  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {
    this.tensors = tensors;
    this.elementShape = elementShape;
    this.elementDtype = elementDtype;
    if (tensors != null) {
      tensors.forEach(tensor => {
        if (elementDtype !== tensor.dtype) {
          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(elementShape, tensor.shape, 'TensorList shape mismatch: ');
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
      });
    }
    this.idTensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(0);
    this.maxNumElements = maxNumElements;
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(this.idTensor);
  }
  /**
   * Get a new TensorList containing a copy of the underlying tensor container.
   */
  copy() {
    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);
  }
  /**
   * Dispose the tensors and idTensor and clear the tensor list.
   */
  clearAndClose(keepIds) {
    this.tensors.forEach(tensor => {
      if (keepIds == null || !keepIds.has(tensor.id)) {
        tensor.dispose();
      }
    });
    this.tensors.length = 0;
    this.idTensor.dispose();
  }
  /**
   * The size of the tensors in the tensor list.
   */
  size() {
    return this.tensors.length;
  }
  /**
   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
   * tf.Tensor.
   * @param elementShape shape of each tensor
   * @param elementDtype data type of each tensor
   * @param numElements the number of elements to stack
   */
  stack(elementShape, elementDtype, numElements = -1) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }
    if (numElements !== -1 && this.tensors.length !== numElements) {
      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);
    }
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(elementShape, this.elementShape, 'TensorList shape mismatch: ');
    const outputElementShape = (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.inferElementShape)(this.elementShape, this.tensors, elementShape);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const reshapedTensors = this.tensors.map(tensor => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, outputElementShape));
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(reshapedTensors, 0);
    });
  }
  /**
   * Pop a tensor from the end of the list.
   * @param elementShape shape of the tensor
   * @param elementDtype data type of the tensor
   */
  popBack(elementShape, elementDtype) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }
    if (this.size() === 0) {
      throw new Error('Trying to pop from an empty list.');
    }
    const outputElementShape = (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.inferElementShape)(this.elementShape, this.tensors, elementShape);
    const tensor = this.tensors.pop();
    tensor.kept = false;
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(tensor.shape, elementShape, 'TensorList shape mismatch: ');
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, outputElementShape);
  }
  /**
   * Push a tensor to the end of the list.
   * @param tensor Tensor to be pushed.
   */
  pushBack(tensor) {
    if (tensor.dtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
    }
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');
    if (this.maxNumElements === this.size()) {
      throw new Error(`Trying to push element into a full list.`);
    }
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
    this.tensors.push(tensor);
  }
  /**
   * Update the size of the list.
   * @param size the new size of the list.
   */
  resize(size) {
    if (size < 0) {
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);
    }
    if (this.maxNumElements !== -1 && size > this.maxNumElements) {
      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);
    }
    const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);
    destTensorList.tensors.length = size;
    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {
      destTensorList.tensors[i] = this.tensors[i];
    }
    return destTensorList;
  }
  /**
   * Retrieve the element at the provided index
   * @param elementShape shape of the tensor
   * @param elementDtype dtype of the tensor
   * @param elementIndex index of the tensor
   */
  getItem(elementIndex, elementShape, elementDtype) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }
    if (elementIndex < 0 || elementIndex > this.tensors.length) {
      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);
    }
    if (this.tensors[elementIndex] == null) {
      throw new Error(`element at index ${elementIndex} is null.`);
    }
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');
    const outputElementShape = (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.inferElementShape)(this.elementShape, this.tensors, elementShape);
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(this.tensors[elementIndex], outputElementShape);
  }
  /**
   * Set the tensor at the index
   * @param elementIndex index of the tensor
   * @param tensor the tensor to be inserted into the list
   */
  setItem(elementIndex, tensor) {
    if (tensor.dtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
    }
    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {
      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);
    }
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');
    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
    // dispose the previous value if it is replacing.
    if (this.tensors[elementIndex] != null) {
      this.tensors[elementIndex].kept = false;
    }
    this.tensors[elementIndex] = tensor;
  }
  /**
   * Return selected values in the TensorList as a stacked Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param indices indices of tensors to gather
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */
  gather(indices, elementDtype, elementShape) {
    if (elementDtype !== this.elementDtype) {
      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
    }
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: ');
    // When indices is greater than the size of the list, indices beyond the
    // size of the list are ignored.
    indices = indices.slice(0, this.size());
    const outputElementShape = (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.inferElementShape)(this.elementShape, this.tensors, elementShape);
    if (indices.length === 0) {
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(outputElementShape));
    }
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const tensors = indices.map(i => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(this.tensors[i], outputElementShape));
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(tensors, 0);
    });
  }
  /**
   * Return the values in the TensorList as a concatenated Tensor.
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */
  concat(elementDtype, elementShape) {
    if (!!elementDtype && elementDtype !== this.elementDtype) {
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);
    }
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: ');
    const outputElementShape = (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.inferElementShape)(this.elementShape, this.tensors, elementShape);
    if (this.size() === 0) {
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(outputElementShape));
    }
    return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
      const tensors = this.tensors.map(t => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(t, outputElementShape));
      return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, 0);
    });
  }
}
/**
 * Creates a TensorList which, when stacked, has the value of tensor.
 * @param tensor from tensor
 * @param elementShape output tensor element shape
 */
function fromTensor(tensor, elementShape, elementDtype) {
  const dtype = tensor.dtype;
  if (tensor.shape.length < 1) {
    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);
  }
  if (tensor.dtype !== elementDtype) {
    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);
  }
  const tensorElementShape = tensor.shape.slice(1);
  (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(tensorElementShape, elementShape, 'TensorList shape mismatch: ');
  const tensorList = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(tensor);
  return new TensorList(tensorList, elementShape, dtype);
}
/**
 * Return a TensorList of the given size with empty elements.
 * @param elementShape the shape of the future elements of the list
 * @param elementDtype the desired type of elements in the list
 * @param numElements the number of elements to reserve
 * @param maxNumElements the maximum number of elements in th list
 */
function reserve(elementShape, elementDtype, numElements, maxNumElements) {
  return new TensorList([], elementShape, elementDtype, maxNumElements);
}
/**
 * Put tensors at specific indices of a stacked tensor into a TensorList.
 * @param indices list of indices on how to scatter the tensor.
 * @param tensor input tensor.
 * @param elementShape the shape of the future elements of the list
 * @param numElements the number of elements to scatter
 */
function scatter(tensor, indices, elementShape, numElements) {
  if (indices.length !== tensor.shape[0]) {
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
  }
  const maxIndex = Math.max(...indices);
  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {
    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);
  }
  const list = new TensorList([], elementShape, tensor.dtype, numElements);
  const tensors = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(tensor, 0);
  indices.forEach((value, index) => {
    list.setItem(value, tensors[index]);
  });
  return list;
}
/**
 * Split the values of a Tensor into a TensorList.
 * @param length the lengths to use when splitting value along
 *    its first dimension.
 * @param tensor the tensor to split.
 * @param elementShape the shape of the future elements of the list
 */
function split(tensor, length, elementShape) {
  let totalLength = 0;
  const cumulativeLengths = length.map(len => {
    totalLength += len;
    return totalLength;
  });
  if (totalLength !== tensor.shape[0]) {
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
  }
  const shapeWithoutFirstDim = tensor.shape.slice(1);
  const outputElementShape = (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.mergeElementShape)(shapeWithoutFirstDim, elementShape);
  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
  const tensors = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
    const tensors = [];
    tensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, [1, totalLength, elementPerRow]);
    for (let i = 0; i < length.length; ++i) {
      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];
      const indices = [0, previousLength, 0];
      const sizes = [1, length[i], elementPerRow];
      tensors[i] = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice)(tensor, indices, sizes), outputElementShape);
    }
    tensor.dispose();
    return tensors;
  });
  const list = new TensorList([], elementShape, tensor.dtype, length.length);
  for (let i = 0; i < tensors.length; i++) {
    list.setItem(i, tensors[i]);
  }
  return list;
}

/***/ }),

/***/ 13940:
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertShapesMatchAllowUndefinedSize": () => (/* binding */ assertShapesMatchAllowUndefinedSize),
/* harmony export */   "fullDefinedShape": () => (/* binding */ fullDefinedShape),
/* harmony export */   "inferElementShape": () => (/* binding */ inferElementShape),
/* harmony export */   "mergeElementShape": () => (/* binding */ mergeElementShape)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * This differs from util.assertShapesMatch in that it allows values of
 * negative one, an undefined size of a dimensinon, in a shape to match
 * anything.
 */

/**
 * Used by TensorList and TensorArray to verify if elementShape matches, support
 * negative value as the dim shape.
 * @param shapeA
 * @param shapeB
 * @param errorMessagePrefix
 */
function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {
  // constant shape means unknown rank
  if (typeof shapeA === 'number' || typeof shapeB === 'number') {
    return;
  }
  _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
  for (let i = 0; i < shapeA.length; i++) {
    const dim0 = shapeA[i];
    const dim1 = shapeB[i];
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
  }
}
function fullDefinedShape(elementShape) {
  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {
    return false;
  }
  return true;
}
/**
 * Generate the output element shape from the list elementShape, list tensors
 * and input param.
 * @param listElementShape
 * @param tensors
 * @param elementShape
 */
function inferElementShape(listElementShape, tensors, elementShape) {
  let partialShape = mergeElementShape(listElementShape, elementShape);
  const notfullDefinedShape = !fullDefinedShape(partialShape);
  if (notfullDefinedShape && tensors.length === 0) {
    throw new Error(`Tried to calculate elements of an empty list` + ` with non-fully-defined elementShape: ${partialShape}`);
  }
  if (notfullDefinedShape) {
    tensors.forEach(tensor => {
      partialShape = mergeElementShape(tensor.shape, partialShape);
    });
  }
  if (!fullDefinedShape(partialShape)) {
    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);
  }
  return partialShape;
}
function mergeElementShape(elementShapeA, elementShapeB) {
  if (typeof elementShapeA === 'number') {
    return elementShapeB;
  }
  if (typeof elementShapeB === 'number') {
    return elementShapeA;
  }
  if (elementShapeA.length !== elementShapeB.length) {
    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);
  }
  const result = [];
  for (let i = 0; i < elementShapeA.length; ++i) {
    const dim0 = elementShapeA[i];
    const dim1 = elementShapeB[i];
    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {
      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);
    }
    result[i] = dim0 >= 0 ? dim0 : dim1;
  }
  return result;
}

/***/ }),

/***/ 47513:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/flags.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const ENV = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)();
/** Whether to keep intermediate tensors. */
ENV.registerFlag('KEEP_INTERMEDIATE_TENSORS', () => false, debugValue => {
  if (debugValue) {
    console.warn('Keep intermediate tensors is ON. This will print the values of all ' + 'intermediate tensors during model inference. Not all models ' + 'support this mode. For details, check e2e/benchmarks/ ' + 'model_config.js. This significantly impacts performance.');
  }
});

/***/ }),

/***/ 51101:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GraphModel": () => (/* reexport safe */ _executor_graph_model__WEBPACK_IMPORTED_MODULE_1__.GraphModel),
/* harmony export */   "deregisterOp": () => (/* reexport safe */ _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_2__.deregisterOp),
/* harmony export */   "loadGraphModel": () => (/* reexport safe */ _executor_graph_model__WEBPACK_IMPORTED_MODULE_1__.loadGraphModel),
/* harmony export */   "loadGraphModelSync": () => (/* reexport safe */ _executor_graph_model__WEBPACK_IMPORTED_MODULE_1__.loadGraphModelSync),
/* harmony export */   "registerOp": () => (/* reexport safe */ _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_2__.registerOp),
/* harmony export */   "version_converter": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_3__.version)
/* harmony export */ });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flags */ 47513);
/* harmony import */ var _executor_graph_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./executor/graph_model */ 87205);
/* harmony import */ var _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operations/custom_op/register */ 72611);
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./version */ 73475);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/***/ }),

/***/ 20734:
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NodeValueImpl": () => (/* binding */ NodeValueImpl)
/* harmony export */ });
/* harmony import */ var _executors_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../executors/utils */ 80461);
/* harmony import */ var _operation_mapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation_mapper */ 23993);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Helper class for lookup inputs and params for nodes in the model graph.
 */
class NodeValueImpl {
  constructor(node, tensorMap, context) {
    this.node = node;
    this.tensorMap = tensorMap;
    this.context = context;
    this.inputs = [];
    this.attrs = {};
    this.inputs = node.inputNames.map(name => this.getInput(name));
    if (node.rawAttrs != null) {
      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {
        attrs[key] = this.getAttr(key);
        return attrs;
      }, {});
    }
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */
  getInput(name) {
    return (0,_executors_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(name, this.tensorMap, this.context);
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */
  getAttr(name, defaultValue) {
    const value = this.node.rawAttrs[name];
    if (value.tensor != null) {
      return (0,_executors_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(name, this.tensorMap, this.context);
    }
    if (value.i != null || value.f != null) {
      return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getNumberParam)(this.node.rawAttrs, name, defaultValue);
    }
    if (value.s != null) {
      return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getStringParam)(this.node.rawAttrs, name, defaultValue);
    }
    if (value.b != null) {
      return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getBoolParam)(this.node.rawAttrs, name, defaultValue);
    }
    if (value.shape != null) {
      return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getTensorShapeParam)(this.node.rawAttrs, name, defaultValue);
    }
    if (value.type != null) {
      return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getDtypeParam)(this.node.rawAttrs, name, defaultValue);
    }
    if (value.list != null) {
      if (value.list.i != null || value.list.f != null) {
        return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getNumericArrayParam)(this.node.rawAttrs, name, defaultValue);
      }
      if (value.list.s != null) {
        return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getStringArrayParam)(this.node.rawAttrs, name, defaultValue);
      }
      if (value.list.shape != null) {
        return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getTensorShapeArrayParam)(this.node.rawAttrs, name, defaultValue);
      }
      if (value.list.b != null) {
        return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getBoolArrayParam)(this.node.rawAttrs, name, defaultValue);
      }
      if (value.list.type != null) {
        return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getDtypeArrayParam)(this.node.rawAttrs, name, defaultValue);
      }
    }
    return defaultValue;
  }
}

/***/ }),

/***/ 72611:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deregisterOp": () => (/* binding */ deregisterOp),
/* harmony export */   "getRegisteredOp": () => (/* binding */ getRegisteredOp),
/* harmony export */   "registerOp": () => (/* binding */ registerOp)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CUSTOM_OPS = {};
/**
 * Register an Op for graph model executor. This allows you to register
 * TensorFlow custom op or override existing op.
 *
 * Here is an example of registering a new MatMul Op.
 * ```js
 * const customMatmul = (node) =>
 *    tf.matMul(
 *        node.inputs[0], node.inputs[1],
 *        node.attrs['transpose_a'], node.attrs['transpose_b']);
 *
 * tf.registerOp('MatMul', customMatmul);
 * ```
 * The inputs and attrs of the node object are based on the TensorFlow op
 * registry.
 *
 * @param name The Tensorflow Op name.
 * @param opFunc An op function which is called with the current graph node
 * during execution and needs to return a tensor or a list of tensors. The node
 * has the following attributes:
 *    - attr: A map from attribute name to its value
 *    - inputs: A list of input tensors
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function registerOp(name, opFunc) {
  const opMapper = {
    tfOpName: name,
    category: 'custom',
    inputs: [],
    attrs: [],
    customExecutor: opFunc
  };
  CUSTOM_OPS[name] = opMapper;
}
/**
 * Retrieve the OpMapper object for the registered op.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function getRegisteredOp(name) {
  return CUSTOM_OPS[name];
}
/**
 * Deregister the Op for graph model executor.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function deregisterOp(name) {
  delete CUSTOM_OPS[name];
}

/***/ }),

/***/ 84227:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'BiasAdd':
    case 'AddV2':
    case 'Add':
      {
        return [ops.add((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'AddN':
      {
        return [ops.addN((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('tensors', node, tensorMap, context))];
      }
    case 'FloorMod':
    case 'Mod':
      return [ops.mod((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
    case 'Mul':
      return [ops.mul((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
    case 'RealDiv':
    case 'Div':
      {
        return [ops.div((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'DivNoNan':
      {
        return [ops.divNoNan((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'FloorDiv':
      {
        return [ops.floorDiv((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'Sub':
      {
        return [ops.sub((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'Minimum':
      {
        return [ops.minimum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'Maximum':
      {
        return [ops.maximum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'Pow':
      {
        return [ops.pow((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'SquaredDifference':
      {
        return [ops.squaredDifference((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'arithmetic';

/***/ }),

/***/ 48413:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'Abs':
    case 'ComplexAbs':
      return [ops.abs((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Acos':
      return [ops.acos((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Acosh':
      return [ops.acosh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Asin':
      return [ops.asin((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Asinh':
      return [ops.asinh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Atan':
      return [ops.atan((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Atan2':
      return [ops.atan2((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('y', node, tensorMap, context))];
    case 'Atanh':
      return [ops.atanh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Ceil':
      return [ops.ceil((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Complex':
      return [ops.complex((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('real', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('imag', node, tensorMap, context))];
    case 'Cos':
      return [ops.cos((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Cosh':
      return [ops.cosh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Elu':
      return [ops.elu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Erf':
      return [ops.erf((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Exp':
      return [ops.exp((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Expm1':
      {
        return [ops.expm1((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Floor':
      return [ops.floor((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Log':
      return [ops.log((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Log1p':
      {
        return [ops.log1p((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Imag':
      return [ops.imag((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Neg':
      return [ops.neg((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Reciprocal':
      {
        return [ops.reciprocal((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Real':
      return [ops.real((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Relu':
      return [ops.relu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Round':
      {
        return [ops.round((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Selu':
      return [ops.selu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Sigmoid':
      return [ops.sigmoid((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Sin':
      return [ops.sin((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Sign':
      {
        return [ops.sign((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Sinh':
      {
        return [ops.sinh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Softplus':
      {
        return [ops.softplus((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Sqrt':
      {
        return [ops.sqrt((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Square':
      {
        return [ops.square((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Tanh':
      {
        return [ops.tanh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'Tan':
      return [ops.tan((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'ClipByValue':
      return [ops.clipByValue((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('clipValueMin', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('clipValueMax', node, tensorMap, context))];
    case 'Relu6':
      return [ops.relu6((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
    case 'Rsqrt':
      return [ops.rsqrt((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.inputNames[0], tensorMap, context))];
    case 'LeakyRelu':
      return [ops.leakyRelu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alpha', node, tensorMap, context))];
    case 'Prelu':
      return [ops.prelu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alpha', node, tensorMap, context))];
    case 'IsNan':
      return [ops.isNaN((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.inputNames[0], tensorMap, context))];
    case 'IsInf':
      return [ops.isInf((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.inputNames[0], tensorMap, context))];
    case 'IsFinite':
      return [ops.isFinite((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.inputNames[0], tensorMap, context))];
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'basic_math';

/***/ }),

/***/ 33825:
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _executor_tensor_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../executor/tensor_array */ 99899);
/* harmony import */ var _executor_tensor_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../executor/tensor_list */ 2376);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ 80461);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const executeOp = /*#__PURE__*/function () {
  var _ref = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (node, tensorMap, context) {
    switch (node.op) {
      case 'If':
      case 'StatelessIf':
        {
          const thenFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('thenBranch', node, tensorMap, context);
          const elseFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elseBranch', node, tensorMap, context);
          const cond = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('cond', node, tensorMap, context);
          const args = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('args', node, tensorMap, context);
          const condValue = yield cond.data();
          if (condValue[0]) {
            return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
          } else {
            return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
          }
        }
      case 'While':
      case 'StatelessWhile':
        {
          const bodyFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('body', node, tensorMap, context);
          const condFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('cond', node, tensorMap, context);
          const args = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('args', node, tensorMap, context);
          // Calculate the condition of the loop
          const condResult = yield context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
          const argIds = args.map(tensor => tensor.id);
          let condValue = yield condResult[0].data();
          // Dispose the intermediate tensors for condition function
          condResult.forEach(tensor => {
            if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {
              tensor.dispose();
            }
          });
          let result = args;
          while (condValue[0]) {
            // Record the previous result for intermediate tensor tracking
            const origResult = result;
            // Execution the body of the loop
            result = yield context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
            const resultIds = result.map(tensor => tensor.id);
            // Dispose the intermediate tensor for body function that is not global
            // kept, not input/output of the body function
            origResult.forEach(tensor => {
              if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {
                tensor.dispose();
              }
            });
            // Recalcuate the condition of the loop using the latest results.
            const condResult = yield context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
            condValue = yield condResult[0].data();
            // Dispose the intermediate tensors for condition function
            condResult.forEach(tensor => {
              if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {
                tensor.dispose();
              }
            });
          }
          return result;
        }
      case 'LoopCond':
        {
          const pred = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('pred', node, tensorMap, context);
          return [(0,_utils__WEBPACK_IMPORTED_MODULE_4__.cloneTensor)(pred)];
        }
      case 'Switch':
        {
          const pred = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('pred', node, tensorMap, context);
          let data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('data', node, tensorMap, context);
          if (!data.kept) {
            data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.cloneTensor)(data);
          }
          // Outputs nodes :0 => false, :1 => true
          return (yield pred.data())[0] ? [undefined, data] : [data, undefined];
        }
      case 'Merge':
        {
          const inputName = node.inputNames.find(name => (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getTensor)(name, tensorMap, context) !== undefined);
          if (inputName) {
            const data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getTensor)(inputName, tensorMap, context);
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_4__.cloneTensor)(data)];
          }
          return undefined;
        }
      case 'Enter':
        {
          const frameId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('frameName', node, tensorMap, context);
          const data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          context.enterFrame(frameId);
          return [(0,_utils__WEBPACK_IMPORTED_MODULE_4__.cloneTensor)(data)];
        }
      case 'Exit':
        {
          const data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          context.exitFrame();
          return [(0,_utils__WEBPACK_IMPORTED_MODULE_4__.cloneTensor)(data)];
        }
      case 'NextIteration':
        {
          const data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          context.nextIteration();
          return [(0,_utils__WEBPACK_IMPORTED_MODULE_4__.cloneTensor)(data)];
        }
      case 'TensorArrayV3':
        {
          const size = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('size', node, tensorMap, context);
          const dtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('dtype', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const dynamicSize = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('dynamicSize', node, tensorMap, context);
          const clearAfterRead = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('clearAfterRead', node, tensorMap, context);
          const identicalElementShapes = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('identicalElementShapes', node, tensorMap, context);
          const name = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('name', node, tensorMap, context);
          const tensorArray = new _executor_tensor_array__WEBPACK_IMPORTED_MODULE_2__.TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);
          context.addTensorArray(tensorArray);
          return [tensorArray.idTensor, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.scalar)(1.0)];
        }
      case 'TensorArrayWriteV3':
        {
          const id = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const index = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('index', node, tensorMap, context);
          const writeTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const writeTensorArray = context.getTensorArray(id.id);
          writeTensorArray.write(index, writeTensor);
          return [writeTensorArray.idTensor];
        }
      case 'TensorArrayReadV3':
        {
          const readId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const readIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('index', node, tensorMap, context);
          const readTensorArray = context.getTensorArray(readId.id);
          return [readTensorArray.read(readIndex)];
        }
      case 'TensorArrayGatherV3':
        {
          const gatherId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const gatherIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('indices', node, tensorMap, context);
          const gatherDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('dtype', node, tensorMap, context);
          const gatherTensorArray = context.getTensorArray(gatherId.id);
          return [gatherTensorArray.gather(gatherIndices, gatherDtype)];
        }
      case 'TensorArrayScatterV3':
        {
          const scatterId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const scatterIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('indices', node, tensorMap, context);
          const scatterTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const scatterTensorArray = context.getTensorArray(scatterId.id);
          scatterTensorArray.scatter(scatterIndices, scatterTensor);
          return [scatterTensorArray.idTensor];
        }
      case 'TensorArrayConcatV3':
        {
          const concatId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const concatTensorArray = context.getTensorArray(concatId.id);
          const concatDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('dtype', node, tensorMap, context);
          return [concatTensorArray.concat(concatDtype)];
        }
      case 'TensorArraySplitV3':
        {
          const splitId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const splitTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const lengths = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('lengths', node, tensorMap, context);
          const splitTensorArray = context.getTensorArray(splitId.id);
          splitTensorArray.split(lengths, splitTensor);
          return [splitTensorArray.idTensor];
        }
      case 'TensorArraySizeV3':
        {
          const sizeId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const sizeTensorArray = context.getTensorArray(sizeId.id);
          return [(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.scalar)(sizeTensorArray.size(), 'int32')];
        }
      case 'TensorArrayCloseV3':
        {
          const closeId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorArrayId', node, tensorMap, context);
          const closeTensorArray = context.getTensorArray(closeId.id);
          closeTensorArray.clearAndClose();
          return [closeTensorArray.idTensor];
        }
      case 'TensorListSetItem':
        {
          const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const index = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('index', node, tensorMap, context);
          const writeTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const tensorList = context.getTensorList(idTensor.id);
          tensorList.setItem(index, writeTensor);
          return [tensorList.idTensor];
        }
      case 'TensorListGetItem':
        {
          const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const readIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('index', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const elementDType = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementDType', node, tensorMap, context);
          const tensorList = context.getTensorList(idTensor.id);
          return [tensorList.getItem(readIndex, elementShape, elementDType)];
        }
      case 'TensorListScatterV2':
      case 'TensorListScatter':
        {
          const scatterIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('indices', node, tensorMap, context);
          const scatterTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const numElements = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('numElements', node, tensorMap, context);
          const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_3__.scatter)(scatterTensor, scatterIndices, elementShape, numElements);
          context.addTensorList(tensorList);
          return [tensorList.idTensor];
        }
      case 'TensorListReserve':
      case 'EmptyTensorList':
        {
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementDType', node, tensorMap, context);
          let numElementsParam;
          if (node.op === 'TensorListReserve') {
            numElementsParam = 'numElements';
          } else {
            numElementsParam = 'maxNumElements';
          }
          const numElements = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)(numElementsParam, node, tensorMap, context);
          const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;
          const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_3__.reserve)(elementShape, elementDtype, numElements, maxNumElements);
          context.addTensorList(tensorList);
          return [tensorList.idTensor];
        }
      case 'TensorListGather':
        {
          const gatherId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const gatherIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('indices', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementDType', node, tensorMap, context);
          const tensorList = context.getTensorList(gatherId.id);
          return [tensorList.gather(gatherIndices, elementDtype, elementShape)];
        }
      case 'TensorListStack':
        {
          const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementDType', node, tensorMap, context);
          const numElements = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('numElements', node, tensorMap, context);
          const tensorList = context.getTensorList(idTensor.id);
          return [tensorList.stack(elementShape, elementDtype, numElements)];
        }
      case 'TensorListFromTensor':
        {
          const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementDType', node, tensorMap, context);
          const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_3__.fromTensor)(tensor, elementShape, elementDtype);
          context.addTensorList(tensorList);
          return [tensorList.idTensor];
        }
      case 'TensorListConcat':
      case 'TensorListConcatV2':
        {
          const concatId = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const tensorList = context.getTensorList(concatId.id);
          const concatDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('dtype', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          return [tensorList.concat(concatDtype, elementShape)];
        }
      case 'TensorListPushBack':
        {
          const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const writeTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const tensorList = context.getTensorList(idTensor.id);
          tensorList.pushBack(writeTensor);
          return [tensorList.idTensor];
        }
      case 'TensorListPopBack':
        {
          const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const elementDType = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementDType', node, tensorMap, context);
          const tensorList = context.getTensorList(idTensor.id);
          return [tensorList.popBack(elementShape, elementDType)];
        }
      case 'TensorListSplit':
        {
          const splitTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensor', node, tensorMap, context);
          const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('elementShape', node, tensorMap, context);
          const lengths = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('lengths', node, tensorMap, context);
          const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_3__.split)(splitTensor, lengths, elementShape);
          context.addTensorList(tensorList);
          return [tensorList.idTensor];
        }
      case 'TensorListLength':
        {
          const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const tensorList = context.getTensorList(idTensor.id);
          return [(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.scalar)(tensorList.size(), 'int32')];
        }
      case 'TensorListResize':
        {
          const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('tensorListId', node, tensorMap, context);
          const size = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getParamValue)('size', node, tensorMap, context);
          const srcTensorList = context.getTensorList(idTensor.id);
          const destTensorList = srcTensorList.resize(size);
          context.addTensorList(destTensorList);
          return [destTensorList.idTensor];
        }
      default:
        throw TypeError(`Node type ${node.op} is not implemented`);
    }
  });
  return function executeOp(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
const CATEGORY = 'control';

/***/ }),

/***/ 44778:
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


function fusedConvAndDepthWiseParams(node, tensorMap, context) {
  const [extraOp, activationFunc] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('fusedOps', node, tensorMap, context);
  const isBiasAdd = extraOp === 'biasadd';
  const noBiasAdd = !isBiasAdd;
  const isPrelu = activationFunc === 'prelu';
  const isBatchNorm = extraOp === 'fusedbatchnorm';
  const numArgs = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numArgs', node, tensorMap, context);
  if (isBiasAdd) {
    if (isPrelu && numArgs !== 2) {
      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');
    }
    if (!isPrelu && isBiasAdd && numArgs !== 1) {
      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');
    }
  }
  if (isBatchNorm) {
    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');
  }
  const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
  const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
  const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
  const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
  let [biasArg, preluArg] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('args', node, tensorMap, context);
  if (noBiasAdd) {
    preluArg = biasArg;
    biasArg = undefined;
  }
  const leakyreluAlpha = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('leakyreluAlpha', node, tensorMap, context);
  return {
    stride,
    pad,
    dataFormat,
    dilations,
    biasArg,
    preluArg,
    activationFunc,
    leakyreluAlpha
  };
}
const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'Conv1D':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stride', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilation = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilation', node, tensorMap, context);
        return [ops.conv1d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];
      }
    case 'Conv2D':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
        const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
        return [ops.conv2d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
      }
    case '_FusedConv2D':
      {
        const {
          stride,
          pad,
          dataFormat,
          dilations,
          biasArg,
          preluArg,
          activationFunc,
          leakyreluAlpha
        } = fusedConvAndDepthWiseParams(node, tensorMap, context);
        return [ops.fused.conv2d({
          x: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context),
          filter: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context),
          strides: [stride[1], stride[2]],
          pad: pad,
          dataFormat: dataFormat,
          dilations: [dilations[1], dilations[2]],
          bias: biasArg,
          activation: activationFunc,
          preluActivationWeights: preluArg,
          leakyreluAlpha
        })];
      }
    case 'FusedDepthwiseConv2dNative':
      {
        const {
          stride,
          pad,
          dataFormat,
          dilations,
          biasArg,
          preluArg,
          activationFunc,
          leakyreluAlpha
        } = fusedConvAndDepthWiseParams(node, tensorMap, context);
        return [ops.fused.depthwiseConv2d({
          x: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context),
          filter: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context),
          strides: [stride[1], stride[2]],
          pad: pad,
          dataFormat: dataFormat,
          dilations: [dilations[1], dilations[2]],
          bias: biasArg,
          activation: activationFunc,
          preluActivationWeights: preluArg,
          leakyreluAlpha
        })];
      }
    case 'Conv2DBackpropInput':
    case 'Conv2dTranspose':
      {
        const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('outputShape', node, tensorMap, context);
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
        return [ops.conv2dTranspose((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];
      }
    case 'DepthwiseConv2dNative':
    case 'DepthwiseConv2d':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
        const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
        const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        return [ops.depthwiseConv2d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('input', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
      }
    case 'Conv3D':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
        return [ops.conv3d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];
      }
    case 'AvgPool':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
        return [ops.avgPool((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
      }
    case 'MaxPool':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
        return [ops.maxPool((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
      }
    case 'MaxPoolWithArgmax':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
        const includeBatchInIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('includeBatchInIndex', node, tensorMap, context);
        const {
          result,
          indexes
        } = ops.maxPoolWithArgmax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);
        return [result, indexes];
      }
    case 'AvgPool3D':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
        return [ops.avgPool3d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
      }
    case 'MaxPool3D':
      {
        const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
        return [ops.maxPool3d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
      }
    case 'Dilation2D':
      {
        const strides = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
        const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
        const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
        // strides: [1, stride_height, stride_width, 1].
        const strideHeight = strides[1];
        const strideWidth = strides[2];
        // dilations: [1, dilation_height, dilation_width, 1].
        const dilationHeight = dilations[1];
        const dilationWidth = dilations[2];
        return [ops.dilation2d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];
      }

    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'convolution';

/***/ }),

/***/ 77863:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'Fill':
      {
        const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context);
        const dtype = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context);
        const value = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('value', node, tensorMap, context);
        return [ops.fill(shape, value, dtype)];
      }
    case 'LinSpace':
      {
        const start = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('start', node, tensorMap, context);
        const stop = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stop', node, tensorMap, context);
        const num = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('num', node, tensorMap, context);
        return [ops.linspace(start, stop, num)];
      }
    case 'Multinomial':
      {
        const logits = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('logits', node, tensorMap, context);
        const numSamples = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numSamples', node, tensorMap, context);
        const seed = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('seed', node, tensorMap, context);
        return [ops.multinomial(logits, numSamples, seed)];
      }
    case 'OneHot':
      {
        const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('indices', node, tensorMap, context);
        const depth = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('depth', node, tensorMap, context);
        const onValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('onValue', node, tensorMap, context);
        const offValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('offValue', node, tensorMap, context);
        const dtype = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context);
        return [ops.oneHot(indices, depth, onValue, offValue, dtype)];
      }
    case 'Ones':
      {
        return [ops.ones((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
      }
    case 'OnesLike':
      {
        return [ops.onesLike((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'RandomStandardNormal':
      {
        return [ops.randomStandardNormal((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('seed', node, tensorMap, context))];
      }
    case 'RandomUniform':
      {
        return [ops.randomUniform(
        // tslint:disable-next-line:no-any
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('minval', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('maxval', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
      }
    case 'RandomUniformInt':
      {
        return [ops.randomUniformInt((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('minval', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('maxval', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('seed', node, tensorMap, context))];
      }
    case 'Range':
      {
        const start = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('start', node, tensorMap, context);
        const stop = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stop', node, tensorMap, context);
        const step = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('step', node, tensorMap, context);
        return [ops.range(start, stop, step, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
      }
    case 'TruncatedNormal':
      {
        const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context);
        const mean = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mean', node, tensorMap, context);
        const stdDev = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stdDev', node, tensorMap, context);
        const seed = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('seed', node, tensorMap, context);
        return [ops.truncatedNormal(shape, mean, stdDev, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context), seed)];
      }
    case 'Zeros':
      {
        return [ops.zeros((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
      }
    case 'ZerosLike':
      {
        return [ops.zerosLike((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'creation';

/***/ }),

/***/ 97474:
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ 80461);

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


function nmsParams(node, tensorMap, context) {
  const boxes = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('boxes', node, tensorMap, context);
  const scores = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('scores', node, tensorMap, context);
  const maxOutputSize = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('maxOutputSize', node, tensorMap, context);
  const iouThreshold = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('iouThreshold', node, tensorMap, context);
  const scoreThreshold = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('scoreThreshold', node, tensorMap, context);
  const softNmsSigma = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('softNmsSigma', node, tensorMap, context);
  return {
    boxes,
    scores,
    maxOutputSize,
    iouThreshold,
    scoreThreshold,
    softNmsSigma
  };
}
const executeOp = /*#__PURE__*/function () {
  var _ref = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (node, tensorMap, context, resourceManager, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__) {
    switch (node.op) {
      case 'NonMaxSuppressionV5':
        {
          const {
            boxes,
            scores,
            maxOutputSize,
            iouThreshold,
            scoreThreshold,
            softNmsSigma
          } = nmsParams(node, tensorMap, context);
          const result = yield ops.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
          return [result.selectedIndices, result.selectedScores];
        }
      case 'NonMaxSuppressionV4':
        {
          const {
            boxes,
            scores,
            maxOutputSize,
            iouThreshold,
            scoreThreshold
          } = nmsParams(node, tensorMap, context);
          const padToMaxOutputSize = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('padToMaxOutputSize', node, tensorMap, context);
          const result = yield ops.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
          return [result.selectedIndices, result.validOutputs];
        }
      case 'NonMaxSuppressionV3':
      case 'NonMaxSuppressionV2':
        {
          const {
            boxes,
            scores,
            maxOutputSize,
            iouThreshold,
            scoreThreshold
          } = nmsParams(node, tensorMap, context);
          return [yield ops.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];
        }
      case 'Where':
        {
          const condition = ops.cast((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('condition', node, tensorMap, context), 'bool');
          const result = [yield ops.whereAsync(condition)];
          condition.dispose();
          return result;
        }
      case 'ListDiff':
        {
          return ops.setdiff1dAsync((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('y', node, tensorMap, context));
        }
      default:
        throw TypeError(`Node type ${node.op} is not implemented`);
    }
  });
  return function executeOp(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
const CATEGORY = 'dynamic';

/***/ }),

/***/ 71607:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'LowerBound':
      {
        const sortedSequence = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('sortedSequence', node, tensorMap, context);
        const values = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('values', node, tensorMap, context);
        return [ops.lowerBound(sortedSequence, values)];
      }
    case 'TopKV2':
      {
        const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
        const k = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('k', node, tensorMap, context);
        const sorted = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('sorted', node, tensorMap, context);
        const result = ops.topk(x, k, sorted);
        return [result.values, result.indices];
      }
    case 'UpperBound':
      {
        const sortedSequence = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('sortedSequence', node, tensorMap, context);
        const values = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('values', node, tensorMap, context);
        return [ops.upperBound(sortedSequence, values)];
      }
    case 'Unique':
      {
        const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
        const result = ops.unique(x);
        return [result.values, result.indices];
      }
    case 'UniqueV2':
      {
        const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const result = ops.unique(x, axis);
        return [result.values, result.indices];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'evaluation';

/***/ }),

/***/ 43407:
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'Const':
      {
        return tensorMap[node.name];
      }
    case 'PlaceholderWithDefault':
      const def = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('default', node, tensorMap, context);
      return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.name, tensorMap, context) || def];
    case 'Placeholder':
      return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.name, tensorMap, context)];
    case 'Identity':
    case 'StopGradient':
    case 'FakeQuantWithMinMaxVars':
      {
        // This op is currently ignored.
        const data = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
        return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.cloneTensor)(data)];
      }
    case 'IdentityN':
      return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).map(t => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.cloneTensor)(t));
    case 'Snapshot':
      const snapshot = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
      return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.cloneTensor)(snapshot)];
    case 'Shape':
      return [ops.tensor1d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).shape, 'int32')];
    case 'ShapeN':
      return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).map(t => ops.tensor1d(t.shape));
    case 'Size':
      return [ops.scalar((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).size, 'int32')];
    case 'Rank':
      return [ops.scalar((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).rank, 'int32')];
    case 'NoOp':
      return [ops.scalar(1)];
    case 'Print':
      const input = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
      const data = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('data', node, tensorMap, context);
      const message = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('message', node, tensorMap, context);
      const summarize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('summarize', node, tensorMap, context);
      console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');
      console.log(message);
      for (let i = 0; i < data.length; i++) {
        console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));
      }
      return [input];
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'graph';

/***/ }),

/***/ 65618:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 19369);
/* harmony import */ var _executor_hash_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../executor/hash_table */ 95536);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ 80461);

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const executeOp = /*#__PURE__*/function () {
  var _ref = (0,_Users_victorbarbosa_git_AiSamples_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (node, tensorMap, context, resourceManager) {
    switch (node.op) {
      case 'HashTable':
      case 'HashTableV2':
        {
          const existingTableHandle = resourceManager.getHashTableHandleByName(node.name);
          // Table is shared with initializer.
          if (existingTableHandle != null) {
            return [existingTableHandle];
          } else {
            const keyDType = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('keyDType', node, tensorMap, context);
            const valueDType = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('valueDType', node, tensorMap, context);
            const hashTable = new _executor_hash_table__WEBPACK_IMPORTED_MODULE_1__.HashTable(keyDType, valueDType);
            resourceManager.addHashTable(node.name, hashTable);
            return [hashTable.handle];
          }
        }
      case 'InitializeTable':
      case 'InitializeTableV2':
      case 'LookupTableImport':
      case 'LookupTableImportV2':
        {
          const handle = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
          const keys = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('keys', node, tensorMap, context);
          const values = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('values', node, tensorMap, context);
          const hashTable = resourceManager.getHashTableById(handle.id);
          return [yield hashTable.import(keys, values)];
        }
      case 'LookupTableFind':
      case 'LookupTableFindV2':
        {
          const handle = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
          const keys = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('keys', node, tensorMap, context);
          const defaultValue = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('defaultValue', node, tensorMap, context);
          const hashTable = resourceManager.getHashTableById(handle.id);
          return [yield hashTable.find(keys, defaultValue)];
        }
      case 'LookupTableSize':
      case 'LookupTableSizeV2':
        {
          const handle = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
          const hashTable = resourceManager.getHashTableById(handle.id);
          return [hashTable.tensorSize()];
        }
      default:
        throw TypeError(`Node type ${node.op} is not implemented`);
    }
  });
  return function executeOp(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
const CATEGORY = 'hash_table';

/***/ }),

/***/ 76787:
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'ResizeBilinear':
      {
        const images = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('images', node, tensorMap, context);
        const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
        const alignCorners = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alignCorners', node, tensorMap, context);
        const halfPixelCenters = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('halfPixelCenters', node, tensorMap, context);
        return [ops.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];
      }
    case 'ResizeNearestNeighbor':
      {
        const images = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('images', node, tensorMap, context);
        const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
        const alignCorners = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alignCorners', node, tensorMap, context);
        const halfPixelCenters = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('halfPixelCenters', node, tensorMap, context);
        return [ops.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];
      }
    case 'CropAndResize':
      {
        const image = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('image', node, tensorMap, context);
        const boxes = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('boxes', node, tensorMap, context);
        const boxInd = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('boxInd', node, tensorMap, context);
        const cropSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('cropSize', node, tensorMap, context);
        const method = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('method', node, tensorMap, context);
        const extrapolationValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('extrapolationValue', node, tensorMap, context);
        return [ops.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];
      }
    case 'ImageProjectiveTransformV3':
      {
        const images = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('images', node, tensorMap, context);
        const transforms = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transforms', node, tensorMap, context);
        const outputShape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('outputShape', node, tensorMap, context);
        const fillValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('fillValue', node, tensorMap, context);
        const interpolation = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('interpolation', node, tensorMap, context);
        const fillMode = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('fillMode', node, tensorMap, context);
        return [ops.image.transform(images, transforms, interpolation.toLowerCase(), fillMode.toLowerCase(), fillValue, outputShape)];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'image';

/***/ }),

/***/ 90770:
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'Equal':
      {
        return [ops.equal((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'NotEqual':
      {
        return [ops.notEqual((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'Greater':
      {
        return [ops.greater((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'GreaterEqual':
      {
        return [ops.greaterEqual((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'Less':
      {
        return [ops.less((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'LessEqual':
      {
        return [ops.lessEqual((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'LogicalAnd':
      {
        return [ops.logicalAnd((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'LogicalNot':
      {
        return [ops.logicalNot((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context))];
      }
    case 'LogicalOr':
      {
        return [ops.logicalOr((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'Select':
    case 'SelectV2':
      {
        return [ops.where((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('condition', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    case 'BitwiseAnd':
      {
        return [ops.bitwiseAnd((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'logical';

/***/ }),

/***/ 70734:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'BatchMatMul':
    case 'BatchMatMulV2':
    case 'MatMul':
      return [ops.matMul((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeA', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeB', node, tensorMap, context))];
    case 'Einsum':
      return [ops.einsum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('equation', node, tensorMap, context), ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('tensors', node, tensorMap, context))];
    case 'Transpose':
      return [ops.transpose((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('perm', node, tensorMap, context))];
    case '_FusedMatMul':
      const [extraOp, activationFunc] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('fusedOps', node, tensorMap, context);
      const isBiasAdd = extraOp === 'biasadd';
      const isPrelu = activationFunc === 'prelu';
      const numArgs = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numArgs', node, tensorMap, context);
      const leakyreluAlpha = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('leakyreluAlpha', node, tensorMap, context);
      if (isBiasAdd) {
        if (isPrelu && numArgs !== 2) {
          throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' + 'extra arguments: bias and alpha.');
        }
        if (!isPrelu && numArgs !== 1) {
          throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');
        }
      }
      const [biasArg, preluArg] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('args', node, tensorMap, context);
      return [ops.fused.matMul({
        a: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context),
        b: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context),
        transposeA: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeA', node, tensorMap, context),
        transposeB: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeB', node, tensorMap, context),
        bias: biasArg,
        activation: activationFunc,
        preluActivationWeights: preluArg,
        leakyreluAlpha
      })];
    case 'MatrixBandPart':
      return [ops.linalg.bandPart((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numLower', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numUpper', node, tensorMap, context))];
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'matrices';

/***/ }),

/***/ 83398:
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'EuclideanNorm':
      return [ops.euclideanNorm((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context))];
    case 'FusedBatchNorm':
    case 'FusedBatchNormV2':
      {
        return [ops.batchNorm((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mean', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('variance', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('offset', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('scale', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('epsilon', node, tensorMap, context))];
      }
    case 'FusedBatchNormV3':
      {
        return [ops.batchNorm((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mean', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('variance', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('offset', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('scale', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('epsilon', node, tensorMap, context))];
      }
    case 'LRN':
      {
        return [ops.localResponseNormalization((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('radius', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('bias', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alpha', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('beta', node, tensorMap, context))];
      }
    case 'Softmax':
      {
        return [ops.softmax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'LogSoftmax':
      {
        return [ops.logSoftmax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'normalization';

/***/ }),

/***/ 49606:
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/ragged_executor.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'RaggedGather':
      {
        const {
          outputNestedSplits,
          outputDenseValues
        } = ops.raggedGather((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('paramsNestedSplits', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('paramsDenseValues', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('indices', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('outputRaggedRank', node, tensorMap, context));
        return outputNestedSplits.concat(outputDenseValues);
      }
    case 'RaggedRange':
      {
        const {
          rtNestedSplits,
          rtDenseValues
        } = ops.raggedRange((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('starts', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('limits', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('splits', node, tensorMap, context));
        return [rtNestedSplits, rtDenseValues];
      }
    case 'RaggedTensorToTensor':
      {
        return [ops.raggedTensorToTensor((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('values', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('defaultValue', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('rowPartitionTensors', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('rowPartitionTypes', node, tensorMap, context))];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'ragged';

/***/ }),

/***/ 48530:
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'Max':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
        return [ops.max((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }
    case 'Mean':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
        return [ops.mean((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }
    case 'Min':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
        return [ops.min((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }
    case 'Sum':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
        return [ops.sum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }
    case 'All':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
        return [ops.all((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }
    case 'Any':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
        return [ops.any((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }
    case 'ArgMax':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        return [ops.argMax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
      }
    case 'ArgMin':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        return [ops.argMin((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
      }
    case 'Prod':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
        return [ops.prod((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
      }
    case 'Cumprod':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const exclusive = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('exclusive', node, tensorMap, context);
        const reverse = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('reverse', node, tensorMap, context);
        return [ops.cumprod((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, exclusive, reverse)];
      }
    case 'Cumsum':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        const exclusive = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('exclusive', node, tensorMap, context);
        const reverse = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('reverse', node, tensorMap, context);
        return [ops.cumsum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, exclusive, reverse)];
      }
    case 'Bincount':
      const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
      const weights = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('weights', node, tensorMap, context);
      const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
      return [ops.bincount(x, weights, size)];
    case 'DenseBincount':
      {
        const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
        const weights = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('weights', node, tensorMap, context);
        const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
        const binaryOutput = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('binaryOutput', node, tensorMap, context);
        return [ops.denseBincount(x, weights, size, binaryOutput)];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'reduction';

/***/ }),

/***/ 57858:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__) => {
  switch (node.op) {
    case 'ConcatV2':
    case 'Concat':
      {
        const n = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('n', node, tensorMap, context);
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
        let inputs = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tensors', node, tensorMap, context);
        inputs = inputs.slice(0, n);
        return [ops.concat(inputs, axis)];
      }
    case 'Gather':
      {
        const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
        const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
        return [ops.gather(input, ops.cast(indices, 'int32'), 0)];
      }
    case 'GatherV2':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
        const batchDims = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('batchDims', node, tensorMap, context);
        const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
        const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
        return [ops.gather(input, ops.cast(indices, 'int32'), axis, batchDims)];
      }
    case 'Reverse':
      {
        const dims = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('dims', node, tensorMap, context);
        const axis = [];
        for (let i = 0; i < dims.length; i++) {
          if (dims[i]) {
            axis.push(i);
          }
        }
        const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
        return [ops.reverse(input, axis)];
      }
    case 'ReverseV2':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
        const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
        return [ops.reverse(input, axis)];
      }
    case 'Slice':
      {
        // tslint:disable-next-line:no-any
        const begin = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('begin', node, tensorMap, context);
        // tslint:disable-next-line:no-any
        const size = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('size', node, tensorMap, context);
        return [ops.slice((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context), begin, size)];
      }
    case 'StridedSlice':
      {
        const begin = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('begin', node, tensorMap, context);
        const end = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('end', node, tensorMap, context);
        const strides = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('strides', node, tensorMap, context);
        const beginMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('beginMask', node, tensorMap, context);
        const endMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('endMask', node, tensorMap, context);
        const ellipsisMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('ellipsisMask', node, tensorMap, context);
        const newAxisMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('newAxisMask', node, tensorMap, context);
        const shrinkAxisMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('shrinkAxisMask', node, tensorMap, context);
        const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
        return [ops.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];
      }
    case 'Pack':
      {
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
          const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
          const tensors = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tensors', node, tensorMap, context);
          // Reshape the tensors to the first tensor's shape if they don't
          // match.
          const shape = tensors[0].shape;
          const squeezedShape = ops.squeeze(tensors[0]).shape;
          const mapped = tensors.map(tensor => {
            const sameShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(tensor.shape, shape);
            if (!sameShape && !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(ops.squeeze(tensor).shape, squeezedShape)) {
              throw new Error('the input tensors shape does not match');
            }
            return sameShape ? tensor : ops.reshape(tensor, shape);
          });
          return [ops.stack(mapped, axis)];
        });
      }
    case 'Unpack':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
        const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tensor', node, tensorMap, context);
        return ops.unstack(tensor, axis);
      }
    case 'Tile':
      {
        const reps = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('reps', node, tensorMap, context);
        return [ops.tile((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context), reps)];
      }
    case 'Split':
    case 'SplitV':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
        const numOrSizeSplits = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('numOrSizeSplits', node, tensorMap, context);
        const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
        return ops.split(tensor, numOrSizeSplits, axis);
      }
    case 'ScatterNd':
      {
        const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
        const values = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('values', node, tensorMap, context);
        const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('shape', node, tensorMap, context);
        return [ops.scatterND(indices, values, shape)];
      }
    case 'GatherNd':
      {
        const x = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
        const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
        return [ops.gatherND(x, indices)];
      }
    case 'SparseToDense':
      {
        const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('sparseIndices', node, tensorMap, context);
        const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('outputShape', node, tensorMap, context);
        const sparseValues = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('sparseValues', node, tensorMap, context);
        const defaultValue = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('defaultValue', node, tensorMap, context);
        return [ops.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : ops.cast(defaultValue, sparseValues.dtype))];
      }
    case 'TensorScatterUpdate':
      {
        const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
        const values = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('values', node, tensorMap, context);
        const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tensor', node, tensorMap, context);
        return [ops.tensorScatterUpdate(tensor, indices, values)];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'slice_join';

/***/ }),

/***/ 80466:
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/sparse_executor.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'SparseFillEmptyRows':
      {
        const {
          outputIndices,
          outputValues,
          emptyRowIndicator,
          reverseIndexMap
        } = ops.sparse.sparseFillEmptyRows((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('indices', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('values', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('denseShape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('defaultValue', node, tensorMap, context));
        return [outputIndices, outputValues, emptyRowIndicator, reverseIndexMap];
      }
    case 'SparseReshape':
      {
        const {
          outputIndices,
          outputShape
        } = ops.sparse.sparseReshape((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('inputIndices', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('inputShape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('newShape', node, tensorMap, context));
        return [outputIndices, outputShape];
      }
    case 'SparseSegmentMean':
      {
        const outputData = ops.sparse.sparseSegmentMean((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('data', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('indices', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('segmentIds', node, tensorMap, context));
        return [outputData];
      }
    case 'SparseSegmentSum':
      {
        const outputData = ops.sparse.sparseSegmentSum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('data', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('indices', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('segmentIds', node, tensorMap, context));
        return [outputData];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'sparse';

/***/ }),

/***/ 72743:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'FFT':
      {
        return [ops.fft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'IFFT':
      {
        return [ops.ifft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'RFFT':
      {
        return [ops.rfft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    case 'IRFFT':
      {
        return [ops.irfft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'spectral';

/***/ }),

/***/ 79680:
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/string_executor.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'StaticRegexReplace':
      {
        return [ops.string.staticRegexReplace((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('input', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pattern', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('rewrite', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('replaceGlobal', node, tensorMap, context))];
      }
    case 'StringNGrams':
      {
        const {
          nGrams,
          nGramsSplits
        } = ops.string.stringNGrams((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('data', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataSplits', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('separator', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('nGramWidths', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('leftPad', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('rightPad', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('padWidth', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('preserveShortSequences', node, tensorMap, context));
        return [nGrams, nGramsSplits];
      }
    case 'StringSplit':
      {
        const {
          indices,
          values,
          shape
        } = ops.string.stringSplit((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('input', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('delimiter', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('skipEmpty', node, tensorMap, context));
        return [indices, values, shape];
      }
    case 'StringToHashBucketFast':
      {
        const output = ops.string.stringToHashBucketFast((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('input', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numBuckets', node, tensorMap, context));
        return [output];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'string';

/***/ }),

/***/ 30117:
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY),
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ 29801);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ 80461);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context, ops = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__) => {
  switch (node.op) {
    case 'Cast':
      {
        return [ops.cast((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
      }
    case 'ExpandDims':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        return [ops.expandDims((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
      }
    case 'Squeeze':
      {
        const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
        return [ops.squeeze((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
      }
    case 'Reshape':
      {
        return [ops.reshape((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context))];
      }
    case 'EnsureShape':
      {
        return [ops.ensureShape((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context))];
      }
    case 'MirrorPad':
      {
        return [ops.mirrorPad((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('padding', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mode', node, tensorMap, context))];
      }
    case 'PadV2':
    case 'Pad':
      {
        return [ops.pad((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('padding', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('constantValue', node, tensorMap, context))];
      }
    case 'SpaceToBatchND':
      {
        const blockShape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('blockShape', node, tensorMap, context);
        const paddings = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('paddings', node, tensorMap, context);
        return [ops.spaceToBatchND((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), blockShape, paddings)];
      }
    case 'BatchToSpaceND':
      {
        const blockShape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('blockShape', node, tensorMap, context);
        const crops = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('crops', node, tensorMap, context);
        return [ops.batchToSpaceND((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), blockShape, crops)];
      }
    case 'DepthToSpace':
      {
        const blockSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('blockSize', node, tensorMap, context);
        const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
        return [ops.depthToSpace((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), blockSize, dataFormat)];
      }
    case 'BroadcastTo':
      {
        return [ops.broadcastTo((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context))];
      }
    case 'BroadcastArgs':
      {
        return [ops.broadcastArgs((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('s0', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('s1', node, tensorMap, context))];
      }
    default:
      throw TypeError(`Node type ${node.op} is not implemented`);
  }
};
const CATEGORY = 'transformation';

/***/ }),

/***/ 80461:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cloneTensor": () => (/* binding */ cloneTensor),
/* harmony export */   "getNodeNameAndIndex": () => (/* binding */ getNodeNameAndIndex),
/* harmony export */   "getPadding": () => (/* binding */ getPadding),
/* harmony export */   "getParamValue": () => (/* binding */ getParamValue),
/* harmony export */   "getTensor": () => (/* binding */ getTensor),
/* harmony export */   "getTensorsForCurrentContext": () => (/* binding */ getTensorsForCurrentContext),
/* harmony export */   "parseNodeName": () => (/* binding */ parseNodeName),
/* harmony export */   "split": () => (/* binding */ split)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function getParamValue(paramName, node, tensorMap, context, resourceManager) {
  const inputParam = node.inputParams[paramName];
  if (inputParam && inputParam.inputIndexStart !== undefined) {
    const start = inputParam.inputIndexStart;
    const end = inputParam.inputIndexEnd === 0 ? undefined : inputParam.inputIndexEnd === undefined ? start + 1 : inputParam.inputIndexEnd;
    const shiftedStart = start < 0 ? node.inputNames.length + start : start;
    if (inputParam.type === 'tensor') {
      return getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);
    }
    if (inputParam.type === 'tensors') {
      // TODO(mattSoulanille): This filters out NoOp nodes during execution, but
      // these should really never be in the execution graph in the first place.
      // They're necessary for ordering the graph, but should not be visible
      // during execution. Perhaps have different sets of children, one for
      // control dependencies and another for real dependencies.
      const inputs = node.inputs.slice(start, end);
      const inputNames = node.inputNames.slice(start, end).filter((_name, index) => {
        var _a;
        return ((_a = inputs[index]) === null || _a === void 0 ? void 0 : _a.op) !== 'NoOp';
      });
      return inputNames.map(name => getTensor(name, tensorMap, context, resourceManager));
    }
    const tensor = getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);
    const data = tensor.dataSync();
    return inputParam.type === 'number' ? data[0] : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(tensor.shape, data);
  }
  const attrParam = node.attrParams[paramName];
  return attrParam && attrParam.value;
}
/**
 * Retrieve the tensor from tensorsMap based on input name.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */
function getTensor(name, tensorsMap, context, resourceManager) {
  const [nodeName, index] = parseNodeName(name, context);
  if (resourceManager != null) {
    const tensor = resourceManager.getHashTableHandleByName(nodeName);
    if (tensor != null) {
      return tensor;
    }
  }
  const contextId = context.currentContextIds.find(contextId => {
    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
  });
  return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;
}
/**
 * Retrieve the tensors based on input name for current context.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */
function getTensorsForCurrentContext(name, tensorsMap, context) {
  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];
}
/**
 * Returns the node name, outputName and index from the Node input name.
 * @param inputName The input name of the node, in format of
 * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is
 * default to 0.
 * If the input name contains output name i.e. StringSplit:indices:0, it will
 * return ['StringSplit', 0, 'indices'].
 */
function getNodeNameAndIndex(inputName, context) {
  const [nodeName, index, outputName] = parseNodeName(inputName, context);
  return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index, outputName];
}
function getNodeNameWithContextId(name, contextId) {
  return !!contextId ? `${name}-${contextId}` : name;
}
function parseNodeName(name, context) {
  if (name === '') {
    return ['', 0, undefined];
  }
  const isCacheEnabled = context != null && context.parseNodeNameCache != null;
  if (isCacheEnabled) {
    const cachedResult = context.parseNodeNameCache.get(name);
    if (cachedResult != null) {
      return cachedResult;
    }
  }
  const parts = name.split(':');
  let result;
  if (parts.length === 1) {
    result = [name, 0, undefined];
  } else {
    const nodeName = parts[0];
    const outputName = parts.length === 3 ? parts[1] : undefined;
    const index = Number(parts[parts.length - 1]);
    result = [nodeName, index, outputName];
  }
  if (isCacheEnabled) {
    context.parseNodeNameCache.set(name, result);
  }
  return result;
}
function split(arr, size) {
  const res = [];
  for (let i = 0; i < arr.length; i += size) {
    res.push(arr.slice(i, i + size));
  }
  return res;
}
function getPadding(node, tensorMap, context) {
  let pad = getParamValue('pad', node, tensorMap, context);
  if (pad === 'explicit') {
    // This is 1d array, we need to convert it to 2d array
    pad = getParamValue('explicitPaddings', node, tensorMap, context);
    const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let i = 0; i < 4; i++) {
      explicitPadding[i][0] = pad[i * 2];
      explicitPadding[i][1] = pad[i * 2 + 1];
    }
    return explicitPadding;
  }
  return pad;
}
/**
 *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to
 *  avoid disposal. This is important for TensorArray and TensorList ops, since
 *  internally they use a tensor as the id for TensorArray and TensorList, and
 * to simplify lookup, they also use Tensor.id as the key to the internal map.
 * These id tensors have been marked as kept in the backend, we need avoid clone
 * them in order to create new Tensor.id.
 * @param tensor
 */
function cloneTensor(tensor) {
  return tensor.kept ? tensor : (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clone)(tensor);
}

/***/ }),

/***/ 62198:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Add',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AddV2',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AddN',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'BiasAdd',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sub',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'RealDiv',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Div',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'DivNoNan',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FloorDiv',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Mul',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Maximum',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Minimum',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Pow',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SquaredDifference',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Mod',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FloorMod',
  'category': 'arithmetic',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];

/***/ }),

/***/ 58288:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Abs',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Acos',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Asin',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atan2',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'y',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Ceil',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ClipByValue',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'clipValueMin',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'clipValueMax',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Complex',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'real',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'imag',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ComplexAbs',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Cos',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Cosh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Elu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Exp',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Floor',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Log',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Imag',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'outputType',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Neg',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Real',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'outputType',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Prelu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'alpha',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Relu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Relu6',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Selu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sigmoid',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sin',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sinh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sqrt',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Rsqrt',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Square',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tanh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Sign',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Round',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Expm1',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Log1p',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Reciprocal',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Softplus',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Asinh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Acosh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Atanh',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Erf',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LeakyRelu',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'alpha',
    'name': 'alpha',
    'type': 'number',
    'defaultValue': 0.2
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'IsNan',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'IsFinite',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'IsInf',
  'category': 'basic_math',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];

/***/ }),

/***/ 50507:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'EmptyTensorList',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 1,
    'name': 'maxNumElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'LoopCond',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'pred',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Switch',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'pred',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Merge',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Enter',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'frame_name',
    'name': 'frameName',
    'type': 'string'
  }, {
    'tfName': 'is_constant',
    'name': 'isConstant',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Exit',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'NextIteration',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'size',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'tfName': 'dynamic_size',
    'name': 'dynamicSize',
    'type': 'bool'
  }, {
    'tfName': 'clear_after_read',
    'name': 'clearAfterRead',
    'type': 'bool'
  }, {
    'tfName': 'identical_element_shapes',
    'name': 'identicalElementShapes',
    'type': 'bool'
  }, {
    'tfName': 'tensor_array_name',
    'name': 'name',
    'type': 'string'
  }]
}, {
  'tfOpName': 'TensorArrayWriteV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayReadV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArrayGatherV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }]
}, {
  'tfOpName': 'TensorArrayScatterV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorArrayConcatV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'element_shape_except0',
    'name': 'elementShapeExcept0',
    'type': 'shape',
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorArraySplitV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'lengths',
    'type': 'number[]'
  }, {
    'start': 3,
    'name': 'flowIn',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorArraySizeV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'flowIn',
    'type': 'number'
  }]
}, {
  'tfOpName': 'TensorArrayCloseV3',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorArrayId',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'StatelessIf',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'cond',
    'type': 'tensor'
  }, {
    'start': 1,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'then_branch',
    'name': 'thenBranch',
    'type': 'func'
  }, {
    'tfName': 'else_branch',
    'name': 'elseBranch',
    'type': 'func'
  }]
}, {
  'tfOpName': 'If',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'cond',
    'type': 'tensor'
  }, {
    'start': 1,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'then_branch',
    'name': 'thenBranch',
    'type': 'func'
  }, {
    'tfName': 'else_branch',
    'name': 'elseBranch',
    'type': 'func'
  }]
}, {
  'tfOpName': 'StatelessWhile',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'cond',
    'name': 'cond',
    'type': 'func'
  }, {
    'tfName': 'body',
    'name': 'body',
    'type': 'func'
  }]
}, {
  'tfOpName': 'While',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'cond',
    'name': 'cond',
    'type': 'func'
  }, {
    'tfName': 'body',
    'name': 'body',
    'type': 'func'
  }]
}, {
  'tfOpName': 'TensorListScatter',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListScatterV2',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 3,
    'name': 'numElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListGather',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListGetItem',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListSetItem',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'index',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListReserve',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 1,
    'name': 'numElements',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListFromTensor',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListStack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }, {
    'tfName': 'num_elements',
    'name': 'numElements',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListSplit',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'start': 2,
    'name': 'lengths',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListConcat',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListConcatV2',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_shape',
    'name': 'elementShape',
    'type': 'shape'
  }, {
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListPopBack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'elementShape',
    'type': 'shape'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListPushBack',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'element_dtype',
    'name': 'elementDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TensorListLength',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'TensorListResize',
  'category': 'control',
  'inputs': [{
    'start': 0,
    'name': 'tensorListId',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number'
  }]
}];

/***/ }),

/***/ 31410:
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'AvgPool',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPool',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': [],
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPoolWithArgmax',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'include_batch_in_index',
    'name': 'includeBatchInIndex',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'AvgPool3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MaxPool3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'ksize',
    'name': 'kernelSize',
    'type': 'number[]'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Conv1D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'stride',
    'name': 'stride',
    'type': 'number'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NWC'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'dilation',
    'name': 'dilation',
    'type': 'number',
    'defaultValue': 1
  }]
}, {
  'tfOpName': 'Conv2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'useCudnnOnGpu',
    'name': 'useCudnnOnGpu',
    'type': 'bool'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': '_FusedConv2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 2,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'use_cudnn_on_gpu',
    'name': 'useCudnnOnGpu',
    'type': 'bool',
    'defaultValue': true
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'defaultValue': [1, 1, 1, 1]
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.0001
  }, {
    'tfName': 'leakyrelu_alpha',
    'name': 'leakyreluAlpha',
    'type': 'number',
    'defaultValue': 0.2
  }]
}, {
  'tfOpName': 'Conv2DBackpropInput',
  'category': 'convolution',
  'inputs': [{
    'start': 2,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 0,
    'name': 'outputShape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'notSupported': true
  }]
}, {
  'tfOpName': 'DepthwiseConv2d',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'DepthwiseConv2dNative',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'FusedDepthwiseConv2dNative',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }, {
    'start': 2,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]',
    'defaultValue': [1, 1, 1, 1]
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'explicit_paddings',
    'name': 'explicitPaddings',
    'type': 'number[]',
    'defaultValue': []
  }]
}, {
  'tfOpName': 'Conv3D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'defaultValue': 'NHWC'
  }, {
    'tfName': 'dilations',
    'name': 'dilations',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Dilation2D',
  'category': 'convolution',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'filter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'strides',
    'name': 'strides',
    'type': 'number[]'
  }, {
    'tfName': 'rates',
    'name': 'dilations',
    'type': 'number[]'
  }, {
    'tfName': 'padding',
    'name': 'pad',
    'type': 'string'
  }]
}];

/***/ }),

/***/ 79981:
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Fill',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }, {
    'start': 1,
    'name': 'value',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'LinSpace',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'start',
    'type': 'number'
  }, {
    'start': 1,
    'name': 'stop',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'num',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'OneHot',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'depth',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'onValue',
    'type': 'number',
    'defaultValue': 1
  }, {
    'start': 3,
    'name': 'offValue',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Ones',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'OnesLike',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'RandomStandardNormal',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'T',
    'name': 'T',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'RandomUniform',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'minval',
    'name': 'minval',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'maxval',
    'name': 'maxval',
    'type': 'number',
    'defaultValue': 1
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }, {
    'tfName': 'T',
    'name': 'T',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'RandomUniformInt',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'minval',
    'name': 'minval',
    'type': 'number'
  }, {
    'tfName': 'maxval',
    'name': 'maxval',
    'type': 'number'
  }, {
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }]
}, {
  'tfOpName': 'Range',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'start',
    'type': 'number'
  }, {
    'start': 1,
    'name': 'stop',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'step',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'Tidx',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'TruncatedNormal',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'means',
    'name': 'mean',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'stddev',
    'name': 'stdDev',
    'type': 'number',
    'defaultValue': 1
  }, {
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number'
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'T',
    'name': 'T',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Zeros',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'ZerosLike',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Multinomial',
  'category': 'creation',
  'inputs': [{
    'start': 0,
    'name': 'logits',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numSamples',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'seed',
    'name': 'seed',
    'type': 'number'
  }, {
    'tfName': 'seed2',
    'name': 'seed2',
    'type': 'number'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }, {
    'tfName': 'output_dtype',
    'name': 'output_dtype',
    'type': 'dtype'
  }]
}];

/***/ }),

/***/ 19026:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'NonMaxSuppressionV2',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV3',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV4',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'T_threshold',
    'name': 'threshold',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'pad_to_max_output_size',
    'name': 'padToMaxOutputSize',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'NonMaxSuppressionV5',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scores',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'maxOutputSize',
    'type': 'number'
  }, {
    'start': 3,
    'name': 'iouThreshold',
    'type': 'number'
  }, {
    'start': 4,
    'name': 'scoreThreshold',
    'type': 'number'
  }, {
    'start': 5,
    'name': 'softNmsSigma',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Where',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ListDiff',
  'category': 'dynamic',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'y',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}];

/***/ }),

/***/ 86672:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'LowerBound',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'sortedSequence',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'values',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'TopKV2',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'k',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'sorted',
    'name': 'sorted',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'UpperBound',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'sortedSequence',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'values',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Unique',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'UniqueV2',
  'category': 'evaluation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}];

/***/ }),

/***/ 37040:
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'PlaceholderWithDefault',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'default',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'shape',
    'name': 'shape',
    'type': 'shape'
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Placeholder',
  'category': 'graph',
  'attrs': [{
    'tfName': 'shape',
    'name': 'shape',
    'type': 'shape'
  }, {
    'tfName': 'dtype',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'Const',
  'category': 'graph'
}, {
  'tfOpName': 'Identity',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'IdentityN',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'x',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Snapshot',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Rank',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Size',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'Shape',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'ShapeN',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'x',
    'type': 'tensors'
  }]
}, {
  'tfOpName': 'Print',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'data',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'message',
    'name': 'message',
    'type': 'string'
  }, {
    'tfName': 'first_n',
    'name': 'firstN',
    'type': 'number',
    'notSupported': true
  }, {
    'tfName': 'summarize',
    'name': 'summarize',
    'type': 'number',
    'defaultValue': 3
  }]
}, {
  'tfOpName': 'NoOp',
  'category': 'graph',
  'inputs': []
}, {
  'tfOpName': 'StopGradient',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'FakeQuantWithMinMaxVars',
  'category': 'graph',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'min',
    'name': 'min',
    'type': 'number'
  }, {
    'tfName': 'max',
    'name': 'max',
    'type': 'number'
  }]
}];

/***/ }),

/***/ 74348:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'HashTable',
  'category': 'hash_table',
  'inputs': [],
  'attrs': [{
    'tfName': 'shared_name',
    'name': 'sharedName',
    'type': 'string'
  }, {
    'tfName': 'use_node_name_sharing',
    'name': 'useNodeNameSharing',
    'type': 'bool'
  }, {
    'tfName': 'key_dtype',
    'name': 'keyDType',
    'type': 'dtype'
  }, {
    'tfName': 'value_dtype',
    'name': 'valueDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'HashTableV2',
  'category': 'hash_table',
  'inputs': [],
  'attrs': [{
    'tfName': 'shared_name',
    'name': 'sharedName',
    'type': 'string'
  }, {
    'tfName': 'use_node_name_sharing',
    'name': 'useNodeNameSharing',
    'type': 'bool'
  }, {
    'tfName': 'key_dtype',
    'name': 'keyDType',
    'type': 'dtype'
  }, {
    'tfName': 'value_dtype',
    'name': 'valueDType',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'LookupTableImport',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'values',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableImportV2',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'values',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableFind',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableFindV2',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'Tin',
    'name': 'tIn',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'Tout',
    'name': 'tOut',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LookupTableSize',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'LookupTableSizeV2',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'InitializeTable',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'values',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'InitializeTableV2',
  'category': 'hash_table',
  'inputs': [{
    'start': 0,
    'name': 'tableHandle',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'keys',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'values',
    'type': 'tensor'
  }]
}];

/***/ }),

/***/ 6332:
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'ResizeBilinear',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'images',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'align_corners',
    'name': 'alignCorners',
    'type': 'bool'
  }, {
    'tfName': 'half_pixel_centers',
    'name': 'halfPixelCenters',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'ResizeNearestNeighbor',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'images',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'align_corners',
    'name': 'alignCorners',
    'type': 'bool'
  }, {
    'tfName': 'half_pixel_centers',
    'name': 'halfPixelCenters',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'CropAndResize',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'image',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'boxes',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'boxInd',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'cropSize',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'method',
    'name': 'method',
    'type': 'string'
  }, {
    'tfName': 'extrapolation_value',
    'name': 'extrapolationValue',
    'type': 'number'
  }]
}, {
  'tfOpName': 'ImageProjectiveTransformV3',
  'category': 'image',
  'inputs': [{
    'start': 0,
    'name': 'images',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'transforms',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'outputShape',
    'type': 'number[]'
  }, {
    'start': 3,
    'name': 'fillValue',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'interpolation',
    'name': 'interpolation',
    'type': 'string'
  }, {
    'tfName': 'fill_mode',
    'name': 'fillMode',
    'type': 'string'
  }]
}];

/***/ }),

/***/ 18583:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Equal',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'NotEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Greater',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'GreaterEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Less',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LessEqual',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalAnd',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalNot',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LogicalOr',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Select',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SelectV2',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'condition',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'BitwiseAnd',
  'category': 'logical',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'y',
    'type': 'tensor'
  }]
}];

/***/ }),

/***/ 66005:
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': '_FusedMatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }, {
    'start': 2,
    'end': 0,
    'name': 'args',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'num_args',
    'name': 'numArgs',
    'type': 'number'
  }, {
    'tfName': 'fused_ops',
    'name': 'fusedOps',
    'type': 'string[]',
    'defaultValue': []
  }, {
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.0001
  }, {
    'tfName': 'transpose_a',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'transpose_b',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'leakyrelu_alpha',
    'name': 'leakyreluAlpha',
    'type': 'number',
    'defaultValue': 0.2
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'MatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'transpose_a',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'transpose_b',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'BatchMatMul',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'adj_x',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'adj_y',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'BatchMatMulV2',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'b',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'adj_x',
    'name': 'transposeA',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'adj_y',
    'name': 'transposeB',
    'type': 'bool',
    'defaultValue': false
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Transpose',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'perm',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Einsum',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'equation',
    'name': 'equation',
    'type': 'string'
  }, {
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'MatrixBandPart',
  'category': 'matrices',
  'inputs': [{
    'start': 0,
    'name': 'a',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numLower',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numUpper',
    'type': 'tensor'
  }]
}];

/***/ }),

/***/ 65512:
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'EuclideanNorm',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool',
    'defaultValue': false
  }]
}, {
  'tfOpName': 'FusedBatchNorm',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FusedBatchNormV2',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'FusedBatchNormV3',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'scale',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'offset',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'mean',
    'type': 'tensor'
  }, {
    'start': 4,
    'name': 'variance',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'epsilon',
    'name': 'epsilon',
    'type': 'number',
    'defaultValue': 0.001
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string',
    'notSupported': true
  }]
}, {
  'tfOpName': 'LRN',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'depth_radius',
    'name': 'radius',
    'type': 'number',
    'defaultValue': 5
  }, {
    'tfName': 'bias',
    'name': 'bias',
    'type': 'number',
    'defaultValue': 1
  }, {
    'tfName': 'alpha',
    'name': 'alpha',
    'type': 'number',
    'defaultValue': 1
  }, {
    'tfName': 'beta',
    'name': 'beta',
    'type': 'number',
    'defaultValue': 0.5
  }]
}, {
  'tfOpName': 'Softmax',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'LogSoftmax',
  'category': 'normalization',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}];

/***/ }),

/***/ 8068:
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Bincount',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'weights',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'DenseBincount',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'size',
    'type': 'number'
  }, {
    'start': 2,
    'name': 'weights',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'binary_output',
    'name': 'binaryOutput',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Max',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Mean',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Min',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Sum',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'All',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Any',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'ArgMax',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'ArgMin',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'Prod',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'keep_dims',
    'name': 'keepDims',
    'type': 'bool'
  }, {
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Cumprod',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'exclusive',
    'name': 'exclusive',
    'type': 'bool'
  }, {
    'tfName': 'reverse',
    'name': 'reverse',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'Cumsum',
  'category': 'reduction',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'exclusive',
    'name': 'exclusive',
    'type': 'bool'
  }, {
    'tfName': 'reverse',
    'name': 'reverse',
    'type': 'bool'
  }]
}];

/***/ }),

/***/ 7877:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'ConcatV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'end': -1,
    'name': 'tensors',
    'type': 'tensors'
  }, {
    'start': -1,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }]
}, {
  'tfOpName': 'Concat',
  'category': 'slice_join',
  'inputs': [{
    'start': 1,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }, {
    'start': 0,
    'name': 'axis',
    'type': 'number'
  }],
  'attrs': [{
    'tfName': 'N',
    'name': 'n',
    'type': 'number',
    'defaultValue': 2
  }]
}, {
  'tfOpName': 'GatherV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }],
  'attrs': [{
    'tfName': 'batch_dims',
    'name': 'batchDims',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Gather',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'notSupported': true
  }]
}, {
  'tfOpName': 'Reverse',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'dims',
    'type': 'bool[]'
  }]
}, {
  'tfOpName': 'ReverseV2',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Slice',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'begin',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'size',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'StridedSlice',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'begin',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'end',
    'type': 'number[]'
  }, {
    'start': 3,
    'name': 'strides',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'begin_mask',
    'name': 'beginMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'end_mask',
    'name': 'endMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'new_axis_mask',
    'name': 'newAxisMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'ellipsis_mask',
    'name': 'ellipsisMask',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'shrink_axis_mask',
    'name': 'shrinkAxisMask',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Pack',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'end': 0,
    'name': 'tensors',
    'type': 'tensors'
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Unpack',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'axis',
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }, {
    'tfName': 'num',
    'name': 'num',
    'type': 'number',
    'defaultValue': 0,
    'notSupported': true
  }]
}, {
  'tfOpName': 'Tile',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'reps',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Split',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }, {
    'start': 1,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'num_split',
    'name': 'numOrSizeSplits',
    'type': 'number',
    'defaultValue': 1
  }]
}, {
  'tfOpName': 'SplitV',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'numOrSizeSplits',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'axis',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'ScatterNd',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'values',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'shape',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'GatherNd',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseToDense',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'sparseIndices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'outputShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'sparseValues',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'defaultValue',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'validate_indices',
    'name': 'validateIndices',
    'type': 'bool',
    'defaultValue': false,
    'notSupported': true
  }]
}, {
  'tfOpName': 'TensorScatterUpdate',
  'category': 'slice_join',
  'inputs': [{
    'start': 0,
    'name': 'tensor',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'values',
    'type': 'tensor'
  }]
}];

/***/ }),

/***/ 20711:
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/sparse.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'SparseFillEmptyRows',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'values',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'denseShape',
    'type': 'tensor'
  }, {
    'start': 3,
    'name': 'defaultValue',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseReshape',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'inputIndices',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'inputShape',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'newShape',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'T',
    'name': 'dtype',
    'type': 'dtype',
    'notSupported': true
  }]
}, {
  'tfOpName': 'SparseSegmentMean',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'segmentIds',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'SparseSegmentSum',
  'category': 'sparse',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'indices',
    'type': 'tensor'
  }, {
    'start': 2,
    'name': 'segmentIds',
    'type': 'tensor'
  }]
}];

/***/ }),

/***/ 29271:
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'FFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'IFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }]
}, {
  'tfOpName': 'RFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'fft_length',
    'type': 'number',
    'notSupported': true
  }]
}, {
  'tfOpName': 'IRFFT',
  'category': 'spectral',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'fft_length',
    'type': 'number',
    'notSupported': true
  }]
}];

/***/ }),

/***/ 11263:
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/string.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'StaticRegexReplace',
  'category': 'string',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'pattern',
    'name': 'pattern',
    'type': 'string'
  }, {
    'tfName': 'rewrite',
    'name': 'rewrite',
    'type': 'string'
  }, {
    'tfName': 'replace_global',
    'name': 'replaceGlobal',
    'type': 'bool'
  }]
}, {
  'tfOpName': 'StringNGrams',
  'category': 'string',
  'inputs': [{
    'start': 0,
    'name': 'data',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'dataSplits',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'separator',
    'name': 'separator',
    'type': 'string'
  }, {
    'tfName': 'ngram_widths',
    'name': 'nGramWidths',
    'type': 'number[]'
  }, {
    'tfName': 'left_pad',
    'name': 'leftPad',
    'type': 'string'
  }, {
    'tfName': 'right_pad',
    'name': 'rightPad',
    'type': 'string'
  }, {
    'tfName': 'pad_width',
    'name': 'padWidth',
    'type': 'number'
  }, {
    'tfName': 'preserve_short_sequences',
    'name': 'preserveShortSequences',
    'type': 'bool'
  }],
  'outputs': ['ngrams', 'ngrams_splits']
}, {
  'tfOpName': 'StringSplit',
  'category': 'string',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'delimiter',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'skip_empty',
    'name': 'skipEmpty',
    'type': 'bool'
  }],
  'outputs': ['indices', 'values', 'shape']
}, {
  'tfOpName': 'StringToHashBucketFast',
  'category': 'string',
  'inputs': [{
    'start': 0,
    'name': 'input',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'num_buckets',
    'name': 'numBuckets',
    'type': 'number'
  }]
}];

/***/ }),

/***/ 45523:
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [{
  'tfOpName': 'Cast',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'SrcT',
    'name': 'sdtype',
    'type': 'dtype',
    'notSupported': true
  }, {
    'tfName': 'DstT',
    'name': 'dtype',
    'type': 'dtype'
  }]
}, {
  'tfOpName': 'ExpandDims',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'axis',
    'type': 'number'
  }]
}, {
  'tfOpName': 'MirrorPad',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'mode',
    'name': 'mode',
    'type': 'string'
  }]
}, {
  'tfOpName': 'Pad',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }],
  'attrs': [{
    'tfName': 'constant_value',
    'name': 'constantValue',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'PadV2',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'padding',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'constantValue',
    'type': 'number',
    'defaultValue': 0
  }]
}, {
  'tfOpName': 'Reshape',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'shape',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'EnsureShape',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'shape',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'Squeeze',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'axis',
    'tfDeprecatedName': 'squeeze_dims',
    'name': 'axis',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'SpaceToBatchND',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'blockShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'paddings',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'BatchToSpaceND',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'blockShape',
    'type': 'number[]'
  }, {
    'start': 2,
    'name': 'crops',
    'type': 'number[]'
  }]
}, {
  'tfOpName': 'DepthToSpace',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }],
  'attrs': [{
    'tfName': 'block_size',
    'name': 'blockSize',
    'type': 'number'
  }, {
    'tfName': 'data_format',
    'name': 'dataFormat',
    'type': 'string'
  }]
}, {
  'tfOpName': 'BroadcastTo',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 'x',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 'shape',
    'type': 'number[]'
  }],
  'attrs': []
}, {
  'tfOpName': 'BroadcastArgs',
  'category': 'transformation',
  'inputs': [{
    'start': 0,
    'name': 's0',
    'type': 'tensor'
  }, {
    'start': 1,
    'name': 's1',
    'type': 'tensor'
  }],
  'attrs': []
}];

/***/ }),

/***/ 81033:
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _custom_op_node_value_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom_op/node_value_impl */ 20734);
/* harmony import */ var _custom_op_register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom_op/register */ 72611);
/* harmony import */ var _executors_arithmetic_executor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./executors/arithmetic_executor */ 84227);
/* harmony import */ var _executors_basic_math_executor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./executors/basic_math_executor */ 48413);
/* harmony import */ var _executors_control_executor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./executors/control_executor */ 33825);
/* harmony import */ var _executors_convolution_executor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./executors/convolution_executor */ 44778);
/* harmony import */ var _executors_creation_executor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./executors/creation_executor */ 77863);
/* harmony import */ var _executors_dynamic_executor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./executors/dynamic_executor */ 97474);
/* harmony import */ var _executors_evaluation_executor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./executors/evaluation_executor */ 71607);
/* harmony import */ var _executors_graph_executor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./executors/graph_executor */ 43407);
/* harmony import */ var _executors_hash_table_executor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./executors/hash_table_executor */ 65618);
/* harmony import */ var _executors_image_executor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./executors/image_executor */ 76787);
/* harmony import */ var _executors_logical_executor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./executors/logical_executor */ 90770);
/* harmony import */ var _executors_matrices_executor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./executors/matrices_executor */ 70734);
/* harmony import */ var _executors_normalization_executor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./executors/normalization_executor */ 83398);
/* harmony import */ var _executors_ragged_executor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./executors/ragged_executor */ 49606);
/* harmony import */ var _executors_reduction_executor__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./executors/reduction_executor */ 48530);
/* harmony import */ var _executors_slice_join_executor__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./executors/slice_join_executor */ 57858);
/* harmony import */ var _executors_sparse_executor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./executors/sparse_executor */ 80466);
/* harmony import */ var _executors_spectral_executor__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./executors/spectral_executor */ 72743);
/* harmony import */ var _executors_string_executor__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./executors/string_executor */ 79680);
/* harmony import */ var _executors_transformation_executor__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./executors/transformation_executor */ 30117);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */























/**
 * Executes the op defined by the node object.
 * @param node
 * @param tensorMap contains tensors for executed nodes and weights
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */
function executeOp(node, tensorMap, context, resourceManager, tidy = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy) {
  const value = ((node, tensorMap, context) => {
    switch (node.category) {
      case 'arithmetic':
        return tidy(() => _executors_arithmetic_executor__WEBPACK_IMPORTED_MODULE_3__.executeOp(node, tensorMap, context));
      case 'basic_math':
        return tidy(() => _executors_basic_math_executor__WEBPACK_IMPORTED_MODULE_4__.executeOp(node, tensorMap, context));
      case 'control':
        return _executors_control_executor__WEBPACK_IMPORTED_MODULE_5__.executeOp(node, tensorMap, context);
      case 'convolution':
        return tidy(() => _executors_convolution_executor__WEBPACK_IMPORTED_MODULE_6__.executeOp(node, tensorMap, context));
      case 'creation':
        return tidy(() => _executors_creation_executor__WEBPACK_IMPORTED_MODULE_7__.executeOp(node, tensorMap, context));
      case 'dynamic':
        return _executors_dynamic_executor__WEBPACK_IMPORTED_MODULE_8__.executeOp(node, tensorMap, context);
      case 'evaluation':
        return tidy(() => _executors_evaluation_executor__WEBPACK_IMPORTED_MODULE_9__.executeOp(node, tensorMap, context));
      case 'image':
        return tidy(() => _executors_image_executor__WEBPACK_IMPORTED_MODULE_12__.executeOp(node, tensorMap, context));
      case 'graph':
        return tidy(() => _executors_graph_executor__WEBPACK_IMPORTED_MODULE_10__.executeOp(node, tensorMap, context));
      case 'logical':
        return tidy(() => _executors_logical_executor__WEBPACK_IMPORTED_MODULE_13__.executeOp(node, tensorMap, context));
      case 'matrices':
        return tidy(() => _executors_matrices_executor__WEBPACK_IMPORTED_MODULE_14__.executeOp(node, tensorMap, context));
      case 'normalization':
        return tidy(() => _executors_normalization_executor__WEBPACK_IMPORTED_MODULE_15__.executeOp(node, tensorMap, context));
      case 'ragged':
        return tidy(() => _executors_ragged_executor__WEBPACK_IMPORTED_MODULE_16__.executeOp(node, tensorMap, context));
      case 'reduction':
        return tidy(() => _executors_reduction_executor__WEBPACK_IMPORTED_MODULE_17__.executeOp(node, tensorMap, context));
      case 'slice_join':
        return tidy(() => _executors_slice_join_executor__WEBPACK_IMPORTED_MODULE_18__.executeOp(node, tensorMap, context));
      case 'sparse':
        return tidy(() => _executors_sparse_executor__WEBPACK_IMPORTED_MODULE_19__.executeOp(node, tensorMap, context));
      case 'spectral':
        return tidy(() => _executors_spectral_executor__WEBPACK_IMPORTED_MODULE_20__.executeOp(node, tensorMap, context));
      case 'string':
        return tidy(() => _executors_string_executor__WEBPACK_IMPORTED_MODULE_21__.executeOp(node, tensorMap, context));
      case 'transformation':
        return tidy(() => _executors_transformation_executor__WEBPACK_IMPORTED_MODULE_22__.executeOp(node, tensorMap, context));
      case 'hash_table':
        return _executors_hash_table_executor__WEBPACK_IMPORTED_MODULE_11__.executeOp(node, tensorMap, context, resourceManager);
      case 'custom':
        const opMapper = (0,_custom_op_register__WEBPACK_IMPORTED_MODULE_2__.getRegisteredOp)(node.op);
        if (opMapper && opMapper.customExecutor) {
          return opMapper.customExecutor(new _custom_op_node_value_impl__WEBPACK_IMPORTED_MODULE_1__.NodeValueImpl(node, tensorMap, context));
        } else {
          throw TypeError(`Custom op ${node.op} is not registered.`);
        }
      default:
        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);
    }
  })(node, tensorMap, context);
  if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.isPromise(value)) {
    return value.then(data => [].concat(data));
  }
  return [].concat(value);
}

/***/ }),

/***/ 23993:
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperationMapper": () => (/* binding */ OperationMapper),
/* harmony export */   "decodeBase64": () => (/* binding */ decodeBase64),
/* harmony export */   "getBoolArrayParam": () => (/* binding */ getBoolArrayParam),
/* harmony export */   "getBoolParam": () => (/* binding */ getBoolParam),
/* harmony export */   "getDtypeArrayParam": () => (/* binding */ getDtypeArrayParam),
/* harmony export */   "getDtypeParam": () => (/* binding */ getDtypeParam),
/* harmony export */   "getFuncParam": () => (/* binding */ getFuncParam),
/* harmony export */   "getNumberParam": () => (/* binding */ getNumberParam),
/* harmony export */   "getNumericArrayParam": () => (/* binding */ getNumericArrayParam),
/* harmony export */   "getStringArrayParam": () => (/* binding */ getStringArrayParam),
/* harmony export */   "getStringParam": () => (/* binding */ getStringParam),
/* harmony export */   "getTensorShapeArrayParam": () => (/* binding */ getTensorShapeArrayParam),
/* harmony export */   "getTensorShapeParam": () => (/* binding */ getTensorShapeParam),
/* harmony export */   "parseDtypeParam": () => (/* binding */ parseDtypeParam),
/* harmony export */   "parseStringParam": () => (/* binding */ parseStringParam),
/* harmony export */   "parseTensorShapeParam": () => (/* binding */ parseTensorShapeParam)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ 45524);
/* harmony import */ var _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/compiled_api */ 66255);
/* harmony import */ var _custom_op_register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom_op/register */ 72611);
/* harmony import */ var _executors_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./executors/utils */ 80461);
/* harmony import */ var _op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./op_list/arithmetic */ 62198);
/* harmony import */ var _op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./op_list/basic_math */ 58288);
/* harmony import */ var _op_list_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./op_list/control */ 50507);
/* harmony import */ var _op_list_convolution__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./op_list/convolution */ 31410);
/* harmony import */ var _op_list_creation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./op_list/creation */ 79981);
/* harmony import */ var _op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./op_list/dynamic */ 19026);
/* harmony import */ var _op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./op_list/evaluation */ 86672);
/* harmony import */ var _op_list_graph__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./op_list/graph */ 37040);
/* harmony import */ var _op_list_hash_table__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./op_list/hash_table */ 74348);
/* harmony import */ var _op_list_image__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./op_list/image */ 6332);
/* harmony import */ var _op_list_logical__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./op_list/logical */ 18583);
/* harmony import */ var _op_list_matrices__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./op_list/matrices */ 66005);
/* harmony import */ var _op_list_normalization__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./op_list/normalization */ 65512);
/* harmony import */ var _op_list_reduction__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./op_list/reduction */ 8068);
/* harmony import */ var _op_list_slice_join__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./op_list/slice_join */ 7877);
/* harmony import */ var _op_list_sparse__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./op_list/sparse */ 20711);
/* harmony import */ var _op_list_spectral__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./op_list/spectral */ 29271);
/* harmony import */ var _op_list_string__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./op_list/string */ 11263);
/* harmony import */ var _op_list_transformation__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./op_list/transformation */ 45523);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */























class OperationMapper {
  // Singleton instance for the mapper
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  // Loads the op mapping from the JSON file.
  constructor() {
    const ops = [_op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__, _op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__, _op_list_control__WEBPACK_IMPORTED_MODULE_6__, _op_list_convolution__WEBPACK_IMPORTED_MODULE_7__, _op_list_creation__WEBPACK_IMPORTED_MODULE_8__, _op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__, _op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__, _op_list_graph__WEBPACK_IMPORTED_MODULE_11__, _op_list_hash_table__WEBPACK_IMPORTED_MODULE_12__, _op_list_image__WEBPACK_IMPORTED_MODULE_13__, _op_list_logical__WEBPACK_IMPORTED_MODULE_14__, _op_list_matrices__WEBPACK_IMPORTED_MODULE_15__, _op_list_normalization__WEBPACK_IMPORTED_MODULE_16__, _op_list_reduction__WEBPACK_IMPORTED_MODULE_17__, _op_list_slice_join__WEBPACK_IMPORTED_MODULE_18__, _op_list_sparse__WEBPACK_IMPORTED_MODULE_19__, _op_list_spectral__WEBPACK_IMPORTED_MODULE_20__, _op_list_string__WEBPACK_IMPORTED_MODULE_21__, _op_list_transformation__WEBPACK_IMPORTED_MODULE_22__];
    const mappersJson = [].concat(...ops.map(op => op.json));
    this.opMappers = mappersJson.reduce((map, mapper) => {
      map[mapper.tfOpName] = mapper;
      return map;
    }, {});
  }
  // Converts the model inference graph from Tensorflow GraphDef to local
  // representation for TensorFlow.js API
  transformGraph(graph, signature = {}) {
    const tfNodes = graph.node;
    const placeholders = [];
    const weights = [];
    const initNodes = [];
    const nodes = tfNodes.reduce((map, node) => {
      map[node.name] = this.mapNode(node);
      if (node.op.startsWith('Placeholder')) {
        placeholders.push(map[node.name]);
      } else if (node.op === 'Const') {
        weights.push(map[node.name]);
      } else if (node.input == null || node.input.length === 0) {
        initNodes.push(map[node.name]);
      }
      return map;
    }, {});
    let inputs = [];
    const outputs = [];
    let inputNodeNameToKey = {};
    let outputNodeNameToKey = {};
    if (signature != null) {
      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);
      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);
    }
    const allNodes = Object.keys(nodes);
    allNodes.forEach(key => {
      const node = nodes[key];
      node.inputNames.forEach((name, index) => {
        const [nodeName,, outputName] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
        const inputNode = nodes[nodeName];
        if (inputNode.outputs != null) {
          const outputIndex = inputNode.outputs.indexOf(outputName);
          if (outputIndex !== -1) {
            const inputName = `${nodeName}:${outputIndex}`;
            // update the input name to use the mapped output index directly.
            node.inputNames[index] = inputName;
          }
        }
        node.inputs.push(inputNode);
        inputNode.children.push(node);
      });
    });
    // if signature has not outputs set, add any node that does not have
    // outputs.
    if (Object.keys(outputNodeNameToKey).length === 0) {
      allNodes.forEach(key => {
        const node = nodes[key];
        if (node.children.length === 0) {
          outputs.push(node);
        }
      });
    } else {
      Object.keys(outputNodeNameToKey).forEach(name => {
        const [nodeName] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
        const node = nodes[nodeName];
        if (node != null) {
          node.signatureKey = outputNodeNameToKey[name];
          outputs.push(node);
        }
      });
    }
    if (Object.keys(inputNodeNameToKey).length > 0) {
      Object.keys(inputNodeNameToKey).forEach(name => {
        const [nodeName] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
        const node = nodes[nodeName];
        if (node) {
          node.signatureKey = inputNodeNameToKey[name];
          inputs.push(node);
        }
      });
    } else {
      inputs = placeholders;
    }
    let functions = {};
    if (graph.library != null && graph.library.function != null) {
      functions = graph.library.function.reduce((functions, func) => {
        functions[func.signature.name] = this.mapFunction(func);
        return functions;
      }, {});
    }
    const result = {
      nodes,
      inputs,
      outputs,
      weights,
      placeholders,
      signature,
      functions
    };
    if (initNodes.length > 0) {
      result.initNodes = initNodes;
    }
    return result;
  }
  mapSignatureEntries(entries) {
    return Object.keys(entries || {}).reduce((prev, curr) => {
      prev[entries[curr].name] = curr;
      return prev;
    }, {});
  }
  mapNode(node) {
    // Unsupported ops will cause an error at run-time (not parse time), since
    // they may not be used by the actual execution subgraph.
    const mapper = (0,_custom_op_register__WEBPACK_IMPORTED_MODULE_2__.getRegisteredOp)(node.op) || this.opMappers[node.op] || {};
    if (node.attr == null) {
      node.attr = {};
    }
    const newNode = {
      name: node.name,
      op: node.op,
      category: mapper.category,
      inputNames: (node.input || []).map(input => input.startsWith('^') ? input.slice(1) : input),
      inputs: [],
      children: [],
      inputParams: {},
      attrParams: {},
      rawAttrs: node.attr,
      outputs: mapper.outputs
    };
    if (mapper.inputs != null) {
      newNode.inputParams = mapper.inputs.reduce((map, param) => {
        map[param.name] = {
          type: param.type,
          inputIndexStart: param.start,
          inputIndexEnd: param.end
        };
        return map;
      }, {});
    }
    if (mapper.attrs != null) {
      newNode.attrParams = mapper.attrs.reduce((map, param) => {
        const type = param.type;
        let value = undefined;
        switch (param.type) {
          case 'string':
            value = getStringParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'string[]':
            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'number':
            value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'number[]':
            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'bool':
            value = getBoolParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'bool[]':
            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'shape':
            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'shape[]':
            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'dtype':
            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'dtype[]':
            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'func':
            value = getFuncParam(node.attr, param.tfName, param.defaultValue);
            if (value === undefined && !!param.tfDeprecatedName) {
              value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);
            }
            break;
          case 'tensor':
          case 'tensors':
            break;
          default:
            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);
        }
        map[param.name] = {
          value,
          type
        };
        return map;
      }, {});
    }
    return newNode;
  }
  // map the TFunctionDef to TFJS graph object
  mapFunction(functionDef) {
    const tfNodes = functionDef.nodeDef;
    const placeholders = [];
    const weights = [];
    let nodes = {};
    if (tfNodes != null) {
      nodes = tfNodes.reduce((map, node) => {
        map[node.name] = this.mapNode(node);
        if (node.op === 'Const') {
          weights.push(map[node.name]);
        }
        return map;
      }, {});
    }
    const inputs = [];
    const outputs = [];
    functionDef.signature.inputArg.forEach(arg => {
      const [nodeName] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(arg.name);
      const node = {
        name: nodeName,
        op: 'Placeholder',
        inputs: [],
        inputNames: [],
        category: 'graph',
        inputParams: {},
        attrParams: {
          dtype: {
            value: parseDtypeParam(arg.type),
            type: 'dtype'
          }
        },
        children: []
      };
      node.signatureKey = arg.name;
      inputs.push(node);
      nodes[nodeName] = node;
    });
    const allNodes = Object.keys(nodes);
    allNodes.forEach(key => {
      const node = nodes[key];
      node.inputNames.forEach((name, index) => {
        const [nodeName,, outputName] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
        const inputNode = nodes[nodeName];
        if (inputNode.outputs != null) {
          const outputIndex = inputNode.outputs.indexOf(outputName);
          if (outputIndex !== -1) {
            const inputName = `${nodeName}:${outputIndex}`;
            // update the input name to use the mapped output index directly.
            node.inputNames[index] = inputName;
          }
        }
        node.inputs.push(inputNode);
        inputNode.children.push(node);
      });
    });
    const returnNodeMap = functionDef.ret;
    functionDef.signature.outputArg.forEach(output => {
      const [nodeName, index] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(returnNodeMap[output.name]);
      const node = nodes[nodeName];
      if (node != null) {
        node.defaultOutput = index;
        outputs.push(node);
      }
    });
    const signature = this.mapArgsToSignature(functionDef);
    return {
      nodes,
      inputs,
      outputs,
      weights,
      placeholders,
      signature
    };
  }
  mapArgsToSignature(functionDef) {
    return {
      methodName: functionDef.signature.name,
      inputs: functionDef.signature.inputArg.reduce((map, arg) => {
        map[arg.name] = this.mapArgToTensorInfo(arg);
        return map;
      }, {}),
      outputs: functionDef.signature.outputArg.reduce((map, arg) => {
        map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);
        return map;
      }, {})
    };
  }
  mapArgToTensorInfo(arg, nameMap) {
    let name = arg.name;
    if (nameMap != null) {
      name = nameMap[name];
    }
    return {
      name,
      dtype: arg.type
    };
  }
}
function decodeBase64(text) {
  const global = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().global;
  if (typeof global.atob !== 'undefined') {
    return global.atob(text);
  } else if (typeof Buffer !== 'undefined') {
    return new Buffer(text, 'base64').toString();
  } else {
    throw new Error('Unable to decode base64 in this environment. ' + 'Missing built-in atob() or Buffer()');
  }
}
function parseStringParam(s, keepCase) {
  const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);
  return keepCase ? value : value.toLowerCase();
}
function getStringParam(attrs, name, def, keepCase = false) {
  const param = attrs[name];
  if (param != null) {
    return parseStringParam(param.s, keepCase);
  }
  return def;
}
function getBoolParam(attrs, name, def) {
  const param = attrs[name];
  return param ? param.b : def;
}
function getNumberParam(attrs, name, def) {
  const param = attrs[name] || {};
  const value = param['i'] != null ? param['i'] : param['f'] != null ? param['f'] : def;
  return typeof value === 'number' ? value : parseInt(value, 10);
}
function parseDtypeParam(value) {
  if (typeof value === 'string') {
    // tslint:disable-next-line:no-any
    value = _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType[value];
  }
  switch (value) {
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_FLOAT:
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_HALF:
      return 'float32';
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_INT32:
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_INT64:
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_INT8:
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_UINT8:
      return 'int32';
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_BOOL:
      return 'bool';
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_DOUBLE:
      return 'float32';
    case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_STRING:
      return 'string';
    default:
      // Unknown dtype error will happen at runtime (instead of parse time),
      // since these nodes might not be used by the actual subgraph execution.
      return null;
  }
}
function getFuncParam(attrs, name, def) {
  const param = attrs[name];
  if (param && param.func) {
    return param.func.name;
  }
  return def;
}
function getDtypeParam(attrs, name, def) {
  const param = attrs[name];
  if (param && param.type) {
    return parseDtypeParam(param.type);
  }
  return def;
}
function getDtypeArrayParam(attrs, name, def) {
  const param = attrs[name];
  if (param && param.list && param.list.type) {
    return param.list.type.map(v => parseDtypeParam(v));
  }
  return def;
}
function parseTensorShapeParam(shape) {
  if (shape.unknownRank) {
    return undefined;
  }
  if (shape.dim != null) {
    return shape.dim.map(dim => typeof dim.size === 'number' ? dim.size : parseInt(dim.size, 10));
  }
  return [];
}
function getTensorShapeParam(attrs, name, def) {
  const param = attrs[name];
  if (param && param.shape) {
    return parseTensorShapeParam(param.shape);
  }
  return def;
}
function getNumericArrayParam(attrs, name, def) {
  const param = attrs[name];
  if (param) {
    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map(v => typeof v === 'number' ? v : parseInt(v, 10));
  }
  return def;
}
function getStringArrayParam(attrs, name, def, keepCase = false) {
  const param = attrs[name];
  if (param && param.list && param.list.s) {
    return param.list.s.map(v => {
      return parseStringParam(v, keepCase);
    });
  }
  return def;
}
function getTensorShapeArrayParam(attrs, name, def) {
  const param = attrs[name];
  if (param && param.list && param.list.shape) {
    return param.list.shape.map(v => {
      return parseTensorShapeParam(v);
    });
  }
  return def;
}
function getBoolArrayParam(attrs, name, def) {
  const param = attrs[name];
  if (param && param.list && param.list.b) {
    return param.list.b;
  }
  return def;
}

/***/ }),

/***/ 73475:
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/node_modules/@tensorflow/tfjs-converter/dist/version.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '4.5.0';


/***/ }),

/***/ 31601:
/*!********************************!*\
  !*** string_decoder (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 67792:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 34977:
/*!********************************!*\
  !*** string_decoder (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=default-node_modules_tensorflow_tfjs_dist_index_js.js.map